// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.2.0.0
//      SpecFlow Generator Version:2.2.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace SpecFlow.GeneratedTests.Pendenzen
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.2.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class CreatePendenzenFeature : Xunit.IClassFixture<CreatePendenzenFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "CreatePendenzen.feature"
#line hidden
        
        public CreatePendenzenFeature(CreatePendenzenFeature.FixtureData fixtureData, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "CreatePendenzen", null, ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 2
 #line hidden
            TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                        "UserID",
                        "PermissionGroupID",
                        "GrantPermGroupID",
                        "LogonName",
                        "PasswordHash",
                        "FirstName",
                        "LastName",
                        "ShortName",
                        "IsLocked",
                        "IsUserAdmin",
                        "IsUserBIAGAdmin",
                        "IsMandatsTraeger",
                        "GenderCode",
                        "KeinBDEExport",
                        "MigUserFix",
                        "VerID"});
            table9.AddRow(new string[] {
                        "USR1",
                        "9",
                        "9",
                        "test_admin_1",
                        "kR9Y+JkxEwo=",
                        "CMC",
                        "Global",
                        "cg",
                        "0",
                        "1",
                        "1",
                        "0",
                        "1",
                        "0",
                        "0",
                        "257000"});
            table9.AddRow(new string[] {
                        "USR2",
                        "9",
                        "9",
                        "test_admin_2",
                        "kR9Y+JkxEwo=",
                        "CMC",
                        "Soft",
                        "cs",
                        "0",
                        "1",
                        "1",
                        "0",
                        "1",
                        "0",
                        "0",
                        "257000"});
#line 3
 testRunner.Given("these UserAdmin for CreatePendenzen feature", ((string)(null)), table9, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                        "XTaskID",
                        "BaPersonID",
                        "TaskStatusCode",
                        "TaskTypeCode",
                        "Subject",
                        "SenderID",
                        "ReceiverID",
                        "FaFallID",
                        "FaLeistungID",
                        "CreateDate",
                        "ExpirationDate",
                        "TaskDescription",
                        "ResponseText",
                        "TaskReceiverCode"});
            table10.AddRow(new string[] {
                        "TSK1",
                        "64807",
                        "1",
                        "4",
                        "Task 20180817-01",
                        "USR2",
                        "USR1",
                        "64807",
                        "98766",
                        "2018-01-10 00:00:00.000",
                        "2020-01-10 00:00:00.000",
                        "Task 20180817-1 autotest",
                        "Task 20180817-1 text",
                        "1"});
#line 8
 testRunner.And("these Tasks for CreatePendenzen feature", ((string)(null)), table10, "And ");
#line hidden
        }
        
        void System.IDisposable.Dispose()
        {
            this.ScenarioTearDown();
        }
        
        [Xunit.FactAttribute(DisplayName="Create new Pendenzen")]
        [Xunit.TraitAttribute("FeatureTitle", "CreatePendenzen")]
        [Xunit.TraitAttribute("Description", "Create new Pendenzen")]
        [Xunit.TraitAttribute("Category", "servicetest")]
        public virtual void CreateNewPendenzen()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create new Pendenzen", new string[] {
                        "servicetest"});
#line 13
this.ScenarioSetup(scenarioInfo);
#line 2
 this.FeatureBackground();
#line 14
 testRunner.Given("CreatePendenzen client has LogonName is test_admin_1, PasswordHash is 123456", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table11 = new TechTalk.SpecFlow.Table(new string[] {
                        "status",
                        "pendenzTyp",
                        "betreff",
                        "beschreibung",
                        "falltrager",
                        "leistung",
                        "PersonId",
                        "antwort",
                        "fallig",
                        "erfasst"});
            table11.AddRow(new string[] {
                        "1",
                        "2",
                        "Insert 20180817-01",
                        "Insert 20180817-1 autotest",
                        "65134",
                        "98952",
                        "65088",
                        "Insert 20180817-1 text",
                        "06/10/2019 00:00:00",
                        "06/10/2018 00:00:00"});
#line 15
 testRunner.And("this new Pendenzen, [empfangerId] is USR1, [SenderId] is USR2", ((string)(null)), table11, "And ");
#line 19
 testRunner.When("call CreateUpdateTask for CreatePendenzen feature", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 20
 testRunner.Then("the call CreateTask should be return true", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table12 = new TechTalk.SpecFlow.Table(new string[] {
                        "status",
                        "pendenzTyp",
                        "betreff",
                        "beschreibung",
                        "Ersteller",
                        "empfangerName",
                        "falltrager",
                        "FalltragerName",
                        "leistung",
                        "LeistungModul",
                        "LeistungsverantName",
                        "PersonId",
                        "BetrifftPersonName",
                        "antwort",
                        "fallig"});
            table12.AddRow(new string[] {
                        "1",
                        "2",
                        "Insert 20180817-01",
                        "Insert 20180817-1 autotest",
                        "test_admin_2 - Soft, CMC",
                        "test_admin_1 - Global, CMC",
                        "65134",
                        "Meier, Hans (65134)",
                        "98952",
                        "F - Fallf√ºhrung (21.04.2010 -)",
                        "afuchs - Fuchs, Andreas (Sozialdienst)",
                        "65088",
                        "Brunner, Renate",
                        "Insert 20180817-1 text",
                        "10.06.2019 00:00:00"});
#line 21
 testRunner.And("the created Pendenzen is after TSK1 and should be", ((string)(null)), table12, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.2.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                CreatePendenzenFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                CreatePendenzenFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion

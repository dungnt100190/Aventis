// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.2.0.0
//      SpecFlow Generator Version:2.2.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace SpecFlow.GeneratedTests.Pendenzen
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.2.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class LoadNavbarItemFeature : Xunit.IClassFixture<LoadNavbarItemFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "LoadNavbarItem.feature"
#line hidden
        
        public LoadNavbarItemFeature(LoadNavbarItemFeature.FixtureData fixtureData, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "LoadNavbarItem", "\tGet count of item types in left menu ", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 3
 #line hidden
            TechTalk.SpecFlow.Table table16 = new TechTalk.SpecFlow.Table(new string[] {
                        "UserID",
                        "PermissionGroupID",
                        "GrantPermGroupID",
                        "LogonName",
                        "PasswordHash",
                        "FirstName",
                        "LastName",
                        "ShortName",
                        "IsLocked",
                        "IsUserAdmin",
                        "IsUserBIAGAdmin",
                        "IsMandatsTraeger",
                        "GenderCode",
                        "KeinBDEExport",
                        "MigUserFix",
                        "VerID"});
            table16.AddRow(new string[] {
                        "USR1",
                        "9",
                        "9",
                        "test_admin_1",
                        "kR9Y+JkxEwo=",
                        "CMC",
                        "Global",
                        "cg",
                        "0",
                        "1",
                        "1",
                        "0",
                        "1",
                        "0",
                        "0",
                        "257000"});
            table16.AddRow(new string[] {
                        "USR2",
                        "9",
                        "9",
                        "test_admin_2",
                        "kR9Y+JkxEwo=",
                        "CMC",
                        "Soft",
                        "cs",
                        "0",
                        "1",
                        "1",
                        "0",
                        "1",
                        "0",
                        "0",
                        "258000"});
#line 4
 testRunner.Given("these XUser", ((string)(null)), table16, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table17 = new TechTalk.SpecFlow.Table(new string[] {
                        "BaPersonID",
                        "Name"});
            table17.AddRow(new string[] {
                        "BPS1",
                        "Person test-1"});
            table17.AddRow(new string[] {
                        "BPS2",
                        "Person test-2"});
#line 9
 testRunner.And("these BaPerson", ((string)(null)), table17, "And ");
#line hidden
            TechTalk.SpecFlow.Table table18 = new TechTalk.SpecFlow.Table(new string[] {
                        "FaLeistungID",
                        "BaPersonID",
                        "FaFallID",
                        "ModulID",
                        "UserID",
                        "IkHatUnterstuetzung",
                        "IkIstRentenbezueger",
                        "IkSchuldnerMahnen",
                        "WiederholteSpezifischeErmittlungEAF",
                        "DatumVon"});
            table18.AddRow(new string[] {
                        "LEI1",
                        "BPS1",
                        "BPS1",
                        "3",
                        "USR1",
                        "0",
                        "0",
                        "1",
                        "0",
                        "2018-01-10 00:00:00.000"});
            table18.AddRow(new string[] {
                        "LEI2",
                        "BPS1",
                        "BPS2",
                        "21",
                        "USR1",
                        "0",
                        "0",
                        "1",
                        "0",
                        "2018-02-10 00:00:00.000"});
            table18.AddRow(new string[] {
                        "LEI3",
                        "BPS2",
                        "BPS1",
                        "21",
                        "USR2",
                        "0",
                        "0",
                        "1",
                        "0",
                        "2018-03-10 00:00:00.000"});
            table18.AddRow(new string[] {
                        "LEI4",
                        "BPS2",
                        "BPS2",
                        "3",
                        "USR2",
                        "0",
                        "0",
                        "1",
                        "0",
                        "2018-04-10 00:00:00.000"});
#line 19
 testRunner.And("these FaLeistung", ((string)(null)), table18, "And ");
#line hidden
            TechTalk.SpecFlow.Table table19 = new TechTalk.SpecFlow.Table(new string[] {
                        "XTaskID",
                        "BaPersonID",
                        "TaskStatusCode",
                        "TaskTypeCode",
                        "Subject",
                        "SenderID",
                        "ReceiverID",
                        "FaFallID",
                        "FaLeistungID",
                        "CreateDate",
                        "ExpirationDate",
                        "StartDate",
                        "DoneDate",
                        "TaskDescription",
                        "ResponseText",
                        "TaskReceiverCode",
                        "TaskSenderCode"});
            table19.AddRow(new string[] {
                        "TSK1",
                        "BPS1",
                        "1",
                        "4",
                        "Task 20180817-01",
                        "USR2",
                        "USR1",
                        "BPS1",
                        "LEI1",
                        "2018-01-10 00:00:00.000",
                        "2020-01-10 00:00:00.000",
                        "",
                        "",
                        "Task 20180817-1 autotest",
                        "Task 20180817-1 text",
                        "1",
                        ""});
            table19.AddRow(new string[] {
                        "TSK2",
                        "BPS2",
                        "1",
                        "4",
                        "Task 20180817-02",
                        "USR2",
                        "USR1",
                        "BPS2",
                        "LEI2",
                        "2018-01-10 00:00:00.000",
                        "2018-05-10 00:00:00.000",
                        "",
                        "",
                        "Task 20180817-2 autotest",
                        "Task 20180817-2 text",
                        "1",
                        ""});
            table19.AddRow(new string[] {
                        "TSK3",
                        "BPS1",
                        "2",
                        "6",
                        "Task 20180817-03",
                        "USR2",
                        "USR1",
                        "BPS2",
                        "LEI4",
                        "2018-01-10 00:00:00.000",
                        "2018-10-10 00:00:00.000",
                        "2018-04-10 00:00:00.000",
                        "",
                        "Task 20180817-3 autotest",
                        "Task 20180817-3 text",
                        "1",
                        ""});
            table19.AddRow(new string[] {
                        "TSK4",
                        "BPS2",
                        "2",
                        "4",
                        "Task 20180817-04",
                        "USR2",
                        "USR1",
                        "BPS1",
                        "LEI3",
                        "2018-01-10 00:00:00.000",
                        "2018-07-10 00:00:00.000",
                        "2018-06-10 00:00:00.000",
                        "",
                        "Task 20180817-4 autotest",
                        "Task 20180817-4 text",
                        "1",
                        ""});
            table19.AddRow(new string[] {
                        "TSK5",
                        "BPS2",
                        "1",
                        "6",
                        "Task 20180817-05",
                        "USR1",
                        "USR2",
                        "BPS1",
                        "LEI1",
                        "2018-01-10 00:00:00.000",
                        "2019-02-10 00:00:00.000",
                        "",
                        "",
                        "Task 20180817-5 autotest",
                        "Task 20180817-5 text",
                        "1",
                        "1"});
            table19.AddRow(new string[] {
                        "TSK6",
                        "BPS2",
                        "2",
                        "6",
                        "Task 20180817-06",
                        "USR1",
                        "USR2",
                        "BPS1",
                        "LEI1",
                        "2018-01-10 00:00:00.000",
                        "2018-06-10 00:00:00.000",
                        "2018-03-10 00:00:00.000",
                        "",
                        "Task 20180817-6 autotest",
                        "Task 20180817-6 text",
                        "1",
                        "1"});
            table19.AddRow(new string[] {
                        "TSK7",
                        "BPS2",
                        "2",
                        "2",
                        "Task 20180817-07",
                        "USR1",
                        "USR2",
                        "BPS2",
                        "LEI2",
                        "2018-01-10 00:00:00.000",
                        "2018-09-10 00:00:00.000",
                        "2018-05-10 00:00:00.000",
                        "",
                        "Task 20180817-7 autotest",
                        "Task 20180817-7 text",
                        "1",
                        "1"});
            table19.AddRow(new string[] {
                        "TSK8",
                        "BPS1",
                        "2",
                        "4",
                        "Task 20180817-08",
                        "USR1",
                        "USR1",
                        "BPS1",
                        "LEI3",
                        "2018-01-10 00:00:00.000",
                        "2018-10-10 00:00:00.000",
                        "2018-05-10 00:00:00.000",
                        "",
                        "Task 20180817-8 autotest",
                        "Task 20180817-8 text",
                        "1",
                        "1"});
            table19.AddRow(new string[] {
                        "TSK9",
                        "BPS1",
                        "1",
                        "4",
                        "Task 20180817-09",
                        "USR2",
                        "USR1",
                        "BPS2",
                        "LEI4",
                        "2018-01-10 00:00:00.000",
                        "2018-11-10 00:00:00.000",
                        "",
                        "",
                        "Task 20180817-9 autotest",
                        "Task 20180817-9 text",
                        "1",
                        "2"});
            table19.AddRow(new string[] {
                        "TSK10",
                        "BPS2",
                        "1",
                        "2",
                        "Task 20180817-10",
                        "USR2",
                        "USR1",
                        "BPS2",
                        "LEI4",
                        "2018-01-10 00:00:00.000",
                        "2018-12-10 00:00:00.000",
                        "",
                        "",
                        "Task 20180817-10 autotest",
                        "Task 20180817-10 text",
                        "1",
                        "2"});
#line 26
 testRunner.And("these XTask", ((string)(null)), table19, "And ");
#line hidden
        }
        
        void System.IDisposable.Dispose()
        {
            this.ScenarioTearDown();
        }
        
        [Xunit.FactAttribute(DisplayName="01 Get count of navbar items")]
        [Xunit.TraitAttribute("FeatureTitle", "LoadNavbarItem")]
        [Xunit.TraitAttribute("Description", "01 Get count of navbar items")]
        [Xunit.TraitAttribute("Category", "servicetest")]
        public virtual void _01GetCountOfNavbarItems()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("01 Get count of navbar items", new string[] {
                        "servicetest"});
#line 40
this.ScenarioSetup(scenarioInfo);
#line 3
 this.FeatureBackground();
#line 41
 testRunner.Given("init client with username is \'test_admin_1\', password is \'123456\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 42
 testRunner.When("call API LoadNavBarItems", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 43
 testRunner.Then("the call is successful", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table20 = new TechTalk.SpecFlow.Table(new string[] {
                        "ItmMeineFaellig",
                        "ItmMeineOffen",
                        "ItmMeineInBearbeitung",
                        "ItmMeineErstellt",
                        "ItmMeineErhalten",
                        "ItmMeineZuVisieren",
                        "ItmVersandteFaellig",
                        "ItmVersandteZuVisieren",
                        "ItmVersandteAllgemein",
                        "ItmVersandteOffen"});
            table20.AddRow(new string[] {
                        "2",
                        "7",
                        "3",
                        "1",
                        "6",
                        "1",
                        "1",
                        "1",
                        "3",
                        "4"});
#line 44
 testRunner.And("the return data of API LoadNavBarItems should be", ((string)(null)), table20, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.2.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                LoadNavbarItemFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                LoadNavbarItemFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion

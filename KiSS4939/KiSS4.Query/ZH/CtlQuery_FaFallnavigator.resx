<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="qryQuery.SelectStatement" xml:space="preserve">
    <value>declare @UserId     int,
        @Active     bit,
        @Closed     bit,
        @Archived   bit

set @UserId        = null
set @Active        = 1
set @Closed        = 0
set @Archived      = 0

--- set @UserId        = {edtUserID.LookupID}
--- set @Active        = {edtActive}
--- set @Closed        = {edtClosed}
--- set @Archived      = {edtArchived}

declare @Users table (UserID int)
declare @Persons table (BaPersonID int, UserID int, UserIsOwner bit)
declare @PersonCount int
declare @FirstRun bit

declare @tmp table (
  ID              varchar(20),
  ParentID        varchar(20),
  Type            varchar(6),
  Name            varchar(100),
  BaPersonID     int,
  UserID          int,
  OrgUnitID       int,
  B               int,
  F               int,
  S               int,
  I               int,
  V               int,
  A               int,
  AHVNummer       varchar(16),
  NNummer         varchar(20),
  NavigatorZusatz varchar(30),
  Gemeinde        varchar(50),
  IconID          int
)

-- no category choosen: return empty result
if @Active = 0 and @Closed = 0 and @Archived = 0 begin
  select *, PersonCount = 0
  from   @tmp

  return
end

-- Benutzer selbst oder alle Benutzer
insert @Users
select UserID
from   vwUser
where  isnull(@UserID, UserID) = UserID
--- and SozialzentrumCode = {edtSucheSozialzentrum}
--- and OrgUnitID = {edtSucheOrgUnit}

-- bestimme alle zugehörigen Personen (gefiltert nach Active/Closed/Archived)
insert  @Persons
select  distinct FAL.BaPersonID, FAL.UserID, case when FAL.UserID = @UserID then 1 else 0 end
from    FaLeistung FAL
        inner join @Users U on U.UserID = FAL.UserID
        left join FaLeistungArchiv ARC ON ARC.FaLeistungID = FAL.FaLeistungID and
                                      ARC.CheckOut is null
where   ((@Active   = 1 and FAL.DatumBis is null) or
        (@Closed   = 1 and FAL.DatumBis is not null and ARC.FaLeistungID is null) or
        (@Archived = 1 and FAL.DatumBis is not null and ARC.FaLeistungID is not null))

-- lösche Benutzer, die keine Fälle haben
delete U
from   @users U
where  not exists (select 1 from @Persons where UserID = U.UserID)

-- Trage die Personen in @tmp ein, zusammen mit Fallinfo

select Name = PRS.Name + isNull(', ' + PRS.Vorname,''),
       B = '  B  ',
       F = (select top 1
                   case when FAL.DatumBis is null then '  F  '
                   else case when ARC.FaLeistungID is null then '  Fx ' else '  Fa ' end end
            from   FaLeistung FAL
                   left join FaLeistungArchiv ARC ON ARC.FaLeistungID = FAL.FaLeistungID and
                                                 ARC.CheckOut is null
            where  BaPersonID = PRS.BaPersonID and
                   ModulID = 2
            order by case when FAL.DatumBis is null then 0 else 1 end,FAL.DatumVon desc,ARC.FaLeistungID desc),

       S = (select top 1
                   case when FAL.DatumBis is null then '  S  '
                   else case when ARC.FaLeistungID is null then '  Sx ' else '  Sa ' end end
            from   FaLeistung FAL
                   left join FaLeistungArchiv ARC ON ARC.FaLeistungID = FAL.FaLeistungID and
                                                 ARC.CheckOut is null
            where  BaPersonID = PRS.BaPersonID and
                   ModulID = 3
            order by case when FAL.DatumBis is null then 0 else 1 end,FAL.DatumVon desc,ARC.FaLeistungID desc),

       I = (select top 1
                   case when FAL.DatumBis is null then '  I  '
                   else case when ARC.FaLeistungID is null then '  Ix ' else '  Ia ' end end
            from   FaLeistung FAL
                   left join FaLeistungArchiv ARC ON ARC.FaLeistungID = FAL.FaLeistungID and
                                                 ARC.CheckOut is null
            where  BaPersonID = PRS.BaPersonID and
                   ModulID = 4
            order by case when FAL.DatumBis is null then 0 else 1 end,FAL.DatumVon desc,ARC.FaLeistungID desc),

       V = (select top 1
                   case when FAL.DatumBis is null then '  V  '
                   else case when ARC.FaLeistungID is null then '  Vx ' else '  Va ' end end
            from   FaLeistung FAL
                   left join FaLeistungArchiv ARC ON ARC.FaLeistungID = FAL.FaLeistungID and
                                                 ARC.CheckOut is null
            where  BaPersonID = PRS.BaPersonID and
                   ModulID = 5
            order by case when FAL.DatumBis is null then 0 else 1 end,FAL.DatumVon desc,ARC.FaLeistungID desc),

       A = (select top 1
                   case when FAL.DatumBis is null then '  A  '
                   else case when ARC.FaLeistungID is null then '  Ax ' else '  Aa ' end end
            from   FaLeistung FAL
                   left join FaLeistungArchiv ARC ON ARC.FaLeistungID = FAL.FaLeistungID and
                                                 ARC.CheckOut is null
            where  BaPersonID = PRS.BaPersonID and
                   ModulID = 6
            order by case when FAL.DatumBis is null then 0 else 1 end,FAL.DatumVon desc,ARC.FaLeistungID desc),

       -- Zusatz = PRS.NavigatorZusatz,
       PRS.AHVNummer,
       PRS.NNummer,
       -- Gemeinde = (select top 1 GMD.Text
       --             from   FaLeistung FAL
       --                   inner join XLOVCode GMD on GMD.Lovname = 'GemeindeSozialdienst' and
       --                                              GMD.Code = FAL.GemeindeCode
       --            where  FAL.BaPersonID = PRS.BaPersonID
       --            order by FAL.ModulID,FAL.DatumVon desc),
       BaPersonID$  = P.BaPersonID
  from   @Persons P
         inner join BaPerson PRS on PRS.BaPersonID = P.BaPersonID
  order by PRS.Name,PRS.Vorname</value>
  </data>
  <assembly alias="System.Drawing" name="System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="qryQuery.TrayLocation" type="System.Drawing.Point, System.Drawing">
    <value>17, 17</value>
  </data>
  <data name="xDocument.Properties.Buttons" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        iVBORw0KGgoAAAANSUhEUgAAAAwAAAAQCAYAAAAiYZ4HAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8
        YQUAAAAgY0hSTQAAeiYAAICEAAD6AAAAgOgAAHUwAADqYAAAOpgAABdwnLpRPAAAAF1JREFUOE9jZAAC
        Y2Pj/yAaGzh79iwjhjhIw///MzGwmJjYfxDGqSEtjeE/MgYpBhmEoYmQDSANKM7GpQHZmVg1oDsJxgdp
        pI4N2EIKJjbqJLIiDqSJEMaVovGKAwBnM3PWBP8PfwAAAABJRU5ErkJggg==
</value>
  </data>
</root>
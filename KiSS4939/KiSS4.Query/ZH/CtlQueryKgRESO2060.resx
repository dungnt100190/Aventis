<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <metadata name="qryQuery.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>17, 17</value>
  </metadata>
  <data name="qryQuery.SelectStatement" xml:space="preserve">
    <value>DECLARE @tblTemp TABLE (FaFallID int, FaLeistungID int, BaPersonID int, VorSaldo money, Soll money, Haben money)

-- Alle jüngsten Perioden eintragen
DECLARE @tblTempVorSaldo TABLE (FaFallID int, FaLeistungID int, BaPersonID int, VorSaldo money, Soll money, Haben money)
INSERT @tblTempVorSaldo(FaFallID, FaLeistungID, BaPersonID, VorSaldo, Soll, Haben)
select LEI.FaFallID, LEI.FaLeistungID, LEI.BaPersonID, KGK.Vorsaldo, 0, 0
from KgPeriode KGP
     inner join KgKonto KGK on KGK.KgPeriodeId = KGP.KgPeriodeId
     inner join FaLeistung LEI on LEI.FaLeistungID = KGP.FaLeistungID
where KGK.KontoNr = '2060'
and KGP.KgPeriodeID = (select top 1 KGP2.KgPeriodeID --, KGP2.PeriodeVon, KGP2.PeriodeBis, *
					   from FaLeistung LEI2
							inner join KgPeriode KGP2 on KGP2.FaLeistungID = LEI2.FaLeistungID
					   and LEI2.FaLeistungID = LEI.FaLeistungID --9232
					   and GetDate() &gt; isNull(KGP2.PeriodeVon, GetDate())
					   order by KGP2.PeriodeVon)

-- Alle in tblTMP einfügen welche VorSaldo &lt;&gt; 0
insert into @tblTemp (FaFallID, FaLeistungID, BaPersonID, VorSaldo, Soll, Haben) 
select TMP.FaFallID, TMP.FaLeistungID, TMP.BaPersonID, TMP.VorSaldo, TMP.Soll, TMP.Haben
from @tblTempVorSaldo TMP
where TMP.VorSaldo &lt;&gt; 0

-- Summe der Soll berechen
DECLARE @tblTempSoll TABLE (FaFallID int, FaLeistungID int, BaPersonID int, VorSaldo money, Soll money, Haben money)
INSERT @tblTempSoll(FaFallID, FaLeistungID, BaPersonID, VorSaldo, Soll, Haben)
select LEI.FaFallID, LEI.FaLeistungID, LEI.BaPersonID, 0, sum(KGB.Betrag) as Soll, 0
from FaLeistung LEI
     inner join KgPeriode KGP on KGP.FaLeistungID = LEI.FaLeistungID
     inner join KgKonto   KGK on KGK.KgPeriodeID = KGP.KgPeriodeID
     inner join KgBuchung KGB on KGB.KgPeriodeID = KGK.KgPeriodeID 
where KGK.KontoNr = '2060'
and KGB.SollKtoNr = KGK.KontoNr
group by LEI.BaPersonID, KGB.SollKtoNr, KGB.HabenKtoNr, LEI.FaFallID, LEI.FaLeistungID

-- einfügen der Personen welche bisher noch nicht in der Tabelle waren
insert into @tblTemp (FaFallID, FaLeistungID, BaPersonID, VorSaldo, Soll, Haben)
select TMPSoll.FaFallID, TMPSoll.FaLeistungID, TMPSoll.BaPersonID, TMPSoll.VorSaldo, TMPSoll.Soll, TMPSoll.Haben
from @tblTempSoll TMPSoll
where TMPSoll.BaPersonID not in (Select BaPersonID from @tblTemp)

-- Update alle Soll 
UPDATE TMP
set TMP.Soll = TMPSoll.Soll
from @tblTemp TMP
     inner join @tblTempSoll TMPSoll on TMPSoll.BaPersonID = TMP.BaPersonID



-- Summe der Haben berechnen
DECLARE @tblTempHaben TABLE (FaFallID int, FaLeistungID int, BaPersonID int, VorSaldo money, Soll money, Haben money)
INSERT @tblTempHaben(FaFallID, FaLeistungID, BaPersonID, VorSaldo, Soll, Haben)
select LEI.FaFallID, LEI.FaLeistungID, LEI.BaPersonID, 0, 0, sum(KGB.Betrag) as Haben
from FaLeistung LEI
     inner join KgPeriode KGP on KGP.FaLeistungID = LEI.FaLeistungID
     inner join KgKonto   KGK on KGK.KgPeriodeID = KGP.KgPeriodeID
     inner join KgBuchung KGB on KGB.KgPeriodeID = KGK.KgPeriodeID 
where KGK.KontoNr = '2060'
and KGB.HabenKtoNr = KGK.KontoNr
group by LEI.BaPersonID, KGB.SollKtoNr, KGB.HabenKtoNr, LEI.FaFallID, LEI.FaLeistungID

-- einfügen der Personen welche bisher noch nicht in der Tabelle waren
insert into @tblTemp (FaFallID, FaLeistungID, BaPersonID, VorSaldo, Soll, Haben)
select TMPHaben.FaFallID, TMPHaben.FaLeistungID, TMPHaben.BaPersonID, TMPHaben.VorSaldo, TMPHaben.Soll, TMPHaben.Haben
from @tblTempHaben TMPHaben
where TMPHaben.BaPersonID not in (Select BaPersonID from @tblTemp)

-- Update alle Haben
UPDATE TMP
set TMP.Haben = TMPHaben.Haben
from @tblTemp TMP
     inner join @tblTempHaben TMPHaben on TMPHaben.BaPersonID = TMP.BaPersonID


-- Resultat
select [Fall-Nr.] = TMP.FaFallID, 
       --TMP.BaPersonID, 
       [Klient] = VPRS.NameVorname, 
       --LEI.UserID, 
       [Fallführender MA] = VUSR.NameVorname, 
       [Kürzel MA] = VUSR.Kurzzeichen, 
       [Quartierteam] = VUSR.OrgUnitShort, 
       TMP.VorSaldo, 
       TMP.Soll, 
       TMP.Haben, 
       Saldo = VorSaldo + Soll - Haben,
       FallBaPersonID$ = FAL.BaPersonID
from @tblTemp TMP
     inner join FaLeistung LEI  on LEI.FaLeistungID = TMP.FaLeistungID
     inner join FaFall     FAL  on FAL.FaFallID = LEI.FaFallID
     inner join vwPerson   VPRS on VPRS.BaPersonID = TMP.BaPersonID
     inner join vwUser     VUSR on VUSR.UserID = LEI.UserID
order by TMP.FaFallID</value>
  </data>
  <assembly alias="System.Drawing" name="System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="xDocument.Properties.Buttons" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        iVBORw0KGgoAAAANSUhEUgAAAAwAAAAQCAYAAAAiYZ4HAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8
        YQUAAAAgY0hSTQAAeiYAAICEAAD6AAAAgOgAAHUwAADqYAAAOpgAABdwnLpRPAAAAF1JREFUOE9jZAAC
        Y2Pj/yAaGzh79iwjhjhIw///MzGwmJjYfxDGqSEtjeE/MgYpBhmEoYmQDSANKM7GpQHZmVg1oDsJxgdp
        pI4N2EIKJjbqJLIiDqSJEMaVovGKAwBnM3PWBP8PfwAAAABJRU5ErkJggg==
</value>
  </data>
</root>
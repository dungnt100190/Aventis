<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <metadata name="qryQuery.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>17, 17</value>
  </metadata>
  <data name="qryQuery.SelectStatement" xml:space="preserve">
    <value>-------------------------------------------------------------
-- ACHTUNG: Das wirklich verwendete SQLStatement wird im Code 
--          zusammengesetzt in der Methode SetSqlStatements()
-- qryQuery wird nicht verwendet, nur die spezifischen Queries
-------------------------------------------------------------
</value>
  </data>
  <assembly alias="System.Drawing" name="System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="xDocument.Properties.Buttons" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        iVBORw0KGgoAAAANSUhEUgAAAAwAAAAQCAYAAAAiYZ4HAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8
        YQUAAAAgY0hSTQAAeiYAAICEAAD6AAAAgOgAAHUwAADqYAAAOpgAABdwnLpRPAAAAF1JREFUOE9jZAAC
        Y2Pj/yAaGzh79iwjhjhIw///MzGwmJjYfxDGqSEtjeE/MgYpBhmEoYmQDSANKM7GpQHZmVg1oDsJxgdp
        pI4N2EIKJjbqJLIiDqSJEMaVovGKAwBnM3PWBP8PfwAAAABJRU5ErkJggg==
</value>
  </data>
  <metadata name="qryWBrutto.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>219, 17</value>
  </metadata>
  <data name="qryWBrutto.SelectStatement" xml:space="preserve">
    <value>---------------------------------
-- Select Brutto-Belege
---------------------------------
DECLARE @BelegIDs table (
 KbBuchungBruttoID int)

INSERT INTO @BelegIDs
SELECT DISTINCT TOP {edtMaxBelege}
    KbBuchungBruttoID		= KBB.KbBuchungBruttoID
FROM dbo.KbBuchungBrutto KBB
    LEFT JOIN dbo.KbBuchungBruttoPerson	KBP WITH(READUNCOMMITTED) ON KBP.KbBuchungBruttoID = KBB.KbBuchungBruttoID
    LEFT JOIN dbo.vwPersonSimple					PRS WITH(READUNCOMMITTED) ON PRS.BaPersonID = KBP.BaPersonID
    LEFT JOIN dbo.BgKostenart				BKA WITH(READUNCOMMITTED) ON BKA.BgKostenartID = KBB.BgKostenartID
    LEFT JOIN dbo.BgPosition					BPO WITH(READUNCOMMITTED) ON BPO.BgPositionID = KBP.BgPositionID
    LEFT JOIN dbo.BgBudget					BUD WITH(READUNCOMMITTED) ON BUD.BgBudgetID = BPO.BgBudgetID
    LEFT JOIN dbo.BgFinanzplan				FIP WITH(READUNCOMMITTED) ON FIP.BgFinanzplanID = BUD.BgFinanzplanID
    LEFT JOIN dbo.FaLeistung					LEI WITH(READUNCOMMITTED) ON LEI.FaLeistungID = FIP.FaLeistungID
    LEFT JOIN dbo.BgAuszahlungPerson		BAP WITH(READUNCOMMITTED) ON BAP.BgPositionID = BPO.BgPositionID AND
						    BAP.BgAuszahlungPersonID =
						    (
							SELECT TOP 1 BgAuszahlungPersonID
							FROM   dbo.BgAuszahlungPerson WITH(READUNCOMMITTED)
							WHERE  BgPositionID = BPO.BgPositionID
							ORDER BY
							    CASE WHEN BaPersonID IS NULL THEN 1
							    WHEN BaPersonID = BPO.BaPersonID THEN 2
							    WHEN BaPersonID = LEI.BaPersonID THEN 3
							    ELSE 4
							    END
						    )
    LEFT  JOIN dbo.vwKreditor				KRE  WITH(READUNCOMMITTED) ON KRE.BaZahlungswegID = BAP.BaZahlungswegID
    LEFT  JOIN dbo.vwInstitution			DEBI WITH(READUNCOMMITTED) ON DEBI.BaInstitutionID = BPO.BaInstitutionID AND
						    BPO.BgKategorieCode = 1
    LEFT  JOIN dbo.vwPersonSimple					DEBP WITH(READUNCOMMITTED) ON DEBP.BaPersonID = BPO.DebitorBaPersonID
WHERE 1 = {chkBelegeW.Checked}			-- Nur W-Belege (Brutto-Belege sind immer W-Belege, d.h. wir müssen die ModulID nicht prüfen
--- AND ((CONVERT(bigint, KBB.KbBuchungBruttoID) &gt;= {edtSucheBelegNrVon} AND CONVERT(bigint, KBB.KbBuchungBruttoID) &lt;= {edtSucheBelegNrBis}) OR (KBB.BelegNr &gt;= {edtSucheBelegNrVon} AND KBB.BelegNr &lt;= {edtSucheBelegNrBis}))
--- AND ISNULL(LEI.FaFallID, 0) = {edtSucheFallNr}
--- AND (PRS.BaPersonID = {edtSuchePerson.LookupID} OR DEBP.BaPersonID = {edtSuchePerson.LookupID})
--- AND (KRE.BaInstitutionID = {edtSucheInstitution.LookupID} OR DEBI.BaInstitutionID = {edtSucheInstitution.LookupID})
--- AND ABS(KBB.Betrag) = ABS({edtSucheBetrag})		-- Suche auch nach negativen Beträgen oder umgekehrt
--- AND KBB.BelegDatum &gt;= {edtSucheBuchungsDatumVon}
--- AND KBB.BelegDatum &lt;= {edtSucheBuchungsDatumBis}
--- AND IsNull(KBP.VerwPeriodeVon, '2999-12-31') &gt;= {edtSucheVerwPeriodeVon}
--- AND IsNull(KBP.VerwPeriodeBis, '1900-01-01') &lt;= {edtSucheVerwPeriodeBis}
--- AND ({chkSucheInklInaktiveW.Checked} = 1 OR LEI.DatumBis is null)
--- AND KBB.BgKostenartID = {edtSucheBgKostenartID.LookupID}
--- AND LEI.PscdVertragsgegenstandID = {edtSucheVertragNr}

---------------------------------
-- Select Brutto-Belege
---------------------------------
SELECT DISTINCT
    KbBuchungBruttoID		= KBB.KbBuchungBruttoID,
    BelegNr					= KBB.BelegNr,
    FaFallID					= LEI.FaFallID,
    BaPersonID				= PRS.BaPersonID,
    NameVorname				= PRS.NameVorname,
    VertragNr					= LEI.PscdVertragsgegenstandID,
    Betrag						= KBB.Betrag,
    ValutaDatum				= KBB.ValutaDatum,
    KbBuchungStatusCode	= KBB.KbBuchungStatusCode,
    BgBudgetID				= BUD.BgBudgetID,
    Budget						= CASE WHEN BUD.Jahr IS NOT NULL THEN CONVERT(varchar, BUD.Jahr) + '-' + REPLICATE('0',2 - LEN(CAST(BUD.Monat AS VARCHAR))) + CONVERT(varchar, BUD.Monat) ELSE '' END,
    TransferDatum			= KBB.TransferDatum,
    BelegDatum				= KBB.BelegDatum,
    Buchungstext				= KBB.Text,
    PscdFehlermeldung		= KBB.PscdFehlermeldung,
				  BgPositionID				= MAX(BPO.BgPositionID)
FROM dbo.KbBuchungBrutto KBB
    INNER JOIN @BelegIDs						BEL ON BEL.KbBuchungBruttoID = KBB.KbBuchungBruttoID		-- Alle vorher selektierten Belege
    LEFT JOIN dbo.KbBuchungBruttoPerson	KBP WITH(READUNCOMMITTED) ON KBP.KbBuchungBruttoID = KBB.KbBuchungBruttoID
    LEFT JOIN dbo.BgKostenart				BKA WITH(READUNCOMMITTED) ON BKA.BgKostenartID = KBB.BgKostenartID
    LEFT JOIN dbo.BgPosition					BPO WITH(READUNCOMMITTED) ON BPO.BgPositionID = KBP.BgPositionID
    LEFT JOIN dbo.BgBudget					BUD WITH(READUNCOMMITTED) ON BUD.BgBudgetID = BPO.BgBudgetID
--    LEFT JOIN dbo.BgFinanzplan				FIP WITH(READUNCOMMITTED) ON FIP.BgFinanzplanID = BUD.BgFinanzplanID
    LEFT JOIN dbo.FaLeistung					LEI WITH(READUNCOMMITTED) ON LEI.FaLeistungID = KBB.FaLeistungID
				  LEFT JOIN dbo.FaFall						FAL WITH(READUNCOMMITTED) ON FAL.FaFallID = LEI.FaFallID
    LEFT JOIN dbo.vwPersonSimple					PRS WITH(READUNCOMMITTED) ON PRS.BaPersonID = FAL.BaPersonID
			GROUP BY KBB.KbBuchungBruttoID, KBB.BelegNr, LEI.FaFallID, PRS.BaPersonID, PRS.NameVorname, LEI.PscdVertragsgegenstandID, KBB.Betrag,
						KBB.ValutaDatum, KBB.KbBuchungStatusCode, BUD.BgBudgetID, BUD.JAHR, BUD.Monat, KBB.TransferDatum, KBB.BelegDatum, KBB.Text, KBB.PscdFehlermeldung

---------------------------------
-- Select Detail-Positionen
---------------------------------
SELECT DISTINCT
    KbBuchungBruttoID		= KBB.KbBuchungBruttoID,
    BaPersonID				= PRS.BaPersonID,
    NameVorname				= PRS.NameVorname,
    LA							= BKA.KontoNr,
    HV							= KBB.Hauptvorgang,
    TV							= KBB.Teilvorgang,
    Betrag						= KBP.Betrag,
    BuchungsText				= KBP.Buchungstext,
    VerwPeriodeVon			= KBP.VerwPeriodeVon,
    VerwPeriodeBis			= KBP.VerwPeriodeBis,
    KreditorDebitor	        = CASE WHEN KRE.Kreditor IS NOT NULL THEN 'K: ' + KRE.Kreditor + ' (' + CONVERT(VARCHAR, ISNULL(KRE.BaInstitutionID, KRE.BaPersonID)) + ')' ELSE 'D:' + IsNull(DEBI.Name,DEBP.NameVorname) + ' (' + CONVERT(VARCHAR, IsNull(DEBI.BaInstitutionID, DEBP.BaPersonID)) + ')' END,
    KBP.PositionImBeleg
FROM dbo.KbBuchungBrutto KBB
    INNER JOIN @BelegIDs						BEL ON BEL.KbBuchungBruttoID = KBB.KbBuchungBruttoID		-- Alle vorher selektierten Belege
    LEFT JOIN dbo.KbBuchungBruttoPerson	KBP WITH(READUNCOMMITTED) ON KBP.KbBuchungBruttoID = KBB.KbBuchungBruttoID
    LEFT JOIN dbo.vwPersonSimple					PRS WITH(READUNCOMMITTED) ON PRS.BaPersonID = KBP.BaPersonID
    LEFT JOIN dbo.BgKostenart           BKA WITH(READUNCOMMITTED) ON BKA.BgKostenartID = KBB.BgKostenartID
    LEFT JOIN dbo.BgPosition				BPO WITH(READUNCOMMITTED) ON BPO.BgPositionID = KBP.BgPositionID
    LEFT JOIN dbo.BgBudget					BUD WITH(READUNCOMMITTED) ON BUD.BgBudgetID = BPO.BgBudgetID
    LEFT JOIN dbo.BgFinanzplan				FIP WITH(READUNCOMMITTED) ON FIP.BgFinanzplanID = BUD.BgFinanzplanID
    LEFT JOIN dbo.FaLeistung				LEI WITH(READUNCOMMITTED) ON LEI.FaLeistungID = FIP.FaLeistungID
    LEFT JOIN dbo.BgAuszahlungPerson		BAP WITH(READUNCOMMITTED) ON BAP.BgPositionID = BPO.BgPositionID AND
						    BAP.BgAuszahlungPersonID =
						    (
							SELECT TOP 1 BgAuszahlungPersonID
							FROM   dbo.BgAuszahlungPerson WITH(READUNCOMMITTED)
							WHERE  BgPositionID = BPO.BgPositionID
							ORDER BY
							    CASE WHEN BaPersonID IS NULL THEN 1
							    WHEN BaPersonID = BPO.BaPersonID THEN 2
							    WHEN BaPersonID = LEI.BaPersonID THEN 3
							    ELSE 4
							    END
						    )
    LEFT  JOIN dbo.vwKreditor				KRE  WITH(READUNCOMMITTED) ON KRE.BaZahlungswegID = BAP.BaZahlungswegID
    LEFT  JOIN dbo.vwInstitution			DEBI WITH(READUNCOMMITTED) ON DEBI.BaInstitutionID = BPO.BaInstitutionID AND
						    BPO.BgKategorieCode = 1
    LEFT  JOIN dbo.vwPersonSimple					DEBP WITH(READUNCOMMITTED) ON DEBP.BaPersonID = BPO.DebitorBaPersonID

---------------------------------
-- Select Abhängige Netto-Belege
---------------------------------
SELECT DISTINCT
    KbBuchungBruttoID		= KBB.KbBuchungBruttoID,
    KbBuchungID				= BUC.KbBuchungID,
    BelegNr					= BUC.BelegNr,
    Betrag					= BUC.Betrag,
    KbBuchungStatusCode	= BUC.KbBuchungStatusCode,
    BuchungsText			= BUC.Text
FROM dbo.KbBuchungBrutto KBB
    INNER JOIN @BelegIDs							BEL ON BEL.KbBuchungBruttoID = KBB.KbBuchungBruttoID		-- Alle vorher selektierten Belege
    INNER JOIN dbo.KbBuchungBruttoPerson	KBP WITH (READUNCOMMITTED) ON KBP.KbBuchungBruttoID = KBB.KbBuchungBruttoID
    INNER JOIN dbo.KbBuchungKostenart		KBK WITH (READUNCOMMITTED) ON KBK.BgPositionID      = KBP.BgPositionID
    INNER JOIN dbo.KbBuchung					BUC WITH (READUNCOMMITTED) ON BUC.KbBuchungID       = KBK.KbBuchungID</value>
  </data>
  <data name="ctlGotoFallWBrutto.BaPersonID" mimetype="application/x-microsoft.net.object.binary.base64">
    <value>
        AAEAAAD/////AQAAAAAAAAAEAQAAAB9TeXN0ZW0uVW5pdHlTZXJpYWxpemF0aW9uSG9sZGVyAwAAAARE
        YXRhCVVuaXR5VHlwZQxBc3NlbWJseU5hbWUBAAEICgIAAAAGAgAAAAAL
</value>
  </data>
  <metadata name="qryA.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>327, 17</value>
  </metadata>
  <data name="qryA.SelectStatement" xml:space="preserve">
    <value>-----------------------------------
--x-- Select A-Belege
-----------------------------------
--DECLARE @BelegIDs table (
-- KbBuchungID int)
--
--INSERT INTO @BelegIDs
--SELECT DISTINCT TOP {edtMaxBelege}
--    KbBuchungID		= BUC.KbBuchungID
--FROM dbo.KbBuchung BUC
--    LEFT JOIN dbo.KbBuchungKostenart		KOA WITH(READUNCOMMITTED) ON KOA.KbBuchungID = BUC.KbBuchungID
--    LEFT JOIN dbo.vwPerson					PRS WITH(READUNCOMMITTED) ON PRS.BaPersonID = KOA.BaPersonID
--    LEFT JOIN dbo.BgKostenart				BKA WITH(READUNCOMMITTED) ON BKA.BgKostenartID = KOA.BgKostenartID
--    LEFT JOIN dbo.IKPosition					IPO WITH(READUNCOMMITTED) ON IPO.IKPositionID = BUC.IKPositionID
--    LEFT JOIN dbo.FaLeistung					LEI WITH(READUNCOMMITTED) ON LEI.FaLeistungID = IPO.FaLeistungID
--    LEFT JOIN dbo.vwKreditor					KRE  WITH(READUNCOMMITTED) ON KRE.BaZahlungswegID = BUC.BaZahlungswegID
--    LEFT JOIN dbo.vwInstitution				DEBI WITH(READUNCOMMITTED) ON DEBI.BaInstitutionID = BUC.Schuldner_BaInstitutionID
--    LEFT JOIN dbo.vwPerson					DEBP WITH(READUNCOMMITTED) ON DEBP.BaPersonID = BUC.Schuldner_BaPersonID
--WHERE 1 = (CASE WHEN {chkBelegeA.Checked} = 1 AND BUC.ModulID = 4 THEN 1 ELSE 0 END)			-- Nur A-Belege
----- AND ((CONVERT(bigint, BUC.KbBuchungID) &gt;= {edtSucheBelegNrVon} AND CONVERT(bigint, BUC.KbBuchungID) &lt;= {edtSucheBelegNrBis}) OR (BUC.BelegNr &gt;= {edtSucheBelegNrVon} AND BUC.BelegNr &lt;= {edtSucheBelegNrBis}))
----- AND ISNULL(LEI.FaFallID, 0) = {edtSucheFallNr}
----- AND (PRS.BaPersonID = {edtSuchePerson.LookupID} OR DEBP.BaPersonID = {edtSuchePerson.LookupID})
----- AND (KRE.BaInstitutionID = {edtSucheInstitution.LookupID} OR DEBI.BaInstitutionID = {edtSucheInstitution.LookupID})
----- AND ABS(BUC.Betrag) = ABS({edtSucheBetrag})		-- Suche auch nach negativen Beträgen oder umgekehrt
----- AND BUC.BelegDatum &gt;= {edtSucheBuchungsDatumVon}
----- AND BUC.BelegDatum &lt;= {edtSucheBuchungsDatumBis}
----- AND IsNull(KOA.VerwPeriodeVon, '2999-12-31') &gt;= {edtSucheVerwPeriodeVon}
----- AND IsNull(KOA.VerwPeriodeBis, '1900-01-01') &lt;= {edtSucheVerwPeriodeBis}
----- AND ({chkSucheInklInaktiveW.Checked} = 1 OR LEI.DatumBis is null)
----- AND KOA.BgKostenartID = {edtSucheBgKostenartID.LookupID}
----- AND LEI.PscdVertragsgegenstandID = {edtSucheVertragNr}
--
-----------------------------------
--x-- Select Netto-Belege
-----------------------------------
--SELECT DISTINCT
--    KbBuchungID				= BUC.KbBuchungID,
--    BelegNr					= BUC.BelegNr,
--    FaFallID					= LEI.FaFallID,
--    BaPersonID				= PRS.BaPersonID,
--    NameVorname				= PRS.NameVorname,
--    VertragNr					= LEI.PscdVertragsgegenstandID,
--    Betrag						= CASE WHEN KDEB.KbKontoID IS NULL THEN -BUC.Betrag ELSE BUC.Betrag END,	-- Bei Kreditoren-Beträgen (=Auszahlungen) kehren wir das Vorzeichen der Netto-Buchung
--    ValutaDatum				= BUC.ValutaDatum,
--    KbBuchungStatusCode	= BUC.KbBuchungStatusCode,
--    Budget						= CASE WHEN IPO.JAHR IS NOT NULL THEN CONVERT(varchar, IPO.Jahr) + '-' + REPLICATE('0',2 - LEN(CAST(IPO.Monat AS VARCHAR))) + CONVERT(varchar, IPO.Monat) ELSE '' END,
--    TransferDatum			= BUC.TransferDatum,
--    BelegDatum				= BUC.BelegDatum,
--    Buchungstext				= BUC.Text,
--    PscdFehlermeldung		= BUC.PscdFehlermeldung
--FROM dbo.KbBuchung BUC
--    INNER JOIN @BelegIDs						BEL ON BEL.KbBuchungID = BUC.KbBuchungID		-- Alle vorher selektierten Belege
--    LEFT JOIN dbo.KbBuchungKostenart		KOA WITH(READUNCOMMITTED) ON KOA.KbBuchungID = BUC.KbBuchungID
--    LEFT JOIN dbo.BgKostenart				BKA WITH(READUNCOMMITTED) ON BKA.BgKostenartID = KOA.BgKostenartID
--    LEFT JOIN dbo.IKPosition					IPO WITH(READUNCOMMITTED) ON IPO.IKPositionID = BUC.IKPositionID
--    LEFT JOIN dbo.FaLeistung					LEI WITH(READUNCOMMITTED) ON LEI.FaLeistungID = IPO.FaLeistungID
--				  LEFT JOIN dbo.FaFall						FAL WITH(READUNCOMMITTED) ON FAL.FaFallID = LEI.FaFallID
--    LEFT JOIN dbo.vwPerson					PRS WITH(READUNCOMMITTED) ON PRS.BaPersonID = FAL.BaPersonID
--    LEFT JOIN dbo.KbKonto       			KDEB WITH (READUNCOMMITTED) ON KDEB.KbPeriodeID = BUC.KbPeriodeID and	-- Debitoren-Konto (nur gefüllt wenn die Buchung eine Debitoren-Buchung ist)
--											    KDEB.KontoNr = BUC.SollKtoNr and
--											    KDEB.KbKontoartCodes = 20
--
-----------------------------------
--x-- Select Detail-Positionen
-----------------------------------
--SELECT DISTINCT
--    KbBuchungID			= BUC.KbBuchungID,
--    BaPersonID			= PRS.BaPersonID,
--    NameVorname			= PRS.NameVorname,
--    LA						= BKA.KontoNr,
--    HV						= KOA.Hauptvorgang,
--    TV						= KOA.Teilvorgang,
--    Betrag					= CASE WHEN KDEB.KbKontoID IS NULL THEN -KOA.Betrag ELSE KOA.Betrag END,	-- Bei Kreditoren-Beträgen (=Auszahlungen) kehren wir das Vorzeichen der Netto-Buchung, damit Brutto und Netto übereinstimmen
--    BuchungsText			= KOA.Buchungstext,
--    VerwPeriodeVon		= KOA.VerwPeriodeVon,
--    VerwPeriodeBis		= KOA.VerwPeriodeBis,
--    KreditorDebitor	    = CASE WHEN KRE.Kreditor IS NOT NULL THEN 'K: ' + KRE.Kreditor + ' (' + CONVERT(VARCHAR, ISNULL(KRE.BaInstitutionID, KRE.BaPersonID)) + ')' ELSE 'D:' + IsNull(DEBI.Name,DEBP.NameVorname) + ' (' + CONVERT(VARCHAR, IsNull(DEBI.BaInstitutionID, DEBP.BaPersonID)) + ')' END
--FROM dbo.KbBuchung BUC
--    INNER JOIN @BelegIDs						BEL ON BEL.KbBuchungID = BUC.KbBuchungID		-- Alle vorher selektierten Belege
--    LEFT JOIN dbo.KbBuchungKostenart		KOA WITH(READUNCOMMITTED) ON KOA.KbBuchungID = BUC.KbBuchungID
--    LEFT JOIN dbo.vwPerson					PRS WITH(READUNCOMMITTED) ON PRS.BaPersonID = KOA.BaPersonID
--    LEFT JOIN dbo.BgKostenart				BKA WITH(READUNCOMMITTED) ON BKA.BgKostenartID = KOA.BgKostenartID
--    LEFT JOIN dbo.IKPosition					IPO WITH(READUNCOMMITTED) ON IPO.IKPositionID = BUC.IKPositionID
--    LEFT JOIN dbo.FaLeistung					LEI WITH(READUNCOMMITTED) ON LEI.FaLeistungID = IPO.FaLeistungID
--    LEFT JOIN dbo.KbKonto       			KDEB WITH (READUNCOMMITTED) ON KDEB.KbPeriodeID = BUC.KbPeriodeID and	-- Debitoren-Konto (nur gefüllt wenn die Buchung eine Debitoren-Buchung ist)
--											    KDEB.KontoNr = BUC.SollKtoNr and
--											    KDEB.KbKontoartCodes = 20
--    LEFT JOIN dbo.vwKreditor					KRE  WITH(READUNCOMMITTED) ON KRE.BaZahlungswegID = BUC.BaZahlungswegID
--    LEFT JOIN dbo.vwInstitution				DEBI WITH(READUNCOMMITTED) ON DEBI.BaInstitutionID = BUC.Schuldner_BaInstitutionID
--    LEFT JOIN dbo.vwPerson					DEBP WITH(READUNCOMMITTED) ON DEBP.BaPersonID = BUC.Schuldner_BaPersonID</value>
  </data>
  <data name="ctlGotoFallA.BaPersonID" mimetype="application/x-microsoft.net.object.binary.base64">
    <value>
        AAEAAAD/////AQAAAAAAAAAEAQAAAB9TeXN0ZW0uVW5pdHlTZXJpYWxpemF0aW9uSG9sZGVyAwAAAARE
        YXRhCVVuaXR5VHlwZQxBc3NlbWJseU5hbWUBAAEICgIAAAAGAgAAAAAL
</value>
  </data>
  <metadata name="qryK.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>401, 17</value>
  </metadata>
  <data name="qryK.SelectStatement" xml:space="preserve">
    <value>---------------------------------
-- Select K-Belege
---------------------------------
DECLARE @BelegIDs table (
 KgBuchungID int)

INSERT INTO @BelegIDs
SELECT DISTINCT TOP {edtMaxBelege}
    KgBuchungID		= BUC.KgBuchungID
FROM dbo.KgBuchung BUC
    LEFT JOIN dbo.KgPosition					BPO WITH(READUNCOMMITTED) ON BPO.KgPositionID = BUC.KgPositionID
    LEFT JOIN dbo.KgBudget					BUD WITH(READUNCOMMITTED) ON BUD.KgBudgetID = BPO.KgBudgetID
    LEFT JOIN dbo.FaLeistung					LEI WITH(READUNCOMMITTED) ON LEI.FaLeistungID = BUD.FaLeistungID
    LEFT JOIN dbo.vwPersonSimple					PRS WITH(READUNCOMMITTED) ON PRS.BaPersonID = LEI.BaPersonID
    LEFT JOIN dbo.vwKreditor					KRE WITH(READUNCOMMITTED) ON KRE.BaZahlungswegID = BPO.BaZahlungswegID
    LEFT JOIN dbo.vwInstitution				DEB WITH(READUNCOMMITTED) ON DEB.BaInstitutionID = BPO.BaInstitutionID AND BPO.KgPositionsKategorieCode = 3	-- Einnahmen
WHERE {chkBelegeK.Checked} = 1 			-- Nur K-Belege
--- AND ((CONVERT(bigint, BUC.KgBuchungID) &gt;= {edtSucheBelegNrVon} AND CONVERT(bigint, BUC.KgBuchungID) &lt;= {edtSucheBelegNrBis}) OR (BUC.PscdBelegNr &gt;= {edtSucheBelegNrVon} AND BUC.PscdBelegNr &lt;= {edtSucheBelegNrBis}))
--- AND ISNULL(LEI.FaFallID, 0) = {edtSucheFallNr}
--- AND (PRS.BaPersonID = {edtSuchePerson.LookupID})
--- AND (KRE.BaInstitutionID = {edtSucheInstitution.LookupID} OR DEB.BaInstitutionID = {edtSucheInstitution.LookupID})
--- AND ABS(BUC.Betrag) = ABS({edtSucheBetrag})		-- Suche auch nach negativen Beträgen oder umgekehrt
--- AND BUC.BuchungsDatum &gt;= {edtSucheBuchungsDatumVon}
--- AND BUC.BuchungsDatum &lt;= {edtSucheBuchungsDatumBis}
--- AND LEI.PscdVertragsgegenstandID = {edtSucheVertragNr}

---------------------------------
-- Select K-Belege
---------------------------------
SELECT DISTINCT
    KgBuchungID				= BUC.KgBuchungID,
    BelegNr					= BUC.BelegNr,
				  PSCDBelegNr				= BUC.PSCDBelegNr,
    FaFallID					= LEI.FaFallID,
    BaPersonID				= PRS.BaPersonID,
    NameVorname				= PRS.NameVorname,
    VertragNr					= LEI.PscdVertragsgegenstandID,
    Betrag						= BUC.Betrag,
    SollKonto					= BUC.SollKtoNr,
    HabenKonto				= BUC.HabenKtoNr,
    ValutaDatum				= BUC.ValutaDatum,
    KgBuchungStatusCode	= BUC.KgBuchungStatusCode,
    KgBudgetID				= BUD.KgBudgetID,
    Budget						= CASE WHEN BUD.Jahr IS NOT NULL THEN CONVERT(varchar, BUD.Jahr) + '-' + REPLICATE('0',2 - LEN(CAST(BUD.Monat AS VARCHAR))) + CONVERT(varchar, BUD.Monat) ELSE '' END,
    KreditorDebitor			= CASE
						WHEN KRE.Kreditor IS NOT NULL THEN 'K: ' + KRE.Kreditor + ' (' + CONVERT(varchar, ISNULL(KRE.BaInstitutionID, KRE.BaPersonID)) + ')'
						WHEN DEB.Name IS NOT NULL THEN 'D:' + DEB.Name + ' (' + CONVERT(varchar, DEB.BaInstitutionID) + ')'
					    END,
    TransferDatum			= BUC.TransferDatum,
    BelegDatum				= BUC.BuchungsDatum,
    Buchungstext				= BUC.Text,
    PscdFehlermeldung		= BUC.PscdFehlermeldung,
    JumpToMBPfad				= 'CtlKgLeistung' + convert(varchar, LEI.FaLeistungID) +
						'\Masterbudget' + convert(varchar, BUD.KgMasterBudgetID) +
						'\Monatsbudget' + convert(varchar, BUD.KgBudgetID)
FROM dbo.KgBuchung BUC
    INNER JOIN @BelegIDs						BEL ON BEL.KgBuchungID = BUC.KgBuchungID		-- Alle vorher selektierten Belege
    LEFT JOIN dbo.KgPosition					BPO WITH(READUNCOMMITTED) ON BPO.KgPositionID = BUC.KgPositionID
    LEFT JOIN dbo.KgBudget					BUD WITH(READUNCOMMITTED) ON BUD.KgBudgetID = BPO.KgBudgetID
    LEFT JOIN dbo.FaLeistung					LEI WITH(READUNCOMMITTED) ON LEI.FaLeistungID = BUD.FaLeistungID
				  LEFT JOIN dbo.FaFall						FAL WITH(READUNCOMMITTED) ON FAL.FaFallID = LEI.FaFallID
    LEFT JOIN dbo.vwPersonSimple					PRS WITH(READUNCOMMITTED) ON PRS.BaPersonID = FAL.BaPersonID
    LEFT JOIN dbo.vwKreditor					KRE WITH(READUNCOMMITTED) ON KRE.BaZahlungswegID = BPO.BaZahlungswegID
    LEFT JOIN dbo.vwInstitution				DEB WITH(READUNCOMMITTED) ON DEB.BaInstitutionID = BPO.BaInstitutionID AND BPO.KgPositionsKategorieCode = 3	-- Einnahmen</value>
  </data>
  <data name="ctlGotoFallK.BaPersonID" mimetype="application/x-microsoft.net.object.binary.base64">
    <value>
        AAEAAAD/////AQAAAAAAAAAEAQAAAB9TeXN0ZW0uVW5pdHlTZXJpYWxpemF0aW9uSG9sZGVyAwAAAARE
        YXRhCVVuaXR5VHlwZQxBc3NlbWJseU5hbWUBAAEICgIAAAAGAgAAAAAL
</value>
  </data>
  <metadata name="qryProLeist.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>475, 17</value>
  </metadata>
  <data name="qryProLeist.SelectStatement" xml:space="preserve">
    <value>---------------------------------
-- Select Proleist-Belege
---------------------------------
DECLARE @BelegIDs table (
 NummernKreis varchar(2),
 BelegNummer int)

INSERT INTO @BelegIDs
SELECT DISTINCT TOP {edtMaxBelege}
    BUC.NummernKreis, BUC.BelegNummer
FROM dbo.MigDetailBuchung BUC
    LEFT JOIN dbo.vwPersonSimple					PRS WITH(READUNCOMMITTED) ON PRS.BaPersonID = BUC.BaPersonID
    LEFT JOIN dbo.FaLeistung				LEI WITH(READUNCOMMITTED) ON LEI.FaLeistungID = BUC.FaLeistungID
    LEFT JOIN dbo.BgKostenart				BKA WITH(READUNCOMMITTED) ON BKA.KontoNr = BUC.KissLeistungsart
WHERE 1 = {chkSucheProleistBelege.Checked}			-- Nur ProLeist-Belege
--- AND BUC.NummernKreis = {edtSucheProLeistNummerKreis}
--- AND BUC.BelegNummer &gt;= {edtSucheBelegNrVon} AND BUC.BelegNummer &lt;= {edtSucheBelegNrBis}
--- AND ISNULL(LEI.FaFallID, 0) = {edtSucheFallNr}
--- AND PRS.BaPersonID = {edtSuchePerson.LookupID}
--- AND ABS(BUC.Betrag) = ABS({edtSucheBetrag})		-- Suche auch nach negativen Beträgen oder umgekehrt
--- AND BUC.BuchungsDatum &gt;= {edtSucheBuchungsDatumVon}
--- AND BUC.BuchungsDatum &lt;= {edtSucheBuchungsDatumBis}
--- AND IsNull(BUC.VerwendungVon, '2999-12-31') &gt;= {edtSucheVerwPeriodeVon}
--- AND IsNull(BUC.VerwendungBis, '1900-01-01') &lt;= {edtSucheVerwPeriodeBis}
--- AND BKA.BgKostenartID = {edtSucheBgKostenartID.LookupID}


---------------------------------
-- Select Haupt-Beleg-Infos
---------------------------------
SELECT DISTINCT
    NummernKreis			= BUC.NummernKreis,
    BelegNummer					= BUC.BelegNummer,
    FaFallID				= MAX(LEI.FaFallID),
    BaPersonID				= MAX(PRS.BaPersonID),
    NameVorname				= MAX(PRS.NameVorname),
    Betrag					= SUM(BUC.Betrag),
    ValutaDatum				= MAX(BUC.FaelligkeitsDatum),
    BelegDatum				= MAX(BUC.BuchungsDatum),
    Buchungstext			= MAX(BUC.BuchungsText)
FROM dbo.MigDetailBuchung BUC
    INNER JOIN @BelegIDs					BEL ON BEL.NummernKreis = BUC.NummernKreis AND BEL.BelegNummer = BUC.BelegNummer	-- Alle vorher selektierten Belege 
    LEFT JOIN dbo.FaLeistung				LEI WITH(READUNCOMMITTED) ON LEI.FaLeistungID = BUC.FaLeistungID
    LEFT JOIN dbo.FaFall					FAL WITH(READUNCOMMITTED) ON FAL.FaFallID = LEI.FaFallID
    LEFT JOIN dbo.vwPersonSimple					PRS WITH(READUNCOMMITTED) ON PRS.BaPersonID = FAL.BaPersonID
GROUP BY BUC.NummernKreis, BUC.BelegNummer


---------------------------------
-- Select Detail-Positionen
---------------------------------
SELECT DISTINCT
    NummernKreis			= BUC.NummernKreis,
    BelegNummer					= BUC.BelegNummer,
    BaPersonID				= PRS.BaPersonID,
    NameVorname				= PRS.NameVorname,
    LA						= BUC.KissLeistungsart,
    Betrag					= BUC.Betrag,
    BuchungsText			= BUC.Buchungstext,
    VerwPeriodeVon			= BUC.VerwendungVon,
    VerwPeriodeBis			= BUC.VerwendungBis,
    KreditorDebitor	        = BUC.DEBKREName,
    PositionsNummer             = BUC.PositionsNummer
FROM dbo.MigDetailBuchung BUC
    INNER JOIN @BelegIDs					BEL ON BEL.NummernKreis = BUC.NummernKreis AND BEL.BelegNummer = BUC.BelegNummer	-- Alle vorher selektierten Belege 
    LEFT JOIN dbo.vwPersonSimple					PRS WITH(READUNCOMMITTED) ON PRS.BaPersonID = BUC.BaPersonID
ORDER BY BUC.PositionsNummer</value>
  </data>
  <data name="ctlGotoFallP.BaPersonID" mimetype="application/x-microsoft.net.object.binary.base64">
    <value>
        AAEAAAD/////AQAAAAAAAAAEAQAAAB9TeXN0ZW0uVW5pdHlTZXJpYWxpemF0aW9uSG9sZGVyAwAAAARE
        YXRhCVVuaXR5VHlwZQxBc3NlbWJseU5hbWUBAAEICgIAAAAGAgAAAAAL
</value>
  </data>
  <data name="edtSucheVerwPeriodeBis.Properties.Buttons" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        iVBORw0KGgoAAAANSUhEUgAAAAwAAAAQCAYAAAAiYZ4HAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8
        YQUAAAAgY0hSTQAAeiYAAICEAAD6AAAAgOgAAHUwAADqYAAAOpgAABdwnLpRPAAAAFVJREFUOE9jZAAC
        Y2Pj/yCaEDh79iwjWA1MAzaNWOVAgsRguAuIcRKKGmROQwMD3D/IbKwaQApgitBp6mgAeYokG4abBmT/
        YKQ3smKapLREKFkjywMAd9eDN3Z9MMsAAAAASUVORK5CYII=
</value>
  </data>
  <data name="edtSucheVerwPeriodeVon.Properties.Buttons" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        iVBORw0KGgoAAAANSUhEUgAAAAwAAAAQCAYAAAAiYZ4HAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8
        YQUAAAAgY0hSTQAAeiYAAICEAAD6AAAAgOgAAHUwAADqYAAAOpgAABdwnLpRPAAAAFVJREFUOE9jZAAC
        Y2Pj/yCaEDh79iwjWA1MAzaNWOVAgsRguAuIcRKKGmROQwMD3D/IbKwaQApgitBp6mgAeYokG4abBmT/
        YKQ3smKapLREKFkjywMAd9eDN3Z9MMsAAAAASUVORK5CYII=
</value>
  </data>
  <data name="edtSucheBuchungsDatumBis.Properties.Buttons" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        iVBORw0KGgoAAAANSUhEUgAAAAwAAAAQCAYAAAAiYZ4HAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8
        YQUAAAAgY0hSTQAAeiYAAICEAAD6AAAAgOgAAHUwAADqYAAAOpgAABdwnLpRPAAAAFVJREFUOE9jZAAC
        Y2Pj/yCaEDh79iwjWA1MAzaNWOVAgsRguAuIcRKKGmROQwMD3D/IbKwaQApgitBp6mgAeYokG4abBmT/
        YKQ3smKapLREKFkjywMAd9eDN3Z9MMsAAAAASUVORK5CYII=
</value>
  </data>
  <data name="edtSucheBuchungsDatumVon.Properties.Buttons" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        iVBORw0KGgoAAAANSUhEUgAAAAwAAAAQCAYAAAAiYZ4HAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8
        YQUAAAAgY0hSTQAAeiYAAICEAAD6AAAAgOgAAHUwAADqYAAAOpgAABdwnLpRPAAAAFVJREFUOE9jZAAC
        Y2Pj/yCaEDh79iwjWA1MAzaNWOVAgsRguAuIcRKKGmROQwMD3D/IbKwaQApgitBp6mgAeYokG4abBmT/
        YKQ3smKapLREKFkjywMAd9eDN3Z9MMsAAAAASUVORK5CYII=
</value>
  </data>
  <metadata name="qryWNetto.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>114, 17</value>
  </metadata>
  <data name="qryWNetto.SelectStatement" xml:space="preserve">
    <value>---------------------------------
-- Select Netto-Beleg IDs
---------------------------------
DECLARE @BelegIDs table (
 KbBuchungID int)

INSERT INTO @BelegIDs
SELECT DISTINCT TOP {edtMaxBelege}
    KbBuchungID		= BUC.KbBuchungID
FROM dbo.KbBuchung BUC
    LEFT JOIN dbo.KbBuchungKostenart		KOA WITH(READUNCOMMITTED) ON KOA.KbBuchungID = BUC.KbBuchungID
    LEFT JOIN dbo.vwPersonSimple					PRS WITH(READUNCOMMITTED) ON PRS.BaPersonID = KOA.BaPersonID
    LEFT JOIN dbo.BgKostenart				BKA WITH(READUNCOMMITTED) ON BKA.BgKostenartID = KOA.BgKostenartID
    LEFT JOIN dbo.BgPosition					BPO WITH(READUNCOMMITTED) ON BPO.BgPositionID = KOA.BgPositionID
    LEFT JOIN dbo.BgBudget					BUD WITH(READUNCOMMITTED) ON BUD.BgBudgetID = BPO.BgBudgetID
    LEFT JOIN dbo.BgFinanzplan				FIP WITH(READUNCOMMITTED) ON FIP.BgFinanzplanID = BUD.BgFinanzplanID
    LEFT JOIN dbo.FaLeistung					LEI WITH(READUNCOMMITTED) ON LEI.FaLeistungID = FIP.FaLeistungID
    LEFT JOIN dbo.BgAuszahlungPerson		BAP WITH(READUNCOMMITTED) ON BAP.BgPositionID = BPO.BgPositionID AND
						    BAP.BgAuszahlungPersonID =
						    (
							SELECT TOP 1 BgAuszahlungPersonID
							FROM   dbo.BgAuszahlungPerson WITH(READUNCOMMITTED)
							WHERE  BgPositionID = BPO.BgPositionID
							ORDER BY
							    CASE WHEN BaPersonID IS NULL THEN 1
							    WHEN BaPersonID = BPO.BaPersonID THEN 2
							    WHEN BaPersonID = LEI.BaPersonID THEN 3
							    ELSE 4
							    END
						    )
    LEFT  JOIN dbo.vwKreditor				KRE  WITH(READUNCOMMITTED) ON KRE.BaZahlungswegID = BAP.BaZahlungswegID OR KRE.BaZahlungswegID = BUC.BaZahlungswegID
    LEFT  JOIN dbo.vwInstitution			DEBI WITH(READUNCOMMITTED) ON (DEBI.BaInstitutionID = BPO.BaInstitutionID OR DEBI.BaInstitutionID = BUC.Schuldner_BaInstitutionID) AND
						    BPO.BgKategorieCode = 1
    LEFT  JOIN dbo.vwPersonSimple					DEBP WITH(READUNCOMMITTED) ON DEBP.BaPersonID = BPO.DebitorBaPersonID OR DEBP.BaPersonID = BUC.Schuldner_BaPersonID
WHERE 1 = (CASE WHEN {chkBelegeW.Checked} = 1 AND BUC.ModulID = 3 THEN 1 ELSE 0 END)			-- Nur W-Belege
--- AND ((CONVERT(bigint, BUC.KbBuchungID) &gt;= {edtSucheBelegNrVon} AND CONVERT(bigint, BUC.KbBuchungID) &lt;= {edtSucheBelegNrBis}) OR (BUC.BelegNr &gt;= {edtSucheBelegNrVon} AND BUC.BelegNr &lt;= {edtSucheBelegNrBis}))
--- AND ISNULL(LEI.FaFallID, 0) = {edtSucheFallNr}
--- AND (PRS.BaPersonID = {edtSuchePerson.LookupID} OR DEBP.BaPersonID = {edtSuchePerson.LookupID})
--- AND (KRE.BaInstitutionID = {edtSucheInstitution.LookupID} OR DEBI.BaInstitutionID = {edtSucheInstitution.LookupID})
--- AND ABS(BUC.Betrag) = ABS({edtSucheBetrag})		-- Suche auch nach negativen Beträgen oder umgekehrt
--- AND BUC.BelegDatum &gt;= {edtSucheBuchungsDatumVon}
--- AND BUC.BelegDatum &lt;= {edtSucheBuchungsDatumBis}
--- AND IsNull(KOA.VerwPeriodeVon, '2999-12-31') &gt;= {edtSucheVerwPeriodeVon}
--- AND IsNull(KOA.VerwPeriodeBis, '1900-01-01') &lt;= {edtSucheVerwPeriodeBis}
--- AND ({chkSucheInklInaktiveW.Checked} = 1 OR LEI.DatumBis is null)
--- AND KOA.BgKostenartID = {edtSucheBgKostenartID.LookupID}
--- AND LEI.PscdVertragsgegenstandID = {edtSucheVertragNr}

---------------------------------
-- Select Netto-Belege
---------------------------------
SELECT DISTINCT
    KbBuchungID				= BUC.KbBuchungID,
    BelegNr					= BUC.BelegNr,
    FaFallID					= LEI.FaFallID,
    BaPersonID				= PRS.BaPersonID,
    NameVorname				= PRS.NameVorname,
    VertragNr					= LEI.PscdVertragsgegenstandID,
    Betrag						= CASE WHEN KDEB.KbKontoID IS NULL THEN -BUC.Betrag ELSE BUC.Betrag END,	-- Bei Kreditoren-Beträgen (=Auszahlungen) kehren wir das Vorzeichen der Netto-Buchung, damit Brutto und Netto übereinstimmen
    ValutaDatum				= BUC.ValutaDatum,
    KbBuchungStatusCode	= BUC.KbBuchungStatusCode,
    BgBudgetID				= BUD.BgBudgetID,
    Budget						= CASE WHEN BUD.Jahr IS NOT NULL THEN CONVERT(varchar, BUD.Jahr) + '-' + REPLICATE('0',2 - LEN(CAST(BUD.Monat AS VARCHAR))) + CONVERT(varchar, BUD.Monat) ELSE '' END,
    TransferDatum			= BUC.TransferDatum,
    BelegDatum				= BUC.BelegDatum,
    Buchungstext				= BUC.Text,
    PscdFehlermeldung		= BUC.PscdFehlermeldung,
				  BgPositionID				= MAX(BPO.BgPositionID)
FROM dbo.KbBuchung BUC
    INNER JOIN @BelegIDs						BEL ON BEL.KbBuchungID = BUC.KbBuchungID		-- Alle vorher selektierten Belege
    LEFT JOIN dbo.KbBuchungKostenart		KOA WITH(READUNCOMMITTED) ON KOA.KbBuchungID = BUC.KbBuchungID
    LEFT JOIN dbo.BgKostenart           BKA WITH(READUNCOMMITTED) ON BKA.BgKostenartID = KOA.BgKostenartID
    LEFT JOIN dbo.BgPosition					BPO WITH(READUNCOMMITTED) ON BPO.BgPositionID = KOA.BgPositionID
    LEFT JOIN dbo.BgBudget					BUD WITH(READUNCOMMITTED) ON BUD.BgBudgetID = BPO.BgBudgetID
    LEFT JOIN dbo.BgFinanzplan				FIP WITH(READUNCOMMITTED) ON FIP.BgFinanzplanID = BUD.BgFinanzplanID
    LEFT JOIN dbo.FaLeistung					LEI WITH(READUNCOMMITTED) ON LEI.FaLeistungID = FIP.FaLeistungID
				  LEFT JOIN dbo.FaFall						FAL WITH(READUNCOMMITTED) ON FAL.FaFallID = LEI.FaFallID
    LEFT JOIN dbo.vwPersonSimple					PRS WITH(READUNCOMMITTED) ON PRS.BaPersonID = FAL.BaPersonID
    LEFT JOIN dbo.KbKonto       			KDEB WITH (READUNCOMMITTED) ON KDEB.KbPeriodeID = BUC.KbPeriodeID and	-- Debitoren-Konto (nur gefüllt wenn die Buchung eine Debitoren-Buchung ist)
											    KDEB.KontoNr = BUC.SollKtoNr and
											    KDEB.KbKontoartCodes = 20
			GROUP BY BUC.KbBuchungID, BUC.BelegNr, LEI.FaFallID, PRS.BaPersonID, PRS.NameVorname, LEI.PscdVertragsgegenstandID, KDEB.KbKontoID, BUC.Betrag,
						BUC.ValutaDatum, BUC.KbBuchungStatusCode, BUD.BgBudgetID, BUD.JAHR, BUD.Monat, BUC.TransferDatum, BUC.BelegDatum, BUC.Text, BUC.PscdFehlermeldung

---------------------------------
-- Select Detail-Positionen
---------------------------------
SELECT DISTINCT
    KbBuchungID			= BUC.KbBuchungID,
    BaPersonID			= PRS.BaPersonID,
    NameVorname			= PRS.NameVorname,
    LA						= BKA.KontoNr,
    HV						= KOA.Hauptvorgang,
    TV						= KOA.Teilvorgang,
    Betrag				= CASE WHEN KDEB.KbKontoID IS NULL THEN -KOA.Betrag ELSE KOA.Betrag END,	-- Bei Kreditoren-Beträgen (=Auszahlungen) kehren wir das Vorzeichen der Netto-Buchung, damit Brutto und Netto übereinstimmen
    BuchungsText		= KOA.Buchungstext,
    VerwPeriodeVon		= KOA.VerwPeriodeVon,
    VerwPeriodeBis		= KOA.VerwPeriodeBis,
    KreditorDebitor	= CASE WHEN KRE.Kreditor IS NOT NULL THEN 'K: ' + KRE.Kreditor + ' (' + CONVERT(VARCHAR, ISNULL(KRE.BaInstitutionID, KRE.BaPersonID)) + ')' ELSE 'D:' + IsNull(DEBI.Name,DEBP.NameVorname) + ' (' + CONVERT(VARCHAR, IsNull(DEBI.BaInstitutionID, DEBP.BaPersonID)) + ')' END
FROM dbo.KbBuchung BUC
    INNER JOIN @BelegIDs						BEL ON BEL.KbBuchungID = BUC.KbBuchungID		-- Alle vorher selektierten Belege
    LEFT JOIN dbo.KbBuchungKostenart		KOA WITH(READUNCOMMITTED) ON KOA.KbBuchungID = BUC.KbBuchungID
    LEFT JOIN dbo.vwPersonSimple					PRS WITH(READUNCOMMITTED) ON PRS.BaPersonID = KOA.BaPersonID
    LEFT JOIN dbo.BgKostenart           BKA WITH(READUNCOMMITTED) ON BKA.BgKostenartID = KOA.BgKostenartID
    LEFT JOIN dbo.BgPosition				BPO WITH(READUNCOMMITTED) ON BPO.BgPositionID = KOA.BgPositionID
    LEFT JOIN dbo.BgBudget					BUD WITH(READUNCOMMITTED) ON BUD.BgBudgetID = BPO.BgBudgetID
    LEFT JOIN dbo.BgFinanzplan				FIP WITH(READUNCOMMITTED) ON FIP.BgFinanzplanID = BUD.BgFinanzplanID
    LEFT JOIN dbo.FaLeistung				LEI WITH(READUNCOMMITTED) ON LEI.FaLeistungID = FIP.FaLeistungID
    LEFT JOIN dbo.KbKonto       			KDEB WITH (READUNCOMMITTED) ON KDEB.KbPeriodeID = BUC.KbPeriodeID and	-- Debitoren-Konto (nur gefüllt wenn die Buchung eine Debitoren-Buchung ist)
											    KDEB.KontoNr = BUC.SollKtoNr and
											    KDEB.KbKontoartCodes = 20
    LEFT JOIN dbo.BgAuszahlungPerson		BAP WITH(READUNCOMMITTED) ON BAP.BgPositionID = BPO.BgPositionID AND
						    BAP.BgAuszahlungPersonID =
						    (
							SELECT TOP 1 BgAuszahlungPersonID
							FROM   dbo.BgAuszahlungPerson WITH(READUNCOMMITTED)
							WHERE  BgPositionID = BPO.BgPositionID
							ORDER BY
							    CASE WHEN BaPersonID IS NULL THEN 1
							    WHEN BaPersonID = BPO.BaPersonID THEN 2
							    WHEN BaPersonID = LEI.BaPersonID THEN 3
							    ELSE 4
							    END
						    )
    LEFT  JOIN dbo.vwKreditor				KRE  WITH(READUNCOMMITTED) ON KRE.BaZahlungswegID = BAP.BaZahlungswegID OR KRE.BaZahlungswegID = BUC.BaZahlungswegID
    LEFT  JOIN dbo.vwInstitution			DEBI WITH(READUNCOMMITTED) ON (DEBI.BaInstitutionID = BPO.BaInstitutionID OR DEBI.BaInstitutionID = BUC.Schuldner_BaInstitutionID) AND
						    BPO.BgKategorieCode = 1
    LEFT  JOIN dbo.vwPersonSimple					DEBP WITH(READUNCOMMITTED) ON DEBP.BaPersonID = BPO.DebitorBaPersonID OR DEBP.BaPersonID = BUC.Schuldner_BaPersonID

---------------------------------
-- Select Abhängige Brutto-Belege
---------------------------------
SELECT DISTINCT
    KbBuchungID				= BUC.KbBuchungID,
    KbBuchungBruttoID		= KBB.KbBuchungBruttoID,
    BelegNr					= KBB.BelegNr,
    Betrag					= KBB.Betrag,
    KbBuchungStatusCode	= KBB.KbBuchungStatusCode,
    BuchungsText			= KBB.Text
FROM dbo.KbBuchung BUC
    INNER JOIN @BelegIDs							BEL ON BEL.KbBuchungID = BUC.KbBuchungID		-- Alle vorher selektierten Belege
    INNER JOIN dbo.KbBuchungKostenart		KBK1 WITH (READUNCOMMITTED) ON KBK1.KbBuchungID      = BUC.KbBuchungID
    INNER JOIN dbo.KbBuchungKostenart		KBK2 WITH (READUNCOMMITTED) ON KBK2.BgPositionID      = KBK1.BgPositionID
    INNER JOIN dbo.KbBuchung					BUC2 WITH (READUNCOMMITTED) ON BUC2.KbBuchungID       = KBK2.KbBuchungID

    INNER JOIN dbo.KbBuchungKostenart		KBK WITH (READUNCOMMITTED) ON KBK.KbBuchungID      = BUC2.KbBuchungID
    INNER JOIN dbo.KbBuchungBruttoPerson	KBP WITH (READUNCOMMITTED) ON KBP.BgPositionID      = KBK.BgPositionID
    INNER JOIN dbo.KbBuchungBrutto			KBB WITH (READUNCOMMITTED) ON KBB.KbBuchungBruttoID       = KBP.KbBuchungBruttoID</value>
  </data>
  <data name="ctlGotoFallWNetto.BaPersonID" mimetype="application/x-microsoft.net.object.binary.base64">
    <value>
        AAEAAAD/////AQAAAAAAAAAEAQAAAB9TeXN0ZW0uVW5pdHlTZXJpYWxpemF0aW9uSG9sZGVyAwAAAARE
        YXRhCVVuaXR5VHlwZQxBc3NlbWJseU5hbWUBAAEICgIAAAAGAgAAAAAL
</value>
  </data>
</root>
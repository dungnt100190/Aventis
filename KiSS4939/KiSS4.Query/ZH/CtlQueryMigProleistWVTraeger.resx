<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="qryBaPerson.TrayLocation" type="System.Drawing.Point, System.Drawing">
    <value>115, 17</value>
  </data>
  <data name="qryQuery.SelectStatement" xml:space="preserve">
    <value>--DECLARE @OrgGruppeID int
--DECLARE @TeamID int
--- SET @OrgGruppeID = {edtSucheGruppe}
--- SET @TeamID = {edtSucheTeam}

SELECT WVT.Von, WVT.Bis, PRS.NameVorname, Code = WVT.WVText, BED = WVT.BEDCode, INF.*
FROM MigWVTraeger        WVT
  INNER JOIN vwPerson    PRS ON PRS.BaPersonID = WVT.BaPersonID
  LEFT  JOIN WhWVEinheit WVE ON WVT.BaPersonID = WVE.BaPersonID AND
                                WVT.wvtext = dbo.fnLOVShortText('BaWVCode',WVE.wvcode) collate database_default AND
                                WVT.Von &gt;= WVE.DatumVon AND
                                IsNull(WVT.Bis, dbo.fnDateSerial(9999,12,31)) &lt;= IsNull(WVE.DatumBis, dbo.fnDateSerial(9999,12,31)) AND
                                WVT.bedcode = WVE.bedcode AND
                                WVE.Ungueltig = 0
  LEFT  JOIN (SELECT BaPersonID$ = FAP.BaPersonID, [Fall-Nr] = dbo.ConcDistinct(FAP.FaFallID), [User] = dbo.ConcDistinct(USR.Logonname), [User$] = ',' + dbo.ConcDistinct(USR.Logonname) + ',', [OrgUnitID$] = ',' + dbo.ConcDistinct(USR.OrgUnitID) + ','
              FROM FaFallPerson FAP
                INNER JOIN FaFall FAL ON FAL.FaFallID = FAP.FaFallID AND FAL.DatumBis IS NULL
                INNER JOIN vwUser USR ON USR.UserID = FAL.UserID
              GROUP BY FAP.BaPersonID) INF ON INF.BaPersonID$ = WVT.BaPersonID
WHERE WVT.WVTraeger = 1 AND WVE.WhWVEinheitID IS NULL AND INF.BaPersonID$ IS NOT NULL 
--  AND ((@OrgGruppeID IS NULL AND @TeamID IS NULL) OR USR.OrgUnitID IN (SELECT OrgUnitID FROM dbo.fnOrgUnitsOfTeam(@OrgGruppeID,@TeamID)))
--- and INF.User$ LIKE '%,' + {edtUserID.EditValue} + ',%'
---  AND WVT.BaPersonID = {edtSucheKlient}
---  AND (','+{edtWVCode}+',') LIKE '%,' + WVT.WVText + ',%'
---  AND (','+{edtBED}+',') LIKE '%,' + CAST(WVT.BEDCode as nvarchar) + ',%'
ORDER BY WVT.BaPersonID, WVT.Von</value>
  </data>
  <data name="qryQuery.TrayLocation" type="System.Drawing.Point, System.Drawing">
    <value>17, 17</value>
  </data>
  <data name="qryBaPerson.SelectStatement" xml:space="preserve">
    <value>declare @Person table (BaPersonID int)

insert @Person
select distinct FAL.BaPersonID
from   FaFallPerson FAP
       inner join FaFall   FAL on FAL.FaFallID = FAP.FaFallID
where  FAP.BaPersonID = {0}

select Code = FAL.BaPersonID, 
       Text = 'Fall ' + convert(varchar, FAL.FaFallID) + ' ' + 
              PRS.NameVorname + 
              case when FAL.DatumBis is null 
              then ' (ab ' + convert(varchar,FAL.DatumVon,104) + ')'
              else ' (' + convert(varchar,FAL.DatumVon,104) + ' - ' + convert(varchar,FAL.DatumBis,104) + ')'
              end,
       JumpToWVEPfad = 'CtlWhWVEinheit'
from   @Person P
       inner join FaFall FAL on FAL.BaPersonID = P.BaPersonID
       inner join vwPerson PRS on PRS.BaPersonID = FAL.BaPersonID
order by case when FAL.BaPersonID = isnull({0},-1) then 0 else 1 end, -- Präferenz für eine bestimmte Person
         case when FAL.DatumBis is null then 0 else 1 end,            -- zuerst aktive Fälle, dann geschlossene
         FAL.DatumVon desc                                            -- die jüngsten Fälle zuerst</value>
  </data>
  <data name="xDocument.Properties.Buttons" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        iVBORw0KGgoAAAANSUhEUgAAAAwAAAAQCAYAAAAiYZ4HAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8
        YQUAAAAgY0hSTQAAeiYAAICEAAD6AAAAgOgAAHUwAADqYAAAOpgAABdwnLpRPAAAAF1JREFUOE9jZAAC
        Y2Pj/yAaGzh79iwjhjhIw///MzGwmJjYfxDGqSEtjeE/MgYpBhmEoYmQDSANKM7GpQHZmVg1oDsJxgdp
        pI4N2EIKJjbqJLIiDqSJEMaVovGKAwBnM3PWBP8PfwAAAABJRU5ErkJggg==
</value>
  </data>
</root>
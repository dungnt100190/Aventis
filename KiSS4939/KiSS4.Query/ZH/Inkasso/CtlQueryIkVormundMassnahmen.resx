<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <metadata name="qryQuery.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>17, 17</value>
  </metadata>
  <data name="qryQuery.SelectStatement" xml:space="preserve">
    <value>DECLARE @FilternAlbvKkbb int
SET @FilternAlbvKkbb = 0
---SET @FilternAlbvKkbb = {edtTyp}

DECLARE @UserID int
SET @UserID = 0
---SET @UserID = convert(int,{edtUser.LookupID})

-- Temporäre Tabelle für Resultat erstellen
DECLARE @tblTempRes TABLE (FaFallID int, FaLeistungID int, FT int, LT int, SB varchar(400), Name varchar(100), Vorname varchar(100), Massnahmedauer varchar(50), ZGB varchar(500), Mandatstyp varchar(50), Typ varchar(50), KlientensystemID int)


INSERT @tblTempRes (FaFallID, FaLeistungID, FT, LT, SB, PER.Name, Vorname, Massnahmedauer, ZGB, Mandatstyp, Typ, KlientensystemID)
SELECT
  LEI.FaFallID,
  LEI.FaLeistungID,
  FT                = CASE WHEN FAL.BaPersonID = PER.BaPersonID THEN 1 ELSE 0 END, 
  LT                = CASE WHEN LEI.BaPersonID = PER.BaPersonID THEN 1 ELSE 0 END,
  SB                = SB.LogonName,
  PER.Name,
  PER.Vorname,
  [Massnahmedauer]  = convert(varchar, MAS.DatumVon,104) + ' - ' + IsNull(convert(varchar, MAS.DatumBis,104), ''), 
  [ZGB]             = MAS.ZGB,
  [Mandatstyp]      = MAS.Mandatstyp,
  [Typ]             = CASE L.FaProzessCode
                        WHEN 405 THEN 'ALBV / ALV'
                        WHEN 406 THEN 'ÜbH'
                        WHEN 407 THEN 'KKBB'
                      END,
  KlientensystemID$ = FAL.BaPersonID

FROM FaLeistung LEI
  left join FaFall FAL on FAL.FaFallID = LEI.FaFallID
  left join FaLeistung L on LEI.FaFallID = L.FaFallID
  left join BaPerson PER on PER.BaPersonID = LEI.BaPersonID
  left join vwUser SB on SB.UserID = L.UserID
  left join IkRechtstitel RTI on RTI.FaLeistungID = L.FaLeistungID
  left join IkGlaeubiger GLA on GLA.IkRechtstitelID = RTI.IkRechtstitelID
  left join VmMassnahme MAS on MAS.FaLeistungID = LEI.FaLeistungID
WHERE LEI.FaProzessCode = 210
  and (@FilternAlbvKkbb != 1 or L.FaProzessCode in (405,406)) -- Wenn edtTyp = ALBV / ALV / UebH
  and (@FilternAlbvKkbb != 2 or L.FaProzessCode in (407))     -- Wenn edtTyp = KKBB
  and LEI.BaPersonID = GLA.BaPersonID
---  and {edtDatumVon} &lt;= MAS.DatumVon
---  and MAS.DatumVon &lt;= {edtDatumBis}
  and (@UserID = 0 or L.UserID = @UserID)
  and (@UserID != 0 or SB.OrgUnitID in (select OrgUnitID from XOrgUnit where UserProfileCode = 7))
--ORDER BY FT DESC, LT DESC, PER.Name, PER.Vorname


IF @FilternAlbvKkbb = 0
BEGIN
	INSERT @tblTempRes (FaFallID, FaLeistungID, FT, LT, Name, Vorname, Massnahmedauer, ZGB, Mandatstyp, Typ, KlientensystemID)
	SELECT
	  LEI.FaFallID,
	  LEI.FaLeistungID,
	  FT                = CASE WHEN FAL.BaPersonID = PER.BaPersonID THEN 1 ELSE 0 END, 
	  LT                = CASE WHEN LEI.BaPersonID = PER.BaPersonID THEN 1 ELSE 0 END,
	  PER.Name,
	  PER.Vorname,
	  Massnahmedauer = convert(varchar, MAS.DatumVon,104) + ' - ' + IsNull(convert(varchar, MAS.DatumBis,104), ''), 
	  MAS.ZGB,
	  MAS.Mandatstyp,
	  Typ             = '',
	  KlientensystemID$ = FAL.BaPersonID

	FROM FaLeistung LEI
	  left join FaFall FAL on FAL.FaFallID = LEI.FaFallID
	  left join BaPerson PER on PER.BaPersonID = LEI.BaPersonID
	  left join VmMassnahme MAS on MAS.FaLeistungID = LEI.FaLeistungID
	WHERE LEI.FaProzessCode = 210
	---  and {edtDatumVon} &lt;= MAS.DatumVon
	---  and MAS.DatumVon &lt;= {edtDatumBis}
	  and (@UserID = 0 or LEI.SachbearbeiterID = @UserID)
	  and LEI.FaLeistungID not in (select FaLeistungID from @tblTempRes)
	--ORDER BY FT DESC, LT DESC, PER.Name, PER.Vorname
END

select 
  [Fall-Nr.]        = FaFallID,
  [Leistung-Nr.]    = FaLeistungID,
  FT                = FT, 
  LT                = LT,
  SB                = SB,
  [Mandant Name]    = Name,
  [Mandant Vorname] = Vorname,
  [Massnahmedauer]  = Massnahmedauer, 
  [ZGB]             = ZGB,
  [Behördliche Massnahme] = Mandatstyp,
  [Typ]             = Typ,
  KlientensystemID$ = KlientensystemID
from @tblTempRes RES
--ORDER BY FT DESC, LT DESC, PER.Name, PER.Vorname
ORDER BY FaFallID

</value>
  </data>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="edtDatumBis.Properties.Buttons" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        iVBORw0KGgoAAAANSUhEUgAAAAwAAAAQCAYAAAAiYZ4HAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8
        YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAABRSURBVDhPY2AAAmNj4//EYJBaMAApRqbhErjkiDEdZiiK
        Dcgmo7NxamhoYAA7DwSQ2Vg1gBTAFKHT1NGA7AyibBhuGoiKB5Jimpj0hM9AnHIA7aiPJlUTWpwAAAAA
        SUVORK5CYII=
</value>
  </data>
  <data name="edtDatumVon.Properties.Buttons" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        iVBORw0KGgoAAAANSUhEUgAAAAwAAAAQCAYAAAAiYZ4HAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8
        YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAABRSURBVDhPY2AAAmNj4//EYJBaMAApRqbhErjkiDEdZiiK
        Dcgmo7NxamhoYAA7DwSQ2Vg1gBTAFKHT1NGA7AyibBhuGoiKB5Jimpj0hM9AnHIA7aiPJlUTWpwAAAAA
        SUVORK5CYII=
</value>
  </data>
</root>
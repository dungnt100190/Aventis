<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="qryQuery.SelectStatement" xml:space="preserve">
    <value>select Modul          = case 
                        when BUC.BgBudgetID is not null then 'W'
                        when BUC.IkPositionID is not null then 'A'
                        end,
       Transferdatum  = BUC.TransferDatum,
       Zeit           = convert(varchar,BUC.TransferDatum,108),
       Valuta         = BUC.ValutaDatum,
       BelegNr        = BUC.BelegNr,
       Klient         = PRS.NameVorname,
       Betrag         = BUC.Betrag,
       Auszahlungsart = AUS.ShortText,

       KD             = case when KTS.KbKontoID is not null then 'D' else 'K' end,
       Kreditor        = case when KTS.KbKontoID is not null
                           then -- Debitor
                                IsNull(DEBP.NameVorname + CHAR(13) + CHAR(10) + DEBP.WohnsitzMehrzeilig,
                                       DEBI.Name + CHAR(13) + CHAR(10) + DEBI.AdresseMehrzeilig)
                           else -- Kreditor
                                IsNull(BUC.BeguenstigtName + CHAR(13) + CHAR(10),'') +
                                IsNull(BUC.BeguenstigtName2 + CHAR(13) + CHAR(10),'') +
                                IsNull(BUC.BeguenstigtPostfach + char(13) + char(10), '') +
                                IsNull(BUC.BeguenstigtStrasse + IsNull(' ' + BUC.BeguenstigtHausNr, '') + char(13) + char(10), '') +
                                IsNull(IsNull(BUC.BeguenstigtPLZ + ' ', '') + IsNull(BUC.BeguenstigtOrt, '') + char(13) + char(10), '') +
                                '** ' + EIZ.ShortText + ' **' + CHAR(13) + CHAR(10) + 
                                IsNull(IsNull(dbo.fnTnToPc(BUC.PCKontoNr),'') + ISNULL(', ' + BUC.BankName,'') + CHAR(13) + CHAR(10),'') + 
                                IsNull(BUC.BankKontoNr + CHAR(13) + CHAR(10), '') +
                                IsNull(BUC.ReferenzNummer,'')
                           end,

       Zahlinfo       = case when BUC.KbAuszahlungsArtCode = 101
                        then isnull(EIZ.ShortText,'') +                                      
                             isnull(', ' + dbo.fnTnToPc(ISNULL(BUC.PCKontoNr,BNK.PCKontoNr)),'') + 
                             isnull(', ' + BNK.Name,'') + 
                             isnull(', ' + BUC.BankKontoNr, '') +
                             isnull(', ' + BUC.IBAN,'')
                        else ''
                        end + 
                        case when BUC.KbAuszahlungsArtCode = 103
                        then isnull(BUC.MitteilungZeile1,'') + 
                             isnull(', ' + BUC.MitteilungZeile2,'') +
                             isnull(', ' + BUC.MitteilungZeile3,'')
                        else '' 
                        end +
                        case when BUC.KbAuszahlungsArtCode = 101 and ZAH.EinzahlungsscheinCode = 6
                        then isnull(', ' + BUC.BeguenstigtName,'') + 
                             isnull(', ' + BUC.BeguenstigtName2,'') +
                             isnull(', ' + BUC.BeguenstigtPLZ + ' ' + BUC.BeguenstigtOrt,'')
                        else '' 
                        end,
       BaPersonID$    = FAL.BaPersonID
from   KbBuchung  BUC 
       left  join BgBudget      BDG on BDG.BgBudgetID = BUC.BgBudgetID
       left  join BgFinanzplan  FPL on FPL.BgFinanzplanID = BDG.BgFinanzplanID
       left  join FaLeistung    LEI on LEI.FaLeistungID = isnull(FPL.FaLeistungID,BUC.FaLeistungID)
       left  join FaFall        FAL on FAL.FaFallID = LEI.FaFallID 
       left  join vwPerson      PRS on PRS.BaPersonID = LEI.BaPersonID 

       left  join BaBank        BNK on BNK.BaBankID = BUC.BaBankID
       left  join BaZahlungsweg ZAH on ZAH.BaZahlungswegID = BUC.BaZahlungswegID
       left  join XLOVCode      EIZ on EIZ.LOVName = 'BgEinzahlungsschein' AND
                                       EIZ.Code = ZAH.EinzahlungsscheinCode
       left  join XLOVCode      AUS on AUS.LOVName = 'KbAuszahlungsArt' AND
                                       AUS.Code = BUC.KbAuszahlungsArtCode
       left  join KbKonto       KTS  on KTS.KbPeriodeID = BUC.KbPeriodeID and
                                        KTS.KontoNr = BUC.SollKtoNr and
                                        KTS.KbKontoartCodes = 20
       left  join KbKonto       KTH  on KTH.KbPeriodeID = BUC.KbPeriodeID and
                                        KTH.KontoNr = BUC.HabenKtoNr and
                                        KTH.KbKontoartCodes = 30
       left  join vwPerson      DEBP on DEBP.BaPersonID = BUC.Schuldner_BaPersonID
       left  join vwInstitution DEBI on DEBI.BaInstitutionID = BUC.Schuldner_BaInstitutionID

where  BUC.TransferDatum is not null
--- and BUC.TransferDatum &gt;= {edtSucheTransferDatumVon}
--- and BUC.TransferDatum &lt;= dateadd(ms,-10,dateadd(d,1,{edtSucheTransferDatumBis}))  
--- and (({edtModul} = 3 and BUC.BgBudgetID is not null) or ({edtModul} = 4 and BUC.IkPositionID is not null))
--- and (({edtSucheZahlungForderung} = 1 and KTH.KbKontoID is not null) or  -- Zahlungen/Kreditoren
---      ({edtSucheZahlungForderung} = 2 and KTS.KbKontoID is not null))  -- Forderungen/Debitoren
--- and BUC.KbAuszahlungsArtCode = {edtSucheAuszahlungsart}  

union all

select Modul          = 'W',
       Transferdatum  = BUC.TransferDatum,
       Zeit           = convert(varchar,BUC.TransferDatum,108),
       Valuta         = BUC.ValutaDatum,
       BelegNr        = BUC.BelegNr,
       Klient         = PRS.NameVorname,
       Betrag         = BUC.Betrag,
       Auszahlungsart = NULL,

       KD             = 'D',
       Kreditor        = (select top 1 IsNull(DEBP.NameVorname     + CHAR(13) + CHAR(10) + DEBP.WohnsitzMehrzeilig,
                                              DEBI.Name + CHAR(13) + CHAR(10) + DEBI.AdresseMehrzeilig)
                          from KbBuchungBruttoPerson DET
                            left join vwPerson       DEBP on DEBP.BaPersonID      = DET.Schuldner_BaPersonID
                            left join vwInstitution  DEBI on DEBI.BaInstitutionID = DET.Schuldner_BaInstitutionID
                          where KbBuchungBruttoID = BUC.KbBuchungBruttoID),
       Zahlinfo       = NULL,
       BaPersonID$    = FAL.BaPersonID
from   KbBuchungBrutto  BUC
       --inner join (select top 1 Schuldner_BaPersonID, Schuldner_BaInstitutionID from KbBuchungBruttoPerson where KbBuchungBruttoID = BUC.KbBuchungBruttoID) DET ON 1=1
       left  join BgBudget      BDG on BDG.BgBudgetID = BUC.BgBudgetID
       left  join BgFinanzplan  FPL on FPL.BgFinanzplanID = BDG.BgFinanzplanID
       left  join FaLeistung    LEI on LEI.FaLeistungID = FPL.FaLeistungID
       left  join FaFall        FAL on FAL.FaFallID = LEI.FaFallID 
       left  join vwPerson      PRS on PRS.BaPersonID = LEI.BaPersonID
where  BUC.TransferDatum is not null
--- and BUC.Betrag &gt; 0
--- and BUC.TransferDatum &gt;= {edtSucheTransferDatumVon}
--- and BUC.TransferDatum &lt;= dateadd(ms,-10,dateadd(d,1,{edtSucheTransferDatumBis}))  
--- and ({edtSucheZahlungForderung} = 2 )  -- Forderungen/Debitoren
--- and ({edtModul} = 3)


order by BUC.TransferDatum, BUC.ValutaDatum
--order by convert(datetime,convert(varchar,BUC.TransferDatum,104),104), BUC.ValutaDatum</value>
  </data>
  <assembly alias="System.Drawing" name="System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="qryQuery.TrayLocation" type="System.Drawing.Point, System.Drawing">
    <value>17, 17</value>
  </data>
  <data name="xDocument.Properties.Buttons" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        iVBORw0KGgoAAAANSUhEUgAAAAwAAAAQCAYAAAAiYZ4HAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8
        YQUAAAAgY0hSTQAAeiYAAICEAAD6AAAAgOgAAHUwAADqYAAAOpgAABdwnLpRPAAAAF1JREFUOE9jZAAC
        Y2Pj/yAaGzh79iwjhjhIw///MzGwmJjYfxDGqSEtjeE/MgYpBhmEoYmQDSANKM7GpQHZmVg1oDsJxgdp
        pI4N2EIKJjbqJLIiDqSJEMaVovGKAwBnM3PWBP8PfwAAAABJRU5ErkJggg==
</value>
  </data>
</root>
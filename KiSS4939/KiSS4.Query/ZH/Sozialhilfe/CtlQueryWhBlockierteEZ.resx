<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="qryQuery.SelectStatement" xml:space="preserve">
    <value>DECLARE @BgPosition TABLE (BgPositionID int)

INSERT @BgPosition
SELECT DISTINCT BPO.BgPositionID
FROM   BgPosition BPO
       INNER JOIN dbo.BgPosition DET WITH (READUNCOMMITTED) ON DET.BgPositionID_Parent = BPO.BgPositionID AND
                                                               DET.BgKategorieCode = 101
WHERE  BPO.BgBewilligungStatusCode in (2,3) AND
       BPO.BgKategorieCode = 100 AND
       BPO.BgPositionID_Parent IS NULL

SELECT 
  [Fall-Nr.]              = FAL.FaFallID,
  [Klient (LT)]           = PRS.NameVorname,
  Buchungstext            = BPO.Buchungstext, 
  Total                   = SUM(DET.Betrag),
  [Anz.ZL]                = SUM(CASE WHEN DET.BgKategorieCode = 100 THEN 1 ELSE 0 END),
  [Total ZL]              = SUM(CASE WHEN DET.BgKategorieCode = 100 THEN DET.Betrag ELSE 0 END),
  [Anz.EZ]                = SUM(CASE WHEN DET.BgKategorieCode = 101 THEN 1 ELSE 0 END),
  [Total EZ]              = SUM(CASE WHEN DET.BgKategorieCode = 101 THEN DET.Betrag ELSE 0 END),
  [Bew. Status]           = STA.Text,
  StatusDatum             = BBW.Datum,
  Absender                = ABS.LastName + IsNull(', ' + ABS.FirstName, ''),
  Empfaenger              = EMP.LastName + IsNull(', ' + EMP.FirstName, ''),
  BaPersonID$             = PRS.BaPersonID, 
  BgBudgetID$             = BDG.BgBudgetID, 
  BgFinanzplanID$         = FPL.BgFinanzplanID, 
  BgPositionID$           = BPO.BgPositionID, 
  FallBaPersonID$         = FAL.BaPersonID
FROM  @BgPosition TMP
  INNER JOIN dbo.BgPosition      BPO WITH (READUNCOMMITTED) ON BPO.BgPositionID = TMP.BgPositionID
  LEFT  JOIN dbo.BgBudget        BDG WITH (READUNCOMMITTED) ON BDG.BgBudgetID = BPO.BgBudgetID
  LEFT  JOIN dbo.BgFinanzplan    FPL WITH (READUNCOMMITTED) ON FPL.BgFinanzPlanID = BDG.BgFinanzPlanID
  LEFT  JOIN dbo.FaLeistung      LEI WITH (READUNCOMMITTED) ON LEI.FaLeistungID = FPL.FaLeistungID
  LEFT  JOIN dbo.FaFall          FAL WITH (READUNCOMMITTED) ON FAL.FaFallID = LEI.FaFallID
  LEFT  JOIN dbo.vwPerson        PRS WITH (READUNCOMMITTED) ON PRS.BaPersonID = LEI.BaPersonID
  INNER JOIN dbo.BgPosition      DET WITH (READUNCOMMITTED) ON DET.BgPositionID_Parent = BPO.BgPositionID OR
                                                               DET.BgPositionID = BPO.BgPositionID
  LEFT  JOIN dbo.BgBewilligung   BBW WITH (READUNCOMMITTED) ON BBW.BgPositionID = BPO.BgPositionID AND
                                                               BBW.BgBewilligungID = (SELECT TOP 1 BgBewilligungID 
                                                                                      FROM   BgBewilligung
                                                                                      WHERE  BgPositionID = BPO.BgPositionID AND
                                                                                             BgBewilligungCode in (1,3) -- angefragt/abgelehnt
                                                                                      ORDER BY Datum DESC)
  INNER JOIN dbo.XUser           ABS WITH (READUNCOMMITTED) ON ABS.UserID = BBW.UserID
  LEFT  JOIN dbo.XUser           EMP WITH (READUNCOMMITTED) ON EMP.UserID = BBW.UserID_An
  LEFT  JOIN dbo.XLOVCode        STA WITH (READUNCOMMITTED) ON STA.LOVName = 'BgBewilligungStatus' AND
                                                               STA.Code = BPO.BgBewilligungStatusCode

GROUP BY PRS.NameVorname,BPO.Buchungstext,BBW.Datum,STA.Text,
         ABS.LastName + IsNull(', ' + ABS.FirstName, ''),
         EMP.LastName + IsNull(', ' + EMP.FirstName, ''),
         PRS.BaPersonID,BDG.BgBudgetID,FPL.BgFinanzplanID,
         FAL.BaPersonID,BPO.BgPositionID, FAL.FaFallID</value>
  </data>
  <assembly alias="System.Drawing" name="System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="qryQuery.TrayLocation" type="System.Drawing.Point, System.Drawing">
    <value>17, 17</value>
  </data>
  <data name="xDocument.Properties.Buttons" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        iVBORw0KGgoAAAANSUhEUgAAAAwAAAAQCAYAAAAiYZ4HAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8
        YQUAAAAgY0hSTQAAeiYAAICEAAD6AAAAgOgAAHUwAADqYAAAOpgAABdwnLpRPAAAAF1JREFUOE9jZAAC
        Y2Pj/yAaGzh79iwjhjhIw///MzGwmJjYfxDGqSEtjeE/MgYpBhmEoYmQDSANKM7GpQHZmVg1oDsJxgdp
        pI4N2EIKJjbqJLIiDqSJEMaVovGKAwBnM3PWBP8PfwAAAABJRU5ErkJggg==
</value>
  </data>
</root>
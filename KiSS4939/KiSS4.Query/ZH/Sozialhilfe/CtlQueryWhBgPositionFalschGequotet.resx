<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="qryQuery.SelectStatement" xml:space="preserve">
    <value>set transaction isolation level read uncommitted
-- Liste der angewählten Kategorien
DECLARE @BgKategorieCodeListe varchar(500)
SET @BgKategorieCodeListe =  '' 
--- SET @BgKategorieCodeListe = {edtSucheKgKategorieCodes} -- Wert wie er von KiSS übergeben wird
SET @BgKategorieCodeListe = @BgKategorieCodeListe + ','

-- Liste der Kategorien in temporäre Tabelle abfüllen
DECLARE @tblKgKategorieCode TABLE (BgKategorieCode int)
DECLARE @Pos int, @OldPos int
SELECT @Pos = 1, @OldPos = 1

WHILE	@Pos &lt; len(@BgKategorieCodeListe) BEGIN
  SET @Pos = CharIndex(',', @BgKategorieCodeListe, @OldPos)
  INSERT INTO @tblKgKategorieCode VALUES (SubString(@BgKategorieCodeListe, @OldPos, @Pos - @OldPos))
  SET @OldPos = @Pos + 1
END

-- alle relevanten Budgetpositionen in Mehrpersonenhaushalten
declare @BgPosition table (BgPositionID int,UECount int)

insert @BgPosition
select BPO.BgPositionID,
       UECount = count(*)
from   @tblKgKategorieCode KAT
       inner join dbo.BgPosition            BPO  ON BPO.BgKategorieCode = KAT.BgKategorieCode
       inner join dbo.BgBudget              BDG  ON BDG.BgBudgetID = BPO.BgBudgetID
       inner join dbo.BgFinanzplan          FPL  ON FPL.BgFinanzplanID = BDG.BgFinanzplanID
       inner join dbo.BgFinanzplan_BaPerson FPP  ON FPP.BgFinanzplanID = BDG.BgFinanzplanID and
                                                    FPP.IstUnterstuetzt = 1
where BDG.Masterbudget = 0 and
      BDG.BgBewilligungStatusCode in (5,9) and -- grüne/rote Budgets
      BPO.Betrag - BPO.Reduktion - BPO.Abzug &lt;&gt; 0 and
      not (BPO.BgKategorieCode in (2,100) and BPO.BgSpezKontoID is not null) -- keine Ausgaben/ZL an Ausgabekonto
group by BPO.BgPositionID
having count(*) &gt; 1

select SZ           = USR.Sozialzentrum,
       OE           = USR.OrgUnit,
       MA           = USR.NameVorname,
       FallNr       = FAL.FaFallID,
       Klient       = PRS.Name + isnull(', ' + PRS.Vorname,''),
       Budget       = case when BDG.Masterbudget = 1 
                      then 'Masterbudget'
                      else dbo.fnXKurzMonat(BDG.Monat) + ' ' + convert(varchar,BDG.Jahr)
                      end,
       Kategorie    = KAT.Text,
       Betrifft     = BETP.Name + isnull(', ' + BETP.Vorname,''),
       LA           = BKA.KontoNr,
       Quoting      = BKA.Quoting,
       WV           = BKA.Weiterverrechenbar,
       UE           = TMP.UECount,
       [#Belege]    = case when max(KbBuchungBruttoPersonID) is null then 0 else count(*) end,
       Text         = COALESCE(BPO.Buchungstext, BPA.Name, SSK.NameSpezkonto),
       Betrag       = BPO.Betrag - BPO.Reduktion - BPO.Abzug,
       Brutto       = BUC.KbBuchungStatusCode,
       Netto        = dbo.fnBgPositionBuchungStatus(BPO.BgPositionID),
       [Verw.von]   = min(BUP.VerwPeriodeVon),
       [Verw.bis]   = max(BUP.VerwPeriodeBis),
       [WV-Code]    = WVS.ShortText,
       [WV von]     = WVC.DatumVon,
       [WV bis]     = WVC.DatumBis,
       BelegNr      = BUC.KbBuchungBruttoID,
       [PSCD Beleg] = BUC.BelegNr,
       PSCDTransfer = BUC.TransferDatum,
       Erstellt     = isnull(BPO.ErstelltDatum,BUC.ErfassungsDatum),
       durch        = ERS.LogonName,
       Mutiert      = BPO.MutiertDatum,
       durch        = MUT.LogonName,
       FallBaPersonID$    = FAL.BaPersonID,
       BgFinanzplanID$    = FPL.BgFinanzplanID,
       BgBudgetID$        = BDG.BgBudgetID,
       BgPositionID$      = BPO.BgPositionID,
       KbBuchungBruttoID$ = BUC.KbBuchungBruttoID
from   @BgPosition TMP
       inner join dbo.BgPosition            BPO  ON BPO.BgPositionID = TMP.BgPositionID
       left  join dbo.BgBudget              BDG  ON BDG.BgBudgetID = BPO.BgBudgetID
       left  join dbo.BgFinanzplan          FPL  ON FPL.BgFinanzplanID = BDG.BgFinanzplanID
       left  join dbo.FaLeistung            LEI  ON LEI.FaLeistungID = FPL.FaLeistungID
       left  join dbo.FaFall                FAL  ON FAL.FaFallID = LEI.FaFallID
       left  join dbo.BgSpezkonto           SSK  ON SSK.BgSpezkontoID = BPO.BgSpezkontoID
       left  join dbo.BgPositionsart        BPA  ON BPA.BgPositionsartID = COALESCE(BPO.BgPositionsartID,SSK.BgPositionsartID)
       left  join dbo.BgPositionsart        GBL  ON GBL.BgPositionsartID = FPL.WhGrundbedarfTypCode
       left  join dbo.BgKostenart           BKA  ON BKA.BgKostenartID = COALESCE(BPA.BgKostenartID, SSK.BgKostenartID, GBL.BgKostenartID)
       LEFT  JOIN dbo.vwUser                USR  ON USR.UserID = LEI.UserID
       LEFT  JOIN dbo.XUser                 ERS  ON ERS.UserID = BPO.ErstelltUserID
       LEFT  JOIN dbo.XUser                 MUT  ON MUT.UserID = BPO.MutiertUserID
       left  join dbo.BaPerson              PRS  ON PRS.BaPersonID = LEI.BaPersonID
       LEFT  JOIN dbo.BaPerson              BETP ON BETP.BaPersonID = BPO.BaPersonID
       LEFT  join dbo.KbBuchungBruttoPerson BUP  on BUP.BgPositionID = BPO.BgPositionID
       LEFT  join dbo.KbBuchungBrutto       BUC  on BUC.KbBuchungBruttoID = BUP.KbBuchungBruttoID
       LEFT  JOIN dbo.KbBuchungKostenart    BUK  ON BUK.BgPositionID = BPO.BgPositionID and
                                                    BUK.KbBuchungKostenartID =
                                                      (select top 1 KbBuchungKostenartID
                                                       from   KbBuchungKostenart
                                                       where  BgPositionID = BPO.BgPositionID)
       LEFT  JOIN dbo.BaWVCode              WVC  on WVC.BaPersonID = isNull(BETP.BaPersonID,LEI.BaPersonID) and
                                                    BUP.VerwPeriodeVon between isNull(WVC.DatumVon,BUP.VerwPeriodeVon) and isNull(WVC.DatumBis,BUP.VerwPeriodeVon) and
                                                    WVC.BaWVStatusCode = 1 -- richtig
       LEFT  JOIN dbo.XLOVCode              STA  ON STA.LOVName = 'KbBuchungsStatus' AND STA.Code = BUC.KbBuchungStatusCode
       LEFT  JOIN dbo.XLOVCode              KAT  ON KAT.LOVName = 'BgKategorie' AND KAT.Code = BPO.BgKategorieCode
       LEFT  JOIN dbo.XLOVCode              WVS  ON WVS.LOVName = 'BaWVCode' AND WVS.Code = WVC.WVCode
--- where ({edt2009only} = 0 or year(isnull(BPO.ErstelltDatum,BUC.ErfassungsDatum)) = 2009)
       
group by BPO.BgPositionID,TMP.UECount,USR.Sozialzentrum,USR.OrgUnit,USR.NameVorname,FAL.FaFallID,
         PRS.Name, PRS.Vorname,
         BDG.Masterbudget,
         BDG.Monat,BDG.Jahr,BETP.Name, BETP.Vorname,BKA.KontoNr,BKA.Quoting,BKA.Weiterverrechenbar,
         BPO.Buchungstext,BPO.Betrag,BPO.Reduktion,BPO.Abzug,BUC.TransferDatum,
          BPA.Name, SSK.NameSpezkonto,
         BPO.ErstelltDatum,BPO.MutiertDatum,BUC.ErfassungsDatum,
         ERS.LogonName,MUT.LogonName,
         FAL.BaPersonID,FPL.BgFinanzplanID,BDG.BgBudgetID,BPO.BgPositionID,KAT.Text,
         BUC.KbBuchungStatusCode,BUC.KbBuchungBruttoID,BUK.KbBuchungKostenartID,BUC.BelegNr,
         WVS.ShortText,WVC.DatumVon,WVC.DatumBis

--- having ({edtSucheQuotingFalsch} = 1 and ((BKA.Quoting = 1 and TMP.UECount &lt;&gt; Count(*)) or (BKA.Quoting = 0 and Count(*) &gt; 1)) and max(KbBuchungBruttoPersonID) is not null) or
---        ({edtSucheOhneBrutto} = 1 and max(KbBuchungBruttoPersonID) is null and BUK.KbBuchungKostenartID is not null)

order by LA,SZ,OE,MA,Klient</value>
  </data>
  <assembly alias="System.Drawing" name="System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="qryQuery.TrayLocation" type="System.Drawing.Point, System.Drawing">
    <value>17, 17</value>
  </data>
  <data name="xDocument.Properties.Buttons" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        iVBORw0KGgoAAAANSUhEUgAAAAwAAAAQCAYAAAAiYZ4HAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8
        YQUAAAAgY0hSTQAAeiYAAICEAAD6AAAAgOgAAHUwAADqYAAAOpgAABdwnLpRPAAAAF1JREFUOE9jZAAC
        Y2Pj/yAaGzh79iwjhjhIw///MzGwmJjYfxDGqSEtjeE/MgYpBhmEoYmQDSANKM7GpQHZmVg1oDsJxgdp
        pI4N2EIKJjbqJLIiDqSJEMaVovGKAwBnM3PWBP8PfwAAAABJRU5ErkJggg==
</value>
  </data>
</root>
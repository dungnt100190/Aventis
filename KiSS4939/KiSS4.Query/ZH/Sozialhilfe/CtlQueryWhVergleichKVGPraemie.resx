<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <metadata name="qryQuery.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>17, 17</value>
  </metadata>
  <data name="qryQuery.SelectStatement" xml:space="preserve">
    <value>DECLARE @MonatsbudgetVon DATETIME;
DECLARE @MonatsbudgetBis DATETIME;
--- SET @MonatsbudgetVon = dbo.fnDateOf(dbo.fnFirstDayOf({edtDatumVon.EditValue}));
--- SET @MonatsbudgetBis = dbo.fnDateOf(dbo.fnLastDayOf({edtDatumBis.EditValue}));

DECLARE @OrgGruppeID INT;
--- SET @OrgGruppeID = {ctlOrgUnitTeamUser.SucheGruppe};

DECLARE @TeamID INT;
--- SET @TeamID = {ctlOrgUnitTeamUser.SucheTeam};

SELECT FaFallID        = FAL.FaFallID,
       KlientIn        = PER.NameVorname,
       Budget          = CONVERT(VARCHAR(4), BUD.Jahr) + '.' + RIGHT('00' + CONVERT(VARCHAR(2), BUD.Monat), 2),
       KvgModulB       = ISNULL(KVG.Praemie, 0) - ISNULL(KVG.KVGPraemienVerbillBetrag, 0),
       KvgMonatsbudget = ISNULL(SUM(POS.BetragBudget), 0),
       Differenz       = ISNULL(KVG.Praemie, 0) - ISNULL(KVG.KVGPraemienVerbillBetrag, 0) - ISNULL(SUM(POS.BetragBudget), 0),
       AnzPos          = COUNT(KBP.BgPositionID),
       Kreditor        = dbo.ConcDistinct(KRE.Kreditor),
       M               = CASE WHEN SUM(CONVERT(INT, BUD.MasterBudget)) = 0 
                                AND SUM(POS.BgPositionID_CopyOf) IS NOT NULL 
                                AND COUNT(KBP.BgPositionID) = 1
                              THEN 'M' 
                         END,
       VerwPeriodeVon  = MIN(KBP.VerwPeriodeVon),
       VerwPeriodeBis  = MAX(KBP.VerwPeriodeBis),
       SA              = MIN(USR.NameVorname),
       Team            = MIN(USR.OrgUnitShort),
       SZ              = MIN(USR.SozialzentrumKurz),
       Hinweis         = CASE WHEN MIN(KBP.VerwPeriodeVon) &lt;&gt; MAX(KBP.VerwPeriodeVon)
                                OR MIN(KBP.VerwPeriodeBis) &lt;&gt; MAX(KBP.VerwPeriodeBis)
                              THEN 'Unterschiedliche Verwendungsperioden'
                              ELSE NULL
                         END,
       --
       BaPersonID      = FAL.BaPersonID,
       BgFinanzplanID  = BUD.BgFinanzplanID,
       BgBudgetID      = BUD.BgBudgetID,
       BgPositionID    = MIN(KBP.BgPositionID)
FROM dbo.vwBgPosition                  POS WITH (READUNCOMMITTED)
  INNER JOIN dbo.KbBuchungBruttoPerson KBP WITH (READUNCOMMITTED) ON KBP.BgPositionID = POS.BgPositionID
  INNER JOIN dbo.KbBuchungBrutto       KBB WITH (READUNCOMMITTED) ON KBB.KbBuchungBruttoID = KBP.KbBuchungBruttoID
  LEFT  JOIN dbo.BgBudget              BUD WITH (READUNCOMMITTED) ON BUD.BgBudgetID = KBB.BgBudgetID
  INNER JOIN dbo.FaLeistung            LEI WITH (READUNCOMMITTED) ON LEI.FaLeistungID = KBB.FaLeistungID AND LEI.ModulID = 3 -- W
  LEFT  JOIN dbo.BgAuszahlungPerson    BAP WITH (READUNCOMMITTED) ON BAP.BgPositionID = POS.BgPositionID 
                                                                 AND BAP.BgAuszahlungPersonID = (SELECT TOP 1 BgAuszahlungPersonID
                                                                                                 FROM dbo.BgAuszahlungPerson WITH(READUNCOMMITTED)
                                                                                                 WHERE BgPositionID = POS.BgPositionID
                                                                                                 ORDER BY
                                                                                                    CASE WHEN BaPersonID IS NULL THEN 1
                                                                                                         WHEN BaPersonID = POS.BaPersonID THEN 2
                                                                                                         WHEN BaPersonID = LEI.BaPersonID THEN 3
                                                                                                         ELSE 4
                                                                                                    END)
  LEFT  JOIN dbo.vwKreditor            KRE ON KRE.BaZahlungswegID = BAP.BaZahlungswegID
  LEFT  JOIN dbo.vwUser                USR ON USR.UserID = LEI.UserID
  INNER JOIN dbo.FaFall                FAL WITH (READUNCOMMITTED) ON LEI.FaFallID = FAL.FaFallID
  INNER JOIN dbo.BgKostenart           KOS WITH (READUNCOMMITTED) ON KOS.BgKostenartID = KBB.BgKostenartID
  LEFT  JOIN dbo.vwPerson			         PER WITH (READUNCOMMITTED) ON PER.BaPersonID = KBP.BaPersonID
  LEFT  JOIN dbo.BaKrankenversicherung KVG WITH (READUNCOMMITTED) ON KVG.BaPersonID = PER.BaPersonID
                                                                 AND CONVERT(DATETIME, (CONVERT(VARCHAR(4), BUD.Jahr) + '-' + CONVERT(VARCHAR(2), BUD.Monat) + '-15')) 
                                                                     BETWEEN ISNULL(KVG.DatumVon, '17530101') AND ISNULL(KVG.DatumBis, '99991231')
                                                                 AND KVG.GesetzesGrundlageCode = 1 -- LOV BaKVGVVG
  
WHERE KOS.KontoNr = '140' 
  AND POS.BgKategorieCode &lt;&gt; 1 -- Einnahmen nicht berücksichtigen
  AND CONVERT(DATETIME, (CONVERT(VARCHAR(4), BUD.Jahr) + '-' + CONVERT(VARCHAR(2), BUD.Monat) + '-15')) 
      BETWEEN ISNULL(@MonatsbudgetVon, CONVERT(DATETIME, '17530101')) AND ISNULL(@MonatsbudgetBis, CONVERT(DATETIME, '99991231'))
  AND ((@OrgGruppeID IS NULL AND @TeamID IS NULL) OR USR.OrgUnitID IN (SELECT OrgUnitID FROM dbo.fnOrgUnitsOfTeam(@OrgGruppeID, @TeamID)))
---  AND FAL.FaFallID = {edtFallNr.EditValue}
---  AND LEI.UserID = {ctlOrgUnitTeamUser.SucheUserID.LookupID}
---  AND KBP.BaPersonID = {edtKlient.LookupID}
---  AND KBP.BaPersonID = {edtPersonenNr.EditValue}
GROUP BY FAL.FaFallID, FAL.BaPersonID, PER.NameVorname, BUD.Jahr, BUD.Monat, KVG.Praemie, KVG.KVGPraemienVerbillBetrag, KBP.BaPersonID, BUD.BgFinanzplanID, BUD.BgBudgetID
ORDER BY BUD.Jahr, BUD.Monat, PER.NameVorname;
</value>
  </data>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="edtDatumBis.Properties.Buttons" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        iVBORw0KGgoAAAANSUhEUgAAAAwAAAAQCAYAAAAiYZ4HAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8
        YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAABRSURBVDhPY2AAAmNj4//EYJBaMAApRqbhErjkiDEdZiiK
        Dcgmo7NxamhoYAA7DwSQ2Vg1gBTAFKHT1NGA7AyibBhuGoiKB5Jimpj0hM9AnHIA7aiPJlUTWpwAAAAA
        SUVORK5CYII=
</value>
  </data>
  <data name="edtDatumVon.Properties.Buttons" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        iVBORw0KGgoAAAANSUhEUgAAAAwAAAAQCAYAAAAiYZ4HAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8
        YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAABRSURBVDhPY2AAAmNj4//EYJBaMAApRqbhErjkiDEdZiiK
        Dcgmo7NxamhoYAA7DwSQ2Vg1gBTAFKHT1NGA7AyibBhuGoiKB5Jimpj0hM9AnHIA7aiPJlUTWpwAAAAA
        SUVORK5CYII=
</value>
  </data>
  <data name="edtKlient.LookupSQL" xml:space="preserve">
    <value>select 
  ID$ = BaPersonID, 
  Klient = Name + isNull(', ' + Vorname,''),
  [Person ID] = BaPersonID
from   BaPerson 
where Name + IsNull(', ' + Vorname,'') LIKE '%' + {0} + '%'
order by Klient
----</value>
  </data>
</root>
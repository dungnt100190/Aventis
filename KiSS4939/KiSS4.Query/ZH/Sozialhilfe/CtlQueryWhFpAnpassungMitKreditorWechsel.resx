<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="qryQuery.SelectStatement" xml:space="preserve">
    <value>select SZ          = USR.Sozialzentrum,
       OE          = USR.OrgUnit,
       MA          = USR.NameVorname,
       FallNr      = FAL.FaFallID,
       Klient      = PRS.NameVorname,
       Art         = BPA.Name,
       Bewilligung = BEW.Text,
       Vorgänger   = case
                     when KRE2.BaPersonID is not null then 'Klient'
                     when KRE2.BaInstitutionID is not null then 'Dritte'
                     else '-'
                     end,
       Nachfolger  = case 
                     when KRE.BaPersonID is not null then 'Klient'
                     when KRE.BaInstitutionID is not null then 'Dritte'
                     else '-'
                     end,
       LE          = case when BPO2.FPPosition = 1 then 'LE' end,
       VorgAb      = convert(varchar,BPO2.DatumVon,104),
       NachfAb     = convert(varchar,BPO.DatumVon,104),
       Betrag      = BPO.Betrag,

       FallBaPersonID$          = FAL.BaPersonID,
       BgFinanzplanID$          = FPL.BgFinanzplanID,
       BgBudgetID$              = BDG.BgBudgetID,
       BgPositionID$            = BPO.BgPositionID,
       BgGruppeValue1$          = GRP.Value1,
       OldBgAuszahlungPersonID$ = BAP2.BgAuszahlungPersonID,
       NewBgAuszahlungPersonID$ = BAP.BgAuszahlungPersonID,
       OldBaZahlungswegID$      = BAP2.BaZahlungswegID,
       NewBaZahlungswegID$      = BAP.BaZahlungswegID,
       NewBgPositionID$         = BPO.BgPositionID
       
from   vwBgPosition BPO
       left  join BgBudget                 BDG  ON BDG.BgBudgetID = BPO.BgBudgetID
       left  join BgFinanzplan             FPL  ON FPL.BgFinanzplanID = BDG.BgFinanzplanID
       left  join FaLeistung               LEI  ON LEI.FaLeistungID = FPL.FaLeistungID
       left  join FaFall                   FAL  ON FAL.FaFallID = LEI.FaFallID
       left  join vwPerson                 PRS  ON PRS.BaPersonID = LEI.BaPersonID
       left  join vwUser                   USR  ON USR.UserID = LEI.UserID
       left  join BgPositionsart           BPA  ON BPA.BgPositionsartID = BPO.BgPositionsartID
       inner join BgPosition               BPO2 ON BPO2.BgPositionID = BPO.BgPositionID_CopyOf
       left  join BgBudget                 BDG2 ON BDG2.BgBudgetID = BPO2.BgBudgetID
       left  join BgAuszahlungPerson       BAP  ON BAP.BgPositionID = BPO.BgPositionID
       left  join BgAuszahlungPerson       BAP2 ON BAP2.BgPositionID = BPO2.BgPositionID
       left  join vwKreditor               KRE  ON KRE.BaZahlungswegID = BAP.BaZahlungswegID
       left  join vwKreditor               KRE2 ON KRE2.BaZahlungswegID = BAP2.BaZahlungswegID
       LEFT  JOIN XLOVCode                 BEW  ON BEW.LOVName = 'BgBewilligungStatus' and BEW.Code = BPO.BgBewilligungStatusCode
       LEFT  JOIN XLOVCode                 GRP ON GRP.LOVName = 'BgGruppe' AND GRP.Code = BPA.BgGruppeCode

where BPO.BgPositionsartID in (3104,32020) and
      BDG.MasterBudget = 1 and
      BPO.Betrag &lt;&gt; 0 and
      isnull(BAP.BaZahlungswegID,-1) &lt;&gt; isnull(BAP2.BaZahlungswegID,-1)
order by FallNr, BPO.DatumVon</value>
  </data>
  <assembly alias="System.Drawing" name="System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="qryQuery.TrayLocation" type="System.Drawing.Point, System.Drawing">
    <value>17, 17</value>
  </data>
  <data name="xDocument.Properties.Buttons" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        iVBORw0KGgoAAAANSUhEUgAAAAwAAAAQCAYAAAAiYZ4HAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8
        YQUAAAAgY0hSTQAAeiYAAICEAAD6AAAAgOgAAHUwAADqYAAAOpgAABdwnLpRPAAAAF1JREFUOE9jZAAC
        Y2Pj/yAaGzh79iwjhjhIw///MzGwmJjYfxDGqSEtjeE/MgYpBhmEoYmQDSANKM7GpQHZmVg1oDsJxgdp
        pI4N2EIKJjbqJLIiDqSJEMaVovGKAwBnM3PWBP8PfwAAAABJRU5ErkJggg==
</value>
  </data>
</root>
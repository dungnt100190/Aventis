<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <metadata name="qryQuery.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>17, 17</value>
  </metadata>
  <data name="qryQuery.SelectStatement" xml:space="preserve">
    <value>DECLARE @DatumVon DATETIME;
DECLARE @DatumBis DATETIME;
--- SET @DatumVon = {edtSucheDatumVon.EditValue};
--- SET @DatumBis = {edtSucheDatumBis.EditValue};

DECLARE @OrgGruppeID INT;
--- SET @OrgGruppeID = {ctlOrgUnitTeamUser.SucheGruppe};

DECLARE @TeamID INT;
--- SET @TeamID = {ctlOrgUnitTeamUser.SucheTeam};

DECLARE @InklStorniertePositionen BIT;
SET @InklStorniertePositionen = {edtInklStornierterPositionen.Checked};

--@InklStorniertePositionen soll 1 sein, wenn der Benutzer den Status 8:Storniert ausgewählt hat
---IF({edtSucheStatus} = 8) SET @InklStorniertePositionen = 1


DECLARE @Result TABLE
(
  KbBuchungBruttoID INT,
  BgPositionID INT,
  KbBuchungStatusCode INT,
  FaelligkeitsDatum DATETIME,
  ZEDatum DATETIME,
  FaFallID INT,
  FallBaPersonID INT,
  Budget VARCHAR(20),
  BgBudgetID INT,
  BgFinanzplanID INT,
  BaPersonID INT,
  DetailBuchungstext VARCHAR(300),
  Buchungstext VARCHAR(300),
  BruttoBelegNr BIGINT,
  KontoNr INT,
  DisplayText VARCHAR(100),
  Betrag MONEY,
  BetragEffektiv MONEY,
  VerwPeriodeVon DATETIME,
  VerwPeriodeBis DATETIME,
  SZ VARCHAR(100),
  Team VARCHAR(100),
  SA VARCHAR(100),
  FaLeistungID INT,
  Schuldner VARCHAR(150),
  SchuldnerZusatz VARCHAR(478),
  UB VARCHAR(10),
  Sperre VARCHAR(10)
);

;WITH UmbuchungenCte
(
  KbBuchungBruttoID,
  NeubuchungVonKbBuchungBruttoID,
  KbBuchungBruttoID_ORIG,
  KbBuchungBruttoPersonID,
  KontoNr,
  BaPersonID,
  Betrag,
  VerwPeriodeVon,
  VerwPeriodeBis,
  Buchungstext,
  FaLeistungID,
  SchuldnerID
)
AS
(
  SELECT
    KBB.KbBuchungBruttoID,
    KBB.NeubuchungVonKbBuchungBruttoID,
    KBB.KbBuchungBruttoID,
    KBP.KbBuchungBruttoPersonID,
    BKA.KontoNr,
    KBP.BaPersonID,
    KBP.Betrag,
    KBP.VerwPeriodeVon,
    KBP.VerwPeriodeBis,
    KBP.Buchungstext,
    KBB.FaLeistungID,
    ISNULL(KBP.Schuldner_BaPersonID, KBP.Schuldner_BaInstitutionID)
  FROM dbo.KbBuchungBruttoPerson    KBP WITH (READUNCOMMITTED)
    INNER JOIN dbo.KbBuchungBrutto  KBB WITH (READUNCOMMITTED) ON KBB.KbBuchungBruttoID = KBP.KbBuchungBruttoID
    INNER JOIN dbo.BgKostenart      BKA WITH (READUNCOMMITTED) ON BKA.BgKostenartID = KBB.BgKostenartID
    INNER JOIN dbo.FaLeistung       LEI	WITH (READUNCOMMITTED) ON LEI.FaLeistungID = KBB.FaLeistungID AND LEI.ModulID = 3 -- W
    INNER JOIN dbo.FaFall           FAL	WITH (READUNCOMMITTED) ON LEI.FaFallID = FAL.FaFallID
    INNER JOIN dbo.vwUser           USR WITH (READUNCOMMITTED) ON FAL.UserID = USR.UserID
---                                                           AND ({edtAktiveW.Checked}   = 0 OR LEI.DatumBis IS NULL OR LEI.DatumBis &gt;= GETDATE())
---                                                           AND ({edtInaktiveW.Checked} = 0 OR LEI.DatumBis IS NOT NULL AND LEI.DatumBis &lt; GETDATE())
  WHERE KBB.Abgetreten = 1 
    AND KBB.KbBuchungStatusCode NOT IN (7, 9) -- gesperrt, Rückläufer
    AND (@InklStorniertePositionen = 1 OR KBB.KbBuchungStatusCode &lt;&gt; 8) -- storniert
    AND BKA.KontoNr IN (810,811,814,819) 
--- AND FAL.FaFallID = {edtSucheFaFallID.EditValue}
--- AND LEI.UserID = {ctlOrgUnitTeamUser.SucheUserID.LookupID}
--- AND KBP.BaPersonID = {edtSucheKlientX.LookupID}
--- AND KBP.BaPersonID = {edtSuchePersonenNr.EditValue}
--- AND KBB.ValutaDatum BETWEEN {edtSucheFaelligVon} AND {edtSucheFaelligBis}
--- AND KBB.KbBuchungStatusCode = {edtSucheStatus}

-- UB-Stati mit AND-Operation verknüpft:
    AND ({edtSucheUbStati_F.Checked} = 0 OR KBB.Fakturiert = 1)
    AND ({edtSucheUbStati_FS.Checked} = 0 OR KBB.FakturaSperre = 1)
    AND ({edtSucheUbStati_MS.Checked} = 0 OR KBB.Mahnsperre = 1)
    AND (
         --keine Mahnstufe ausgewählt -&gt; alles anzeigen
         ({edtSucheUbStati_M1.Checked} = 0 
           AND {edtSucheUbStati_M2.Checked} = 0 
           AND {edtSucheUbStati_M3.Checked} = 0 
         )
      --oder: 
      --eine oder mehrere Mahnstufen ausgewählt (mit OR-Operation verknüpft)
       OR ({edtSucheUbStati_M1.Checked} = 1 AND KBB.Mahnstufe = 1)
       OR ({edtSucheUbStati_M2.Checked} = 1 AND KBB.Mahnstufe = 2)
       OR ({edtSucheUbStati_M3.Checked} = 1 AND KBB.Mahnstufe = 3)
    )

    AND (@DatumVon IS NULL AND @DatumBis IS NULL
      OR KBB.NeubuchungVonKbBuchungBruttoID IS NOT NULL
      OR EXISTS (SELECT KBA.KbBuchungID
                 FROM dbo.KbBuchungKostenart   KBA WITH (READUNCOMMITTED)
                   INNER JOIN dbo.KbBuchung    BUC WITH (READUNCOMMITTED) ON BUC.KbBuchungID = KBA.KbBuchungID
                   LEFT JOIN dbo.KbOpAusgleich AUG WITH (READUNCOMMITTED) ON AUG.OpBuchungID = BUC.KbBuchungID
                   LEFT JOIN dbo.KbBuchung     BUA WITH (READUNCOMMITTED) ON BUA.KbBuchungID = AUG.AusgleichBuchungID
                 WHERE KBA.BgPositionID = KBP.BgPositionID
                    AND (AUG.KbOpAusgleichID IS NULL
                      OR BUA.BelegDatum BETWEEN ISNULL(@DatumVon, '17530101') AND ISNULL(@DatumBis, '30000101')))
        )
		AND ((@OrgGruppeID IS NULL AND @TeamID IS NULL) 
		  OR USR.OrgUnitID IN (SELECT OrgUnitID FROM dbo.fnOrgUnitsOfTeam(@OrgGruppeID,@TeamID)))
		
	UNION ALL
	
	-- recursion
	SELECT 
		KBB.KbBuchungBruttoID,
		KBB.NeubuchungVonKbBuchungBruttoID,
    UMB.KbBuchungBruttoID_ORIG,
		UMB.KbBuchungBruttoPersonID,
		UMB.KontoNr,
		UMB.BaPersonID,
		UMB.Betrag,
		UMB.VerwPeriodeVon,
		UMB.VerwPeriodeBis,
		UMB.Buchungstext,
    UMB.FaLeistungID,
    UMB.SchuldnerID
	FROM dbo.KbBuchungBrutto    KBB WITH (READUNCOMMITTED)
		INNER JOIN UmbuchungenCte UMB ON UMB.NeubuchungVonKbBuchungBruttoID = KBB.KbBuchungBruttoID
)

-- Temporäre Tabelle verwenden, da zwei Result-Sets zurückgegeben werden
INSERT INTO @Result
SELECT
	KbBuchungBruttoID   = UMB.KbBuchungBruttoID_ORIG,	
	BgPositionID        = KBP_UMB.BgPositionID,
	KbBuchungStatusCode = NET.MaxStatusCode,
	FaelligkeitsDatum   = KBB.ValutaDatum,
	ZEDatum             = AUS.BelegDatum,
	FaFallID            = FAL.FaFallID,
	FallBaPersonID      = FAL.BaPersonID,
	Budget              = RIGHT('0' + CONVERT(VARCHAR, BUD.Monat), 2) + '.' + CONVERT(VARCHAR,BUD.Jahr),
	BgBudgetID          = BUD.BgBudgetID,
	BgFinanzplanID      = BUD.BgFinanzplanID,
	BaPersonID          = UMB.BaPersonID,
	DetailBuchungstext  = UMB.Buchungstext,
	Buchungstext        = POS.Buchungstext,
	BruttoBelegNr       = KBB.BelegNr,
	KontoNr             = UMB.KontoNr,
	DisplayText         = PER.DisplayText,
	Betrag              = UMB.Betrag,
	BetragEffektiv      = AUS.Betrag,
	VerwPeriodeVon      = UMB.VerwPeriodeVon,
	VerwPeriodeBis      = UMB.VerwPeriodeBis,
	SZ                  = USR.SozialzentrumKurz,
	Team                = USR.OrgUnitShort,
	SA                  = USR.NameVorname,
	FaLeistungID        = UMB.FaLeistungID,
	Schuldner           = ISNULL(SCP.DisplayText, SCI.Name),
  SchuldnerZusatz     = SCI.Adresse,
  UB                  = CASE KBB.Mahnstufe WHEN 1 THEN 'M1'
                                           WHEN 2 THEN 'M2'
                                           WHEN 3 THEN 'M3'
                                           ELSE CASE WHEN KBB.Fakturiert = 1 THEN 'F' ELSE NULL END  --M1-3 hat Prio gegenüber F
                        END,
  Sperre              = CASE WHEN KBB.Fakturasperre = 1 THEN 'FS'
                             WHEN KBB.Mahnsperre = 1 THEN 'MS'
                             ELSE NULL                            --FS hat Prio gegenüber MS
                        END
FROM UmbuchungenCte                    UMB     WITH (READUNCOMMITTED)
  INNER JOIN dbo.KbBuchungBrutto       KBB     WITH (READUNCOMMITTED) ON KBB.KbBuchungBruttoID = UMB.KbBuchungBruttoID
  LEFT  JOIN dbo.KbBuchungBruttoPerson KBP_UMB WITH (READUNCOMMITTED) ON KBP_UMB.KbBuchungBruttoPersonID = UMB.KbBuchungBruttoPersonID
  OUTER APPLY (SELECT TOP 1 BgPositionID
               FROM KbBuchungBruttoPerson KBP
               WHERE KBP_UMB.KbBuchungBruttoPersonID IS NULL 
                 AND KBP.KbBuchungBruttoID = UMB.KbBuchungBruttoID) KBP_UMB2
  INNER JOIN dbo.BgPosition		         POS     WITH (READUNCOMMITTED) ON POS.BgPositionID = ISNULL(KBP_UMB.BgPositionID, KBP_UMB2.BgPositionID)
                                                                     AND POS.VerwaltungSD = 1
  OUTER APPLY dbo.fnBruttoToNettos(UMB.KbBuchungBruttoPersonID, ISNULL(KBP_UMB.BgPositionID, KBP_UMB2.BgPositionID), KBB.Betrag, KBB.ValutaDatum) AS NET
  OUTER APPLY (SELECT BUC_AUS.KbBuchungID, BUC_Aus.BelegDatum, AUS.Betrag
               FROM KbOpAusgleich AUS 
                 INNER JOIN KbBuchung BUC_AUS ON BUC_AUS.KbBuchungID = AUS.AusgleichBuchungID
               WHERE AUS.OpBuchungID = dbo.fnBruttoToNetto(KBB.KbBuchungBruttoID)
                 AND BUC_AUS.BelegDatum IS NOT NULL
               ) AUS
  LEFT JOIN KbBuchungBrutto   KBB_ORIG WITH (READUNCOMMITTED) ON KBB_ORIG.KbBuchungBruttoID = UMB.KbBuchungBruttoID_ORIG
  LEFT JOIN dbo.FaLeistung		LEI      WITH (READUNCOMMITTED) ON LEI.FaLeistungID = KBB_ORIG.FaLeistungID
  LEFT JOIN dbo.FaFall			  FAL      WITH (READUNCOMMITTED) ON FAL.FaFallID = LEI.FaFallID
  LEFT JOIN dbo.vwUser			  USR	     WITH (READUNCOMMITTED) ON USR.UserID = LEI.UserID
  LEFT JOIN dbo.vwPerson			PER      WITH (READUNCOMMITTED) ON PER.BaPersonID = UMB.BaPersonID
  LEFT JOIN dbo.BgBudget			BUD      WITH (READUNCOMMITTED) ON BUD.BgBudgetID = KBB.BgBudgetID
  LEFT JOIN dbo.vwPerson      SCP      WITH (READUNCOMMITTED) ON SCP.BaPersonID = UMB.SchuldnerID
  LEFT JOIN dbo.vwInstitution SCI      WITH (READUNCOMMITTED) ON SCI.BaInstitutionID = UMB.SchuldnerID
WHERE UMB.NeuBuchungVonKbBuchungBruttoID IS NULL
  AND (@InklStorniertePositionen = 1 OR KBB.KbBuchungStatusCode &lt;&gt; 8) -- storniert
  AND (@DatumVon IS NULL AND @DatumBis IS NULL
	  OR NET.datumEffektiv BETWEEN ISNULL(@DatumVon, '17530101') AND ISNULL(@DatumBis, '30000101'))

-- Betrag verteilen auf mehrere Zahlungseingänge
UPDATE RES
SET Betrag = (SELECT MIN(Betrag)/COUNT(1) FROM @Result WHERE KbBuchungBruttoID = RES.KbBuchungBruttoID AND BgPositionID = RES.BgPositionID GROUP BY KbBuchungBruttoID, BgPositionID)
FROM @Result RES
WHERE RES.ZEDatum IS NOT NULL

-----------------------------------------------------
-- Liste
-----------------------------------------------------
SELECT
  RES.KbBuchungBruttoID,
  RES.BgPositionID,

  FaFallID          = MAX(RES.FaFallID),
  FallBaPersonID    = MAX(RES.FallBaPersonID),
  BgBudgetID        = MAX(RES.BgBudgetID),
  BgFinanzplanID    = MAX(RES.BgFinanzplanID),
  KlientIn          = CASE WHEN MAX(PER.DisplayText) &lt;&gt; MIN(PER.DisplayText) THEN NULL ELSE MAX(PER.DisplayText) END,
  BaPersonID        = CASE WHEN MAX(RES.BaPersonID) &lt;&gt; MIN(RES.BaPersonID) THEN NULL ELSE MAX(RES.BaPersonID) END,
  Budget            = MAX(Budget),
  FaelligkeitsDatum = MAX(RES.FaelligkeitsDatum),
  ZE                = MIN(RES.ZEDatum),

  Soll              = Round(SUM(RES.Betrag) * 2, 1) / 2,  --auf 0.05 Betrag runden
  SummeZE           = SUM(RES.BetragEffektiv),
  Diff              = Round(SUM(RES.Betrag) * 2, 1) / 2 - SUM(RES.BetragEffektiv),  --auf 0.05 Betrag runden
  BruttoBelegNr     = MAX(RES.BruttoBelegNr),
  LA                = MAX(RES.KontoNr),
  UB                = MAX(RES.UB),
  Sperre            = MAX(RES.Sperre),
  Stat              = MAX(RES.KbBuchungStatusCode),
  Buchungstext      = MAX(RES.Buchungstext),
  VerwPeriodeVon    = MIN(RES.VerwPeriodeVon),
  VerwPeriodeBis    = MAX(RES.VerwPeriodeBis),
  SA                = MAX(RES.SA),
  Team              = MAX(RES.Team),
  SZ                = MAX(RES.SZ)
FROM @Result                     RES
  INNER JOIN dbo.FaLeistung      LEI ON LEI.FaLeistungID = RES.FaLeistungID
  INNER JOIN dbo.vwPersonSimple  PER ON PER.BaPersonID = LEI.BaPersonID
GROUP BY RES.KbBuchungBruttoID, RES.BgPositionID
ORDER BY MAX(RES.FaelligkeitsDatum) ASC, MIN(RES.DisplayText) ASC;

-----------------------------------------------------
-- Detail
-----------------------------------------------------
SELECT
  RES.KbBuchungBruttoID,
  RES.BgPositionID,

  RES.FaFallID,
  KlientIn          = PER.DisplayText,
  BaPersonID        = RES.BaPersonID,
  ZE                = RES.ZEDatum,
  SummeZE           = RES.BetragEffektiv,

  LA                = RES.KontoNr,
  UB                = RES.UB,
  Sperre            = RES.Sperre,
  Stat              = RES.KbBuchungStatusCode
FROM @Result                     RES
  INNER JOIN dbo.FaLeistung      LEI ON LEI.FaLeistungID = RES.FaLeistungID
  INNER JOIN dbo.vwPersonSimple  PER ON PER.BaPersonID = LEI.BaPersonID
  INNER JOIN dbo.KbBuchungBrutto KBB ON KBB.KbBuchungBruttoID = RES.KbBuchungBruttoID
ORDER BY RES.ZEDatum ASC, RES.DisplayText ASC;</value>
  </data>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="edtSucheFaelligBis.Properties.Buttons" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        iVBORw0KGgoAAAANSUhEUgAAAAwAAAAQCAYAAAAiYZ4HAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8
        YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAABRSURBVDhPY2AAAmNj4//EYJBaMAApRqbhErjkiDEdZiiK
        Dcgmo7NxamhoYAA7DwSQ2Vg1gBTAFKHT1NGA7AyibBhuGoiKB5Jimpj0hM9AnHIA7aiPJlUTWpwAAAAA
        SUVORK5CYII=
</value>
  </data>
  <data name="edtSucheFaelligVon.Properties.Buttons" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        iVBORw0KGgoAAAANSUhEUgAAAAwAAAAQCAYAAAAiYZ4HAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8
        YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAABRSURBVDhPY2AAAmNj4//EYJBaMAApRqbhErjkiDEdZiiK
        Dcgmo7NxamhoYAA7DwSQ2Vg1gBTAFKHT1NGA7AyibBhuGoiKB5Jimpj0hM9AnHIA7aiPJlUTWpwAAAAA
        SUVORK5CYII=
</value>
  </data>
  <data name="edtSucheDatumBis.Properties.Buttons" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        iVBORw0KGgoAAAANSUhEUgAAAAwAAAAQCAYAAAAiYZ4HAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8
        YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAABRSURBVDhPY2AAAmNj4//EYJBaMAApRqbhErjkiDEdZiiK
        Dcgmo7NxamhoYAA7DwSQ2Vg1gBTAFKHT1NGA7AyibBhuGoiKB5Jimpj0hM9AnHIA7aiPJlUTWpwAAAAA
        SUVORK5CYII=
</value>
  </data>
  <data name="edtSucheDatumVon.Properties.Buttons" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        iVBORw0KGgoAAAANSUhEUgAAAAwAAAAQCAYAAAAiYZ4HAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8
        YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAABRSURBVDhPY2AAAmNj4//EYJBaMAApRqbhErjkiDEdZiiK
        Dcgmo7NxamhoYAA7DwSQ2Vg1gBTAFKHT1NGA7AyibBhuGoiKB5Jimpj0hM9AnHIA7aiPJlUTWpwAAAAA
        SUVORK5CYII=
</value>
  </data>
  <data name="edtSucheKlientX.LookupSQL" xml:space="preserve">
    <value>select 
  ID$ = BaPersonID, 
  Klient = Name + isNull(', ' + Vorname,''),
  [Person ID] = BaPersonID
from   BaPerson 
where Name + IsNull(', ' + Vorname,'') LIKE '%' + {0} + '%'
order by Klient
----</value>
  </data>
</root>
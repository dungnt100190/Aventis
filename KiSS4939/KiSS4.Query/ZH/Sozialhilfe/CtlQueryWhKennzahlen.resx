<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="qryQuery.SelectStatement" xml:space="preserve">
    <value>declare @T table (Bereich varchar(200), Anzahl int, [Total CHF] money)

insert @T
select Bereich = 'Aktive Wirtschaftliche Hilfen', Anzahl = count(distinct BaPersonID), [Total CHF] = convert(money,null)
from   FaLeistung
where  FaProzessCode = 300 and
       DatumBis is null

insert @T
select Bereich = 'Finanzpläne - ' + BEW.Text, 
       Anzahl = (select count(*) 
                 from   BgFinanzplan
                 where  BgBewilligungStatusCode = BEW.Code),
       [Total CHF] = null
from   XLOVCode BEW
where  BEW.LovName = 'BgBewilligungStatus'
order by BEW.SortKey

insert @T
select Bereich = 'Monatsbudget grau', Anzahl = count(*),null
from   BgBudget
where  Masterbudget = 0 and
       BgBewilligungStatusCode = 1

insert @T
select Bereich = 'Monatsbudget grün', Anzahl = count(*),null
from   BgBudget
where  Masterbudget = 0 and
       BgBewilligungStatusCode = 5

insert @T
select Bereich = 'Monatsbudget rot', Anzahl = count(*),null
from   BgBudget
where  Masterbudget = 0 and
       BgBewilligungStatusCode = 9

insert @T
select Bereich = 'Monatsbudget: M-Positionen ', Anzahl = count(*),null
from   BgPosition POS
where  POS.BgPositionID_CopyOf is not null

insert @T
select Bereich = 'Monatsbudget: Zusätzliche Leistungen - ' + BEW.Text, 
       Anzahl = (select count(*) 
                 from   BgPosition POS
                        inner join BgBudget BDG on BDG.BgBudgetID = POS.BgBudgetID
                 where  POS.BgBewilligungStatusCode = BEW.Code and
                        BDG.Masterbudget = 0 and
                        POS.BgKategorieCode = 100),
       [Total CHF] = (select sum(isNull(Betrag,0))
                      from   BgPosition POS
                             inner join BgBudget BDG on BDG.BgBudgetID = POS.BgBudgetID
                      where  POS.BgBewilligungStatusCode = BEW.Code and
                             BDG.Masterbudget = 0 and
                             POS.BgKategorieCode = 100)
from   XLOVCode BEW
where  BEW.LovName = 'BgBewilligungStatus'
order by BEW.SortKey

insert @T
select Bereich = 'Monatsbudget: Einzelzahlungen', Anzahl = count(*),sum(isNull(Betrag,0))
from   BgPosition POS
       inner join BgBudget BDG on BDG.BgBudgetID = POS.BgBudgetID
where  BDG.Masterbudget = 0 and
       POS.BgKategorieCode = 101

insert @T
select Bereich = 'Monatsbudget: abgetretene Einnahmen', Anzahl = count(*),sum(isNull(Betrag,0))
from   BgPosition POS
       inner join BgBudget BDG on BDG.BgBudgetID = POS.BgBudgetID
where  BDG.Masterbudget = 0 and
       POS.BgKategorieCode = 1 and
       POS.VerwaltungSD = 1

insert @T
select Bereich = 'Monatsbudget: nicht abgetretene Einnahmen', Anzahl = count(*),sum(isNull(Betrag,0))
from   BgPosition POS
       inner join BgBudget BDG on BDG.BgBudgetID = POS.BgBudgetID
where  BDG.Masterbudget = 0 and
       POS.BgKategorieCode = 1 and
       POS.VerwaltungSD = 0

insert @T
select Bereich = 'Forderungen an PSCD transferiert',
       Anzahl = count(*),
       [Total CHF] = sum(Betrag)
from   KbBuchungBrutto KBB
where  KBB.Betrag &gt; 0 AND
       KBB.TransferDatum is not null

insert @T
select Bereich = 'Auszahlungen an PSCD transferiert',
       Anzahl = count(*),
       [Total CHF] = sum(Betrag)
from   KbBuchung KBB
where  KBB.ModulID = 3 AND
       KBB.HabenKtoNr = '2000' AND
       KBB.TransferDatum is not null

select * from @T</value>
  </data>
  <assembly alias="System.Drawing" name="System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="qryQuery.TrayLocation" type="System.Drawing.Point, System.Drawing">
    <value>17, 17</value>
  </data>
  <data name="xDocument.Properties.Buttons" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        iVBORw0KGgoAAAANSUhEUgAAAAwAAAAQCAYAAAAiYZ4HAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8
        YQUAAAAgY0hSTQAAeiYAAICEAAD6AAAAgOgAAHUwAADqYAAAOpgAABdwnLpRPAAAAF1JREFUOE9jZAAC
        Y2Pj/yAaGzh79iwjhjhIw///MzGwmJjYfxDGqSEtjeE/MgYpBhmEoYmQDSANKM7GpQHZmVg1oDsJxgdp
        pI4N2EIKJjbqJLIiDqSJEMaVovGKAwBnM3PWBP8PfwAAAABJRU5ErkJggg==
</value>
  </data>
</root>
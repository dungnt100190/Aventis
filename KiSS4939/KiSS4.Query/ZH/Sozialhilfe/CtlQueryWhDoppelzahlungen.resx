<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="qryQuery.SelectStatement" xml:space="preserve">
    <value>declare @BgPosition table (
  BgPositionID int, 
  BaPersonID int, 
  BgKostenartID int, 
  ValutaDatum datetime, 
  KbBuchungIDMin int,
  KbBuchungIDMax int
)

insert @BgPosition
select BUK.BgPositionID,BUK.BaPersonID,BUK.BgKostenartID,BUC.ValutaDatum, min(BUC.KbBuchungID),max(BUC.KbBuchungID)
from   KbBuchungKostenart BUK
       inner join KbBuchung  BUC on BUC.KbBuchungID = BUK.KbBuchungID
       inner join BgPosition BPO on BPO.BgPositionID = BUK.BgPositionID
where BUK.Betrag &lt;&gt; 0
group by BUK.BgPositionID,BUK.BaPersonID,BUK.BgKostenartID,BUC.ValutaDatum,BUK.Betrag
having count(*) &gt; 1

select SZ           = USR.Sozialzentrum,
       OE           = USR.OrgUnit,
       MA           = USR.NameVorname,
       FallNr       = FAL.FaFallID,
       Klient       = PRS.NameVorname,
       Budget       = dbo.fnXKurzMonat(BDG.Monat) + ' ' + convert(varchar,BDG.Jahr),
       Kategorie    = dbo.fnLOVText('BgKategorie',BPO.BgKategorieCode),
       Text         = BPO.Buchungstext,
       Betrag       = sum(BUK.Betrag) / count(distinct BUK.KbBuchungID),
       AnzahlBelege = count(distinct BUK.KbBuchungID),
       BelegNr1     = BUC1.BelegNr,
       BelegNr2     = BUC2.BelegNr,

       Valuta1      = BUC1.ValutaDatum,
       Valuta2      = BUC2.ValutaDatum,

       Erstellt1    = convert(varchar,BUC1.ErstelltDatum,104) + ' ' + convert(varchar,BUC1.ErstelltDatum,108),
       Erstellt2    = convert(varchar,BUC2.ErstelltDatum,104) + ' ' + convert(varchar,BUC2.ErstelltDatum,108),
       [Diff sec]   = datediff(s,BUC1.ErstelltDatum,BUC2.ErstelltDatum),

       Kreditor1    = CASE WHEN KRE1.BaInstitutionID IS NOT NULL THEN 'I:' ELSE 'P: ' END + KRE1.Kreditor,
       Kreditor2    = CASE WHEN KRE2.BaInstitutionID IS NOT NULL THEN 'I:' ELSE 'P: ' END + KRE2.Kreditor,

       MA1           = (select NameVorname from vwUser where UserID = BUC1.ErstelltUserID),
       MA2           = (select NameVorname from vwUser where UserID = BUC2.ErstelltUserID),

       Transfer1    = convert(varchar,BUC1.TransferDatum,104) + ' ' + convert(varchar,BUC1.TransferDatum,108),
       Transfer2    = convert(varchar,BUC2.TransferDatum,104) + ' ' + convert(varchar,BUC2.TransferDatum,108),

       Status1      = dbo.fnLOVText('KbBuchungsStatus',BUC1.KbBuchungStatusCode),
       Status2      = dbo.fnLOVText('KbBuchungsStatus',BUC2.KbBuchungStatusCode),

       Art1         = dbo.fnLOVText('KbAuszahlungsArt',BUC1.KbAuszahlungsArtCode),
       Art2         = dbo.fnLOVText('KbAuszahlungsArt',BUC2.KbAuszahlungsArtCode),

       FallBaPersonID$ = max(FAL.BaPersonID),
       BgPositionID$   = BPO.BgPositionID,
       BgBudgetID$     = max(BDG.BgBudgetID),
       BgFinanzplanID$ = max(FPL.BgFinanzplanID),
       FaLeistungID$   = max(LEI.FaLeistungID),
       FaFallID$       = max(FAL.FaFallID)
from   (select distinct BgPositionID, KbBuchungIDMin, KbBuchungIDMax from @BgPosition) P
       inner join BgPosition         BPO  on BPO.BgPositionID = P.BgPositionID
       inner join KbBuchungKostenart BUK  on BUK.BgPositionID = BPO.BgPositionID
       left  join KbBuchung          BUC1 on BUC1.KbBuchungID = P.KbBuchungIDMin
       left  join KbBuchung          BUC2 on BUC2.KbBuchungID = P.KbBuchungIDMax
       left  join vwKreditor         KRE1 on KRE1.BaZahlungswegID = BUC1.BaZahlungswegID
       left  join vwKreditor         KRE2 on KRE2.BaZahlungswegID = BUC2.BaZahlungswegID
       left  join BgBudget           BDG  ON BDG.BgBudgetID = BPO.BgBudgetID
       left  join BgFinanzplan       FPL  ON FPL.BgFinanzplanID = BDG.BgFinanzplanID
       left  join FaLeistung         LEI  ON LEI.FaLeistungID = FPL.FaLeistungID
       left  join FaFall             FAL  ON FAL.FaFallID = LEI.FaFallID
       left  join vwUser             USR  ON USR.UserID = LEI.UserID
       left  join vwPerson           PRS  ON PRS.BaPersonID = LEI.BaPersonID
group by USR.Sozialzentrum, USR.OrgUnit,USR.NameVorname,PRS.NameVorname,
         FAL.FaFallID, FAL.BaPersonID, BDG.Monat, BDG.Jahr, 
         BPO.BgPositionID, BPO.Buchungstext,BPO.BgKategorieCode,
		 BUC1.Belegnr, BUC1.TransferDatum, BUC1.ValutaDatum, BUC1.ErstelltUserID,BUC1.ErstelltDatum,BUC1.KbBuchungStatusCode,BUC1.KbAuszahlungsArtCode,KRE1.Kreditor,KRE1.BaInstitutionID,
		 BUC2.Belegnr, BUC2.TransferDatum, BUC2.ValutaDatum, BUC2.ErstelltUserID,BUC2.ErstelltDatum,BUC2.KbBuchungStatusCode,BUC2.KbAuszahlungsArtCode,KRE2.Kreditor,KRE2.BaInstitutionID
order by FAL.FaFallID,BDG.Jahr, BDG.Monat, BPO.BgPositionID</value>
  </data>
  <assembly alias="System.Drawing" name="System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="qryQuery.TrayLocation" type="System.Drawing.Point, System.Drawing">
    <value>17, 17</value>
  </data>
  <data name="xDocument.Properties.Buttons" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        iVBORw0KGgoAAAANSUhEUgAAAAwAAAAQCAYAAAAiYZ4HAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8
        YQUAAAAgY0hSTQAAeiYAAICEAAD6AAAAgOgAAHUwAADqYAAAOpgAABdwnLpRPAAAAF1JREFUOE9jZAAC
        Y2Pj/yAaGzh79iwjhjhIw///MzGwmJjYfxDGqSEtjeE/MgYpBhmEoYmQDSANKM7GpQHZmVg1oDsJxgdp
        pI4N2EIKJjbqJLIiDqSJEMaVovGKAwBnM3PWBP8PfwAAAABJRU5ErkJggg==
</value>
  </data>
</root>
<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <metadata name="qryQuery.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>17, 17</value>
  </metadata>
  <data name="qryQuery.SelectStatement" xml:space="preserve">
    <value>DECLARE @Netto int

--- SET @Netto = CASE WHEN {edtSucheNettoBrutto.EditValue} = 1 THEN 1 ELSE 0 END

IF @Netto = 1 BEGIN
	SELECT DISTINCT
        Storno					= KBS.StornoDatum,
        BelegNr			        = STO.BelegNr,
        FallNr				    = LEI.FaFallID,
        NameVorname			    = PRS1.Name + ', ' + PRS1.Vorname,
        Betrag				    = STO.Betrag,
		LA						= dbo.ConcDistinctOrder(KBK.KontoNr),
        Valuta		            = STO.ValutaDatum,
        Budget				    = CONVERT(varchar, BUD.Jahr) + '-' + CONVERT(varchar, BUD.Monat),
        Buchungstext			= STO.Text,
        ID				        = STO.KbBuchungID,
        SA					    = USR.ShortName + ' (' + USR.NameVorname + ')',
        Team					= USR.OrgUnitShort,
        SZ					    = USR.SozialzentrumKurz,
        StorniertVon   		    = STU.ShortName + ' (' + STU.NameVorname + ')',
        BaPersonID$             = PRS1.BaPersonID
    FROM KbBuchungStorno KBS
        INNER JOIN dbo.KbBuchung			STO WITH (READUNCOMMITTED)  ON STO.KbBuchungID = KBS.StornoKbBuchungID
        INNER JOIN dbo.KbBuchung			BUC WITH (READUNCOMMITTED)  ON BUC.KbBuchungID = KBS.KbBuchungID
        INNER JOIN dbo.KbBuchungKostenart	KBK WITH (READUNCOMMITTED)  ON KBK.KbBuchungID = BUC.KbBuchungID
        LEFT JOIN dbo.BgBudget				BUD WITH (READUNCOMMITTED)  ON BUD.BgBudgetID = BUC.BgBudgetID
        LEFT JOIN dbo.BgFinanzplan			BFP WITH (READUNCOMMITTED)  ON BFP.BgFinanzplanID = BUD.BgFinanzplanID
        LEFT JOIN dbo.FaLeistung			LEI WITH (READUNCOMMITTED)  ON LEI.FaLeistungID = BUC.FaLeistungID
        LEFT JOIN dbo.FaFall				FAL WITH (READUNCOMMITTED)  ON FAL.FaFallID = LEI.FaFallID
        LEFT JOIN dbo.BaPerson				PRS1 WITH (READUNCOMMITTED) ON PRS1.BaPersonID = FAL.BaPersonID		-- Leistungsträger
        LEFT JOIN dbo.vwUser				USR WITH (READUNCOMMITTED)  ON USR.UserID = LEI.UserID
        INNER JOIN dbo.vwUser				STU WITH (READUNCOMMITTED)  ON STU.UserID = KBS.StornoUserID
        LEFT JOIN dbo.KbKonto				KDEB WITH (READUNCOMMITTED) ON KDEB.KbPeriodeID = BUC.KbPeriodeID and	-- Debitoren-Konto (nur gefüllt wenn die Buchung eine Debitoren-Buchung ist)
																			                    KDEB.KontoNr = BUC.SollKtoNr and
																			                    KDEB.KbKontoartCodes = 20
    WHERE ISNULL(LEI.FaProzessCode, 0) = 300	-- W-Leistung
    --- AND 1 = (CASE WHEN {edtSucheKategorie.EditValue} = 1 /*Barbelege*/ AND (BUC.KbAuszahlungsArtCode IS NULL OR BUC.KbAuszahlungsArtCode &lt;&gt; 103) THEN 0 ELSE 1 END)
    --- AND 1 = (CASE WHEN {edtSucheKategorie.EditValue} = 2 /*Sollstellungen*/ AND KDEB.KbKontoID IS NULL THEN 0 ELSE 1 END)
    --- AND KBS.StornoDatum &gt;= {edtSucheStornoDatumVon}
    --- AND KBS.StornoDatum &lt;= {edtSucheStornoDatumBis}
	GROUP BY KBS.StornoDatum, STO.BelegNr, LEI.FaFallID, PRS1.Name + ', ' + PRS1.Vorname, STO.Betrag, STO.ValutaDatum, CONVERT(varchar, BUD.Jahr) + '-' + CONVERT(varchar, BUD.Monat),
			 STO.Text, STO.KbBuchungID, USR.ShortName + ' (' + USR.NameVorname + ')', USR.OrgUnitShort, USR.SozialzentrumKurz, STU.ShortName + ' (' + STU.NameVorname + ')', PRS1.BaPersonID
END
ELSE BEGIN
	SELECT DISTINCT
        Storno					= KBS.StornoDatum,
        BelegNr			        = STO.BelegNr,
        FallNr				    = LEI.FaFallID,
        NameVorname			    = PRS1.Name + ', ' + PRS1.Vorname,
        Betrag				    = STO.Betrag,
		LA						= dbo.ConcDistinctOrder(KBK.KontoNr),
        Valuta		            = STO.ValutaDatum,
        Budget			    	= CONVERT(varchar, BUD.Jahr) + '-' + CONVERT(varchar, BUD.Monat),
        Buchungstext			= STO.Text,
        ID						= STO.KbBuchungBruttoID,
        SA					    = USR.ShortName + ' (' + USR.NameVorname + ')',
        Team					= USR.OrgUnitShort,
        SZ					    = USR.SozialzentrumKurz,
        StorniertVon   		    = STU.ShortName + ' (' + STU.NameVorname + ')',
        BaPersonID$             = PRS1.BaPersonID
    FROM KbBuchungStorno KBS
        INNER JOIN dbo.KbBuchung				BUC WITH (READUNCOMMITTED)  ON BUC.KbBuchungID = KBS.KbBuchungID  -- Dies ist die Original-Nettobuchung, die storniert wurde und für die wir nun die STO-Bruttobuchungen suchen
        INNER JOIN dbo.KbBuchungKostenart		KBK WITH (READUNCOMMITTED)  ON KBK.KbBuchungID = BUC.KbBuchungID
        INNER JOIN dbo.KbBuchungBruttoPerson    KBP WITH (READUNCOMMITTED)  ON KBP.BgPositionID = KBK.BgPositionID
        INNER JOIN dbo.KbBuchungBrutto		    STO WITH (READUNCOMMITTED)  ON STO.StorniertKbBuchungBruttoID = KBP.KbBuchungBruttoID
        LEFT JOIN dbo.BgBudget				    BUD WITH (READUNCOMMITTED)  ON BUD.BgBudgetID = BUC.BgBudgetID
        LEFT JOIN dbo.BgFinanzplan			    BFP WITH (READUNCOMMITTED)  ON BFP.BgFinanzplanID = BUD.BgFinanzplanID
        LEFT JOIN dbo.FaLeistung			    LEI WITH (READUNCOMMITTED)  ON LEI.FaLeistungID = BUC.FaLeistungID
        LEFT JOIN dbo.FaFall				    FAL WITH (READUNCOMMITTED)  ON FAL.FaFallID = LEI.FaFallID
        LEFT JOIN dbo.BaPerson				    PRS1 WITH (READUNCOMMITTED) ON PRS1.BaPersonID = FAL.BaPersonID		-- Leistungsträger
        LEFT JOIN dbo.vwUser				    USR WITH (READUNCOMMITTED)  ON USR.UserID = LEI.UserID
        INNER JOIN dbo.vwUser				    STU WITH (READUNCOMMITTED)  ON STU.UserID = KBS.StornoUserID
        LEFT JOIN dbo.KbKonto				    KDEB WITH (READUNCOMMITTED) ON KDEB.KbPeriodeID = BUC.KbPeriodeID and	-- Debitoren-Konto (nur gefüllt wenn die Buchung eine Debitoren-Buchung ist)
																			                    KDEB.KontoNr = BUC.SollKtoNr and
																			                    KDEB.KbKontoartCodes = 20
    WHERE ISNULL(LEI.FaProzessCode, 0) = 300	-- W-Leistung
    --- AND 1 = (CASE WHEN {edtSucheKategorie.EditValue} = 1 /*Barbelege*/ AND (BUC.KbAuszahlungsArtCode IS NULL OR BUC.KbAuszahlungsArtCode &lt;&gt; 103) THEN 0 ELSE 1 END)
    --- AND 1 = (CASE WHEN {edtSucheKategorie.EditValue} = 2 /*Sollstellungen*/ AND KDEB.KbKontoID IS NULL THEN 0 ELSE 1 END)
    --- AND KBS.StornoDatum &gt;= {edtSucheStornoDatumVon}
    --- AND KBS.StornoDatum &lt;= {edtSucheStornoDatumBis}
	GROUP BY KBS.StornoDatum, STO.BelegNr, LEI.FaFallID, PRS1.Name + ', ' + PRS1.Vorname, STO.Betrag, STO.ValutaDatum, CONVERT(varchar, BUD.Jahr) + '-' + CONVERT(varchar, BUD.Monat),
			 STO.Text, STO.KbBuchungBruttoID, USR.ShortName + ' (' + USR.NameVorname + ')', USR.OrgUnitShort, USR.SozialzentrumKurz, STU.ShortName + ' (' + STU.NameVorname + ')', PRS1.BaPersonID
END
</value>
  </data>
  <assembly alias="System.Drawing" name="System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="xDocument.Properties.Buttons" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        iVBORw0KGgoAAAANSUhEUgAAAAwAAAAQCAYAAAAiYZ4HAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8
        YQUAAAAgY0hSTQAAeiYAAICEAAD6AAAAgOgAAHUwAADqYAAAOpgAABdwnLpRPAAAAF1JREFUOE9jZAAC
        Y2Pj/yAaGzh79iwjhjhIw///MzGwmJjYfxDGqSEtjeE/MgYpBhmEoYmQDSANKM7GpQHZmVg1oDsJxgdp
        pI4N2EIKJjbqJLIiDqSJEMaVovGKAwBnM3PWBP8PfwAAAABJRU5ErkJggg==
</value>
  </data>
  <data name="edtSucheStornoDatumVon.Properties.Buttons" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        iVBORw0KGgoAAAANSUhEUgAAAAwAAAAQCAYAAAAiYZ4HAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8
        YQUAAAAgY0hSTQAAeiYAAICEAAD6AAAAgOgAAHUwAADqYAAAOpgAABdwnLpRPAAAAFVJREFUOE9jZAAC
        Y2Pj/yCaEDh79iwjWA1MAzaNWOVAgsRguAuIcRKKGmROQwMD3D/IbKwaQApgitBp6mgAeYokG4abBmT/
        YKQ3smKapLREKFkjywMAd9eDN3Z9MMsAAAAASUVORK5CYII=
</value>
  </data>
  <data name="edtSucheStornoDatumBis.Properties.Buttons" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        iVBORw0KGgoAAAANSUhEUgAAAAwAAAAQCAYAAAAiYZ4HAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8
        YQUAAAAgY0hSTQAAeiYAAICEAAD6AAAAgOgAAHUwAADqYAAAOpgAABdwnLpRPAAAAFVJREFUOE9jZAAC
        Y2Pj/yCaEDh79iwjWA1MAzaNWOVAgsRguAuIcRKKGmROQwMD3D/IbKwaQApgitBp6mgAeYokG4abBmT/
        YKQ3smKapLREKFkjywMAd9eDN3Z9MMsAAAAASUVORK5CYII=
</value>
  </data>
</root>
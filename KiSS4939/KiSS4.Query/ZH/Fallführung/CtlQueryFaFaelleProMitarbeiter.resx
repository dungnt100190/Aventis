<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <metadata name="qryQuery.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>17, 17</value>
  </metadata>
  <data name="qryQuery.SelectStatement" xml:space="preserve">
    <value>DECLARE @Leistungen TABLE 
(
FaLeistungID int,
FaFallID int,
FaProzessCode int,
EroeffnungsGrundCode int
)

DECLARE @Faelle TABLE 
(
FaFallID int
)

DECLARE @OrgGruppeID int
SET @OrgGruppeID = NULL
--- SET @OrgGruppeID = {ctlOrgUnitTeamUser.SucheGruppe}

DECLARE @TeamID int
SET @TeamID = NULL
--- SET @TeamID = {ctlOrgUnitTeamUser.SucheTeam}


-- Selektiere alle Leistungen, bei der der selektierte MA entweder Leistungsverantwortlicher oder Sachbearbeiter ist 
-- und die den Datums-Bereichen entsprechen resp. aktiv oder inaktiv sind. Weitergehende Und/Oder-Verknüpfungen von Leistungen werden erst unten gefiltert
INSERT INTO @Leistungen
SELECT DISTINCT LEI.FaLeistungID, LEI.FaFallID, LEI.FaProzessCode, LEI.EroeffnungsGrundCode
FROM FaLeistung LEI WITH (READUNCOMMITTED) 
      INNER JOIN dbo.vwUser     USR WITH (READUNCOMMITTED) ON USR.UserID = LEI.UserID
WHERE ((@OrgGruppeID IS NULL AND @TeamID IS NULL) OR USR.OrgUnitID IN (SELECT OrgUnitID FROM dbo.fnOrgUnitsOfTeam(@OrgGruppeID,@TeamID)))
--- AND ({chkMAIstLeistungsverantwortlich} = 0 OR LEI.UserID = {ctlOrgUnitTeamUser.SucheUserID.LookupID})	-- Suche Leistungsverantwortlicher
--- AND ({chkSachbearbeiter} = 0 OR LEI.SachbearbeiterID = {ctlOrgUnitTeamUser.SucheUserID.LookupID})		-- Suche Sachbearbeiter
--- AND ({edtNurAktive} = 0 OR LEI.DatumBis IS NULL)								-- Nur aktive, d.h. DatumBis ist noch nicht gesetzt
--- AND ({edtNurPassive} = 0 OR LEI.DatumBis IS NOT NULL)							-- Nur inaktive, d.h. DatumBis ist gesetzt und allenfalls noch weiter eingeschränkt weiter unten
--- AND (LEI.DatumVon &gt;= {edtAufDatumNach})									-- Aufnahmedatum Von
--- AND (LEI.DatumVon &lt;= {edtAufDatumVor})									-- Aufnahmedatum Bis
--- AND (IsNull(LEI.DatumBis, '2999-12-31') &gt;= {edtAbDatumNach})						-- Abschlussdatum Von
--- AND (IsNull(LEI.DatumBis, '2999-12-31') &lt;= {edtAbDatumVor})							-- Abschlussdatum Bis




-- Filtere noch die Und/Oder-Verknüpfungen von Leistungen
INSERT INTO @Faelle
SELECT DISTINCT LEI.FaFallID 
FROM FaLeistung LEI WITH (READUNCOMMITTED) 
      INNER JOIN @Leistungen SEL  ON SEL.FaLeistungID = LEI.FaLeistungID
WHERE 
(	-- Prüfe, das mind. die selektierten Leistungen gefunden werden
---    ({chkNurSelektierteLeistungen} = 0 AND {chkLeistungF} = 1 AND EXISTS (SELECT FaLeistungID FROM @Leistungen WHERE FaFallID = LEI.FaFallID AND FaProzessCode = 200)) OR    -- F-Leistung (OR muss hier hinten sein, da u.U. chkFaLeistung nicht sichtbar ist)
---    ({chkNurSelektierteLeistungen} = 0 AND {chkLeistungW} = 1 AND EXISTS (SELECT FaLeistungID FROM @Leistungen WHERE FaFallID = LEI.FaFallID AND FaProzessCode = 300))		-- W-Leistung oder
--- OR ({chkNurSelektierteLeistungen} = 0 AND {chkLeistungV} = 1 AND EXISTS (SELECT FaLeistungID FROM @Leistungen WHERE FaFallID = LEI.FaFallID AND FaProzessCode = 210))		-- VM-Leistung oder
--- OR ({chkNurSelektierteLeistungen} = 0 AND {chkLeistungK} = 1 AND EXISTS (SELECT FaLeistungID FROM @Leistungen WHERE FaFallID = LEI.FaFallID AND FaProzessCode = 500 AND EroeffnungsGrundCode = 50001))		-- K-Leistung oder
--- OR ({chkNurSelektierteLeistungen} = 0 AND {chkLeistungKVermittlung} = 1 AND EXISTS (SELECT FaLeistungID FROM @Leistungen WHERE FaFallID = LEI.FaFallID AND FaProzessCode = 500 AND EroeffnungsGrundCode = 50002))	-- K-Leistung Vermittlungsfall oder
--- OR ({chkNurSelektierteLeistungen} = 0 AND {chkLeistungFA} = 1 AND EXISTS (SELECT FaLeistungID FROM @Leistungen WHERE FaFallID = LEI.FaFallID AND FaProzessCode = 201))		-- A-Leistung oder
--- OR ({chkLeistungWIKV} = 1 AND EXISTS (SELECT FaLeistungID FROM @Leistungen WHERE FaFallID = LEI.FaFallID AND FaProzessCode = 301))		-- WIK-Leistung Verwandtenunterstützung oder
--- OR ({chkLeistungWIKR} = 1 AND EXISTS (SELECT FaLeistungID FROM @Leistungen WHERE FaFallID = LEI.FaFallID AND FaProzessCode = 302))		-- WIK-Leistung Rückerstattungen oder
--- OR ({chkLeistungWIKU} = 1 AND EXISTS (SELECT FaLeistungID FROM @Leistungen WHERE FaFallID = LEI.FaFallID AND FaProzessCode = 304))		-- WIK-Leistung Unterhaltsbeiträge
) OR ( 	-- Prüfe, ob die exakte Selektion der Leistungen in dieser Konstellation existiert, d.h. selektierte Leistungen müssen im Fall vorkommen, und nicht selektierte Leistungen dürfen im Fall nicht vorkommen
---     {chkNurSelektierteLeistungen} = 1 AND (({chkLeistungW} = 1 AND EXISTS (SELECT FaLeistungID FROM @Leistungen WHERE FaFallID = LEI.FaFallID AND FaProzessCode = 300)) OR ({chkLeistungW} = 0 AND NOT EXISTS (SELECT FaLeistungID FROM @Leistungen WHERE FaFallID = LEI.FaFallID AND FaProzessCode = 300)))
--- AND {chkNurSelektierteLeistungen} = 1 AND (({chkLeistungV} = 1 AND EXISTS (SELECT FaLeistungID FROM @Leistungen WHERE FaFallID = LEI.FaFallID AND FaProzessCode = 210)) OR ({chkLeistungV} = 0 AND NOT EXISTS (SELECT FaLeistungID FROM @Leistungen WHERE FaFallID = LEI.FaFallID AND FaProzessCode = 210)))
--- AND {chkNurSelektierteLeistungen} = 1 AND (({chkLeistungK} = 1 AND EXISTS (SELECT FaLeistungID FROM @Leistungen WHERE FaFallID = LEI.FaFallID AND FaProzessCode = 500 AND EroeffnungsGrundCode = 50001)) OR ({chkLeistungK} = 0 AND NOT EXISTS (SELECT FaLeistungID FROM @Leistungen WHERE FaFallID = LEI.FaFallID AND FaProzessCode = 500 AND EroeffnungsGrundCode = 50001)))
--- AND {chkNurSelektierteLeistungen} = 1 AND (({chkLeistungKVermittlung} = 1 AND EXISTS (SELECT FaLeistungID FROM @Leistungen WHERE FaFallID = LEI.FaFallID AND FaProzessCode = 500 AND EroeffnungsGrundCode = 50002)) OR ({chkLeistungKVermittlung} = 0 AND NOT EXISTS (SELECT FaLeistungID FROM @Leistungen WHERE FaFallID = LEI.FaFallID AND FaProzessCode = 500 AND EroeffnungsGrundCode = 50002)))
--- AND {chkNurSelektierteLeistungen} = 1 AND (({chkLeistungFA} = 1 AND EXISTS (SELECT FaLeistungID FROM @Leistungen WHERE FaFallID = LEI.FaFallID AND FaProzessCode = 201)) OR ({chkLeistungFA} = 0 AND NOT EXISTS (SELECT FaLeistungID FROM @Leistungen WHERE FaFallID = LEI.FaFallID AND FaProzessCode = 201))) 
)


--- IF {chkGruppiertNachFall} = 1 	-- Benutzer will nach Fall gruppieren
BEGIN
	-- Nun werden die Kolonnen selektiert für alle Fälle (d.h. F-Fallführungs-Leistung)...
	SELECT DISTINCT
	LEI.FaFallID,
	LEI.FaLeistungID,
	LEI.BaPersonID,
	KlientenSystemID$ = FAL.BaPersonID,
	PER.Name,
	PER.Vorname,
	Geschlecht = CASE WHEN PER.GeschlechtCode = 1 THEN 'm' ELSE 'w' END,
	PER.Geburtsdatum,
	Leistung = CASE WHEN LEI.FaProzessCode = 500 AND LEI.EroeffnungsGrundCode = 50001 THEN 'K - KES-Massnahme'
				WHEN LEI.FaProzessCode = 500 AND LEI.EroeffnungsGrundCode = 50002 THEN 'K - Klientengelder Vermittlungsfall'
		    		WHEN LEI.FaProzessCode = 301 THEN 'WIK-Leistung Verwandtenunterstützung'
	  			WHEN LEI.FaProzessCode = 302 THEN 'WIK-Leistung Rückerstattung'
	     			WHEN LEI.FaProzessCode = 304 THEN 'WIK-Leistung Unterhaltsbeiträge'
			ELSE LOV.Value3 
		    END,
	Gastrecht = CASE WHEN GST.FaLeistungZugriffID IS NULL AND ORG.OrgUnitID IS NULL THEN CONVERT(bit, 0) ELSE CONVERT(bit, 1) END,
	DatumVon = LEI.DatumVon,
	DatumBis = LEI.DatumBis,
		HH             = (SELECT Count(*) 
				  FROM   BaWohnsituationPerson
				  WHERE  BaWohnsituationID = (SELECT TOP 1 A.BaWohnsituationID
							      FROM   BaWohnsituationPerson A
								INNER JOIN BaWohnsituation B ON B.BaWohnsituationID = A.BaWohnsituationID
							      WHERE  A.BaPersonID = LEI.BaPersonID
							      AND GetDate() BETWEEN IsNull(B.DatumVon,GetDate()) 
							      AND IsNull(B.DatumBis, GetDate())
							      ORDER BY B.DatumVon DESC)),
		BE             = (SELECT CASE WHEN Count(*) &gt; 0 THEN Count(*) END
				  FROM   BgFinanzplan_BaPerson FPP
				  WHERE BgFinanzplanID = (SELECT TOP 1 BgFinanzplanID
							  FROM   BgFinanzplan
							  WHERE FaLeistungID = LEI.FaLeistungID
							  ORDER BY IsNull(DatumVon,GeplantVon) DESC)),
		UE             = (SELECT CASE WHEN Count(*) &gt; 0 THEN Count(*) END
				  FROM   BgFinanzplan_BaPerson FPP
				  WHERE BgFinanzplanID = (SELECT TOP 1 BgFinanzplanID
							  FROM   BgFinanzplan
							  WHERE  FaLeistungID = LEI.FaLeistungID 
							  ORDER BY IsNull(DatumVon,GeplantVon) DESC)
				  AND FPP.istUnterstuetzt = 1),
		SA              = USA.NameVorname + IsNull(' (' + USA.OrgEinheitName + ')', ''),
		SB              = ISNULL(USB.NameVorname, '') + IsNull(' (' + USB.OrgEinheitName + ')', '')
	FROM FaLeistung LEI WITH (READUNCOMMITTED) 
	      INNER JOIN @Faelle 		SEL  ON SEL.FaFallID = LEI.FaFallID 
	      INNER JOIN dbo.FaFall  		FAL WITH (READUNCOMMITTED) ON FAL.FaFallID = LEI.FaFallID
	      INNER JOIN dbo.vwPerson  		PER WITH (READUNCOMMITTED) ON PER.BaPersonID = LEI.BaPersonID
	      INNER JOIN dbo.XLOVCode  		LOV WITH (READUNCOMMITTED) ON LOVName = 'FaProzess' AND LOV.Code = LEI.FaProzessCode
	      INNER JOIN dbo.vwUser  		USA WITH (READUNCOMMITTED) ON USA.UserID = LEI.UserID
	      LEFT JOIN dbo.vwUser  		USB WITH (READUNCOMMITTED) ON USB.UserID = LEI.SachbearbeiterID
	      LEFT JOIN dbo.FaLeistungZugriff 	GST WITH (READUNCOMMITTED) ON GST.FaLeistungID = LEI.FaLeistungID 
							  --- AND GST.UserID = {ctlOrgUnitTeamUser.SucheUserID.LookupID} AND LEI.UserID &lt;&gt; {ctlOrgUnitTeamUser.SucheUserID.LookupID} -- Nur 'echte' Gäste
	      LEFT  JOIN dbo.XOrgUnit_User      ORG WITH (READUNCOMMITTED) ON ORG.OrgUnitID = USA.OrgUnitID AND ORG.OrgUnitMemberCode = 3	-- 3 = Gast
	                                                  --- AND ORG.UserID = {ctlOrgUnitTeamUser.SucheUserID.LookupID} 

							  
	WHERE LEI.FaProzessCode = 200 	-- Nur F-Fallführungsleistungen, es gibt immer nur eine solche pro Fall
--- AND ({edtNurAktive} = 0 OR LEI.DatumBis IS NULL)								-- Nur aktive, d.h. DatumBis ist noch nicht gesetzt
--- AND ({edtNurPassive} = 0 OR LEI.DatumBis IS NOT NULL)							-- Nur inaktive, d.h. DatumBis ist gesetzt und allenfalls noch weiter eingeschränkt weiter unten
--- AND (LEI.DatumVon &gt;= {edtAufDatumNach})									-- Aufnahmedatum Von
--- AND (LEI.DatumVon &lt;= {edtAufDatumVor})									-- Aufnahmedatum Bis
--- AND (IsNull(LEI.DatumBis, '2999-12-31') &gt;= {edtAbDatumNach})						-- Abschlussdatum Von
--- AND (IsNull(LEI.DatumBis, '2999-12-31') &lt;= {edtAbDatumVor})							-- Abschlussdatum Bis
	Order By PER.Name, PER.Vorname, LEI.DatumVon
END

-- ... und für alle Leistungen dieser Fälle (ausser F-Fallführung natürlich, die kam ja oben schon dran)	
SELECT DISTINCT
LEI.FaFallID,
LEI.FaLeistungID,
LEI.BaPersonID,
KlientenSystemID$ = FAL.BaPersonID,
PER.Name,
PER.Vorname,
Geschlecht = CASE WHEN PER.GeschlechtCode = 1 THEN 'm' ELSE 'w' END,
PER.Geburtsdatum,
Leistung = CASE WHEN LEI.FaProzessCode = 500 AND LEI.EroeffnungsGrundCode = 50001 THEN 'K - KES-Massnahme'
	        WHEN LEI.FaProzessCode = 500 AND LEI.EroeffnungsGrundCode = 50002 THEN 'K - Klientengelder Vermittlungsfall'
	        WHEN LEI.FaProzessCode = 301 THEN 'WIK-Leistung Verwandtenunterstützung'
	        WHEN LEI.FaProzessCode = 302 THEN 'WIK-Leistung Rückerstattung'
	        WHEN LEI.FaProzessCode = 304 THEN 'WIK-Leistung Unterhaltsbeiträge'
	        ELSE LOV.Value3 
	    END,
	Gastrecht = CASE WHEN GST.FaLeistungZugriffID IS NULL AND ORG.OrgUnitID IS NULL THEN CONVERT(bit, 0) ELSE CONVERT(bit, 1) END,
	DatumVon = LEI.DatumVon,
	DatumBis = LEI.DatumBis,
	LOV.SortKey,
      	HH             = (SELECT Count(*) 
                          FROM   BaWohnsituationPerson
                          WHERE  BaWohnsituationID = (SELECT TOP 1 A.BaWohnsituationID
                                                      FROM   BaWohnsituationPerson A
                                                        INNER JOIN BaWohnsituation B ON B.BaWohnsituationID = A.BaWohnsituationID
                                                      WHERE  A.BaPersonID = LEI.BaPersonID
                                                      AND GetDate() BETWEEN IsNull(B.DatumVon,GetDate()) 
                                                      AND IsNull(B.DatumBis, GetDate())
                                                      ORDER BY B.DatumVon DESC)),
      	BE             = (SELECT CASE WHEN Count(*) &gt; 0 THEN Count(*) END
                          FROM   BgFinanzplan_BaPerson FPP
                          WHERE BgFinanzplanID = (SELECT TOP 1 BgFinanzplanID
                                                  FROM   BgFinanzplan
                                                  WHERE FaLeistungID = LEI.FaLeistungID
                                                  ORDER BY IsNull(DatumVon,GeplantVon) DESC)),
      	UE             = (SELECT CASE WHEN Count(*) &gt; 0 THEN Count(*) END
                          FROM   BgFinanzplan_BaPerson FPP
                          WHERE BgFinanzplanID = (SELECT TOP 1 BgFinanzplanID
                                                  FROM   BgFinanzplan
                                                  WHERE  FaLeistungID = LEI.FaLeistungID 
                                                  ORDER BY IsNull(DatumVon,GeplantVon) DESC)
                          AND FPP.istUnterstuetzt = 1),
	SA              = USA.NameVorname + IsNull(' (' + USA.OrgEinheitName + ')', ''),
	SB              = ISNULL(USB.NameVorname, '') + IsNull(' (' + USB.OrgEinheitName + ')', '')
FROM FaLeistung LEI WITH (READUNCOMMITTED) 
	  INNER JOIN @Faelle 		SEL  ON SEL.FaFallID = LEI.FaFallID 
      INNER JOIN dbo.FaFall  		FAL WITH (READUNCOMMITTED) ON FAL.FaFallID = LEI.FaFallID
      INNER JOIN dbo.vwPerson  		PER WITH (READUNCOMMITTED) ON PER.BaPersonID = LEI.BaPersonID
      INNER JOIN dbo.XLOVCode  		LOV WITH (READUNCOMMITTED) ON LOVName = 'FaProzess' AND LOV.Code = LEI.FaProzessCode
      INNER JOIN dbo.vwUser  		USA WITH (READUNCOMMITTED) ON USA.UserID = LEI.UserID
      LEFT JOIN dbo.vwUser  		USB WITH (READUNCOMMITTED) ON USB.UserID = LEI.SachbearbeiterID
      LEFT JOIN dbo.FaLeistungZugriff 	GST WITH (READUNCOMMITTED) ON GST.FaLeistungID = LEI.FaLeistungID
                                                  --- AND GST.UserID = {ctlOrgUnitTeamUser.SucheUserID.LookupID} AND LEI.UserID &lt;&gt; {ctlOrgUnitTeamUser.SucheUserID.LookupID} -- Nur 'echte' Gäste
      LEFT  JOIN dbo.XOrgUnit_User      ORG WITH (READUNCOMMITTED) ON ORG.OrgUnitID = USA.OrgUnitID AND ORG.OrgUnitMemberCode = 3	-- 3 = Gast
						  --- AND ORG.UserID = {ctlOrgUnitTeamUser.SucheUserID.LookupID} 
WHERE (LEI.FaProzessCode &lt; 400 OR LEI.FaProzessCode &gt;= 500) AND LEI.FaProzessCode &lt;&gt; 201 -- Alim-Leistungen nicht anzeigen 
--- AND ({chkGruppiertNachFall} = 0 OR LEI.FaProzessCode &lt;&gt; 200) 	-- Alle Leistungen ausser F-Fallführungsleistungen (aber nur, wenn gruppiert nach Fall, sonst wird auch die Fallführung aufgelistet)
--- AND ({edtNurAktive} = 0 OR LEI.DatumBis IS NULL)								-- Nur aktive, d.h. DatumBis ist noch nicht gesetzt
--- AND ({edtNurPassive} = 0 OR LEI.DatumBis IS NOT NULL)							-- Nur inaktive, d.h. DatumBis ist gesetzt und allenfalls noch weiter eingeschränkt weiter unten
--- AND (LEI.DatumVon &gt;= {edtAufDatumNach})									-- Aufnahmedatum Von
--- AND (LEI.DatumVon &lt;= {edtAufDatumVor})									-- Aufnahmedatum Bis
--- AND (IsNull(LEI.DatumBis, '2999-12-31') &gt;= {edtAbDatumNach})						-- Abschlussdatum Von
--- AND (IsNull(LEI.DatumBis, '2999-12-31') &lt;= {edtAbDatumVor})							-- Abschlussdatum Bis
Order By PER.Name, PER.Vorname, LOV.SortKey, LEI.DatumVon</value>
  </data>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="edtAufDatumNach.Properties.Buttons" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        iVBORw0KGgoAAAANSUhEUgAAAAwAAAAQCAYAAAAiYZ4HAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8
        YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAABMSURBVDhPYwABY2Pj/8RgsGIQgHFQBKEAqxyIQwyGKsdu
        MjrAqaGhgQErG6sGkAKYInSaOhpAYERrAAFkNk4NuACGBmIwVDkpgIEBAO2ojyYwtBe7AAAAAElFTkSu
        QmCC
</value>
  </data>
  <data name="edtAufDatumVor.Properties.Buttons" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        iVBORw0KGgoAAAANSUhEUgAAAAwAAAAQCAYAAAAiYZ4HAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8
        YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAABMSURBVDhPYwABY2Pj/8RgsGIQgHFQBKEAqxyIQwyGKsdu
        MjrAqaGhgQErG6sGkAKYInSaOhpAYERrAAFkNk4NuACGBmIwVDkpgIEBAO2ojyYwtBe7AAAAAElFTkSu
        QmCC
</value>
  </data>
  <data name="edtAbDatumNach.Properties.Buttons" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        iVBORw0KGgoAAAANSUhEUgAAAAwAAAAQCAYAAAAiYZ4HAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8
        YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAABMSURBVDhPYwABY2Pj/8RgsGIQgHFQBKEAqxyIQwyGKsdu
        MjrAqaGhgQErG6sGkAKYInSaOhpAYERrAAFkNk4NuACGBmIwVDkpgIEBAO2ojyYwtBe7AAAAAElFTkSu
        QmCC
</value>
  </data>
  <data name="edtAbDatumVor.Properties.Buttons" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        iVBORw0KGgoAAAANSUhEUgAAAAwAAAAQCAYAAAAiYZ4HAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8
        YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAABMSURBVDhPYwABY2Pj/8RgsGIQgHFQBKEAqxyIQwyGKsdu
        MjrAqaGhgQErG6sGkAKYInSaOhpAYERrAAFkNk4NuACGBmIwVDkpgIEBAO2ojyYwtBe7AAAAAElFTkSu
        QmCC
</value>
  </data>
  <data name="kissDocumentButton1.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        Qk02BQAAAAAAADYEAAAoAAAAEAAAABAAAAABAAgAAAAAAAAAAADEDgAAxA4AAAABAAAAAQAAAAAA/wAA
        gP8AgAD/AICA/4AAAP+AAID/gIAA/8DAwP/A3MD/8Mqm/wQEBP8ICAj/DAwM/xEREf8WFhb/HBwc/yIi
        Iv8pKSn/VVVV/01NTf9CQkL/OTk5/4B8//9QUP//kwDW///szP/G1u//1ufn/5Cprf8AADP/AABm/wAA
        mf8AAMz/ADMA/wAzM/8AM2b/ADOZ/wAzzP8AM///AGYA/wBmM/8AZmb/AGaZ/wBmzP8AZv//AJkA/wCZ
        M/8AmWb/AJmZ/wCZzP8Amf//AMwA/wDMM/8AzGb/AMyZ/wDMzP8AzP//AP9m/wD/mf8A/8z/MwAA/zMA
        M/8zAGb/MwCZ/zMAzP8zAP//MzMA/zMzM/8zM2b/MzOZ/zMzzP8zM///M2YA/zNmM/8zZmb/M2aZ/zNm
        zP8zZv//M5kA/zOZM/8zmWb/M5mZ/zOZzP8zmf//M8wA/zPMM/8zzGb/M8yZ/zPMzP8zzP//M/8z/zP/
        Zv8z/5n/M//M/zP///9mAAD/ZgAz/2YAZv9mAJn/ZgDM/2YA//9mMwD/ZjMz/2YzZv9mM5n/ZjPM/2Yz
        //9mZgD/ZmYz/2ZmZv9mZpn/ZmbM/2aZAP9mmTP/Zplm/2aZmf9mmcz/Zpn//2bMAP9mzDP/ZsyZ/2bM
        zP9mzP//Zv8A/2b/M/9m/5n/Zv/M/8wA////AMz/mZkA/5kzmf+ZAJn/mQDM/5kAAP+ZMzP/mQBm/5kz
        zP+ZAP//mWYA/5lmM/+ZM2b/mWaZ/5lmzP+ZM///mZkz/5mZZv+ZmZn/mZnM/5mZ//+ZzAD/mcwz/2bM
        Zv+ZzJn/mczM/5nM//+Z/wD/mf8z/5nMZv+Z/5n/mf/M/5n////MAAD/mQAz/8wAZv/MAJn/zADM/5kz
        AP/MMzP/zDNm/8wzmf/MM8z/zDP//8xmAP/MZjP/mWZm/8xmmf/MZsz/mWb//8yZAP/MmTP/zJlm/8yZ
        mf/Mmcz/zJn//8zMAP/MzDP/zMxm/8zMmf/MzMz/zMz//8z/AP/M/zP/mf9m/8z/mf/M/8z/zP///8wA
        M///AGb//wCZ/8wzAP//MzP//zNm//8zmf//M8z//zP///9mAP//ZjP/zGZm//9mmf//Zsz/zGb///+Z
        AP//mTP//5lm//+Zmf//mcz//5n////MAP//zDP//8xm///Mmf//zMz//8z/////M//M/2b///+Z////
        zP9mZv//Zv9m/2b/////Zmb//2b/////Zv8hAKX/X19f/3d3d/+Ghob/lpaW/8vLy/+ysrL/19fX/93d
        3f/j4+P/6urq//Hx8f/4+Pj/8Pv//6SgoP+AgID/AAD//wD/AP8A/////wAA//8A/////wD///////T0
        9OwKCgoKCgoKCgoKCgr09PTsBwcHBwcHBwcHBwcK9PT07P////////////8HCvT09Oz//////wcHBwf/
        BwoK/Ar8CvwK/Ar8/////wcK/P//////////CgcHB/8HCgr/Cvz//Ar///z/////Bwr8//wKBwr8B/8K
        BwcH/wcKCv8K/Ar8Cvz//Af/B/8HCvz//P/8Cv8KBwoH/wf/BwoK/Ar/Cvz//Ar8//8H/wcK/Ar8CvwK
        /Ar8CgcHB/8HCgr///////////z//woKCgr8CvwK/Ar8CvwK///s/wr09PT07P//////////7Ar09PT0
        9Ozs7Ozs7Ozs7Oz09PQ=
</value>
  </data>
</root>
<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="qryQuery.SelectStatement" xml:space="preserve">
    <value>select Typ = 'Institution', 
       [Nr] = INS.BaInstitutionID,
       Name = INS.Name,
       Ort = INS.PLZOrt,
       Status = dbo.fnLOVText('BaFreigabeStatus',INS.BaFreigabeStatusCode),
       Einzahlungsschein   = ES.ShortText,
       PostKontoNummer     = dbo.fnTnToPc(ZAH.PostKontoNummer),
       BankKontoNummer     = ZAH.BankKontoNummer,
       BankName            = BNK.Name,
       BankClearingNr      = BNK.ClearingNr,
       BankPCKontoNr       = dbo.fnTnToPc(BNK.PCKontoNr),
       SZ   = '',
       OE   = '',
       MA   = '',         
       FallBaPersonID$     = null,
       BaInstitutionID$    = INS.BaInstitutionID,
       BaZahlungswegID$    = ZAH.BaZahlungswegID
from   vwInstitution INS
       inner join BaZahlungsweg ZAH on ZAH.BaInstitutionID = INS.BaInstitutionID
       left  join BaBank        BNK on BNK.BaBankID = ZAH.BaBankID
       left  join XLOVCode      ES  on ES.LOVName = 'BgEinzahlungsschein' and
                                       ES.Code = ZAH.EinzahlungsscheinCode
where  ZAH.EinzahlungsscheinCode in (2,3,5) and 
       Kreditor = 1 and
       IBANNummer is null

union all

select Typ                 = 'Person', 
       [Nr]                = PRS.BaPersonID,
       Name                = PRS.NameVorname,
       Ort                 = PRS.WohnsitzPLZOrt,
       Status             = (select top 1 
                                     case when getdate() between isnull(FAP.DatumVon,getdate()) and isnull(FAP.DatumBis,getdate()) and
                                               FAL.DatumBis is null
                                     then 'aktiv' 
                                     else 'inaktiv'
                                     end
                              from   FaFallPerson FAP
                                     inner join FaFall FAL on FAL.FaFallID = FAP.FaFallID
                              where  FAP.BaPersonID = PRS.BaPersonID
                              order by FAL.DatumVon desc),
       Einzahlungsschein   = ES.ShortText,
       PostKontoNummer     = dbo.fnTnToPc(ZAH.PostKontoNummer),
       BankKontoNummer     = ZAH.BankKontoNummer,
       BankName            = BNK.Name,
       BankClearingNr      = BNK.ClearingNr,
       BankPCKontoNr       = dbo.fnTnToPc(BNK.PCKontoNr),
       SZ                  = USR.Sozialzentrum,
       OE                  = USR.OrgUnit,
       MA                  = USR.NameVorname,         
       FallBaPersonID$     = (select top 1 FAL.BaPersonID 
                              from   FaFallPerson FAP
                                     inner join FaFall FAL on FAL.FaFallID = FAP.FaFallID
                              where FAP.BaPersonID = PRS.BaPersonID),
       BaInstitutionID$    = null,
       BaZahlungswegID$    = ZAH.BaZahlungswegID
from   vwPerson PRS
       inner join BaZahlungsweg ZAH on ZAH.BaPersonID = PRS.BaPersonID
       left  join BaBank                BNK on BNK.BaBankID = ZAH.BaBankID
       left  join XLOVCode              ES  on ES.LOVName = 'BgEinzahlungsschein' and
                                               ES.Code = ZAH.EinzahlungsscheinCode
       left  join BgFinanzplan_BaPerson FPP on FPP.BaPersonID = PRS.BaPersonID AND
                                               FPP.BgFinanzplanID = (select top 1 F.BgFinanzplanID
                                                                     from   BgFinanzplan_BaPerson P
                                                                            inner join BgFinanzplan F on F.BgFinanzplanID = P.BgFinanzplanID
                                                                     where  BaPersonID = PRS.BaPersonID 
                                                                     order by F.DatumVon desc)
       left join BgFinanzplan           FPL on FPL.BgFinanzplanID = FPP.BgFinanzplanID              
       left join FaLeistung             LEI on LEI.FaLeistungID = FPL.FaLeistungID
       left join vwUser                 USR on USR.UserID = LEI.UserID
where  ZAH.EinzahlungsscheinCode in (2,3,5) and 
       IBANNummer is null

order by Typ, Name</value>
  </data>
  <assembly alias="System.Drawing" name="System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="qryQuery.TrayLocation" type="System.Drawing.Point, System.Drawing">
    <value>17, 17</value>
  </data>
  <data name="xDocument.Properties.Buttons" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        iVBORw0KGgoAAAANSUhEUgAAAAwAAAAQCAYAAAAiYZ4HAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8
        YQUAAAAgY0hSTQAAeiYAAICEAAD6AAAAgOgAAHUwAADqYAAAOpgAABdwnLpRPAAAAF1JREFUOE9jZAAC
        Y2Pj/yAaGzh79iwjhjhIw///MzGwmJjYfxDGqSEtjeE/MgYpBhmEoYmQDSANKM7GpQHZmVg1oDsJxgdp
        pI4N2EIKJjbqJLIiDqSJEMaVovGKAwBnM3PWBP8PfwAAAABJRU5ErkJggg==
</value>
  </data>
</root>
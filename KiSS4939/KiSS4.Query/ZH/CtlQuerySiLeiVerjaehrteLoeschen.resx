<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <metadata name="qryQuery.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>17, 17</value>
  </metadata>
  <data name="qryQuery.SelectStatement" xml:space="preserve">
    <value>DECLARE @SUM TABLE (BaSicherheitsleistungID int, SaldoPer datetime, Betrag money)
INSERT @SUM (BaSicherheitsleistungID, SaldoPer, Betrag)
SELECT SIP.BaSicherheitsleistungID,
       CASE WHEN (MAX(KBB.ValutaDatum)   IS NULL OR MAX(KBU.ValutaDatum) &gt;= MAX(KBB.ValutaDatum  )) AND 
                 (MAX(MIG.Buchungsdatum) IS NULL OR MAX(KBU.ValutaDatum) &gt;= MAX(MIG.Buchungsdatum)) THEN MAX(KBU.ValutaDatum) 
            WHEN (MAX(MIG.Buchungsdatum) IS NULL OR MAX(KBB.ValutaDatum) &gt;= MAX(MIG.Buchungsdatum)) THEN MAX(KBB.ValutaDatum)
            ELSE                                                                                         MAX(MIG.Buchungsdatum)
       END,
       isNull(SUM(MIG.Betrag), 0) + isNull(SUM(KBK.Betrag), 0) - isNull(SUM(KBP.Betrag), 0)

FROM dbo.BaSicherheitsleistung                      SIC  WITH(READUNCOMMITTED)
  INNER JOIN      dbo.BaSicherheitsleistungPosition SIP  WITH(READUNCOMMITTED) ON SIP.BaSicherheitsleistungID = SIC.BaSicherheitsleistungID
--mig
  LEFT OUTER JOIN dbo.MigDetailBuchung              MIG  WITH(READUNCOMMITTED) ON MIG.MigDetailBuchungID = SIP.MigDetailBuchungID
--netto (ausgaben)
  LEFT OUTER JOIN dbo.KbBuchung                     KBU  WITH(READUNCOMMITTED) ON KBU.KbBuchungID        = SIP.KbBuchungID AND
                                                                                  KBU.KbBuchungStatusCode NOT IN (9) -- Rückläufer ausschliessen
  LEFT OUTER JOIN dbo.KbBuchungKostenart            KBK  WITH(READUNCOMMITTED) ON KBK.KbBuchungID        = KBU.KbBuchungID
  LEFT OUTER JOIN dbo.BgKostenart                   BKAN WITH(READUNCOMMITTED) ON BKAN.BgKostenartID     = KBK.BgKostenartID
--brutto (einnahmen)
  LEFT OUTER JOIN dbo.KbBuchungBrutto               KBB  WITH(READUNCOMMITTED) ON KBB.KbBuchungBruttoID  = SIP.KbBuchungBruttoID AND /*KBB.Betrag &gt;= 0 AND*/ SIP.KbBuchungID IS NULL
  LEFT OUTER JOIN dbo.KbBuchungBruttoPerson         KBP  WITH(READUNCOMMITTED) ON KBP.KbBuchungBruttoID  = KBB.KbBuchungBruttoID
  LEFT OUTER JOIN dbo.BgKostenart                   BKAB WITH(READUNCOMMITTED) ON BKAB.BgKostenartID     = IsNull(KBP.SpezBgKostenartID,KBB.BgKostenartID)
WHERE SIC.Geloescht = 0 AND
      (MIG.KissLeistungsart in ('320','321','860','861','862')
       OR BKAN.KontoNr      in ('320','321','860','861','862')
       OR BKAB.KontoNr      in ('320','321','860','861','862'))
GROUP BY SIP.BaSicherheitsleistungID

UPDATE SME
SET Betrag   = Betrag - BUC.Summe,
    SaldoPer = CASE WHEN SME.SaldoPer &lt; BUC.SaldoPer THEN BUC.SaldoPer ELSE SME.SaldoPer END
FROM @SUM SME
  INNER JOIN (SELECT BSP.BaSicherheitsleistungID, Summe = SUM(KBB.Betrag), SaldoPer = MAX(KBB.ValutaDatum)
              FROM dbo.KbBuchungBrutto                       KBB WITH(READUNCOMMITTED)
                INNER JOIN dbo.BgKostenart                   BKA WITH(READUNCOMMITTED) ON BKA.BgKostenartID           = KBB.BgKostenartID
                INNER JOIN dbo.KbBuchungBrutto               ORB WITH(READUNCOMMITTED) ON ORB.KbBuchungBruttoID       = KBB.StorniertKbBuchungBruttoID --OR ORB.KbBuchungBruttoID = KBB.NeubuchungVonKbBuchungBruttoID
                LEFT  JOIN (SELECT DISTINCT ORP.KbBuchungBruttoID, KBK.KbBuchungID
                            FROM KbBuchungBruttoPerson      ORP
                              INNER JOIN KbBuchungKostenart KBK ON KBK.BgPositionID = ORP.BgPositionID) KBK ON KBK.KbBuchungBruttoID = ORB.KbBuchungBruttoID
                INNER JOIN dbo.BaSicherheitsleistungPosition BSP WITH(READUNCOMMITTED) ON BSP.KbBuchungID             = KBK.KbBuchungID OR BSP.KbBuchungBruttoID = ORB.KbBuchungBruttoID
              WHERE (KBB.StorniertKbBuchungBruttoID IS NOT NULL)-- OR KBB.NeubuchungVonKbBuchungBruttoID IS NOT NULL)
                     AND BKA.KontoNr in ('320','321','860','861','862')
              GROUP BY BSP.BaSicherheitsleistungID ) BUC ON BUC.BaSicherheitsleistungID = SME.BaSicherheitsleistungID


-- Output in KiSS
select BaSicherheitsleistungID$ = SIC.BaSicherheitsleistungID,
       Saldo          = IsNull(SLD.Betrag,0),
       SaldoPer       = SLD.SaldoPer,
       Typ            = case 
                          when SIC.MigDarlehenID is not null then 'alt'
                          when neu = 1 then 'neu'
                          else 'lauf.'
                        end,
       Art            = ART.ShortText,
       KlientLine     = PRS.NameVorname,
       Klient         = PRS.NameVorname + CHAR(13) + CHAR(10) + PRS.WohnsitzMehrzeilig,
       MA             = USR.DisplayText,
       Institution    = isnull(INS.Name,BNK.Name),
       ZusatzInfo     = isNull(INS.AdresseMehrzeilig,
                                   isNull(BNK.Strasse + char(13) + char(10),'') + BNK.PLZ + ' ' + BNK.Ort),
       Selected       = CAST(1 as bit),
       FaLeistungID = coalesce(LEI.FaLeistungID,LEI2.FaLeistungID,LEI3.FaLeistungID),
       FaFallID     = coalesce(LEI.FaFallID,LEI2.FaFallID,LEI3.FaFallID),
       ST = SIC.BaPersonID,
       FallBaPersonID = isNull(FAL.BaPersonID,SIC.BaPersonID)
from   dbo.BaSicherheitsleistung    SIC WITH(READUNCOMMITTED)
       left join @SUM               SLD                       ON SLD.BaSicherheitsleistungID = SIC.BaSicherheitsleistungID
       -- 1. Variante, um FaLeistung zu bestimmen: Klient als LT in aktivem W
       left join dbo.FaLeistung     LEI WITH(READUNCOMMITTED) ON LEI.BaPersonID = SIC.BaPersonID and
                                       LEI.FaProzessCode = 300 and
                                       LEI.DatumBis is null and
                                       LEI.FaLeistungID = (select top 1 FaLeistungID
                                                           from   dbo.FaLeistung WITH(READUNCOMMITTED)
                                                           where  BaPersonID = SIC.BaPersonID and
                                                                  FaProzessCode = 300 and
                                                                  DatumBis is null
                                                           order by DatumVon desc)
       -- 2. Variante, um FaLeistung zu bestimmen: Klient als Mitgied UE
       left join dbo.BgFinanzplan_BaPerson FPP WITH(READUNCOMMITTED) ON FPP.BaPersonID = SIC.BaPersonID AND
                                                                        FPP.IstUnterstuetzt = 1 AND
                                                                        FPP.BgFinanzplan_BaPersonID = (select top 1 P.BgFinanzplan_BaPersonID
                                                                                                       from   BgFinanzplan_BaPerson P
                                                                                                              inner join BgFinanzplan F on F.BgFinanzplanID = P.BgFinanzplanID
                                                                                                       where  P.BaPersonID = SIC.BaPersonID and
                                                                                                              P.IstUnterstuetzt = 1
                                                                                                       order by F.DatumVon desc)
       left join dbo.BgFinanzplan   FPL  WITH(READUNCOMMITTED) ON FPL.BgFinanzplanID = FPP.BgFinanzplanID
       left join dbo.FaLeistung     LEI2 WITH(READUNCOMMITTED) ON LEI2.FaLeistungID = FPL.FaLeistungID

       -- 3. Variante, um FaLeistung zu bestimmen: Klient als LT in inaktivem W
       left join dbo.FaLeistung     LEI3 WITH(READUNCOMMITTED) ON LEI3.BaPersonID = SIC.BaPersonID and
                                       LEI3.FaProzessCode = 300 and
                                       LEI3.DatumBis is not null and
                                       LEI3.FaLeistungID = (select top 1 FaLeistungID
                                                           from   dbo.FaLeistung WITH(READUNCOMMITTED)
                                                           where  BaPersonID = SIC.BaPersonID and
                                                                  FaProzessCode = 300 and
                                                                  DatumBis is not null
                                                           order by DatumVon desc)
       left join dbo.FaFall         FAL  WITH(READUNCOMMITTED) ON FAL.FaFallID = coalesce(LEI.FaFallID,LEI2.FaFallID,LEI3.FaFallID)

       left join dbo.vwPerson       PRS WITH(READUNCOMMITTED) ON PRS.BaPersonID = SIC.BaPersonID
       left join dbo.vwUser         USR WITH(READUNCOMMITTED) ON USR.UserID = coalesce(LEI.UserID,LEI2.UserID,LEI3.UserID)

       left join dbo.vwInstitution  INS WITH(READUNCOMMITTED) ON INS.BaInstitutionID = SIC.BaInstitutionID
       left join dbo.BaBank         BNK WITH(READUNCOMMITTED) ON BNK.BaBankID = SIC.BaBankID
       left join dbo.XLOVCode       ART WITH(READUNCOMMITTED) ON ART.LOVName = 'BaMieteSicherheitsleistungArt' and ART.Code = SIC.BaMieteSicherheitsleistungArtCode
where SIC.Geloescht = 0
  AND Betrag = $0.00
---  AND SaldoPer &lt; dbo.fnDateSerial({edtJahr},12,31)
order by PRS.NameVorname
</value>
  </data>
  <assembly alias="System.Drawing" name="System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="xDocument.Properties.Buttons" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        iVBORw0KGgoAAAANSUhEUgAAAAwAAAAQCAYAAAAiYZ4HAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8
        YQUAAAAgY0hSTQAAeiYAAICEAAD6AAAAgOgAAHUwAADqYAAAOpgAABdwnLpRPAAAAF1JREFUOE9jZAAC
        Y2Pj/yAaGzh79iwjhjhIw///MzGwmJjYfxDGqSEtjeE/MgYpBhmEoYmQDSANKM7GpQHZmVg1oDsJxgdp
        pI4N2EIKJjbqJLIiDqSJEMaVovGKAwBnM3PWBP8PfwAAAABJRU5ErkJggg==
</value>
  </data>
</root>
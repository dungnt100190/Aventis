<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <metadata name="qryQuery.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>17, 17</value>
  </metadata>
  <data name="qryQuery.SelectStatement" xml:space="preserve">
    <value>DECLARE @DatumVon DATETIME;
DECLARE @DatumBis DATETIME;
---SET @DatumVon = {edtDatumVon};
---SET @DatumBis = {edtDatumBis};

DECLARE @VmVMAbkArtFldID INT;
EXEC dbo.spGetDynaFldIDfromTextmarke 'VmATAbkArt', @VmVMAbkArtFldID OUT;

SELECT [Klient]          = PRS.Name + ISNULL(', ' + PRS.Vorname,''),
       [SAR]             = USR.LastName + ISNULL(', ' + USR.FirstName,''),       
       [Abklärungsart]   = dbo.fnLOVText('VmAbkArt', CONVERT(INT, DVL.[Value])), 
       [Eröffnungsdatum] = LEI.DatumVon,
       [Abschlussdatum]  = LEI.DatumBis,
       [Abschlussgrund]  = dbo.fnLOVText('AbschlussGrund', LEI.AbschlussgrundCode),
       [UserID$]         = USR.UserID,
       [BaPersonID$]     = LEI.BaPersonID
FROM dbo.FaLeistung        LEI WITH (READUNCOMMITTED)
  INNER JOIN dbo.XUser     USR WITH (READUNCOMMITTED) ON USR.UserID = LEI.UserID
  INNER JOIN dbo.BaPerson  PRS WITH (READUNCOMMITTED) ON PRS.BaPersonID = LEI.BaPersonID
  LEFT  JOIN DynaValue     DVL WITH (READUNCOMMITTED) ON DVL.FaLeistungID = LEI.FaLeistungID
                                                     AND DVL.DynaFieldID = @VmVMAbkArtFldID
WHERE LEI.ModulID = 5         -- VM
  AND LEI.FaProzessCode = 505 -- VM Auftrag
  AND LEI.DatumVon &lt;= @DatumBis
  AND (LEI.DatumBis IS NULL OR LEI.DatumBis &gt;= @DatumVon)
--- AND ({NurAktive} = 0 OR (@DatumBis BETWEEN DatumVon AND ISNULL(DatumBis, @DatumBis)))
ORDER BY [SAR], [Klient];</value>
  </data>
  <assembly alias="System.Drawing" name="System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="xDocument.Properties.Buttons" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        iVBORw0KGgoAAAANSUhEUgAAAAwAAAAQCAYAAAAiYZ4HAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8
        YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAABbSURBVDhPY2AAAmNj4/+4MEgeA4AU//8/EwOLiYn9B2Gc
        GtLSGP4jY5BikEEYmgjZANIAUgO3CZcGZGdi1YDuJBgfpJE6NmALKZjYqJPIijh8KRYmhzXlEhIEANZ8
        ev1ASni6AAAAAElFTkSuQmCC
</value>
  </data>
  <metadata name="qryListe2.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>119, 17</value>
  </metadata>
  <data name="qryListe2.SelectStatement" xml:space="preserve">
    <value>DECLARE @DatumVon DATETIME;
DECLARE @DatumBis DATETIME;
---SET @DatumVon = {edtDatumVon};
---SET @DatumBis = {edtDatumBis};

DECLARE @Aufnahmen TABLE
(
  Auftrag   INT,
  UserID    INT,
  Eröffnung DATETIME
);

DECLARE @Abschlüsse TABLE
(
  Auftrag            INT,
  UserID             INT,
  AbschlussgrundCode INT,
  Abschluss          DATETIME
);

DECLARE @Result TABLE
(
  Beschreibung VARCHAR (100),
  SAR          VARCHAR (100),
  Eröffnungen  INT,
  Abschlüsse   INT, 
  SortKey$     INT
);

INSERT INTO @Aufnahmen
  SELECT VmAuftragCode,
         UserID,
         DatumVon
  FROM dbo.FaLeistung WITH (READUNCOMMITTED)
  WHERE ModulID = 5         -- VM
    AND FaProzessCode = 505 -- VM Auftrag
    AND DatumVon BETWEEN @DatumVon AND @DatumBis
--- AND ({NurAktive} = 0 OR (@DatumBis BETWEEN DatumVon AND ISNULL(DatumBis, @DatumBis)));

INSERT INTO @Abschlüsse
  SELECT VmAuftragCode,
         UserID,
         AbschlussgrundCode,
         DatumVon
  FROM dbo.FaLeistung WITH (READUNCOMMITTED)
  WHERE ModulID = 5         -- VM
    AND FaProzessCode = 505 -- VM Auftrag
    AND DatumBis BETWEEN @DatumVon AND @DatumBis
--- AND ({NurAktive} = 0 OR (@DatumBis BETWEEN DatumVon AND IsNull(DatumBis, @DatumBis)));

DECLARE @auftragCode INT;
DECLARE @userID      INT;
DECLARE @aufCounter  INT;
DECLARE @absCounter  INT;
DECLARE @SortKey     INT;
SET @SortKey = 0;
 
DECLARE cursorSAR CURSOR STATIC FOR
  SELECT UserID
  FROM dbo.XUser WITH (READUNCOMMITTED);

OPEN cursorSAR;
FETCH NEXT FROM cursorSAR INTO @userID;
WHILE (@@FETCH_STATUS = 0)
BEGIN
  DECLARE cursorAuftrag CURSOR STATIC FOR
    SELECT Code
    FROM dbo.XLOVCode WITH (READUNCOMMITTED)
    WHERE LOVName = 'VmAuftrag';

  OPEN cursorAuftrag;
  FETCH NEXT FROM cursorAuftrag INTO @auftragCode;
  WHILE (@@FETCH_STATUS = 0)
  BEGIN
    SET @aufCounter = (SELECT COUNT(*)
                       FROM @Aufnahmen
                       WHERE Auftrag = @auftragCode
                          AND UserID = @userID);
    SET @absCounter = (SELECT COUNT(*) 
                       FROM @Abschlüsse
                       WHERE Auftrag = @auftragCode
                         AND UserID = @userID);

    INSERT INTO @Result
      SELECT Beschreibung = dbo.fnLOVText('VmAuftrag', @auftragCode),
             SAR = LastName + isNull(', ' + FirstName, ''),
             @aufCounter,
             @absCounter,
             @sortKey
      FROM dbo.XUser WITH (READUNCOMMITTED)
      WHERE UserID = @userID
        AND (@aufCounter &gt; 0 OR @absCounter &gt; 0);

      FETCH NEXT FROM cursorAuftrag INTO @auftragCode;
  END;

  CLOSE cursorAuftrag;
  DEALLOCATE cursorAuftrag;
  --null aufträge
  SET @aufCounter = (SELECT COUNT(*)
                     FROM @Aufnahmen
                     WHERE Auftrag IS NULL
                       AND UserID = @userID);

  SET @absCounter = (SELECT COUNT(*)
                     FROM @Abschlüsse
                     WHERE Auftrag IS NULL
                       AND UserID = @userID);

  INSERT INTO @Result
    SELECT Beschreibung = 'Nicht Angegeben',
           SAR = LastName + ISNULL(', ' + FirstName, ''),
           @aufCounter,
           @absCounter,
           @sortKey
    FROM dbo.XUser WITH (READUNCOMMITTED)
    WHERE UserID = @userID
      AND (@aufCounter &gt; 0 OR @absCounter &gt; 0);

  FETCH NEXT FROM cursorSAR INTO @userID;
  SET @SortKey = @SortKey + 1;
END;

CLOSE cursorSAR;
DEALLOCATE cursorSAR;

------ Gesamt Total
INSERT INTO @Result
  SELECT 'zzzz',
         NULL,
         SUM(Eröffnungen),
         SUM(Abschlüsse),
         99999
  FROM @Result;

----- Total pro Grund
INSERT @Result
  SELECT Beschreibung, 
         'Total',
         SUM(Eröffnungen),
         SUM(Abschlüsse),
         9999
  FROM @Result
  WHERE Beschreibung &lt;&gt; 'zzzz'
  GROUP BY Beschreibung;
       
------ Leerzeilen
INSERT INTO @Result
  SELECT Beschreibung,
         NULL,
         NULL,
         NULL,
         99999
  FROM @Result
  GROUP BY Beschreibung;

-----------------------------------------------------
-------- Liste 2: pro Abklärungsart und Mitarbeiter
-----------------------------------------------------
SELECT [Abklärungsart] = CASE
                           WHEN (Beschreibung = 'zzzz' AND Eröffnungen &gt; 0) THEN 'Total'
                           WHEN SAR IS NULL THEN ''
                           ELSE Beschreibung
                         END,
       [SAR],
       [Eröffnungen],
       [Abschlüsse],
       [SortKey$]
FROM @Result
ORDER BY [Beschreibung], [SortKey$], [SAR];
</value>
  </data>
  <metadata name="qryListe3.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>219, 17</value>
  </metadata>
  <data name="qryListe3.SelectStatement" xml:space="preserve">
    <value>DECLARE @DatumVon DATETIME;
DECLARE @DatumBis DATETIME;
---SET @DatumVon = {edtDatumVon};
---SET @DatumBis = {edtDatumBis};

DECLARE @proAuftrag TABLE
(
   [ID$]             INT IDENTITY(1,1) PRIMARY KEY,
   [Klient]          VARCHAR (100),
   [SAR]             VARCHAR (100),       
   [Abklärungsart]   VARCHAR (100),
   [Eröffnungsdatum] DATETIME,
   [Abschlussdatum]  DATETIME,
   [Abschlussgrund]  VARCHAR (100),
   [UserID$]         INT,
   [BaPersonID$]    INT
);

DECLARE @Gruende TABLE
(
  ID$      INT IDENTITY(1,1) PRIMARY KEY,
  Sortkey$ INT,
  SAR      VARCHAR(100),      
  Anzahl   INT
);

DECLARE @VmVMAbkArtFldID INT;
EXEC dbo.spGetDynaFldIDfromTextmarke 'VmATAbkArt', @VmVMAbkArtFldID OUT;

INSERT INTO @proAuftrag
  SELECT PRS.Name + ISNULL(', ' + PRS.Vorname,''),
         USR.LastName + ISNULL(', ' + USR.FirstName,''),       
         dbo.fnLOVText('VmAbkArt', CONVERT(INT, DVL.[Value])), 
         LEI.DatumVon,
         LEI.DatumBis,
         dbo.fnLOVText('AbschlussGrund', LEI.AbschlussgrundCode),
         USR.UserID,
         LEI.BaPersonID
  FROM dbo.FaLeistung        LEI WITH (READUNCOMMITTED)
    INNER JOIN dbo.XUser     USR WITH (READUNCOMMITTED) ON USR.UserID = LEI.UserID
    INNER JOIN dbo.BaPerson  PRS WITH (READUNCOMMITTED) ON PRS.BaPersonID = LEI.BaPersonID
    LEFT  JOIN DynaValue     DVL WITH (READUNCOMMITTED) ON DVL.FaLeistungID = LEI.FaLeistungID
                              AND DVL.DynaFieldID = @VmVMAbkArtFldID
  WHERE LEI.ModulID = 5         -- VM
    AND LEI.FaProzessCode = 505 -- VM Auftrag
    AND LEI.DatumVon &lt;= @DatumBis
    AND (LEI.DatumBis IS NULL OR LEI.DatumBis &gt;= @DatumVon)
--- AND ({NurAktive} = 0 OR (@DatumBis BETWEEN DatumVon AND ISNULL(DatumBis, @DatumBis)))

-----------------------------------
-------- Liste 3: pro Mitarbeiter
-----------------------------------
------ SAR
INSERT INTO @Gruende
  SELECT Sortkey$ = LEI.UserID$,
         SAR      = LEI.SAR,       
         Anzahl   = COUNT(*)
  FROM @proAuftrag LEI  
  GROUP BY LEI.UserID$, LEI.SAR
  ORDER BY 1;

------ Leerzeile nach Total Grund
INSERT INTO @Gruende
  SELECT 999998,
         NULL,
         NULL;

------ Total 
INSERT INTO @Gruende
  SELECT 999999,
         'Total',       
         Anzahl = COUNT(*)
  FROM @proAuftrag;

SELECT *
FROM @Gruende
ORDER BY 2,1;
</value>
  </data>
  <data name="edtDatumVon.Properties.Buttons" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        iVBORw0KGgoAAAANSUhEUgAAAAwAAAAQCAYAAAAiYZ4HAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8
        YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAABRSURBVDhPY2AAAmNj4//EYJBaMAApRqbhErjkiDEdZiiK
        Dcgmo7NxamhoYAA7DwSQ2Vg1gBTAFKHT1NGA7AyibBhuGoiKB5Jimpj0hM9AnHIA7aiPJlUTWpwAAAAA
        SUVORK5CYII=
</value>
  </data>
  <data name="edtDatumBis.Properties.Buttons" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        iVBORw0KGgoAAAANSUhEUgAAAAwAAAAQCAYAAAAiYZ4HAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8
        YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAABRSURBVDhPY2AAAmNj4//EYJBaMAApRqbhErjkiDEdZiiK
        Dcgmo7NxamhoYAA7DwSQ2Vg1gBTAFKHT1NGA7AyibBhuGoiKB5Jimpj0hM9AnHIA7aiPJlUTWpwAAAAA
        SUVORK5CYII=
</value>
  </data>
</root>
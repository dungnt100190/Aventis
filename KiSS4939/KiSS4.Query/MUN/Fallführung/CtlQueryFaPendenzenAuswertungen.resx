<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <metadata name="qryQuery.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>17, 17</value>
  </metadata>
  <data name="qryQuery.SelectStatement" xml:space="preserve">
    <value>DECLARE @Stichdatum DATETIME;
DECLARE @Frist      INT;

SET @Stichdatum = GETDATE();
SET @Frist      = 30;
---SET @Stichdatum = {edtStichdatum};
---SET @Frist      = {edtFrist};

DECLARE @result TABLE
(
  UserID           INT,
  BaPersonID       INT,
  GrundangebotCode INT,
  DatumVon         DATETIME,
  DatumBis         DATETIME,
  Auswertungsfrist DATETIME
);

DECLARE @AuswertungIntDatumFldID INT;
DECLARE @AuswertungBerDatumFldID INT;
DECLARE @GrundangebotFldID INT;

SET @AuswertungIntDatumFldID = (SELECT DynaFieldID FROM DynaField WHERE FieldName = 'FaIntAuswertungAm');
SET @AuswertungBerDatumFldID = (SELECT DynaFieldID FROM DynaField WHERE FieldName = 'FaBeratungsplanAuswGeplant');
SET @GrundangebotFldID       = (SELECT DynaFieldID FROM DynaField WHERE FieldName = 'FaBeratungsplanGrundangebot');

INSERT INTO @result
  SELECT PHA.UserID,
         LEI.BaPersonID,
         GrundangebotCode = CASE
                              WHEN PHA.FaPhaseCode = 1 THEN 1
                              ELSE CONVERT(INT, VAL3.Value)
                            END,
         PHA.DatumVon,
         PHA.DatumBis,
         Auswertungsfrist = CASE
                              WHEN PHA.FaPhaseCode = 1 THEN
                                CASE
                                  WHEN SQL_VARIANT_PROPERTY(VAL1.Value, 'BaseType') = 'DATETIME' OR
                                       SQL_VARIANT_PROPERTY(VAL1.Value, 'BaseType') = 'SMALLDATETIME'
                                    THEN CONVERT(DATETIME, VAL1.Value)
                                  WHEN SQL_VARIANT_PROPERTY(VAL1.Value, 'BaseType') = 'NVARCHAR'
                                    THEN CONVERT(DATETIME, VAL1.Value,104)
                                  --ELSE CONVERT(DATETIME, '17530101')
                                END
                              ELSE
                                CASE
                                  WHEN SQL_VARIANT_PROPERTY(VAL2.Value,'BaseType') = 'DATETIME' OR
                                       SQL_VARIANT_PROPERTY(VAL2.Value,'BaseType') = 'SMALLDATETIME'
                                    THEN CONVERT(DATETIME, VAL2.Value)
                                  WHEN SQL_VARIANT_PROPERTY(VAL2.Value,'BaseType') = 'NVARCHAR'
                                    THEN CONVERT(DATETIME, VAL2.Value,104)
                                  --ELSE CONVERT(DATETIME, '17530101')
                                END
                            END
  FROM dbo.FaPhase            PHA  WITH(READUNCOMMITTED)
    INNER JOIN dbo.FaLeistung LEI  WITH(READUNCOMMITTED) ON LEI.FaLeistungID = PHA.FaLeistungID
    LEFT  JOIN dbo.DynaValue  VAL1 WITH(READUNCOMMITTED) ON VAL1.FaPhaseID = PHA.FaPhaseID
                                                        AND VAL1.DynaFieldID = @AuswertungIntDatumFldID
                                                        AND VAL1.GridRowID = 1
                                                        AND VAL1.Value IS NOT NULL
    LEFT  JOIN dbo.DynaValue  VAL2 WITH(READUNCOMMITTED) ON VAL2.FaPhaseID = PHA.FaPhaseID
                                                        AND VAL2.DynaFieldID = @AuswertungBerDatumFldID
                                                        AND VAL2.GridRowID = 1
                                                        AND VAL2.Value IS NOT NULL
    LEFT  JOIN dbo.DynaValue  VAL3 WITH(READUNCOMMITTED) ON VAL3.FaPhaseID = PHA.FaPhaseID
                                                        AND VAL3.DynaFieldID = @GrundangebotFldID
                                                        AND VAL3.GridRowID = 1
                                                        AND VAL3.Value IS NOT NULL
                                                        AND SQL_VARIANT_PROPERTY(VAL3.Value,'BaseType') = 'INT'
  WHERE (PHA.DatumBis IS NULL OR PHA.DatumBis &gt; @Stichdatum)
--- AND PHA.UserID = {edtUserID.LookupID};

DECLARE @total TABLE
(
  GruppeCode INT,
  Gruppe     VARCHAR(100) COLLATE DATABASE_DEFAULT,
  Anzahl     INT,
  Belastung  FLOAT
);

INSERT INTO @total
  SELECT ISNULL(RES.[GrundangebotCode], 50),
         ISNULL(LOV.[Text], '(nicht angegeben)'),
         COUNT(*),
         COUNT(*) * CONVERT(FLOAT, ISNULL(LOV.[Value1], 0)) * 12
  FROM @result             RES
    LEFT JOIN dbo.XLOVCode LOV WITH(READUNCOMMITTED) ON LOV.[LovName] = 'FaGrundangebot'
                                                    AND LOV.[Code] = RES.[GrundangebotCode]
  GROUP BY RES.[GrundangebotCode], LOV.[Text], LOV.[Value1]

-- Output
-- Details
SELECT [Sort$]             = CASE
                               WHEN Auswertungsfrist IS NULL THEN 1300
                               WHEN DATEDIFF(d, @Stichdatum, Auswertungsfrist) &lt; 0 THEN 1100
                               ELSE 1200
                             END,
       [BaPersonID$]       = PRS.BaPersonID,
       [SAR]               = USR.LastName+ ISNULL(', ' + USR.FirstName, ''),
       [Person]            = PRS.Name+ ISNULL(', ' + PRS.Vorname, ''),
       [Grundangebot]      = ISNULL(LOV.Text, 'nicht angegeben'),
       [Phase von]         = CONVERT(VARCHAR, RES.DatumVon, 104),
       [Phase bis]         = CONVERT(VARCHAR, RES.DatumBis, 104),
       [Auswertungsfrist]  = CONVERT(VARCHAR, RES.Auswertungsfrist, 104),
       [#Tage zur Frist]   = CASE
                               WHEN Auswertungsfrist IS NULL THEN 999
                               ELSE DATEDIFF(d, @Stichdatum, Auswertungsfrist)
                             END
FROM @result RES
  INNER JOIN dbo.XUser    USR WITH(READUNCOMMITTED) ON USR.UserID = RES.UserID
  INNER JOIN dbo.BaPerson PRS WITH(READUNCOMMITTED) ON PRS.BaPersonID = RES.BaPersonID
  LEFT  JOIN dbo.XLOVCode LOV WITH(READUNCOMMITTED) ON LOV.LovName = 'FaGrundangebot'
                                                   AND LOV.Code = RES.GrundangebotCode
WHERE Auswertungsfrist IS NULL
   OR DATEDIFF(d, @Stichdatum, Auswertungsfrist) &lt;= @Frist

UNION ALL

-- Kolonnentitel für Zusammenfassung
SELECT -100,
       NULL,
       NULL,
       ' Grundangebot',
       '# Beratungspläne',
       'Belastung in %',
       NULL,
       NULL,
       NULL

UNION ALL

-- Leerzeile
SELECT -99, NULL, NULL, ' ', NULL, NULL, NULL, NULL, NULL

UNION ALL

-- Gruppensummen
SELECT GruppeCode,
       NULL,
       NULL,
       ' ' + CONVERT(VARCHAR, Gruppe),
       CONVERT(VARCHAR, Anzahl),
       CONVERT(VARCHAR, Belastung),
       NULL,
       NULL,
       NULL
FROM   @Total

UNION ALL

-- Total aller Gruppen
SELECT 100,
       NULL,
       NULL,
       ' Total',
       CONVERT(VARCHAR, SUM(Anzahl)),
       CONVERT(VARCHAR, SUM(Belastung)),
       NULL,
       NULL,
       NULL
FROM @Total

UNION ALL

SELECT 101, NULL, NULL, ' ', NULL, NULL, NULL, NULL, NULL -- Leerzeile
UNION ALL
SELECT 102, NULL, 'Frist abgelaufen', ' ', NULL, NULL, NULL, NULL, NULL
UNION ALL
SELECT 1150,NULL, NULL, ' ', NULL, NULL, NULL, NULL, NULL -- Leerzeile
UNION ALL
SELECT 1151,NULL, 'In Frist', ' ', NULL, NULL, NULL, NULL, NULL
UNION ALL
SELECT 1250,NULL, NULL, ' ', NULL, NULL, NULL, NULL, NULL -- Leerzeile
UNION ALL
SELECT 1251,NULL, 'Ohne Auswertungsdatum', ' ', NULL, NULL, NULL, NULL, NULL

ORDER BY 1,8;</value>
  </data>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="edtStichdatum.Properties.Buttons" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        iVBORw0KGgoAAAANSUhEUgAAAAwAAAAQCAYAAAAiYZ4HAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8
        YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAABRSURBVDhPY2AAAmNj4//EYJBaMAApRqbhErjkiDEdZiiK
        Dcgmo7NxamhoYAA7DwSQ2Vg1gBTAFKHT1NGA7AyibBhuGoiKB5Jimpj0hM9AnHIA7aiPJlUTWpwAAAAA
        SUVORK5CYII=
</value>
  </data>
</root>
<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <metadata name="qryQuery.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>17, 17</value>
  </metadata>
  <data name="qryQuery.SelectStatement" xml:space="preserve">
    <value>DECLARE @Stichdatum DATETIME;
SET @Stichdatum = GETDATE();
---SET @Stichdatum = {edtDatum};

-- "Vormundschaftliche Massnahmen-&gt;Abklärungsaufträge"
DECLARE @VmAbkDatAuftragFldID INT;
DECLARE @VmAbkDurchFldID INT;
DECLARE @VmAbkDatBisFldID INT;
DECLARE @VmAbkDatAbschlussFldID INT;
DECLARE @VmVMAbkArtFldID INT;
EXEC dbo.spGetDynaFldIDfromTextmarke 'VmVMAbkDatAuftrag', @VmAbkDatAuftragFldID OUT;
EXEC dbo.spGetDynaFldIDfromTextmarke 'VmVMAbkDurch', @VmAbkDurchFldID OUT;
EXEC dbo.spGetDynaFldIDfromTextmarke 'VmVMAbkDatBis', @VmAbkDatBisFldID OUT;
EXEC dbo.spGetDynaFldIDfromTextmarke 'VmVMAbkDatAbschluss', @VmAbkDatAbschlussFldID OUT;
EXEC dbo.spGetDynaFldIDfromTextmarke 'VmVMAbkArt', @VmVMAbkArtFldID OUT;

-- "Vaterschaftsabklärung-&gt;Abklärungsaufträge"
DECLARE @VmVAAbkDatAuftragFldID INT;
DECLARE @VmVAAbkDurchFldID INT;
DECLARE @VmVAAbkDatBisFldID INT;
DECLARE @VmVAAbkDatAbschlussFldID INT;
DECLARE @VmVAAbkArtFldID INT;
EXEC dbo.spGetDynaFldIDfromTextmarke 'VmVAAbkDatAuftrag', @VmVAAbkDatAuftragFldID OUT;
EXEC dbo.spGetDynaFldIDfromTextmarke 'VmVAAbkDurch', @VmVAAbkDurchFldID OUT;
EXEC dbo.spGetDynaFldIDfromTextmarke 'VmVAAbkDatBis', @VmVAAbkDatBisFldID OUT;
EXEC dbo.spGetDynaFldIDfromTextmarke 'VmVAAbkDatAbschluss', @VmVAAbkDatAbschlussFldID OUT;
EXEC dbo.spGetDynaFldIDfromTextmarke 'VmVAAbkArt', @VmVAAbkArtFldID OUT;

-- "Erbschaftsamt-&gt;Abklärungsaufträge"
DECLARE @VmESAbkDatAuftragFldID INT;
DECLARE @VmESAbkDurchFldID INT;
DECLARE @VmESAbkDatBisFldID INT;
DECLARE @VmESAbkDatAbschlussFldID INT;
DECLARE @VmESAbkArtFldID INT;
EXEC dbo.spGetDynaFldIDfromTextmarke 'VmESAbkDatAuftrag', @VmESAbkDatAuftragFldID OUT;
EXEC dbo.spGetDynaFldIDfromTextmarke 'VmESAbkDurch', @VmESAbkDurchFldID OUT;
EXEC dbo.spGetDynaFldIDfromTextmarke 'VmESAbkDatBis', @VmESAbkDatBisFldID OUT;
EXEC dbo.spGetDynaFldIDfromTextmarke 'VmESAbkDatAbschluss', @VmESAbkDatAbschlussFldID OUT;
EXEC dbo.spGetDynaFldIDfromTextmarke 'VmESAbkArt', @VmESAbkArtFldID OUT;

-- "Pflegekinder-&gt;Abklärungsaufträge"
DECLARE @VmPKAbkDatAuftragFldID INT;
DECLARE @VmPKAbkDurchFldID INT;
DECLARE @VmPKAbkDatBisFldID INT;
DECLARE @VmPKAbkDatAbschlussFldID INT;
DECLARE @VmPKAbkArtFldID INT;
EXEC dbo.spGetDynaFldIDfromTextmarke 'VmPKAbkDatAuftrag', @VmPKAbkDatAuftragFldID OUT;
EXEC dbo.spGetDynaFldIDfromTextmarke 'VmPKAbkDurch', @VmPKAbkDurchFldID OUT;
EXEC dbo.spGetDynaFldIDfromTextmarke 'VmPKAbkDatBis', @VmPKAbkDatBisFldID OUT;
EXEC dbo.spGetDynaFldIDfromTextmarke 'VmPKAbkDatAbschluss', @VmPKAbkDatAbschlussFldID OUT;
EXEC dbo.spGetDynaFldIDfromTextmarke 'VmPKAbkArt', @VmPKAbkArtFldID OUT;

-- "VM-Auftrag-&gt;Abklärungsaufträge"
DECLARE @VmATAbkDatAuftragFldID INT;
DECLARE @VmATAbkDurchFldID INT;
DECLARE @VmATAbkDatBisFldID INT;
DECLARE @VmATAbkDatAbschlussFldID INT;
DECLARE @VmATAbkArtFldID INT;
EXEC dbo.spGetDynaFldIDfromTextmarke 'VmATAbkDatAuftrag', @VmATAbkDatAuftragFldID OUT;
EXEC dbo.spGetDynaFldIDfromTextmarke 'VmATAbkDurch', @VmATAbkDurchFldID OUT;
EXEC dbo.spGetDynaFldIDfromTextmarke 'VmATAbkDatBis', @VmATAbkDatBisFldID OUT;
EXEC dbo.spGetDynaFldIDfromTextmarke 'VmATAbkDatAbschluss', @VmATAbkDatAbschlussFldID OUT;
EXEC dbo.spGetDynaFldIDfromTextmarke 'VmATAbkArt', @VmATAbkArtFldID OUT;

-- Select "Vormundschaftliche Massnahmen-&gt;Mandatsführung-&gt;Inventar"
DECLARE @VmBsInvFristFldID INT;
DECLARE @VmBsInvAutorFldID INT;
DECLARE @VmBsInvFristBisFldID INT;
DECLARE @VmBsInvDatumFldID INT;
EXEC dbo.spGetDynaFldIDfromTextmarke 'VmBsInvFrist', @VmBsInvFristFldID OUT;
EXEC dbo.spGetDynaFldIDfromTextmarke 'VmBsInvAutor', @VmBsInvAutorFldID OUT;
EXEC dbo.spGetDynaFldIDfromTextmarke 'VmBsInvFristBis', @VmBsInvFristBisFldID OUT;
EXEC dbo.spGetDynaFldIDfromTextmarke 'VmBsInvDatum', @VmBsInvDatumFldID OUT;

DECLARE @tmpVormundschaft TABLE
(
  FaLeistungID      INT,
  BaPersonID    INT,
  ModulID       INT,
  UserID        INT,      
  DatumVon      DATETIME,
  DatumBis      DATETIME,
  FaProzessCode INT
);

DECLARE @rslt TABLE
(
  BaPersonID     INT,
  Phase          VARCHAR(100),
  Eroeffnung     DATETIME,
  Auftrag        DATETIME,
  Frist          DATETIME,
  UserID         INT,
  Autor          VARCHAR(150),
  Abklaerungsart VARCHAR(150)
);

-- Select all open "Vormundschaft"
INSERT INTO @tmpVormundschaft (FaLeistungID, BaPersonID, ModulID, UserID, DatumVon, DatumBis, FaProzessCode)
  SELECT FaLeistungID, BaPersonID, ModulID, UserID, DatumVon, DatumBis, FaProzessCode
  FROM dbo.FaLeistung WITH(READUNCOMMITTED)
  WHERE ModulID = 5
    AND DatumBis IS NULL;

-- Select "Vormundschaftliche Massnahmen-&gt;Abklärungsaufträge"
INSERT INTO @rslt (BaPersonID, Phase, Eroeffnung, Auftrag, Frist, UserID, Autor, Abklaerungsart)
  SELECT T.BaPersonID,
         dbo.fnLOVText('FaProzess', T.FaProzessCode),
         CONVERT(DATETIME, T.DatumVon, 104),
         CONVERT(DATETIME, DV1.[Value], 104),
         CONVERT(DATETIME, DV3.[Value], 104),
         CONVERT(INT, DV2.[Value]),
         '',
         dbo.fnLOVText('VmAbkArt', CONVERT(INT, DV5.[Value]))
  FROM @tmpVormundschaft     T
    INNER JOIN dbo.DynaValue DV1 WITH(READUNCOMMITTED) ON DV1.FaLeistungID = T.FaLeistungID
                                                      AND DV1.DynaFieldID = @VmAbkDatAuftragFldID
    LEFT  JOIN dbo.DynaValue DV2 WITH(READUNCOMMITTED) ON DV2.FaLeistungID = T.FaLeistungID
                                                      AND DV2.DynaFieldID = @VmAbkDurchFldID
                                                      AND DV2.GridRowID = DV1.GridRowID
    LEFT  JOIN dbo.DynaValue DV3 WITH(READUNCOMMITTED) ON DV3.FaLeistungID = T.FaLeistungID
                                                      AND DV3.DynaFieldID = @VmAbkDatBisFldID
                                                      AND DV3.GridRowID = DV1.GridRowID
    LEFT  JOIN dbo.DynaValue DV4 WITH(READUNCOMMITTED) ON DV4.FaLeistungID = T.FaLeistungID
                                                      AND DV4.DynaFieldID = @VmAbkDatAbschlussFldID
                                                      AND DV4.GridRowID = DV1.GridRowID
    LEFT  JOIN dbo.DynaValue DV5 WITH(READUNCOMMITTED) ON DV5.FaLeistungID = T.FaLeistungID
                                                      AND DV5.DynaFieldID = @VmVMAbkArtFldID
                                                      AND DV5.GridRowID = DV1.GridRowID
  WHERE DV4.[Value] IS NULL;

-- Select "Vaterschaftsabklärung-&gt;Abklärungsaufträge"
INSERT INTO @rslt (BaPersonID, Phase, Eroeffnung, Auftrag, Frist, UserID, Autor, Abklaerungsart)
  SELECT T.BaPersonID,
         dbo.fnLOVText('FaProzess', T.FaProzessCode),
         CONVERT(DATETIME, T.DatumVon, 104),
         CONVERT(DATETIME, DV1.[Value], 104),
         CONVERT(DATETIME, DV3.[Value], 104),
         CONVERT(INT, DV2.[Value]),
         '',
         dbo.fnLOVText('VmAbkArt', CONVERT(INT, DV5.[Value]))
  FROM @tmpVormundschaft T
    INNER JOIN dbo.DynaValue DV1 WITH(READUNCOMMITTED) ON DV1.FaLeistungID = T.FaLeistungID
                                                      AND DV1.DynaFieldID = @VmVAAbkDatAuftragFldID
    LEFT  JOIN dbo.DynaValue DV2 WITH(READUNCOMMITTED) ON DV2.FaLeistungID = T.FaLeistungID
                                                      AND DV2.DynaFieldID = @VmVAAbkDurchFldID
                                                      AND DV2.GridRowID = DV1.GridRowID
    LEFT  JOIN dbo.DynaValue DV3 WITH(READUNCOMMITTED) ON DV3.FaLeistungID = T.FaLeistungID
                                                      AND DV3.DynaFieldID = @VmVAAbkDatBisFldID
                                                      AND DV3.GridRowID = DV1.GridRowID
    LEFT  JOIN dbo.DynaValue DV4 WITH(READUNCOMMITTED) ON DV4.FaLeistungID = T.FaLeistungID
                                                      AND DV4.DynaFieldID = @VmVAAbkDatAbschlussFldID
                                                      AND DV4.GridRowID = DV1.GridRowID
    LEFT  JOIN dbo.DynaValue DV5 WITH(READUNCOMMITTED) ON DV5.FaLeistungID = T.FaLeistungID
                                                      AND DV5.DynaFieldID = @VmVAAbkArtFldID
                                                      AND DV5.GridRowID = DV1.GridRowID   
  WHERE DV4.[Value] IS NULL;
	
-- Select "Erbschaftsamt-&gt;Abklärungsaufträge"
INSERT INTO @rslt (BaPersonID, Phase, Eroeffnung, Auftrag, Frist, UserID, Autor, Abklaerungsart)
  SELECT T.BaPersonID,
         dbo.fnLOVText('FaProzess', T.FaProzessCode),
         CONVERT(DATETIME, T.DatumVon, 104),
         CONVERT(DATETIME, DV1.[Value], 104),
         CONVERT(DATETIME, DV3.[Value], 104),
         CONVERT(INT, DV2.[Value]),
         '',
         dbo.fnLOVText('VmAbkArt', CONVERT(INT, DV5.[Value]))
  FROM @tmpVormundschaft T	
    INNER JOIN dbo.DynaValue DV1 WITH(READUNCOMMITTED) ON DV1.FaLeistungID = T.FaLeistungID
                                                      AND DV1.DynaFieldID = @VmESAbkDatAuftragFldID
    LEFT  JOIN dbo.DynaValue DV2 WITH(READUNCOMMITTED) ON DV2.FaLeistungID = T.FaLeistungID
                                                      AND DV2.DynaFieldID = @VmESAbkDurchFldID
                                                      AND DV2.GridRowID = DV1.GridRowID
    LEFT  JOIN dbo.DynaValue DV3 WITH(READUNCOMMITTED) ON DV3.FaLeistungID = T.FaLeistungID
                                                      AND DV3.DynaFieldID = @VmESAbkDatBisFldID
                                                      AND DV3.GridRowID = DV1.GridRowID
    LEFT  JOIN dbo.DynaValue DV4 WITH(READUNCOMMITTED) ON DV4.FaLeistungID = T.FaLeistungID
                                                      AND DV4.DynaFieldID = @VmESAbkDatAbschlussFldID
                                                      AND DV4.GridRowID = DV1.GridRowID
    LEFT  JOIN dbo.DynaValue DV5 WITH(READUNCOMMITTED) ON DV5.FaLeistungID = T.FaLeistungID
                                                      AND DV5.DynaFieldID = @VmESAbkArtFldID
                                                      AND DV5.GridRowID = DV1.GridRowID
  WHERE DV4.[Value] IS NULL;

-- Select "Pflegekinder-&gt;Abklärungsaufträge"
INSERT INTO @rslt (BaPersonID, Phase, Eroeffnung, Auftrag, Frist, UserID, Autor, Abklaerungsart)
  SELECT T.BaPersonID,
         dbo.fnLOVText('FaProzess', T.FaProzessCode),
         CONVERT(DATETIME, T.DatumVon, 104),
         CONVERT(DATETIME, DV1.[Value], 104),
         CONVERT(DATETIME, DV3.[Value], 104),
         CONVERT(INT, DV2.[Value]),
         '',
         dbo.fnLOVText('VmAbkArt', CONVERT(INT, DV5.[Value]))
  FROM @tmpVormundschaft T
    INNER JOIN dbo.DynaValue DV1 WITH(READUNCOMMITTED) ON DV1.FaLeistungID = T.FaLeistungID
                                                      AND DV1.DynaFieldID = @VmPKAbkDatAuftragFldID
    LEFT  JOIN dbo.DynaValue DV2 WITH(READUNCOMMITTED) ON DV2.FaLeistungID = T.FaLeistungID
                                                      AND DV2.DynaFieldID = @VmPKAbkDurchFldID
                                                      AND DV2.GridRowID = DV1.GridRowID
    LEFT  JOIN dbo.DynaValue DV3 WITH(READUNCOMMITTED) ON DV3.FaLeistungID = T.FaLeistungID
                                                      AND DV3.DynaFieldID = @VmPKAbkDatBisFldID
                                                      AND DV3.GridRowID = DV1.GridRowID
    LEFT  JOIN dbo.DynaValue DV4 WITH(READUNCOMMITTED) ON DV4.FaLeistungID = T.FaLeistungID
                                                      AND DV4.DynaFieldID = @VmPKAbkDatAbschlussFldID
                                                      AND DV4.GridRowID = DV1.GridRowID
    LEFT  JOIN dbo.DynaValue DV5 WITH(READUNCOMMITTED) ON DV5.FaLeistungID = T.FaLeistungID
                                                      AND DV5.DynaFieldID = @VmPKAbkArtFldID
                                                      AND DV5.GridRowID = DV1.GridRowID
  WHERE DV4.[Value] IS NULL;

-- Select "VM-Auftrag-&gt;Abklärungsaufträge"
INSERT INTO @rslt (BaPersonID, Phase, Eroeffnung, Auftrag, Frist, UserID, Autor, Abklaerungsart)
  SELECT T.BaPersonID,
         dbo.fnLOVText('FaProzess', T.FaProzessCode),
         CONVERT(DATETIME, T.DatumVon, 104),
         CONVERT(DATETIME, DV1.[Value], 104),
         CONVERT(DATETIME, DV3.[Value], 104),
         CONVERT(INT, DV2.[Value]),
         '',
         dbo.fnLOVText('VmAbkArt', CONVERT(INT, DV5.[Value]))
  FROM @tmpVormundschaft T
    INNER JOIN dbo.DynaValue DV1 WITH(READUNCOMMITTED) ON DV1.FaLeistungID = T.FaLeistungID
                                                      AND DV1.DynaFieldID = @VmATAbkDatAuftragFldID
    LEFT  JOIN dbo.DynaValue DV2 WITH(READUNCOMMITTED) ON DV2.FaLeistungID = T.FaLeistungID
                                                      AND DV2.DynaFieldID = @VmATAbkDurchFldID
                                                      AND DV2.GridRowID = DV1.GridRowID
    LEFT  JOIN dbo.DynaValue DV3 WITH(READUNCOMMITTED) ON DV3.FaLeistungID = T.FaLeistungID
                                                      AND DV3.DynaFieldID = @VmATAbkDatBisFldID
                                                      AND DV3.GridRowID = DV1.GridRowID
    LEFT  JOIN dbo.DynaValue DV4 WITH(READUNCOMMITTED) ON DV4.FaLeistungID = T.FaLeistungID
                                                      AND DV4.DynaFieldID = @VmATAbkDatAbschlussFldID
                                                      AND DV4.GridRowID = DV1.GridRowID
    LEFT  JOIN dbo.DynaValue DV5 WITH(READUNCOMMITTED) ON DV5.FaLeistungID = T.FaLeistungID
                                                      AND DV5.DynaFieldID = @VmATAbkArtFldID
                                                      AND DV5.GridRowID = DV1.GridRowID
  WHERE DV4.[Value] IS NULL;

-- Select "Vormundschaftliche Massnahmen-&gt;Mandatsführung-&gt;Register, Kontrolle"
INSERT INTO @rslt (BaPersonID, Phase, Eroeffnung, Auftrag, Frist, UserID, Autor, Abklaerungsart)
  SELECT T.BaPersonID,
         dbo.fnLOVText('FaProzess', T.FaProzessCode),
         CONVERT(DATETIME, T.DatumVon, 104),
         BER.BerichtsperiodeVon,
         BER.BerichtsperiodeBis, T.UserID,
         '',
         ''
  FROM @tmpVormundschaft T
    INNER JOIN VmBericht BER ON BER.FaLeistungID = T.FaLeistungID
  WHERE BER.Erstellung IS NULL;

-- Select "Vormundschaftliche Massnahmen-&gt;Mandatsführung-&gt;Inventar"
INSERT INTO @rslt (BaPersonID, Phase, Eroeffnung, Auftrag, Frist, UserID, Autor, Abklaerungsart)
  SELECT T.BaPersonID,
         dbo.fnLOVText('FaProzess', T.FaProzessCode),
         CONVERT(DATETIME, T.DatumVon, 104),
         CONVERT(DATETIME, DV1.[Value], 104),
         CONVERT(DATETIME, DV3.[Value], 104),
         -1,
         CONVERT(VARCHAR, DV2.[Value]),
         ''
  FROM @tmpVormundschaft T
    INNER JOIN dbo.DynaValue DV1 WITH(READUNCOMMITTED) ON DV1.FaLeistungID = T.FaLeistungID
                                                      AND DV1.DynaFieldID = @VmBsInvFristFldID
    LEFT  JOIN dbo.DynaValue DV2 WITH(READUNCOMMITTED) ON DV2.FaLeistungID = T.FaLeistungID
                                                      AND DV2.DynaFieldID = @VmBsInvAutorFldID
                                                      AND DV2.GridRowID = DV1.GridRowID
    LEFT  JOIN dbo.DynaValue DV3 WITH(READUNCOMMITTED) ON DV3.FaLeistungID = T.FaLeistungID
                                                      AND DV3.DynaFieldID = @VmBsInvFristBisFldID
                                                      AND DV3.GridRowID = DV1.GridRowID
    LEFT  JOIN dbo.DynaValue DV4 WITH(READUNCOMMITTED) ON DV4.FaLeistungID = T.FaLeistungID
                                                      AND DV4.DynaFieldID = @VmBsInvDatumFldID
                                                      AND DV4.GridRowID = DV1.GridRowID
  WHERE DV4.[Value] IS NULL;


-- Select final result
SELECT [Name]            = PRS.[Name],
       [Vorname]         = PRS.[Vorname],
       [Phase]           = TMP.[Phase],
       [Abklärungsart]   = TMP.[Abklaerungsart],
       [Eröffnung]       = TMP.[Eroeffnung],
       [Auftrag]         = TMP.[Auftrag],
       [Frist]           = TMP.[Frist],
       [Abweichungstage] = DATEDIFF(d, @Stichdatum, TMP.[Frist]),
       [SAR]             = CASE
                             WHEN TMP.[UserID] = -1 THEN TMP.[Autor]
                             ELSE USR.[LastName] + ISNULL(', ' + USR.[FirstName], '')
                           END,
       [BaPersonID$]     = TMP.[BaPersonID]
FROM @rslt                TMP
  INNER JOIN dbo.BaPerson PRS WITH(READUNCOMMITTED) ON PRS.[BaPersonID] = TMP.[BaPersonID]
  LEFT  JOIN dbo.XUser    USR WITH(READUNCOMMITTED) ON USR.[UserID] = TMP.[UserID]
WHERE 1=1
--- AND USR.[UserID] = {edtUser.LookupID}
--- AND CONVERT(DATETIME, TMP.[Frist], 104) &lt;= CONVERT(DATETIME, {edtDatum}, 104)
ORDER BY PRS.[Name], PRS.[Vorname], TMP.[Phase];</value>
  </data>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="edtDatum.Properties.Buttons" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        iVBORw0KGgoAAAANSUhEUgAAAAwAAAAQCAYAAAAiYZ4HAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8
        YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAABRSURBVDhPY2AAAmNj4//EYJBaMAApRqbhErjkiDEdZiiK
        Dcgmo7NxamhoYAA7DwSQ2Vg1gBTAFKHT1NGA7AyibBhuGoiKB5Jimpj0hM9AnHIA7aiPJlUTWpwAAAAA
        SUVORK5CYII=
</value>
  </data>
</root>
<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="qryQuery.SelectStatement" xml:space="preserve">
    <value>-------------------------------------------------------------------------------
-- define vars
-------------------------------------------------------------------------------
DECLARE @LanguageCode INT
DECLARE @OrgUnitID INT
DECLARE @UserID INT
DECLARE @Date DATETIME
DECLARE @PeriodeString VARCHAR(100)

-------------------------------------------------------------------------------
-- setup vars
-------------------------------------------------------------------------------
-- set values as NULL to know for sure they are NULL if not set below
SET @LanguageCode = 1
SET @OrgUnitID = NULL
SET @UserID = NULL
SET @Date = GETDATE()

-- set values from search parameters
--- SET @LanguageCode = {edtSucheLanguageCode}
--- SET @OrgUnitID    = {edtSucheBeratungsstelle}
--- SET @UserID       = {edtSucheMitarbeiter}

-------------------------------------------------------------------------------
-- debug
-------------------------------------------------------------------------------
/*
SET @LanguageCode = 1
SET @OrgUnitID = 26 -- BS Amriswil
SET @UserID = NULL
--*/

-------------------------------------------------------------------------------
-- validate
-------------------------------------------------------------------------------
IF (ISNULL(@LanguageCode, -1) &lt; 0 OR ISNULL(@OrgUnitID, -1) &lt; 1)
BEGIN
  -- invalid data
  SELECT [Error] = 'Error: Invalid parametes, cannot search data!',
         BaPersonID$ = NULL
  RETURN
END

-- setup periode
SET @PeriodeString = ISNULL(dbo.fnDateAsVarchar(@Date, 'dd.mm.yyyy'), '')

-------------------------------------------------------------------------------
-- create and fill temporary table
-------------------------------------------------------------------------------
DECLARE @Result TABLE
(
  BaPersonID INT NOT NULL
)

-------------------------------------------------------------------------------
-- output
-------------------------------------------------------------------------------
/*
Modules:
-----------------------
3	Sozialberatung
4	Case Management
5	Begleitetes Wohnen
6	Entlastungsdienst
-----------------------
*/

-- build up table
SELECT DISTINCT
       [BaPersonID$]          = PRS.BaPersonID,
       [Nr.]                  = PRS.BaPersonID,
       [Name]                 = PRS.Name,
       [Vorname]              = PRS.Vorname,

       [Verantwortliche/r SB] = (SELECT dbo.fnGetLastFirstName(SUB.UserID, NULL, NULL)
                                 FROM dbo.FaLeistung SUB WITH (READUNCOMMITTED)
                                 WHERE SUB.DatumBis IS NULL AND 
                                       SUB.FaLeistungID = dbo.fnFaGetLastFaLeistungID(PRS.BaPersonID, 3)), -- SB
       [Verantwortliche/r CM] = (SELECT dbo.fnGetLastFirstName(SUB.UserID, NULL, NULL)
                                 FROM dbo.FaLeistung SUB WITH (READUNCOMMITTED)
                                 WHERE SUB.DatumBis IS NULL AND 
                                       SUB.FaLeistungID = dbo.fnFaGetLastFaLeistungID(PRS.BaPersonID, 4)), -- CM
       [Verantwortliche/r BW] = (SELECT dbo.fnGetLastFirstName(SUB.UserID, NULL, NULL)
                                 FROM dbo.FaLeistung SUB WITH (READUNCOMMITTED)
                                 WHERE SUB.DatumBis IS NULL AND 
                                       SUB.FaLeistungID = dbo.fnFaGetLastFaLeistungID(PRS.BaPersonID, 5)), -- BW
       [Verantwortliche/r ED] = (SELECT dbo.fnGetLastFirstName(SUB.UserID, NULL, NULL)
                                 FROM dbo.FaLeistung SUB WITH (READUNCOMMITTED)
                                 WHERE SUB.DatumBis IS NULL AND 
                                       SUB.FaLeistungID = dbo.fnFaGetLastFaLeistungID(PRS.BaPersonID, 6)), -- ED

       [m/w]                  = dbo.fnGetGenderMLTitleMF(PRS.GeschlechtCode, @LanguageCode),
       [Geburtsdatum]         = PRS.Geburtsdatum,
       [Alter]                = dbo.fnGetAge(PRS.Geburtsdatum, ISNULL(PRS.Sterbedatum, GETDATE())),
       [AHV-Nr.]              = PRS.AHVNummer,
       [Vers.-Nr.]            = PRS.VersichertenNummer,
       [Strasse]              = ISNULL(PRS.WohnsitzStrasse, '') + ISNULL(' ' + PRS.WohnsitzHausNr, ''),
       [PLZ]                  = PRS.WohnsitzPLZ,
       [Ort]                  = PRS.WohnsitzOrt,

       [Datum]                = @PeriodeString

FROM dbo.BaPerson PRS WITH (READUNCOMMITTED)
  INNER JOIN dbo.FaLeistung LEI WITH (READUNCOMMITTED) ON LEI.BaPersonID = PRS.BaPersonID AND 
                                                          LEI.DatumBis IS NULL AND                                                    -- process has to be open
                                                          LEI.ModulID IN (3, 4, 5, 6) AND                                             -- only SB/CM/BW/ED
                                                          LEI.UserID = ISNULL(@UserID, LEI.UserID) AND                                -- filter by userid if given
                                                          ISNULL(CONVERT(INT, dbo.fnOrgUnitOfUser(LEI.UserID, 1)), -1) = @OrgUnitID   -- filter by orgunit where user of process is member
ORDER BY [Name], [Vorname], [BaPersonID$]</value>
  </data>
  <assembly alias="System.Drawing" name="System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="qryQuery.TrayLocation" type="System.Drawing.Point, System.Drawing">
    <value>17, 17</value>
  </data>
  <data name="xDocument.Properties.Buttons" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        iVBORw0KGgoAAAANSUhEUgAAAAwAAAAQCAYAAAAiYZ4HAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8
        YQUAAAAgY0hSTQAAeiYAAICEAAD6AAAAgOgAAHUwAADqYAAAOpgAABdwnLpRPAAAAF1JREFUOE9jZAAC
        Y2Pj/yAaGzh79iwjhjhIw///MzGwmJjYfxDGqSEtjeE/MgYpBhmEoYmQDSANKM7GpQHZmVg1oDsJxgdp
        pI4N2EIKJjbqJLIiDqSJEMaVovGKAwBnM3PWBP8PfwAAAABJRU5ErkJggg==
</value>
  </data>
</root>
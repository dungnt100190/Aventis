<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="qryListe2.SelectStatement" xml:space="preserve">
    <value>DECLARE @AnmeldeartFldID         INT
DECLARE @KontaktveranlasserFldID INT
SET     @AnmeldeartFldID         = (SELECT DynaFieldID FROM dbo.DynaField WITH (READUNCOMMITTED) WHERE FieldName = 'FaIntAnmeldeart')
SET     @KontaktveranlasserFldID = (SELECT DynaFieldID FROM dbo.DynaField WITH (READUNCOMMITTED) WHERE FieldName = 'FaIntKontaktveranlasser')

DECLARE @Data Table(
  FaLeistungID           INT,
  Fallart            INT,
  Auftrag            INT,
  Kontaktveranlasser INT
)

----------------------------------
---------- Collect Data 
----------------------------------
INSERT INTO @Data
SELECT FAL_V.FaLeistungID,
       Fallart            = CASE WHEN YEAR(FAL_V.DatumVon) &lt;  {edtAuswertungsjahr}  THEN 0 
                                 ELSE CONVERT(INT, ANM.Value)
                            END,
       [Auftrag JA]       = FAL_V.VmAuftragCode,
       Kontaktveranlasser = CONVERT(INT, KTK.Value)
FROM dbo.FaLeistung                FAL_V WITH (READUNCOMMITTED) 
  INNER JOIN dbo.XUser         USR WITH (READUNCOMMITTED)   ON USR.UserID = FAL_V.UserID
  LEFT  JOIN dbo.FaLeistung        FAL_F WITH (READUNCOMMITTED) ON FAL_F.BaPersonID = FAL_V.BaPersonID -- join letzte Fallführung
                                AND FAL_F.ModulID = 2
                                AND FAL_F.FaLeistungID = (SELECT TOP 1 FaLeistungID 
                                                      FROM dbo.FaLeistung WITH (READUNCOMMITTED)
                                                      WHERE BaPersonID = FAL_V.BaPersonID
                                                        AND ModulID = 2 --Fallführung
                                                      ORDER BY DatumVon DESC)
  LEFT  JOIN dbo.FaPhase       PHS WITH (READUNCOMMITTED)   ON PHS.FaLeistungID = FAL_F.FaLeistungID         -- join letzte intake phase
                                AND PHS.FaPhaseCode = 1 -- Intake
                                AND PHS.FaPhaseID = (SELECT TOP 1 FaPhaseID 
                                                      FROM dbo.FaPhase WITH (READUNCOMMITTED)
                                                      WHERE FaLeistungID = FAL_F.FaLeistungID 
                                                        AND FaPhaseCode = 1 -- Intake
                                                      ORDER BY DatumVon DESC)
  LEFT  JOIN dbo.DynaValue     ANM WITH (READUNCOMMITTED)   ON ANM.FaPhaseID = PHS.FaPhaseID
                                AND ANM.DynaFieldID = @AnmeldeartFldID
  LEFT  JOIN dbo.DynaValue     KTK WITH (READUNCOMMITTED)   ON KTK.FaPhaseID = PHS.FaPhaseID
                                AND KTK.DynaFieldID = @KontaktveranlasserFldID
  LEFT  JOIN dbo.XOrgUnit_User OUU WITH (READUNCOMMITTED)   ON OUU.UserID = USR.UserID
                            AND OUU.OrgUnitMemberCode = 2
  LEFT  JOIN dbo.XOrgUnit      ORG WITH (READUNCOMMITTED)   ON ORG.OrgUnitID = OUU.OrgUnitID
WHERE FAL_V.ModulID = 5                                                                               -- Vormundschaft
  AND FAL_V.FaProzessCode = 505                                                                           -- Vormundschaftlicher Auftrag
  AND {edtAuswertungsjahr} BETWEEN YEAR(FAL_V.DatumVon) AND isNull(YEAR(FAL_V.DatumBis),{edtAuswertungsjahr}) -- Fall aktiv in Periode
  AND OUU.OrgUnitID IN (SELECT OrgUnitID FROM dbo.XOrgUnit WITH (READUNCOMMITTED) WHERE ModulID = 3 AND ParentID = 28)           -- es sollen nur Einträge der Sektion Jugendamt angezeigt werden
--- AND OUU.OrgUnitID = {edtOrgUnitID}
--- AND USR.UserID = {edtUserID.LookupID}

------------------------------------------
------------ Result Table
------------------------------------------
DECLARE @Result TABLE(
  Abteilung    VARCHAR(100),
  SAR          VARCHAR(100),
  Erstmeld     INT,
  Wiederanm    INT,
  alt          INT,
  [Abkl.GM]    INT,
  Beratung     INT,
  [BR Reg]     INT,
  [Auftr.EKSK] INT,
  Kizu         INT,
  [Kb Gericht] INT,
  [Änd.Scheid] INT,
  [Gem.eS]     INT,
  [Adop.abkl]  INT,
  [Abkl.Pp]    INT,
  [Begl.Pv]    INT,
  [Begl.PvmM]  INT,
  [Platz.ber]  INT,
  [Finanz]     INT,
  [Nam.änd]    INT,
  [andere]     INT,
  Sortkey1$    INT,
  Sortkey2$    INT
)

------- Abteilung
INSERT INTO @Result 
SELECT MAX(ORG.ItemName), NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL,
       NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ORG.OrgUnitID, NULL
FROM @Data                 DAT
  INNER JOIN dbo.FaLeistung        FAL WITH (READUNCOMMITTED) ON FAL.FaLeistungID = DAT.FaLeistungID
  INNER JOIN dbo.BaPerson     PRS WITH (READUNCOMMITTED) ON PRS.BaPersonID = FAL.BaPersonID
  INNER JOIN dbo.XUser         USR WITH (READUNCOMMITTED) ON USR.UserID = FAL.UserID
  LEFT  JOIN dbo.XOrgUnit_User OUU WITH (READUNCOMMITTED) ON OUU.UserID = USR.UserID
                              AND OUU.OrgUnitMemberCode = 2
  LEFT  JOIN dbo.XOrgUnit      ORG WITH (READUNCOMMITTED) on ORG.OrgUnitID = OUU.OrgUnitID
GROUP BY ORG.OrgUnitID

------- Total Abteilung
INSERT INTO @Result
SELECT NULL, 
       'Total', 
       SUM(CASE WHEN DAT.Fallart = 1 THEN 1 ELSE 0 END),
       SUM(CASE WHEN DAT.Fallart = 2 THEN 1 ELSE 0 END),
       SUM(CASE WHEN DAT.Fallart = 0 THEN 1 ELSE 0 END),
       SUM(CASE WHEN DAT.Auftrag = 1 THEN 1 ELSE 0 END),
       SUM(CASE WHEN DAT.Auftrag = 2 THEN 1 ELSE 0 END),
       SUM(CASE WHEN DAT.Auftrag = 3 THEN 1 ELSE 0 END),
       SUM(CASE WHEN DAT.Auftrag = 4 THEN 1 ELSE 0 END),
       SUM(CASE WHEN DAT.Auftrag = 5 THEN 1 ELSE 0 END),
       SUM(CASE WHEN DAT.Auftrag = 6 THEN 1 ELSE 0 END),
       SUM(CASE WHEN DAT.Auftrag = 7 THEN 1 ELSE 0 END),
       SUM(CASE WHEN DAT.Auftrag = 8 THEN 1 ELSE 0 END),
       SUM(CASE WHEN DAT.Auftrag = 9 THEN 1 ELSE 0 END),
       SUM(CASE WHEN DAT.Auftrag = 10 THEN 1 ELSE 0 END),
       SUM(CASE WHEN DAT.Auftrag = 11 THEN 1 ELSE 0 END),
       SUM(CASE WHEN DAT.Auftrag = 12 THEN 1 ELSE 0 END),
       SUM(CASE WHEN DAT.Auftrag = 13 THEN 1 ELSE 0 END),
       SUM(CASE WHEN DAT.Auftrag = 14 THEN 1 ELSE 0 END),
       SUM(CASE WHEN DAT.Auftrag = 15 THEN 1 ELSE 0 END),
       SUM(CASE WHEN DAT.Auftrag = 16 THEN 1 ELSE 0 END),
       ORG.OrgUnitID, 
       2
FROM @Data                 DAT
  INNER JOIN dbo.FaLeistung        FAL WITH (READUNCOMMITTED) ON FAL.FaLeistungID = DAT.FaLeistungID
  INNER JOIN dbo.BaPerson     PRS WITH (READUNCOMMITTED) ON PRS.BaPersonID = FAL.BaPersonID
  INNER JOIN dbo.XUser         USR WITH (READUNCOMMITTED) ON USR.UserID = FAL.UserID
  LEFT  JOIN dbo.XOrgUnit_User OUU WITH (READUNCOMMITTED) ON OUU.UserID = USR.UserID
                              AND OUU.OrgUnitMemberCode = 2
  LEFT  JOIN dbo.XOrgUnit      ORG WITH (READUNCOMMITTED) on ORG.OrgUnitID = OUU.OrgUnitID
GROUP BY ORG.OrgUnitID

------- Leerzeile pro Abteilung
INSERT INTO @Result
SELECT NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL,
       NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ORG.OrgUnitID, 3
FROM @Data                 DAT
  INNER JOIN dbo.FaLeistung        FAL WITH (READUNCOMMITTED) ON FAL.FaLeistungID = DAT.FaLeistungID
  INNER JOIN dbo.BaPerson     PRS WITH (READUNCOMMITTED) ON PRS.BaPersonID = FAL.BaPersonID
  INNER JOIN dbo.XUser         USR WITH (READUNCOMMITTED) ON USR.UserID = FAL.UserID
  LEFT  JOIN dbo.XOrgUnit_User OUU WITH (READUNCOMMITTED) ON OUU.UserID = USR.UserID
                              AND OUU.OrgUnitMemberCode = 2
  LEFT  JOIN dbo.XOrgUnit      ORG WITH (READUNCOMMITTED) on ORG.OrgUnitID = OUU.OrgUnitID
GROUP BY ORG.OrgUnitID

------- pro SAR
INSERT INTO @Result
SELECT NULL, 
       MAX(USR.LastName + ISNULL(', ' + USR.FirstName,'')), 
       SUM(CASE WHEN DAT.Fallart = 1 THEN 1 ELSE 0 END),
       SUM(CASE WHEN DAT.Fallart = 2 THEN 1 ELSE 0 END),
       SUM(CASE WHEN DAT.Fallart = 0 THEN 1 ELSE 0 END),
       SUM(CASE WHEN DAT.Auftrag = 1 THEN 1 ELSE 0 END),
       SUM(CASE WHEN DAT.Auftrag = 2 THEN 1 ELSE 0 END),
       SUM(CASE WHEN DAT.Auftrag = 3 THEN 1 ELSE 0 END),
       SUM(CASE WHEN DAT.Auftrag = 4 THEN 1 ELSE 0 END),
       SUM(CASE WHEN DAT.Auftrag = 5 THEN 1 ELSE 0 END),
       SUM(CASE WHEN DAT.Auftrag = 6 THEN 1 ELSE 0 END),
       SUM(CASE WHEN DAT.Auftrag = 7 THEN 1 ELSE 0 END),
       SUM(CASE WHEN DAT.Auftrag = 8 THEN 1 ELSE 0 END),
       SUM(CASE WHEN DAT.Auftrag = 9 THEN 1 ELSE 0 END),
       SUM(CASE WHEN DAT.Auftrag = 10 THEN 1 ELSE 0 END),
       SUM(CASE WHEN DAT.Auftrag = 11 THEN 1 ELSE 0 END),
       SUM(CASE WHEN DAT.Auftrag = 12 THEN 1 ELSE 0 END),
       SUM(CASE WHEN DAT.Auftrag = 13 THEN 1 ELSE 0 END),
       SUM(CASE WHEN DAT.Auftrag = 14 THEN 1 ELSE 0 END),
       SUM(CASE WHEN DAT.Auftrag = 15 THEN 1 ELSE 0 END),
       SUM(CASE WHEN DAT.Auftrag = 16 THEN 1 ELSE 0 END),
       MAX(ORG.OrgUnitID),
       1
FROM @Data                 DAT
  INNER JOIN dbo.FaLeistung        FAL WITH (READUNCOMMITTED) ON FAL.FaLeistungID = DAT.FaLeistungID
  INNER JOIN dbo.BaPerson     PRS WITH (READUNCOMMITTED) ON PRS.BaPersonID = FAL.BaPersonID
  INNER JOIN dbo.XUser         USR WITH (READUNCOMMITTED) ON USR.UserID = FAL.UserID
  LEFT  JOIN dbo.XOrgUnit_User OUU WITH (READUNCOMMITTED) ON OUU.UserID = USR.UserID
                              AND OUU.OrgUnitMemberCode = 2
  LEFT  JOIN dbo.XOrgUnit      ORG WITH (READUNCOMMITTED) on ORG.OrgUnitID = OUU.OrgUnitID
GROUP BY USR.UserID

------- Total
INSERT INTO @Result
SELECT 'Total', 
       NULL, 
       SUM(CASE WHEN DAT.Fallart = 1 THEN 1 ELSE 0 END),
       SUM(CASE WHEN DAT.Fallart = 2 THEN 1 ELSE 0 END),
       SUM(CASE WHEN DAT.Fallart = 0 THEN 1 ELSE 0 END),
       SUM(CASE WHEN DAT.Auftrag = 1 THEN 1 ELSE 0 END),
       SUM(CASE WHEN DAT.Auftrag = 2 THEN 1 ELSE 0 END),
       SUM(CASE WHEN DAT.Auftrag = 3 THEN 1 ELSE 0 END),
       SUM(CASE WHEN DAT.Auftrag = 4 THEN 1 ELSE 0 END),
       SUM(CASE WHEN DAT.Auftrag = 5 THEN 1 ELSE 0 END),
       SUM(CASE WHEN DAT.Auftrag = 6 THEN 1 ELSE 0 END),
       SUM(CASE WHEN DAT.Auftrag = 7 THEN 1 ELSE 0 END),
       SUM(CASE WHEN DAT.Auftrag = 8 THEN 1 ELSE 0 END),
       SUM(CASE WHEN DAT.Auftrag = 9 THEN 1 ELSE 0 END),
       SUM(CASE WHEN DAT.Auftrag = 10 THEN 1 ELSE 0 END),
       SUM(CASE WHEN DAT.Auftrag = 11 THEN 1 ELSE 0 END),
       SUM(CASE WHEN DAT.Auftrag = 12 THEN 1 ELSE 0 END),
       SUM(CASE WHEN DAT.Auftrag = 13 THEN 1 ELSE 0 END),
       SUM(CASE WHEN DAT.Auftrag = 14 THEN 1 ELSE 0 END),
       SUM(CASE WHEN DAT.Auftrag = 15 THEN 1 ELSE 0 END),
       SUM(CASE WHEN DAT.Auftrag = 16 THEN 1 ELSE 0 END),
       9999999,
       NULL
FROM @Data                 DAT
  INNER JOIN dbo.FaLeistung        FAL WITH (READUNCOMMITTED) ON FAL.FaLeistungID = DAT.FaLeistungID
  INNER JOIN dbo.BaPerson     PRS WITH (READUNCOMMITTED) ON PRS.BaPersonID = FAL.BaPersonID
  INNER JOIN dbo.XUser         USR WITH (READUNCOMMITTED) ON USR.UserID = FAL.UserID
  LEFT  JOIN dbo.XOrgUnit_User OUU WITH (READUNCOMMITTED) ON OUU.UserID = USR.UserID
                              AND OUU.OrgUnitMemberCode = 2
  LEFT  JOIN dbo.XOrgUnit      ORG WITH (READUNCOMMITTED) on ORG.OrgUnitID = OUU.OrgUnitID

------ just cosmetics
UPDATE @Result
  SET Erstmeld = CASE WHEN Erstmeld = 0 THEN NULL ELSE Erstmeld END,
      Wiederanm = CASE WHEN Wiederanm = 0 THEN NULL ELSE Wiederanm END,
      alt = CASE WHEN alt = 0 THEN NULL ELSE alt END,
      [Abkl.GM] = CASE WHEN [Abkl.GM] = 0 THEN NULL ELSE [Abkl.GM] END,
      Beratung = CASE WHEN Beratung = 0 THEN NULL ELSE Beratung END,
      [BR Reg] = CASE WHEN [BR Reg] = 0 THEN NULL ELSE [BR Reg] END,
      [Auftr.EKSK] = CASE WHEN [Auftr.EKSK] = 0 THEN NULL ELSE [Auftr.EKSK] END,
      Kizu = CASE WHEN Kizu = 0 THEN NULL ELSE Kizu END,
      [Kb Gericht] = CASE WHEN [Kb Gericht] = 0 THEN NULL ELSE [Kb Gericht] END,
      [Änd.Scheid] = CASE WHEN [Änd.Scheid] = 0 THEN NULL ELSE [Änd.Scheid] END,
      [Gem.eS] = CASE WHEN [Gem.eS] = 0 THEN NULL ELSE [Gem.eS] END,
      [Adop.abkl] = CASE WHEN [Adop.abkl] = 0 THEN NULL ELSE [Adop.abkl] END,
      [Abkl.Pp] = CASE WHEN [Abkl.Pp] = 0 THEN NULL ELSE [Abkl.Pp] END,
      [Begl.Pv] = CASE WHEN [Begl.Pv] = 0 THEN NULL ELSE [Begl.Pv] END,
      [Begl.PvmM] = CASE WHEN [Begl.PvmM] = 0 THEN NULL ELSE [Begl.PvmM] END,
      [Platz.ber] = CASE WHEN [Platz.ber] = 0 THEN NULL ELSE [Platz.ber] END,
      [Finanz] = CASE WHEN [Finanz] = 0 THEN NULL ELSE [Finanz] END,
      [Nam.änd] = CASE WHEN [Nam.änd] = 0 THEN NULL ELSE [Nam.änd] END,
      [andere] = CASE WHEN [andere] = 0 THEN NULL ELSE [andere] END
WHERE SAR &lt;&gt; 'Total' AND isNull(Abteilung, '') &lt;&gt; 'Total'

SELECT *
FROM @Result
ORDER BY Sortkey1$, Abteilung DESC, Sortkey2$, SAR</value>
  </data>
  <data name="qryQuery.SelectStatement" xml:space="preserve">
    <value>DECLARE @AnmeldeartFldID         INT
DECLARE @KontaktveranlasserFldID INT
SET     @AnmeldeartFldID         = (SELECT DynaFieldID FROM dbo.DynaField WITH (READUNCOMMITTED) WHERE FieldName = 'FaIntAnmeldeart')
SET     @KontaktveranlasserFldID = (SELECT DynaFieldID FROM dbo.DynaField WITH (READUNCOMMITTED) WHERE FieldName = 'FaIntKontaktveranlasser')

DECLARE @Data Table(
  FaLeistungID           INT,
  Fallart            INT,
  Auftrag            INT,
  Kontaktveranlasser INT
)

----------------------------------
---------- Collect Data 
----------------------------------
INSERT INTO @Data
SELECT FAL_V.FaLeistungID,
       Fallart            = CASE WHEN YEAR(FAL_V.DatumVon) &lt;  {edtAuswertungsjahr}  THEN 0 
                                 ELSE CONVERT(INT, ANM.Value)
                            END,
       [Auftrag JA]       = FAL_V.VmAuftragCode,
       Kontaktveranlasser = CONVERT(INT, KTK.Value)
FROM dbo.FaLeistung                FAL_V WITH (READUNCOMMITTED) 
  INNER JOIN dbo.XUser         USR WITH (READUNCOMMITTED)   ON USR.UserID = FAL_V.UserID
  LEFT  JOIN dbo.FaLeistung        FAL_F WITH (READUNCOMMITTED) ON FAL_F.BaPersonID = FAL_V.BaPersonID -- join letzte Fallführung
                                AND FAL_F.ModulID = 2
                                AND FAL_F.FaLeistungID = (SELECT TOP 1 FaLeistungID 
                                                      FROM dbo.FaLeistung WITH (READUNCOMMITTED)
                                                      WHERE BaPersonID = FAL_V.BaPersonID
                                                        AND ModulID = 2 --Fallführung
                                                      ORDER BY DatumVon DESC)
  LEFT  JOIN dbo.FaPhase       PHS WITH (READUNCOMMITTED)   ON PHS.FaLeistungID = FAL_F.FaLeistungID         -- join letzte intake phase
                                AND PHS.FaPhaseCode = 1 -- Intake
                                AND PHS.FaPhaseID = (SELECT TOP 1 FaPhaseID 
                                                      FROM dbo.FaPhase WITH (READUNCOMMITTED)
                                                      WHERE FaLeistungID = FAL_F.FaLeistungID 
                                                        AND FaPhaseCode = 1 -- Intake
                                                      ORDER BY DatumVon DESC)
  LEFT  JOIN dbo.DynaValue     ANM WITH (READUNCOMMITTED)   ON ANM.FaPhaseID = PHS.FaPhaseID
                                AND ANM.DynaFieldID = @AnmeldeartFldID
  LEFT  JOIN dbo.DynaValue     KTK WITH (READUNCOMMITTED)   ON KTK.FaPhaseID = PHS.FaPhaseID
                                AND KTK.DynaFieldID = @KontaktveranlasserFldID
  LEFT  JOIN dbo.XOrgUnit_User OUU WITH (READUNCOMMITTED)   ON OUU.UserID = USR.UserID
                            AND OUU.OrgUnitMemberCode = 2
  LEFT  JOIN dbo.XOrgUnit      ORG WITH (READUNCOMMITTED)   ON ORG.OrgUnitID = OUU.OrgUnitID
WHERE FAL_V.ModulID = 5                                                                               -- Vormundschaft
  AND FAL_V.FaProzessCode = 505                                                                           -- Vormundschaftlicher Auftrag
  AND {edtAuswertungsjahr} BETWEEN YEAR(FAL_V.DatumVon) AND isNull(YEAR(FAL_V.DatumBis),{edtAuswertungsjahr}) -- Fall aktiv in Periode
  AND OUU.OrgUnitID IN (SELECT OrgUnitID FROM dbo.XOrgUnit WITH (READUNCOMMITTED) WHERE ModulID = 3 AND ParentID = 28)           -- es sollen nur Einträge der Sektion Jugendamt angezeigt werden
--- AND OUU.OrgUnitID = {edtOrgUnitID}
--- AND USR.UserID = {edtUserID.LookupID}

----------------------------------
---------- List 1 
---------- Data overview
----------------------------------
SELECT BaPersonID$       = PRS.BaPersonID,
       Sektion            = ORG.ItemName,
       SAR                = USR.LastName + ISNULL(', ' + USR.FirstName,''),
       Person             = PRS.Name + ISNULL(', ' + PRS.Vorname,''),
       [Alter]            = dbo.fngetage(PRS.Geburtsdatum, GETDATE()),
       Geschlecht         = CASE PRS.GeschlechtCode
                               WHEN 1 THEN 'm'
                               WHEN 2 THEN 'f'
                               ELSE '?'
                            END,
       [Nationalität]     = LAN.Text,
       [Eröffnung]        = FAL.DatumVon,
       Fallart            = CASE WHEN DAT.Fallart = 0 THEN 'alt'
                                 ELSE dbo.fnLovText('FaAnmeldeart', CONVERT(INT, DAT.Fallart))
                            END,
       [Auftrag JA]       = dbo.fnLovText('VmAuftrag', DAT.Auftrag),
       Kontaktveranlasser = CASE WHEN DAT.Kontaktveranlasser IS NULL THEN 'nicht erhoben'
                                 ELSE dbo.fnLovText('FaKontaktveranlasser', Kontaktveranlasser)
                            END
FROM @Data DAT
  INNER JOIN dbo.FaLeistung        FAL WITH (READUNCOMMITTED) ON FAL.FaLeistungID = DAT.FaLeistungID
  INNER JOIN dbo.BaPerson     PRS WITH (READUNCOMMITTED)   ON PRS.BaPersonID = FAL.BaPersonID
  INNER JOIN dbo.XUser         USR WITH (READUNCOMMITTED)   ON USR.UserID = FAL.UserID
  LEFT  JOIN dbo.XOrgUnit_User OUU WITH (READUNCOMMITTED)   ON OUU.UserID = USR.UserID
                            AND OUU.OrgUnitMemberCode = 2
  LEFT  JOIN dbo.XOrgUnit      ORG WITH (READUNCOMMITTED)   ON ORG.OrgUnitID = OUU.OrgUnitID
  LEFT	JOIN dbo.BaLand		   LAN WITH (READUNCOMMITTED) ON PRS.NationalitaetCode = LAN.BaLandID
ORDER BY 2,3,4</value>
  </data>
  <assembly alias="System.Drawing" name="System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="qryQuery.TrayLocation" type="System.Drawing.Point, System.Drawing">
    <value>17, 17</value>
  </data>
  <data name="qryListe2.TrayLocation" type="System.Drawing.Point, System.Drawing">
    <value>115, 17</value>
  </data>
  <data name="xDocument.Properties.Buttons" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        iVBORw0KGgoAAAANSUhEUgAAAAwAAAAQCAYAAAAiYZ4HAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8
        YQUAAAAgY0hSTQAAeiYAAICEAAD6AAAAgOgAAHUwAADqYAAAOpgAABdwnLpRPAAAAF1JREFUOE9jZAAC
        Y2Pj/yAaGzh79iwjhjhIw///MzGwmJjYfxDGqSEtjeE/MgYpBhmEoYmQDSANKM7GpQHZmVg1oDsJxgdp
        pI4N2EIKJjbqJLIiDqSJEMaVovGKAwBnM3PWBP8PfwAAAABJRU5ErkJggg==
</value>
  </data>
  <data name="ctlGotoFallListe2.BaPersonID" mimetype="application/x-microsoft.net.object.binary.base64">
    <value>
        AAEAAAD/////AQAAAAAAAAAEAQAAAB9TeXN0ZW0uVW5pdHlTZXJpYWxpemF0aW9uSG9sZGVyAwAAAARE
        YXRhCVVuaXR5VHlwZQxBc3NlbWJseU5hbWUBAAEICgIAAAAGAgAAAAAL
</value>
  </data>
</root>
<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="qryQuery.SelectStatement" xml:space="preserve">
    <value>select Jahr            = ERD.Jahr,
       [Nr.]           = ERD.LaufNr,
       Familenname     = ERB.FamilienNamen,
       Vorname         = ERB.Vornamen,
       Geburtsdatum    = ERB.Geburtsdatum,
       Adresse         = ERB.Strasse,
       Sachbearbeitung = USR.Lastname,
       Todestag        = isnull(ERB.TodesDatumText, convert(varchar,ERB.TodesDatum,104)),
       Beistand        = case when USR2.UserID is not null
                         then USR2.LastName + isnull(', ' + USR2.FirstName,'')
                         else VPM.Name + isnull(', ' + VPM.Vorname,'') + ' (PriMa)'
                         end,
       Massnahme       = replace(convert(varchar(8000),ERD.Massnahme),char(13)+char(10),', '),
       Inventarart     = dbo.fnLOVText('VmErbschaftInventar',ERD.InventarCode),
       Notar           = ORG.Name,
       Aktiv           = isnull(ERD.Aktiv,convert(bit,0)),
       [Aus.]          = isnull(ERD.Ausschlagung,convert(bit,0)),
       [VBei.]         = isnull(ERD.VertretungsBeistandschaft,convert(bit,0)),
       El              = isnull(ERD.El,convert(bit,0)),
       BaPersonID$    = FAL.BaPersonID
from   dbo.VmErbschaftsdienst ERD WITH (READUNCOMMITTED)
       left  join dbo.XUser           USR WITH (READUNCOMMITTED)  on USR.UserID = ERD.UserID
       left  join dbo.VmErblasser     ERB WITH (READUNCOMMITTED)  on ERB.FaLeistungID = ERD.FaLeistungID
       inner join dbo.FaLeistung          FAL WITH (READUNCOMMITTED)  on FAL.FaLeistungID = ERD.FaLeistungID
       left  join dbo.BaInstitution ORG WITH (READUNCOMMITTED) on  ORG.BaInstitutionID = ERD.InventarNotarID
       left  join dbo.FaLeistung          FAL2 WITH (READUNCOMMITTED) on FAL2.BaPersonID = FAL.BaPersonID and
                                          FAL2.ModulID = 5 and
                                          FAL2.FaProzessCode = 501 and
                                          FAL2.FaLeistungID = (select Top 1 FaLeistungID
                                                           from   dbo.FaLeistung WITH (READUNCOMMITTED)
                                                           where  BaPersonID = FAL.BaPersonID and
                                                                  ModulID = 5 and
                                                                  FaProzessCode = 501
                                                           order by DatumVon)
       left join dbo.VmMassnahme      VMN WITH (READUNCOMMITTED)  on VMN.FaLeistungID = FAL2.FaLeistungID and
                                          VMN.DatumVon = (select max(DatumVon)
                                                          from   dbo.VmMassnahme WITH (READUNCOMMITTED)
                                                          where  FaLeistungID = FAL2.FaLeistungID)
       left join dbo.VmErnennung      VEN WITH (READUNCOMMITTED) on VEN.VmMassnahmeID = VMN.VmMassnahmeID and
                                         VEN.VmErnennungID = (select top 1 VmErnennungID
                                                              from   dbo.VmErnennung WITH (READUNCOMMITTED)
                                                              where  VmMassnahmeID = VMN.VmMassnahmeID
                                                              order by Ernennung desc)
       left  join dbo.XUser           USR2 WITH (READUNCOMMITTED)  on USR2.UserID = VEN.UserID
       left  join dbo.VmPriMa         VPM WITH (READUNCOMMITTED)   on VPM.VmPriMaID = VEN.VmPriMaID

where 1 = 1
--- and ERD.UserID = {edtUserID.LookupID}
--- and ERD.Jahr = {edtJahr}
order by ERD.Jahr, ERD.LaufNr</value>
  </data>
  <assembly alias="System.Drawing" name="System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="qryQuery.TrayLocation" type="System.Drawing.Point, System.Drawing">
    <value>17, 17</value>
  </data>
  <data name="xDocument.Properties.Buttons" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        iVBORw0KGgoAAAANSUhEUgAAAAwAAAAQCAYAAAAiYZ4HAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8
        YQUAAAAgY0hSTQAAeiYAAICEAAD6AAAAgOgAAHUwAADqYAAAOpgAABdwnLpRPAAAAF1JREFUOE9jZAAC
        Y2Pj/yAaGzh79iwjhjhIw///MzGwmJjYfxDGqSEtjeE/MgYpBhmEoYmQDSANKM7GpQHZmVg1oDsJxgdp
        pI4N2EIKJjbqJLIiDqSJEMaVovGKAwBnM3PWBP8PfwAAAABJRU5ErkJggg==
</value>
  </data>
  <data name="edtUserID.LookupSQL" xml:space="preserve">
    <value>select ID = UserID, 
Sachbearbeitung = LastName + isNull(', ' + FirstName,''), 
[Kuerzel] = LogonName
from   XUser 
where LastName + isNull(', ' + FirstName,'') like isNull({0},'') + '%' 
order by Sachbearbeitung</value>
  </data>
</root>
<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="edtUserID2.LookupSQL" xml:space="preserve">
    <value>select ID = UserID,
 Mandatstraeger = LastName + isNull(', ' + FirstName,''), 
[Kuerzel] = LogonName
from   XUser 
where LastName + isNull(', ' + FirstName,'') like isNull({0},'') + '%' 
order by Mandatstraeger</value>
  </data>
  <data name="qryQuery.SelectStatement" xml:space="preserve">
    <value>declare @CodesFldID int
declare @VermoegenCodesFldID int
declare @MemoFldID int

set @CodesFldID = (select DynaFieldID from dbo.DynaField WITH (READUNCOMMITTED) where FieldName = 'VmAdminKlientenlisteEinkommenCB')
set @VermoegenCodesFldID = (select DynaFieldID from dbo.DynaField WITH (READUNCOMMITTED) where FieldName = 'VmVermoegenCB')
set @MemoFldID  = (select DynaFieldID from dbo.DynaField WITH (READUNCOMMITTED) where FieldName = 'VmKlientenlisteMemo')

select BaPersonID$                   = PRS.BaPersonID,
       [Mandant/-in]                 = PRS.Name + isnull(', ' + PRS.Vorname,''),
       [MT]                          = ShortName,
       [AHV-Nr.]                     = PRS.AhvNummer,
       [Vers. Nr.]                   = PRS.Versichertennummer,
       Einkommen                     = dbo.fnLOVTextListe('vmEinnahmenAngaben',
                                         replace(replace(replace(replace(
                                           ',' + (select convert(varchar(50),Value)
                                                  from   dbo.DynaValue WITH (READUNCOMMITTED)
                                                  where  FaLeistungID = FAL.FaLeistungID and
                                                         DynaFieldID = @CodesFldID) + ',',
                                         ',4,',','),
                                         ',6,',','),
                                         ',5,',','),
                                         ',10,',',')),
       [Vermögen]                    = dbo.fnLOVTextListe('VmVermögenAngaben',
                                         (select convert(varchar(50),Value)
                                          from   dbo.DynaValue WITH (READUNCOMMITTED)
                                          where  FaLeistungID = FAL.FaLeistungID and
                                                 DynaFieldID = @VermoegenCodesFldID)
                                         ),
       EL                            = convert(bit,case when ',' + (select convert(varchar(50),Value) from dbo.DynaValue WITH (READUNCOMMITTED) where  FaLeistungID = FAL.FaLeistungID and
                                                                    DynaFieldID = @CodesFldID) + ',' like '%,4,%'
                                       then 1 else 0 end),
       ZuDe                          = convert(bit,case when ',' + (select convert(varchar(50),Value) from dbo.DynaValue WITH (READUNCOMMITTED) where  FaLeistungID = FAL.FaLeistungID and
                                                                    DynaFieldID = @CodesFldID) + ',' like '%,6,%'
                                       then 1 else 0 end),
       HE                            = convert(bit,case when ',' + (select convert(varchar(50),Value) from dbo.DynaValue WITH (READUNCOMMITTED) where  FaLeistungID = FAL.FaLeistungID and
                                                                    DynaFieldID = @CodesFldID) + ',' like '%,5,%'
                                       then 1 else 0 end),
       SH                            = convert(bit,case when ',' + (select convert(varchar(50),Value) from dbo.DynaValue WITH (READUNCOMMITTED) where  FaLeistungID = FAL.FaLeistungID and
                                                                    DynaFieldID = @CodesFldID) + ',' like '%,10,%'
                                       then 1 else 0 end),       
       Besonderes                    = replace((select convert(varchar,Value) from dbo.DynaValue WITH (READUNCOMMITTED)
                                                  where  FaLeistungID = FAL.FaLeistungID and DynaFieldID = @MemoFldID),
                                                  char(13) + char(10), ' ')       
from   dbo.BaPerson PRS WITH (READUNCOMMITTED)
       inner join dbo.FaLeistung           FAL WITH (READUNCOMMITTED)  on FAL.BaPersonID = PRS.BaPersonID and
                                           FAL.ModulID = 5 and
                                           FaProzessCode = 501
       inner join dbo.VmMassnahme      VMN WITH (READUNCOMMITTED)  on VMN.FaLeistungID = FAL.FaLeistungID and
                                           VMN.VmMassnahmeID =
                                             (select top 1 VmMassnahmeID
                                              from   dbo.VmMassnahme WITH (READUNCOMMITTED)
                                              where  FaLeistungID = FAL.FaLeistungID
                                              ORDER BY VmMassnahmeID DESC) --Mantis 759
       left  join dbo.VmErnennung      VEN WITH (READUNCOMMITTED)  on VEN.VmMassnahmeID = VMN.VmMassnahmeID and
                                           VEN.VmErnennungID =
                                             (select top 1 VmErnennungID
                                              from   dbo.VmErnennung WITH (READUNCOMMITTED)
                                              where  VmMassnahmeID = VMN.VmMassnahmeID
                                              order by Ernennung desc)
       left  join dbo.XUser            USR WITH (READUNCOMMITTED)  on USR.UserID = VEN.UserID
       left  join dbo.BaGesundheit    GES WITH (READUNCOMMITTED)  on GES.BaPersonID = PRS.BaPersonID
                                       AND GES.Jahr = (SELECT MAX(Jahr) FROM dbo.BaGesundheit WITH (READUNCOMMITTED) WHERE BaPersonID = PRS.BaPersonID) -- Mantis 759
where USR.UserID is not null  -- nur amtliche Mandatsträger    

--- AND (1 = 2 -- {edtUserID1.LookupID}
--- OR USR.UserID = ({edtUserID1.LookupID})
--- OR USR.UserID = ({edtUserID2.LookupID})
--- OR USR.UserID = ({edtUserID3.LookupID})
---) -- {edtUserID1.LookupID}

--- and ({edtaktuell} = 0 or FAL.DatumBis is null)
--- and PRS.BaPersonID = {edtBaPersonID.LookupID}
order by [Mandant/-in]</value>
  </data>
  <data name="edtUserID1.LookupSQL" xml:space="preserve">
    <value>select ID = UserID, 
Mandatstraeger = LastName + isNull(', ' + FirstName,''), 
[Kuerzel] = LogonName
from   XUser 
where LastName + isNull(', ' + FirstName,'') like isNull({0},'') + '%' 
order by Mandatstraeger</value>
  </data>
  <assembly alias="System.Drawing" name="System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="qryQuery.TrayLocation" type="System.Drawing.Point, System.Drawing">
    <value>17, 17</value>
  </data>
  <data name="edtBaPersonID.LookupSQL" xml:space="preserve">
    <value>select distinct ID = PRS.BaPersonID, 
MandantIn = Name + isNull(', ' + PRS.Vorname,'')
from   BaPerson PRS
       inner join FaLeistung FAL on FAL.BaPersonID = PRS.BaPersonID and
                               FAL.ModulID = 5 and
                          FAL.FaProzessCode = 501
where Name + isNull(', ' + Vorname,'') like isNull({0},'') + '%' 
order by Name + isNull(', ' + PRS.Vorname,'')</value>
  </data>
  <data name="edtUserID3.LookupSQL" xml:space="preserve">
    <value>select ID = UserID, 
Mandatstraeger = LastName + isNull(', ' + FirstName,''), 
[Kuerzel] = LogonName
from   XUser 
where LastName + isNull(', ' + FirstName,'') like isNull({0},'') + '%' 
order by Mandatstraeger</value>
  </data>
  <data name="xDocument.Properties.Buttons" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        iVBORw0KGgoAAAANSUhEUgAAAAwAAAAQCAYAAAAiYZ4HAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8
        YQUAAAAgY0hSTQAAeiYAAICEAAD6AAAAgOgAAHUwAADqYAAAOpgAABdwnLpRPAAAAF1JREFUOE9jZAAC
        Y2Pj/yAaGzh79iwjhjhIw///MzGwmJjYfxDGqSEtjeE/MgYpBhmEoYmQDSANKM7GpQHZmVg1oDsJxgdp
        pI4N2EIKJjbqJLIiDqSJEMaVovGKAwBnM3PWBP8PfwAAAABJRU5ErkJggg==
</value>
  </data>
</root>
<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="qryQuery.SelectStatement" xml:space="preserve">
    <value>begin
  declare @PerDatum   datetime
  set @PerDatum = null
  --- set @PerDatum = {edtPerDatum}

  if @PerDatum is null
    set @PerDatum = getdate()

    select Mandant = PRS.Name + isNull(' ' + PRS.Vorname,''),
           PRS.Geburtsdatum,
           Todesdatum = PRS.Sterbedatum,
           MT = case when ERN.UserID is not null
                then USR.LastName + isNull(' ' + USR.FirstName,'')
                else PRM.Name + isNull(' ' + PRM.Vorname,'')
                end,
           privat = convert(bit, case when ERN.VmPriMaID is not null then 1 else 0 end),
           KTO.KontoNr,
           KTO.KontoName,
           Saldo =
             isNull(KTO.EroeffnungsSaldo,0)
             +
             (select isNull(sum(Betrag),0)
              from   dbo.FbBuchung WITH (READUNCOMMITTED)
              where  SollKtoNr = KTO.KontoNr and
                     FbPeriodeID = PER.FbPeriodeID and
                     BuchungsDatum &lt;= @PerDatum)
             -
             (select isNull(sum(Betrag),0)
              from   dbo.FbBuchung WITH (READUNCOMMITTED)
              where  HabenKtoNr = KTO.KontoNr and
                     FbPeriodeID = PER.FbPeriodeID and
                     BuchungsDatum &lt;= @PerDatum),
             [Periode-Status] = STA.Text,
           PER.PeriodeVon,
           PER.PeriodeBis,
           Team = TEA.Name,
           Depotnummer = KTO.FbDepotnr,
           BaPersonID$ = PRS.BaPersonID
    from   dbo.FbPeriode PER WITH (READUNCOMMITTED)
           inner join dbo.BaPerson  PRS WITH (READUNCOMMITTED) on PRS.BaPersonID = PER.BaPersonID
           inner join dbo.FbKonto    KTO WITH (READUNCOMMITTED) on KTO.FbPeriodeID = PER.FbPeriodeID
           left  join dbo.FaLeistung     FAL WITH (READUNCOMMITTED) on FAL.BaPersonID = PER.BaPersonID and
                                        FAL.ModulID = 5 and
                                        FAL.FaProzessCode = 501 and
                                        FAL.DatumVon  = (select max(DatumVon)
                                                         from   dbo.FaLeistung WITH (READUNCOMMITTED)
                                                         where  BaPersonID = PER.BaPersonID and
                                                                ModulID = 5 and
                                                                FaProzessCode = 501)
           left join dbo.VmMassnahme MAS WITH (READUNCOMMITTED) on MAS.FaLeistungID = FAL.FaLeistungID and
                                        MAS.VmMassnahmeID = (select top 1 VmMassnahmeID
                                                             from   dbo.VmMassnahme WITH (READUNCOMMITTED)
                                                             where  FaLeistungID = FAL.FaLeistungID and
                                                                    DatumVon &lt;= @PerDatum
                                                             order by DatumVon desc)
           left join dbo.VmErnennung ERN WITH (READUNCOMMITTED) on ERN.VmMassnahmeID = MAS.VmMassnahmeID and
                                        ERN.VmErnennungID = (select top 1 VmErnennungID
                                                             from   dbo.VmErnennung WITH (READUNCOMMITTED)
                                                             where  VmMassnahmeID = MAS.VmMassnahmeID and
                                                                    Ernennung &lt;= @PerDatum
                                                             order by Ernennung desc)
           left join dbo.XUser       USR WITH (READUNCOMMITTED) on USR.UserID = ERN.UserID
           left join dbo.VmPriMa     PRM WITH (READUNCOMMITTED) on PRM.VmPriMaID = ERN.VmPriMaID
           left join dbo.XLOVCode    STA WITH (READUNCOMMITTED) on STA.LOVName = 'FbPeriodeStatus' and
                                        STA.Code = PER.PeriodeStatusCode
           left join dbo.FbTeam      TEA WITH (READUNCOMMITTED) on TEA.FbTeamID = PER.FbTeamID
    where  (@PerDatum between PER.PeriodeVon and PER.PeriodeBis
  ---             OR ({edtSaldoPerEndeJahr} = 1  AND YEAR(@PerDatum)  = YEAR(PER.PeriodeBis))
            )
         AND ((isNull(KTO.EroeffnungsSaldo,0)
             +
             (select isNull(sum(Betrag),0)
              from   dbo.FbBuchung WITH (READUNCOMMITTED)
              where  SollKtoNr = KTO.KontoNr and
                     FbPeriodeID = PER.FbPeriodeID and
                     BuchungsDatum &lt;= @PerDatum)
             -
             (select isNull(sum(Betrag),0)
              from   dbo.FbBuchung WITH (READUNCOMMITTED)
              where  HabenKtoNr = KTO.KontoNr and
                     FbPeriodeID = PER.FbPeriodeID and
                     BuchungsDatum &lt;= @PerDatum)) &lt;&gt; 0
             OR KTO.EroeffnungsSaldo &lt;&gt; 0
             OR EXISTS  (select 1 from dbo.FbBuchung WITH (READUNCOMMITTED)
                         where SollKtoNr = KTO.KontoNr
                           and FbPeriodeId = PER.FbPeriodeID
                           and BuchungsDatum &lt;= @PerDatum )
             )


--- and ({edtKontoGruppeCode} &lt;&gt; 1 or KTO.KontoKlasseCode = 1)
--- and ({edtKontoGruppeCode} &lt;&gt; 2 or KTO.KontoKlasseCode = 2)
--- and ({edtKontoGruppeCode} &lt;&gt; 3 or KTO.KontoKlasseCode in (1,2))
--- and ({edtKontoGruppeCode} &lt;&gt; 4 or KTO.KontoTypCode in (4,5))
--- and ({edtKontoGruppeCode} &lt;&gt; 5 or KTO.KontoTypCode = 7)
--- and ({edtKontoGruppeCode} &lt;&gt; 6 or (KTO.KontoKlasseCode = 1 and not KTO.KontoTypCode in (4,5)))
--- and PER.BaPersonID = {edtBaPersonID.LookupID}
--- and ERN.UserID = {edtUserID.LookupID}
--- AND (({edtFbPeriodeStatusCode} = 9999 AND PER.PeriodeStatusCode IN (1,2)) OR {edtFbPeriodeStatusCode} = PER.PeriodeStatusCode)
--- and ({edtnurPriMa} = 0 or ERN.VmPriMaID is not null)
--- and ({edtnurAmtlich} = 0 or ERN.VmPriMaID is null)
--- AND (({edtFbTeamID} = 9999 AND PER.FbTeamID IN(1,2,4,6)) OR {edtFbTeamID} = PER.FbTeamID)
  order by Mandant,KontoNr
end</value>
  </data>
  <assembly alias="System.Drawing" name="System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="qryQuery.TrayLocation" type="System.Drawing.Point, System.Drawing">
    <value>17, 17</value>
  </data>
  <data name="edtBaPersonID.LookupSQL" xml:space="preserve">
    <value> select distinct
  ID = PRS.BaPersonID,
  Mandant = PRS.Name + isNull(', ' + PRS.Vorname,''),
  Strasse = PRS.WohnsitzStrasse + isNull(' ' + PRS.WohnsitzHausNr,''),
  Ort     = isNull(PRS.WohnsitzPLZ + ' ','') + isNull(PRS.WohnsitzOrt,''),
  Mandatstraeger = isNull(BEN.FirstName + ' ','') + isNull(BEN.LastName,'')
from FbPeriode PER
  inner join vwPerson        PRS on PRS.BaPersonID = PER.BaPersonID
  left  join FaLeistung      FAL on FAL.BaPersonID = PER.BaPersonID and
                                     FAL.ModulID = 5 and
                                     FAL.DatumVon  = (select max(DatumVon)
                                                      from   FaLeistung
                                                      where  BaPersonID = PER.BaPersonID and
                                                             FAL.ModulID = 5 and
                                                             FaProzessCode = 501)
  left  join XUser            BEN on BEN.UserID = FAL.UserID
where PRS.Name + isNull(', ' + PRS.Vorname,'') like {0} + '%' 
order by Mandant</value>
  </data>
  <data name="xDocument.Properties.Buttons" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        iVBORw0KGgoAAAANSUhEUgAAAAwAAAAQCAYAAAAiYZ4HAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8
        YQUAAAAgY0hSTQAAeiYAAICEAAD6AAAAgOgAAHUwAADqYAAAOpgAABdwnLpRPAAAAF1JREFUOE9jZAAC
        Y2Pj/yAaGzh79iwjhjhIw///MzGwmJjYfxDGqSEtjeE/MgYpBhmEoYmQDSANKM7GpQHZmVg1oDsJxgdp
        pI4N2EIKJjbqJLIiDqSJEMaVovGKAwBnM3PWBP8PfwAAAABJRU5ErkJggg==
</value>
  </data>
</root>
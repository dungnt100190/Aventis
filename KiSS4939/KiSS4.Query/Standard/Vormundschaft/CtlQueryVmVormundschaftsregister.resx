<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <metadata name="qryQuery.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>17, 17</value>
  </metadata>
  <data name="qryQuery.SelectStatement" xml:space="preserve">
    <value>select Klient           = PRS.NameVorname,
       Strasse          = PRS.WohnsitzStrasseHausNr,
       Ort              = PRS.WohnsitzPLZOrt,
       Heimatort        = PRS.Heimatort,
       Zivilstand       = dbo.fnLOVText('Zivilstand', PRS.ZivilstandCode),
       Geburtsdatum     = PRS.Geburtsdatum,
       Fallstatus       = case when FAL.DatumBis is null
                          then 'aktiv'
                          else case when ARC.FaLeistungID is null
                               then 'geschlossen'
                               else 'archiviert' end
                          end,
       ZGB              = replace(dbo.fnLOVTextListe('VmZGB',MAS.ZGBCodes),' ZGB',''),
       Errichtungsdatum = MAS.DatumVon,
       Aufhebungsdatum  = MAS.DatumBis,
       [Periode Von]    = BER.BerichtsPeriodeVon,
       [Periode Bis]    = BER.BerichtsPeriodeBis,
       Berichtseingang  = BER.Erstellung,
       privat           = convert(bit, case when VPM.VmPriMaID is not null then 1 else 0 end),
       [MT Name]        = case when USR.UserID is not null
                               then USR.LastName + isnull(', ' + USR.FirstName,'')
                               else VPM.Name + isnull(', ' + VPM.Vorname,'')
                               end,
       [MT Strasse]     = ADR2.Strasse + isNull(' ' + ADR2.HausNr,''),
       [MT Ort]         = isNull(ADR2.PLZ + ' ','') + ADR2.Ort,
       [MT Telefon]     = case when USR.UserID is not null then USR.Phone else VPM.Telefon_P end,
       BaPersonID$ = PRS.BaPersonID
from   vwPerson PRS
       inner join FaLeistung       FAL on FAL.BaPersonID = PRS.BaPersonID and
                                          FAL.ModulID = 5 and
                                          FAL.FaProzesscode = 501 and
                                          FAL.FaLeistungID = (select top 1 FaLeistungID -- letzter Fall
                                                           from   FaLeistung
                                                           where  BaPersonID = PRS.BaPersonID and
                                                                  ModulID = 5 and
                                                                  FaProzesscode = 501
                                                           order by DatumVon desc)
       left  join VmMassnahme      MAS on MAS.FaLeistungID = FAL.FaLeistungID and
                                          MAS.VmMassnahmeID = (select top 1 VmMassnahmeID  -- letzte Massnahme
                                                               from   VmMassnahme
                                                               where  FaLeistungID = FAL.FaLeistungID
                                                               order by DatumVon desc)
       left  join VmErnennung      ERN on ERN.VmMassnahmeID = MAS.VmMassnahmeID and
                                          ERN.VmErnennungID = (select top 1 VmErnennungID -- letzte Massnahme
                                                               from   VmErnennung
                                                               where  VmMassnahmeID = MAS.VmMassnahmeID
                                                               order by Ernennung desc)
       left  join VmBericht        BER on BER.FaLeistungID = FAL.FaLeistungID and
                                          BER.VmBerichtID = (select top 1 VmBerichtID -- letzte Berichtsperiode
                                                             from   VmBericht
                                                             where  FaLeistungID = FAL.FaLeistungID
                                                             order by BerichtsperiodeVon desc)
       left  join XUser            USR on USR.UserID = ERN.UserID
       left  join VmPriMa          VPM on VPM.VmPriMaID = ERN.VmPriMaID
       left  join BaAdresse       ADR2 on ADR2.VmPriMaID = VPM.VmPriMaID
       left  join FaLeistungArchiv     ARC on ARC.FaLeistungID = FAL.FaLeistungID and
                                          ARC.CheckOut is null
where 1 = 1
--- and PRS.BaPersonID = {edtBaPersonID.LookupID}
--- and PRS.Geburtsdatum = {edtGeburtsdatum}
--- and ({edtFallstatus} &lt;&gt; 1 or FAL.DatumBis is null)
--- and ({edtFallstatus} &lt;&gt; 2 or FAL.DatumBis is not null and ARC.FaLeistungID is null )
--- and ({edtFallstatus} &lt;&gt; 3 or ARC.FaLeistungID is not null )
--- and ({edtFallstatus} &lt;&gt; 4 or FAL.DatumBis is not null)
--- and ERN.UserID = {edtUserID.LookupID}
--- AND({edtUserType}= 0 OR ({edtUserType}=1 AND ERN.UserID IS NOT NULL) OR ({edtUserType}=2 AND ERN.VmPriMaID IS NOT NULL))
--- and ',' + replace(dbo.fnLOVTextListe('VmZGB',MAS.ZGBCodes),' ZGB','') + ',' like ',' + {edtZGB} + ','
order by Klient</value>
  </data>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="xDocument.Properties.Buttons" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        iVBORw0KGgoAAAANSUhEUgAAAAwAAAAQCAYAAAAiYZ4HAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8
        YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAABbSURBVDhPY2AAAmNj4/+4MEgeA4AU//8/EwOLiYn9B2Gc
        GtLSGP4jY5BikEEYmgjZANIAUgO3CZcGZGdi1YDuJBgfpJE6NmALKZjYqJPIijh8KRYmhzXlEhIEANZ8
        ev1ASni6AAAAAElFTkSuQmCC
</value>
  </data>
  <data name="edtGeburtsdatum.Properties.Buttons" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        iVBORw0KGgoAAAANSUhEUgAAAAwAAAAQCAYAAAAiYZ4HAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8
        YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAABRSURBVDhPY2AAAmNj4//EYJBaMAApRqbhErjkiDEdZiiK
        Dcgmo7NxamhoYAA7DwSQ2Vg1gBTAFKHT1NGA7AyibBhuGoiKB5Jimpj0hM9AnHIA7aiPJlUTWpwAAAAA
        SUVORK5CYII=
</value>
  </data>
  <data name="edtBaPersonID.EditValue" mimetype="application/x-microsoft.net.object.binary.base64">
    <value>
        AAEAAAD/////AQAAAAAAAAAEAQAAAB9TeXN0ZW0uVW5pdHlTZXJpYWxpemF0aW9uSG9sZGVyAwAAAARE
        YXRhCVVuaXR5VHlwZQxBc3NlbWJseU5hbWUBAAEICgIAAAAGAgAAAAAL
</value>
  </data>
</root>
<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <metadata name="qryQuery.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>17, 17</value>
  </metadata>
  <data name="qryQuery.SelectStatement" xml:space="preserve">
    <value>DECLARE @Data Table(
  FaLeistungID INT,
  Phase        INT,
  Produkt      INT,
  Eroeffnung   DATETIME,
  Bearbeitung  DATETIME,
  Abschluss    DATETIME,
  Kurzabkl     BIT  
)

-- Intake
DECLARE @FaIntAusstattungVerAuswertFldID INT
DECLARE @FaIntAusstattungVerKurzabklFldID INT
EXEC dbo.spGetDynaFldIDfromTextmarke 'FaIntAusstattungVerAuswert', @FaIntAusstattungVerAuswertFldID OUT
EXEC dbo.spGetDynaFldIDfromTextmarke 'FaIntAusstattungVerKurzabkl', @FaIntAusstattungVerKurzabklFldID OUT

-- Beratung
DECLARE @FaAusstattungVerAuswertFldID INT
DECLARE @FaAusstattungVerProduktFldID INT
EXEC dbo.spGetDynaFldIDfromTextmarke 'FaAusstattungVerAuswert', @FaAusstattungVerAuswertFldID OUT
EXEC dbo.spGetDynaFldIDfromTextmarke 'FaAusstattungVerProdukt', @FaAusstattungVerProduktFldID OUT

----------------------------------
---------- Collect Data - Intake
----------------------------------
INSERT INTO @Data
SELECT FaLeistungID = FAL.FaLeistungID,
       Phase        = 1,
       Produkt      = null, -- nur in Beratungsphase!
       Eroeffnung   = PHA.DatumVon,
       Bearbeitung  = CONVERT(DATETIME, DV1.Value, 104),
       Abschluss    = PHA.DatumBis,
       Kurzabkl     = CONVERT(BIT, DV2.Value)
FROM dbo.FaLeistung            FAL WITH (READUNCOMMITTED)
  INNER JOIN dbo.FaPhase       PHA WITH (READUNCOMMITTED) ON FAL.FaLeistungID = PHA.FaLeistungID
  INNER JOIN dbo.XUser         USR WITH (READUNCOMMITTED) ON USR.UserID = FAL.UserID
  LEFT  JOIN dbo.DynaValue     DV1 WITH (READUNCOMMITTED) ON DV1.FaPhaseID = PHA.FaPhaseID       -- Bearbeitungsfrist                              
                              AND DV1.DynaFieldID = @FaIntAusstattungVerAuswertFldID 
  LEFT  JOIN dbo.DynaValue     DV2 WITH (READUNCOMMITTED) ON DV2.FaPhaseID = PHA.FaPhaseID       -- Kurzabklärung                              
                              AND DV2.DynaFieldID = @FaIntAusstattungVerKurzabklFldID 
  LEFT  JOIN dbo.XOrgUnit_User OUU WITH (READUNCOMMITTED) ON OUU.UserID = USR.UserID
                              AND OUU.OrgUnitMemberCode = 2
  LEFT  JOIN dbo.XOrgUnit      ORG WITH (READUNCOMMITTED) on ORG.OrgUnitID = OUU.OrgUnitID
--- AND ORG.OrgUnitID = {edtOrgUnitID}

WHERE PHA.DatumVon &lt;= {edtDatumBis}
AND (PHA.DatumBis IS NULL OR PHA.DatumBis &gt;= {edtDatumVon})
AND PHA.FaPhaseCode = 1
AND ORG.OrgUnitID IN (SELECT OrgUnitID
                      FROM dbo.XOrgUnit WITH (READUNCOMMITTED)
			          WHERE ModulID = 3
			          AND ParentID = 28)
--- AND ORG.OrgUnitID = {edtOrgUnitID}
--- AND USR.UserID = {edtUserID.LookupID}
--- AND PHA.FaPhaseCode = {edtPhaseCode}


----------------------------------
---------- Collect Data - Beratung
----------------------------------
INSERT INTO @Data
SELECT FaLeistungID = FAL.FaLeistungID,
       Phase        = 2,
       Produkt      = CONVERT(INT, DV2.Value), 
       Eroeffnung   = PHA.DatumVon,
       Bearbeitung  = CONVERT(DATETIME, DV1.Value, 104),
       Abschluss    = PHA.DatumBis,
       Kurzabkl     = CONVERT(BIT, null) -- nur bei Intake!
FROM dbo.FaLeistung            FAL WITH (READUNCOMMITTED)
  INNER JOIN dbo.FaPhase       PHA WITH (READUNCOMMITTED) ON FAL.FaLeistungID = PHA.FaLeistungID
  INNER JOIN dbo.XUser         USR WITH (READUNCOMMITTED) ON USR.UserID = FAL.UserID
  LEFT  JOIN dbo.DynaValue     DV1 WITH (READUNCOMMITTED) ON DV1.FaPhaseID = PHA.FaPhaseID       -- Bearbeitungsfrist                              
                              AND DV1.DynaFieldID = @FaAusstattungVerAuswertFldID 
  LEFT  JOIN dbo.DynaValue     DV2 WITH (READUNCOMMITTED) ON DV2.FaPhaseID = PHA.FaPhaseID       -- Produkt                              
                              AND DV2.DynaFieldID = @FaAusstattungVerProduktFldID 
  LEFT  JOIN dbo.XOrgUnit_User OUU WITH (READUNCOMMITTED) ON OUU.UserID = USR.UserID
                              AND OUU.OrgUnitMemberCode = 2
  LEFT  JOIN dbo.XOrgUnit      ORG WITH (READUNCOMMITTED) on ORG.OrgUnitID = OUU.OrgUnitID
--- AND ORG.OrgUnitID = {edtOrgUnitID}

WHERE PHA.DatumVon &lt;= {edtDatumBis}
AND (PHA.DatumBis IS NULL OR PHA.DatumBis &gt;= {edtDatumVon})
AND PHA.FaPhaseCode = 2
AND ORG.OrgUnitID IN (SELECT OrgUnitID
                      FROM dbo.XOrgUnit WITH (READUNCOMMITTED)
			          WHERE ModulID = 3
			          AND ParentID = 28)
--- AND ORG.OrgUnitID = {edtOrgUnitID}
--- AND USR.UserID = {edtUserID.LookupID}
--- AND PHA.FaPhaseCode = {edtPhaseCode}

------------------------------------------
------------ Liste: Übersicht alle Fälle
------------------------------------------
SELECT BaPersonID$  = PRS.BaPersonID,
       Sektion      = ORG.ItemName,
       SAR          = USR.LastName + ISNULL(', ' + USR.FirstName,''),
       Klient       = PRS.Name + ISNULL(', ' + PRS.Vorname,''),
       Phase        = dbo.fnLovText('DynaPhase', DAT.Phase), 
       Produkt      = CASE WHEN DAT.Phase = 1 THEN
                        -- Intake
                        CASE WHEN DAT.Kurzabkl = 1 THEN
                          'Kurzabklärung JA'
                        ELSE
                          'Abklärung'
                        END
                      ELSE
                        dbo.fnLovText('FaProdukt', DAT.Produkt)
                      END,      
       [Eröffnung]  = DAT.Eroeffnung,
       Bearbeitungsfrist = DAT.Bearbeitung,
       Abschluss         = DAT.Abschluss,
       Fristeinhaltung   = CASE WHEN DAT.Bearbeitung IS NULL THEN 
                                 ''
                           ELSE
                                 CASE WHEN IsNull(DAT.Abschluss, {edtDatumBis}) &lt;= DAT.Bearbeitung THEN 'ja' ELSE 'nein' END 
                           END,
       Zeitraum     = CONVERT(VARCHAR, {edtDatumVon}, 104) + ' - ' + CONVERT(VARCHAR, {edtDatumBis}, 104) 
FROM @Data DAT
  INNER JOIN dbo.FaLeistung    FAL WITH (READUNCOMMITTED) ON FAL.FaLeistungID = DAT.FaLeistungID
  INNER JOIN dbo.BaPerson      PRS WITH (READUNCOMMITTED) ON PRS.BaPersonID = FAL.BaPersonID
  INNER JOIN dbo.XUser         USR WITH (READUNCOMMITTED) ON USR.UserID = FAL.UserID
  LEFT  JOIN dbo.XOrgUnit_User OUU WITH (READUNCOMMITTED) ON OUU.UserID = USR.UserID
                            AND OUU.OrgUnitMemberCode = 2
  LEFT  JOIN dbo.XOrgUnit      ORG WITH (READUNCOMMITTED) on ORG.OrgUnitID = OUU.OrgUnitID
ORDER BY Sektion, SAR, Klient
</value>
  </data>
  <assembly alias="System.Drawing" name="System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="xDocument.Properties.Buttons" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        iVBORw0KGgoAAAANSUhEUgAAAAwAAAAQCAYAAAAiYZ4HAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8
        YQUAAAAgY0hSTQAAeiYAAICEAAD6AAAAgOgAAHUwAADqYAAAOpgAABdwnLpRPAAAAAlwSFlzAAASdAAA
        EnQB3mYfeAAAAF1JREFUOE9jZAACY2Pj/yAaGzh79iwjhjhIw///MzGwmJjYfxDGqSEtjeE/MgYpBhmE
        oYmQDSANKM7GpQHZmVg1oDsJxgdppI4N2EIKJjbqJLIiDqSJEMaVovGKAwBnM3PWBP8PfwAAAABJRU5E
        rkJggg==
</value>
  </data>
  <data name="ctlGotoFallListe2.BaPersonID" mimetype="application/x-microsoft.net.object.binary.base64">
    <value>
        AAEAAAD/////AQAAAAAAAAAEAQAAAB9TeXN0ZW0uVW5pdHlTZXJpYWxpemF0aW9uSG9sZGVyAwAAAARE
        YXRhCVVuaXR5VHlwZQxBc3NlbWJseU5hbWUBAAEICgIAAAAGAgAAAAAL
</value>
  </data>
  <metadata name="qryListe2.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>128, 17</value>
  </metadata>
  <data name="qryListe2.SelectStatement" xml:space="preserve">
    <value>DECLARE @Data Table(
  FaLeistungID INT,
  AnzIntake    INT,
--  AnzBeratung  INT,
  AnzIntakeAbk     INT,
  AnzBearbeitung   INT,
  AnzBegleitung    INT, 
  AnzBeratung      INT,
  AnzGesVertretung INT,
  AnzAdminFallf    INT,
  AnzJungeErwachseneA INT,
  AnzJungeErwachseneB INT,
  AnzFristIntake   INT,
  AnzFristBeratung INT  
)

-- Intake
DECLARE @FaIntAusstattungVerAuswertFldID INT
DECLARE @FaIntAusstattungVerKurzabklFldID INT
EXEC dbo.spGetDynaFldIDfromTextmarke 'FaIntAusstattungVerAuswert', @FaIntAusstattungVerAuswertFldID OUT
EXEC dbo.spGetDynaFldIDfromTextmarke 'FaIntAusstattungVerKurzabkl', @FaIntAusstattungVerKurzabklFldID OUT

-- Beratung
DECLARE @FaAusstattungVerAuswertFldID INT
DECLARE @FaAusstattungVerProduktFldID INT
EXEC dbo.spGetDynaFldIDfromTextmarke 'FaAusstattungVerAuswert', @FaAusstattungVerAuswertFldID OUT
EXEC dbo.spGetDynaFldIDfromTextmarke 'FaAusstattungVerProdukt', @FaAusstattungVerProduktFldID OUT

----------------------------------
---------- Collect Data - Intake
----------------------------------
INSERT INTO @Data
SELECT FaLeistungID = FAL.FaLeistungID,
       AnzIntake    = 1,
       --AnzBeratung  = 0,
       AnzIntakeAbk   = 0,
       AnzBearbeitung = 0,
       AnzBegleitung  = 0, 
       AnzBeratung    = 0,
       AnzGesVertretung = 0,
       AnzAdminFallf    = 0,
       AnzJungeErwachseneA = 0,
       AnzJungeErwachseneB = 0,
       AnzFristIntake = CASE WHEN CONVERT(DATETIME, DV1.Value, 104) IS NULL THEN 
                                 0
                        ELSE
                            CASE WHEN IsNull(PHA.DatumBis, {edtDatumBis}) &lt;= CONVERT(DATETIME, DV1.Value, 104) THEN 1 ELSE 0 END 
                        END,
       AnzFristBeratung = 0
FROM dbo.FaLeistung            FAL WITH (READUNCOMMITTED)
  INNER JOIN dbo.FaPhase       PHA WITH (READUNCOMMITTED) ON FAL.FaLeistungID = PHA.FaLeistungID
  INNER JOIN dbo.XUser         USR WITH (READUNCOMMITTED) ON USR.UserID = FAL.UserID
  LEFT  JOIN dbo.DynaValue     DV1 WITH (READUNCOMMITTED) ON DV1.FaPhaseID = PHA.FaPhaseID       -- Bearbeitungsfrist                              
                              AND DV1.DynaFieldID = @FaIntAusstattungVerAuswertFldID 
  LEFT  JOIN dbo.DynaValue     DV2 WITH (READUNCOMMITTED) ON DV2.FaPhaseID = PHA.FaPhaseID       -- Kurzabklärung                              
                              AND DV2.DynaFieldID = @FaIntAusstattungVerKurzabklFldID 
  LEFT  JOIN dbo.XOrgUnit_User OUU WITH (READUNCOMMITTED) ON OUU.UserID = USR.UserID
                              AND OUU.OrgUnitMemberCode = 2
  LEFT  JOIN dbo.XOrgUnit      ORG WITH (READUNCOMMITTED) on ORG.OrgUnitID = OUU.OrgUnitID
--- AND ORG.OrgUnitID = {edtOrgUnitID}


WHERE PHA.DatumVon &lt;= {edtDatumBis}
AND (PHA.DatumBis IS NULL OR PHA.DatumBis &gt;= {edtDatumVon})
AND PHA.FaPhaseCode = 1
AND ORG.OrgUnitID IN (SELECT OrgUnitID
                      FROM dbo.XOrgUnit WITH (READUNCOMMITTED)
			          WHERE ModulID = 3
			          AND ParentID = 28)
--- AND ORG.OrgUnitID = {edtOrgUnitID}
--- AND USR.UserID = {edtUserID.LookupID}
--- AND PHA.FaPhaseCode = {edtPhaseCode}


----------------------------------
---------- Collect Data - Beratung
----------------------------------
INSERT INTO @Data
SELECT FaLeistungID = FAL.FaLeistungID,
       AnzIntake    = 0,
       --AnzBeratung  = 1, 
       AnzIntakeAbk   = CASE WHEN CONVERT(INT, DV2.Value) = 1 THEN 1 ELSE 0 END,
       AnzBearbeitung = CASE WHEN CONVERT(INT, DV2.Value) = 2 THEN 1 ELSE 0 END,
       AnzBegleitung  = CASE WHEN CONVERT(INT, DV2.Value) = 3 THEN 1 ELSE 0 END, 
       AnzBeratung    = CASE WHEN CONVERT(INT, DV2.Value) = 4 THEN 1 ELSE 0 END,
       AnzGesVertretung = CASE WHEN CONVERT(INT, DV2.Value) = 6 THEN 1 ELSE 0 END,
       AnzAdminFallf    = CASE WHEN CONVERT(INT, DV2.Value) = 5 THEN 1 ELSE 0 END,
       AnzJungeErwachseneA = CASE WHEN CONVERT(INT, DV2.Value) = 7 THEN 1 ELSE 0 END,
       AnzJungeErwachseneB = CASE WHEN CONVERT(INT, DV2.Value) = 8 THEN 1 ELSE 0 END,
       AnzFristIntake = 0,
       AnzFristBeratung = CASE WHEN CONVERT(DATETIME, DV1.Value, 104) IS NULL THEN 
                                 0
                        ELSE
                            CASE WHEN IsNull(PHA.DatumBis, {edtDatumBis}) &lt;= CONVERT(DATETIME, DV1.Value, 104) THEN 1 ELSE 0 END 
                        END
FROM dbo.FaLeistung            FAL WITH (READUNCOMMITTED)
  INNER JOIN dbo.FaPhase       PHA WITH (READUNCOMMITTED) ON FAL.FaLeistungID = PHA.FaLeistungID
  INNER JOIN dbo.XUser         USR WITH (READUNCOMMITTED) ON USR.UserID = FAL.UserID
  LEFT  JOIN dbo.DynaValue     DV1 WITH (READUNCOMMITTED) ON DV1.FaPhaseID = PHA.FaPhaseID       -- Bearbeitungsfrist                              
                              AND DV1.DynaFieldID = @FaAusstattungVerAuswertFldID 
  LEFT  JOIN dbo.DynaValue     DV2 WITH (READUNCOMMITTED) ON DV2.FaPhaseID = PHA.FaPhaseID       -- Produkt                              
                              AND DV2.DynaFieldID = @FaAusstattungVerProduktFldID 
  LEFT  JOIN dbo.XOrgUnit_User OUU WITH (READUNCOMMITTED) ON OUU.UserID = USR.UserID
                              AND OUU.OrgUnitMemberCode = 2
  LEFT  JOIN dbo.XOrgUnit      ORG WITH (READUNCOMMITTED) on ORG.OrgUnitID = OUU.OrgUnitID
--- AND ORG.OrgUnitID = {edtOrgUnitID}


WHERE PHA.DatumVon &lt;= {edtDatumBis}
AND (PHA.DatumBis IS NULL OR PHA.DatumBis &gt;= {edtDatumVon})
AND PHA.FaPhaseCode = 2
AND ORG.OrgUnitID IN (SELECT OrgUnitID
                      FROM dbo.XOrgUnit WITH (READUNCOMMITTED)
			          WHERE ModulID = 3
			          AND ParentID = 28)
--- AND ORG.OrgUnitID = {edtOrgUnitID}
--- AND USR.UserID = {edtUserID.LookupID}
--- AND PHA.FaPhaseCode = {edtPhaseCode}

------------------------------------------
------------ Liste: Statistik SAR
------------------------------------------
IF object_id('dbo.#Rslt') IS NOT NULL
  DROP TABLE #Rslt

CREATE TABLE #Rslt 
(
  ID           INT IDENTITY (100, 100),
  Sektion      VARCHAR(200),
  SAR          VARCHAR(200),
  [Anzahl Intake]              INT,
  [Frist Intake eingehalten]   INT,
  --[Anzahl Beratung]            INT,
  [Anzahl Intake / Abklärung] INT,
  [Anzahl Bearbeitung] INT,
  [Anzahl Begleitung] INT,
  [Anzahl Beratung] INT,
  [Anzahl gesetzliche Vertretung (Vormundschaftsbereich)] INT,
  [Anzahl Admin. Fallführung] INT,
  [Anzahl Junge Erwachsene A] INT,
  [Anzahl Junge Erwachsene B] INT,
  [Frist Beratung eingehalten] INT 
)
   
-- Tabelle mit dem Resultatset füllen
INSERT INTO #Rslt
SELECT Sektion = ORG.ItemName, 
       SAR     = USR.LastName + ISNULL(', ' + USR.FirstName,''), 
       [Anzahl Intake]              = SUM(DAT.AnzIntake),
       [Frist Intake eingehalten]   = SUM(DAT.AnzFristIntake),
       --[Anzahl Beratung]            = SUM(DAT.AnzBeratung),
       [Anzahl Intake / Abklärung] = SUM(DAT.AnzIntakeAbk),
       [Anzahl Bearbeitung] = SUM(DAT.AnzBearbeitung),
       [Anzahl Begleitung] = SUM(DAT.AnzBegleitung),
       [Anzahl Beratung] = SUM(DAT.AnzBeratung),
       [Anzahl gesetzliche Vertretung (Vormundschaftsbereich)] = SUM(DAT.AnzGesVertretung),
       [Anzahl Admin. Fallführung] = SUM(DAT.AnzAdminFallf),
       [Anzahl Junge Erwachsene A] = SUM(DAT.AnzJungeErwachseneA),
       [Anzahl Junge Erwachsene B] = SUM(DAT.AnzJungeErwachseneB),
       [Frist Beratung eingehalten] = SUM(DAT.AnzFristBeratung)
FROM @Data DAT
  INNER JOIN dbo.FaLeistung    FAL WITH (READUNCOMMITTED) ON FAL.FaLeistungID = DAT.FaLeistungID
  INNER JOIN dbo.BaPerson      PRS WITH (READUNCOMMITTED) ON PRS.BaPersonID = FAL.BaPersonID
  INNER JOIN dbo.XUser         USR WITH (READUNCOMMITTED) ON USR.UserID = FAL.UserID
  LEFT  JOIN dbo.XOrgUnit_User OUU WITH (READUNCOMMITTED) ON OUU.UserID = USR.UserID
                            AND OUU.OrgUnitMemberCode = 2
  LEFT  JOIN dbo.XOrgUnit      ORG WITH (READUNCOMMITTED) on ORG.OrgUnitID = OUU.OrgUnitID
GROUP BY ORG.ItemName, USR.LastName + ISNULL(', ' + USR.FirstName,'') WITH CUBE

-- Auswertung pro SAR löschen
DELETE FROM #Rslt
WHERE Sektion IS NULL
AND SAR IS NOT NULL


-- Formatierung Resultat
DECLARE @actID INT
DECLARE @actSektion VARCHAR(200)
DECLARE @prevSektion VARCHAR(200)
DECLARE @actSAR VARCHAR(200)

SET @prevSektion = null

DECLARE cur CURSOR FOR
SELECT ID, Sektion, SAR
FROM #Rslt
ORDER BY ID

OPEN cur
FETCH NEXT FROM cur INTO @actID, @actSektion, @actSAR
WHILE (@@FETCH_STATUS=0) BEGIN

  IF (@actSektion IS NULL AND @actSAR IS NULL) BEGIN
     -- Text Gesamtotal einfügen
     UPDATE #Rslt
     SET Sektion = 'Gesamttotal'
     WHERE ID = @actID     
  END ELSE IF (@actSektion IS NOT NULL AND @actSAR IS NULL) BEGIN
     -- Text Total einfügen + 1 Leerzeile
     UPDATE #Rslt
     SET Sektion = 'Total' 
     WHERE ID = @actID

     SET IDENTITY_INSERT #Rslt ON
     INSERT INTO #Rslt (ID) VALUES(@actID + 1)
     SET IDENTITY_INSERT #Rslt ON
  END  

  IF @prevSektion = @actSektion AND @actSAR IS NOT NULL BEGIN
     -- Sektionstext löschen
     UPDATE #Rslt
     SET Sektion = null 
     WHERE ID = @actID
  END

  SET @prevSektion = @actSektion

FETCH NEXT FROM cur INTO @actID, @actSektion, @actSAR
END
CLOSE cur
DEALLOCATE cur

SELECT Sektion,
       SAR,
       [Anzahl Intake],
       [Frist Intake eingehalten],
       --[Anzahl Beratung],
       [Anzahl Intake / Abklärung],
       [Anzahl Bearbeitung],
       [Anzahl Begleitung], 
       [Anzahl Beratung],
       [Anzahl gesetzliche Vertretung (Vormundschaftsbereich)],
       [Anzahl Admin. Fallführung],
       [Anzahl Junge Erwachsene A],
       [Anzahl Junge Erwachsene B],
       [Frist Beratung eingehalten]
FROM #Rslt
ORDER BY ID

DROP TABLE #Rslt


</value>
  </data>
  <data name="edtDatumBis.Properties.Buttons" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        iVBORw0KGgoAAAANSUhEUgAAAAwAAAAQCAYAAAAiYZ4HAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8
        YQUAAAAgY0hSTQAAeiYAAICEAAD6AAAAgOgAAHUwAADqYAAAOpgAABdwnLpRPAAAAAlwSFlzAAASdAAA
        EnQB3mYfeAAAAFVJREFUOE9jZAACY2Pj/yCaEDh79iwjWA1MAzaNWOVAgsRguAuIcRKKGmROQwMD3D/I
        bKwaQApgitBp6mgAeYokG4abBmT/YKQ3smKapLREKFkjywMAd9eDN3Z9MMsAAAAASUVORK5CYII=
</value>
  </data>
  <data name="edtDatumVon.Properties.Buttons" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        iVBORw0KGgoAAAANSUhEUgAAAAwAAAAQCAYAAAAiYZ4HAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8
        YQUAAAAgY0hSTQAAeiYAAICEAAD6AAAAgOgAAHUwAADqYAAAOpgAABdwnLpRPAAAAAlwSFlzAAASdAAA
        EnQB3mYfeAAAAFVJREFUOE9jZAACY2Pj/yCaEDh79iwjWA1MAzaNWOVAgsRguAuIcRKKGmROQwMD3D/I
        bKwaQApgitBp6mgAeYokG4abBmT/YKQ3smKapLREKFkjywMAd9eDN3Z9MMsAAAAASUVORK5CYII=
</value>
  </data>
</root>
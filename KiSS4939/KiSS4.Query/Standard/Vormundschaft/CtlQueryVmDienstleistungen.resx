<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <metadata name="qryQuery.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>17, 17</value>
  </metadata>
  <data name="qryQuery.SelectStatement" xml:space="preserve">
    <value>/*
* analog VM AHV-Mindestbeitäge
* Decisive Field:  @AnmeldungFldID
*
*/

DECLARE @AnbieterFldID    INT,
        @KundenNrFldID    INT,
        @AnmeldungFldID   INT,
        @AbmeldungFldID   INT,
        @BemerkungenFldID INT

EXEC dbo.spGetDynaFldIDfromTextmarke 'VmMfDienstleistungenAnbieter',    @AnbieterFldID    OUT
EXEC dbo.spGetDynaFldIDfromTextmarke 'VmMfDienstleistungenKundenNr',    @KundenNrFldID    OUT
EXEC dbo.spGetDynaFldIDfromTextmarke 'VmMfDienstleistungenAnmeldung',   @AnmeldungFldID   OUT
EXEC dbo.spGetDynaFldIDfromTextmarke 'VmMfDienstleistungenAbmeldung',   @AbmeldungFldID   OUT
EXEC dbo.spGetDynaFldIDfromTextmarke 'VmMfDienstleistungenBemerkungen', @BemerkungenFldID OUT

SELECT SAR              = BEN.LastName + ISNULL(', ' + BEN.FirstName,''),
       Kürzel           = BEN.ShortName,
       Person           = PRS.Name + ISNULL(', ' + PRS.Vorname,''),
       Adressat         = CASE WHEN CONVERT(INT, ADR.Value) &gt; 1 THEN
                                    (SELECT Name + isNull(', ' + Vorname,'')
                                     FROM   dbo.BaPerson WITH (READUNCOMMITTED)
                                     WHERE  BaPersonID = CONVERT(INT, ADR.Value))
                               ELSE
                                    (SELECT ORG.Name + isnull(', ' + ADR2.Ort,'')
                                     FROM   dbo.BaInstitution ORG WITH (READUNCOMMITTED)
                                     LEFT JOIN dbo.BaAdresse   ADR2 WITH (READUNCOMMITTED) ON ADR2.BaInstitutionID = ORG.BaInstitutionID
                                     WHERE  ORG.BaInstitutionID = - CONVERT(INT, ADR.Value))
                          END,
       Kundennummer     = KNR.Value,
       Anmeldung        = CONVERT(datetime, ANM.Value, 112),
       Abmeldung        = CONVERT(datetime, ABM.Value, 112),
       Bemerkungen      = BEM.ValueText,
       UserID$          = BEN.UserID,
       BaPersonID$     = PRS.BaPersonID
FROM dbo.BaPerson PRS WITH (READUNCOMMITTED)
INNER JOIN dbo.FaLeistung FAL WITH (READUNCOMMITTED) ON FAL.BaPersonID = PRS.BaPersonID AND
                         FAL.ModulID = 5 --Vormundschaft
INNER JOIN dbo.VmMassnahme MSN WITH (READUNCOMMITTED) ON MSN.FaLeistungID = FAL.FaLeistungID
INNER JOIN dbo.XUser       BEN WITH (READUNCOMMITTED) ON FAL.UserID = BEN.UserID
INNER JOIN dbo.DynaValue   ANM WITH (READUNCOMMITTED) ON ANM.FaLeistungID = FAL.FaLeistungID
                          AND ANM.DynaFieldID = @AnmeldungFldID
LEFT JOIN dbo.DynaValue    ADR WITH (READUNCOMMITTED) ON ADR.FaLeistungID = FAL.FaLeistungID
                          AND ADR.DynaFieldID = @AnbieterFldID
                          AND ADR.GridRowID = ANM.GridRowID
LEFT JOIN dbo.DynaValue    KNR WITH (READUNCOMMITTED) ON KNR.FaLeistungID = FAL.FaLeistungID
                          AND KNR.DynaFieldID = @KundenNrFldID
                          AND KNR.GridRowID = ANM.GridRowID
LEFT JOIN dbo.DynaValue    ABM WITH (READUNCOMMITTED) ON ABM.FaLeistungID = FAL.FaLeistungID
                          AND ABM.DynaFieldID = @AbmeldungFldID
                          AND ABM.GridRowID = ANM.GridRowID
LEFT JOIN dbo.DynaValue    BEM WITH (READUNCOMMITTED) ON BEM.FaLeistungID = FAL.FaLeistungID
                          AND BEM.DynaFieldID = @BemerkungenFldID
                          AND BEM.GridRowID = ANM.GridRowID

WHERE 1=1
--- AND PRS.BaPersonID = {edtBaPersonID.LookupID}
--- AND BEN.UserID =  {edtUserID.LookupID}
--- AND ({edtNurAktive} = 0 or FAL.DatumBis is null)
ORDER BY SAR, Person</value>
  </data>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="xDocument.Properties.Buttons" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        iVBORw0KGgoAAAANSUhEUgAAAAwAAAAQCAYAAAAiYZ4HAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8
        YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAABbSURBVDhPY2AAAmNj4/+4MEgeA4AU//8/EwOLiYn9B2Gc
        GtLSGP4jY5BikEEYmgjZANIAUgO3CZcGZGdi1YDuJBgfpJE6NmALKZjYqJPIijh8KRYmhzXlEhIEANZ8
        ev1ASni6AAAAAElFTkSuQmCC
</value>
  </data>
</root>
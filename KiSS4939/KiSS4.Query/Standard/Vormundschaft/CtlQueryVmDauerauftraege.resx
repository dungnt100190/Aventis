<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="qryQuery.TrayLocation" type="System.Drawing.Point, System.Drawing">
    <value>17, 17</value>
  </data>
  <data name="qryQuery.SelectStatement" xml:space="preserve">
    <value>SELECT BaPersonID$ = PRS.BaPersonID,
       UserID$ = FAL.UserID,
       Mandant = PRS.Name + ISNULL(', ' + PRS.Vorname, ''),
       Text = DAU.Text,
       Betrag = DAU.Betrag,
       Status = STA.Text,
       [Gültig Von] = DAU.DatumVon,
       [Gültig Bis] = DAU.DatumBis,
       [Periodizität] = PRZ.Text,
       [Tag1] = DAU.Monatstag1,
       [Tag2] = DAU.Monatstag2,
       Mandatsträger = ISNULL(USR.LastName, '') + ISNULL(', ' + USR.FirstName, ''),
       Team = TEA.Name
FROM dbo.FbDauerauftrag DAU WITH (READUNCOMMITTED)
  INNER JOIN dbo.BaPerson PRS WITH (READUNCOMMITTED) ON DAU.BaPersonID = PRS.BaPersonID
  LEFT JOIN dbo.XLOVCode STA WITH (READUNCOMMITTED) ON STA.LOVName = 'FbDauerAuftragStatus' 
                                                      AND STA.Code = DAU.Status
  LEFT JOIN dbo.XLOVCode PRZ WITH (READUNCOMMITTED) ON PRZ.LOVName = 'ZahlungsPeriode' 
                                                      AND PRZ.Code = DAU.PeriodizitaetCode
  
  OUTER APPLY (SELECT TOP 1 *
               FROM FaLeistung
               WHERE BaPersonID = PRS.BaPersonID 
                 AND FaProzessCode in (501, 2900) 
                 AND DatumVon &lt;= ISNULL(DAU.DatumBis, '99991231')
                 AND ISNULL(DatumBis, '99991231') &gt;= DAU.DatumVon
               ORDER BY DatumVon DESC
               ) FAL
  LEFT JOIN dbo.XUser USR WITH (READUNCOMMITTED) ON USR.UserID = FAL.UserID
  LEFT JOIN dbo.FbPeriode PER WITH (READUNCOMMITTED) ON PER.FbPeriodeID = (SELECT TOP 1 FbPeriodeID 
                                                                             FROM dbo.FbPeriode WITH (READUNCOMMITTED)
                                                                             WHERE BaPersonID = PRS.BaPersonID
                                                                             ORDER BY PeriodeVon DESC)
  LEFT JOIN dbo.FbTeam TEA WITH (READUNCOMMITTED) ON TEA.FbTeamID = PER.FbTeamID
WHERE 1=1
--- AND PRS.BaPersonID = {edtBaPersonID.LookupID}
--- AND FAL.UserID = {edtUserID.LookupID}
--- AND PER.FbTeamID = {edtFbTeamID}
--- AND ({edtNurAktive} = 0 OR ISNULL(DAU.DatumBis, GETDATE()) &gt;= GETDATE())
ORDER BY Mandant;</value>
  </data>
  <data name="xDocument.Properties.Buttons" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        iVBORw0KGgoAAAANSUhEUgAAAAwAAAAQCAYAAAAiYZ4HAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8
        YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAABbSURBVDhPY2AAAmNj4/+4MEgeA4AU//8/EwOLiYn9B2Gc
        GtLSGP4jY5BikEEYmgjZANIAUgO3CZcGZGdi1YDuJBgfpJE6NmALKZjYqJPIijh8KRYmhzXlEhIEANZ8
        ev1ASni6AAAAAElFTkSuQmCC
</value>
  </data>
  <data name="edtBaPersonID.LookupSQL" xml:space="preserve">
    <value> select distinct
  ID = PRS.BaPersonID,
  Mandant = PRS.Name + isNull(', ' + PRS.Vorname,''),
  Strasse = PRS.WohnsitzStrasse + isNull(' ' + PRS.WohnsitzHausNr,''),
  Ort     = isNull(PRS.WohnsitzPLZ + ' ','') + isNull(PRS.WohnsitzOrt,''),
  Mandatstraeger = isNull(BEN.FirstName + ' ','') + isNull(BEN.LastName,'')
from FbPeriode PER
  inner join vwPerson        PRS on PRS.BaPersonID = PER.BaPersonID
  left  join FaLeistung      FAL on FAL.BaPersonID = PER.BaPersonID and
                                     FAL.ModulID = 5 and
                                     FAL.DatumVon  = (select max(DatumVon)
                                                      from   FaLeistung
                                                      where  BaPersonID = PER.BaPersonID and
                                                             FAL.ModulID = 5 and
                                                             FaProzessCode = 501)
  left  join XUser            BEN on BEN.UserID = FAL.UserID
where PRS.Name + isNull(', ' + PRS.Vorname,'') like {0} + '%' 
order by Mandant
</value>
  </data>
</root>
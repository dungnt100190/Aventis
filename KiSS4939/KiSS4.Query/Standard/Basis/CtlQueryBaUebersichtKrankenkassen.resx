<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <metadata name="qryQuery.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>17, 17</value>
  </metadata>
  <data name="qryQuery.SelectStatement" xml:space="preserve">
    <value>DECLARE @LanguageCode INT;
SET @LanguageCode = {1};

SELECT * 
FROM (
   SELECT 
       Person              = PRS.NameVorname,
       Geburtsdatum        = PRS.Geburtsdatum,
       MitgliedNr          = DGS.KVGMitgliedNr,
       [KVG-Prämie]        = DGS.KVGPraemie,
       [VVG-Prämie]        = DGS.VVGPraemie,
       [KVG-Angaben]       = ORG.Name + isNull(', '+ORG.Adresse,''),
       [VVG-Angaben]       = ORG2.Name + isNull(', '+ORG2.Adresse,''),
       Unfallversicherung  = KVGUnfallPraemie,
       Prämienverbilligung = DGS.KVGZuschussBetrag,
       [Jahresfranchise KVG]     = DGS.KVGFranchise, 
       [Jahresfranchise VVG]     = DGS.VVGFranchise,
       [Zahlung KVG]         = dbo.fnLOVMLText('ZahlungsPeriode', DGS.KVGZahlungsPeriodeCode, @LanguageCode),
       [Zahlung VVG]         = dbo.fnLOVMLText('ZahlungsPeriode', DGS.VVGZahlungsPeriodeCode, @LanguageCode),
       -- Aus Kompatibilitätsgründen auch die ASVS-Daten in BaGesundheit miteinbeziehen (Später können die ASVS-Daten in BaGesundheit ignoriert/entfernt werden)
       [ASV Anm.]        = ISNULL(ASV.DatumVon, DGS.ASVSAnmeldung),
       [ASV Abm.]        = CASE WHEN ASV.WhASVSEintragID IS NULL THEN DGS.ASVSAbmeldung ELSE ASV.DatumBis END,
       [SAR Fallführung] = (SELECT max(USR.LastName + isNull(', ' + USR.FirstName,''))
                            FROM   dbo.FaLeistung FAL WITH (READUNCOMMITTED)
                              INNER JOIN dbo.XUser USR WITH (READUNCOMMITTED) on USR.UserID = FAL.UserID
                            WHERE  BaPersonID = PRS.BaPersonID 
                              AND FAL.ModulID = 2 
                              AND DatumVon = (SELECT max(DatumVon) 
                                              FROM   dbo.FaLeistung WITH (READUNCOMMITTED)
                                              WHERE  BaPersonID = PRS.BaPersonID 
                                                AND ModulID = 2)),
      [SAR Sozialhilfe] = (SELECT max(USR.LastName + isNull(', ' + USR.FirstName,''))
                           FROM   dbo.FaLeistung FAL WITH (READUNCOMMITTED)
                             INNER JOIN dbo.XUser USR WITH (READUNCOMMITTED) on USR.UserID = FAL.UserID
                           WHERE  BaPersonID = PRS.BaPersonID 
                             AND FAL.ModulID = 3 
                             AND DatumVon = (SELECT max(DatumVon) 
                                             FROM   dbo.FaLeistung WITH (READUNCOMMITTED)
                                             WHERE  BaPersonID = PRS.BaPersonID 
                                               AND ModulID = 3)),
       [SAR Inkasso] = (SELECT max(USR.LastName + isNull(', ' + USR.FirstName,''))
                        FROM dbo.FaLeistung FAL WITH (READUNCOMMITTED)
                          INNER JOIN dbo.XUser USR WITH (READUNCOMMITTED) on USR.UserID = FAL.UserID
                        WHERE  BaPersonID = PRS.BaPersonID 
                          AND FAL.ModulID = 4 
                          AND DatumVon = (SELECT max(DatumVon) 
                                          FROM   dbo.FaLeistung WITH (READUNCOMMITTED)
                                          WHERE  BaPersonID = PRS.BaPersonID 
                                            AND ModulID = 4)),
       [SAR Vormundschaft] = (SELECT max(USR.LastName + isNull(', ' + USR.FirstName,''))
                              FROM dbo.FaLeistung FAL WITH (READUNCOMMITTED)
                                INNER JOIN dbo.XUser USR WITH (READUNCOMMITTED) on USR.UserID = FAL.UserID
                              WHERE  BaPersonID = PRS.BaPersonID 
                                AND FAL.ModulID = 5 
                                AND DatumVon = (SELECT max(DatumVon) 
                                                FROM   dbo.FaLeistung WITH (READUNCOMMITTED)
                                                WHERE  BaPersonID = PRS.BaPersonID 
                                                  AND ModulID = 5)),
       [SAR Asyl] = (SELECT max(USR.LastName + isNull(', ' + USR.FirstName,''))
                     FROM   dbo.FaLeistung FAL WITH (READUNCOMMITTED)
                       INNER JOIN dbo.XUser USR WITH (READUNCOMMITTED) on USR.UserID = FAL.UserID
                     WHERE  BaPersonID = PRS.BaPersonID 
                       AND FAL.ModulID = 6 
                       AND DatumVon = (SELECT max(DatumVon) 
                                       FROM   dbo.FaLeistung WITH (READUNCOMMITTED)
                                       WHERE  BaPersonID = PRS.BaPersonID 
                                         AND ModulID = 6)),
       BaPersonID$ = PRS.BaPersonID
   FROM   dbo.vwPerson PRS WITH (READUNCOMMITTED)
     INNER JOIN dbo.BaGesundheit  DGS WITH (READUNCOMMITTED) on DGS.BaPersonID = PRS.BaPersonID
     OUTER APPLY
     (
        SELECT TOP 1 ASV2.WhASVSEintragID, ASV2.DatumVon, ASV2.DatumBis
        FROM dbo.WhASVSEintrag    ASV2 WITH (READUNCOMMITTED)
        WHERE ASV2.BaPersonID = PRS.BaPersonID
        ORDER BY ISNULL(ASV2.DatumBis, CONVERT(DATETIME, '40000101')) DESC, ASV2.DatumVon DESC -- Neuste Einträge (auch solche ohne Ende) zuerst
     ) ASV
     LEFT JOIN dbo.vwInstitution ORG WITH (READUNCOMMITTED) on ORG.BaInstitutionID = DGS.KVGOrganisationID 
     LEFT JOIN dbo.vwInstitution ORG2 WITH (READUNCOMMITTED) on ORG2.BaInstitutionID = DGS.VVGOrganisationID
   WHERE 1=1

       AND (PRS.PersonSichtbarSDFlag = dbo.fnGetPersonSichtbarFlag({0}) or PRS.PersonSichtbarSDFlag = 1)
   --- AND ({edtNurAktive} = 0 OR EXISTS( SELECT * FROM dbo.FaLeistung FAL WITH (READUNCOMMITTED)WHERE FAL.BaPersonID = PRS.BaPersonID AND FAL.DatumBis IS NULL
   ---                                                            AND FAL.UserID = {edtUserID.LookupID}
   ---      )) --{edtNurAktive}
   --- AND PRS.BaPersonID = {edtBaPersonID.LookupID}
   --- AND ORG.Name like '%' + {edtKrankenkasse} + '%'

) TMP

WHERE 1=1

--- AND ( --{edtUserID.LookupID}
--- [SAR Fallführung] like (SELECT LastName + isnull(', '+FirstName, '') FROM dbo.XUser WITH (READUNCOMMITTED)WHERE UserID = {edtUserID.LookupID})
--- OR [SAR Sozialhilfe] like (SELECT LastName + isnull(', '+FirstName, '') FROM dbo.XUser WITH (READUNCOMMITTED)WHERE UserID = {edtUserID.LookupID})
--- OR [SAR Inkasso] like (SELECT LastName + isnull(', '+FirstName, '') FROM dbo.XUser WITH (READUNCOMMITTED)WHERE UserID = {edtUserID.LookupID} ) 
--- OR [SAR Vormundschaft] like (SELECT LastName + isnull(', '+FirstName, '') FROM dbo.XUser WITH (READUNCOMMITTED)WHERE UserID = {edtUserID.LookupID}) 
--- OR [SAR Asyl] like (SELECT LastName + isnull(', '+FirstName, '') FROM dbo.XUser WITH (READUNCOMMITTED)WHERE UserID = {edtUserID.LookupID})
--- ) --{edtUserID.LookupID}


ORDER BY Person</value>
  </data>
</root>
<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <metadata name="qryQuery.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>17, 17</value>
  </metadata>
  <data name="qryQuery.SelectStatement" xml:space="preserve">
    <value>DECLARE @IsAbtretung INT
SET @IsAbtretung = 0
--- SET @IsAbtretung  = {edtNurAbtretung}

DECLARE @NurAktiveFaelle INT
SET @NurAktiveFaelle = 0
--- SET @NurAktiveFaelle = {edtNurAktiveFaelle}

DECLARE @Person TABLE (
  BaPersonId INT,
  UserID     INT
)

INSERT INTO @Person
  SELECT PRS.BaPersonID, FAL.UserID
  FROM dbo.vwPerson PRS WITH (READUNCOMMITTED)    
    LEFT JOIN dbo.BaGesundheit  GES WITH (READUNCOMMITTED) ON GES.BaPersonID = PRS.BaPersonID
    LEFT JOIN dbo.BaInstitution ORG WITH (READUNCOMMITTED) ON ORG.BaInstitutionID = GES.KVGOrganisationID
    LEFT JOIN dbo.FaLeistung    FAL WITH (READUNCOMMITTED) ON FAL.BaPersonID = PRS.BaPersonID 
                                                            AND FAL.ModulID = 2
                                                            AND FAL.DatumVon = (SELECT MAX(DatumVon) 
                                                                                FROM dbo.FaLeistung WITH (READUNCOMMITTED)
                                                                                WHERE BaPersonID = PRS.BaPersonID 
                                                                                  AND ModulID = 2)
  WHERE (@IsAbtretung = 0 OR GES.AbtretungKK = 1)
    AND (@NurAktiveFaelle = 0 OR 1 = (SELECT TOP 1 1
                                      FROM dbo.FaLeistung WITH (READUNCOMMITTED)
                                      WHERE BaPersonID = PRS.BaPersonID
                                        AND ModulID = 2
                                        AND DatumBis IS NULL))
--- AND PRS.BaPersonID = {edtBaPersonID.LookupID}
--- AND ORG.Name like '%' + {edtKrankenkasse} + '%'
--- AND PRS.NNummer like '%' + {edtNNr} + '%'
--- AND PRS.ZEMISNummer like '%' + {edtZemisNr} + '%'

DECLARE @baPersID INT
DECLARE @userID   INT

DECLARE cPersons CURSOR FAST_FORWARD FOR
  SELECT FFP.BaPersonID, 
         FAL.UserID
  FROM FaFallPerson FFP
    INNER JOIN FaFall     LEI ON LEI.FaFallID = FFP.FaFallID
    INNER JOIN FaLeistung FAL ON FAL.BaPersonID = LEI.BaPersonID 
                                AND FAL.ModulID = 2
                                AND FAL.DatumVon = (SELECT MAX(DatumVon) 
                                                    FROM dbo.FaLeistung WITH (READUNCOMMITTED)
                                                    WHERE BaPersonID = LEI.BaPersonID 
                                                      AND ModulID = 2)        
  WHERE 1 = 1
--- AND FFP.BaPersonID = {edtBaPersonID.LookupID}

OPEN cPersons
  WHILE 1=1 BEGIN
    FETCH NEXT FROM cPersons INTO @baPersID, @userID
    IF @@FETCH_STATUS &lt;&gt; 0 BREAK
    UPDATE @Person SET UserID = @userID WHERE BaPersonId = @baPersID
  END
CLOSE cPersons
DEALLOCATE cPersons

SELECT BaPersonID$      = PRS.BaPersonID,
  [N-Nr]                = PRS.NNummer,
  [Personen-Nr]         = PRS.BaPersonID,
  [ZEMIS-Nr]            = PRS.ZEMISNummer,
  [Klient]              = PRS.NameVorname,
  [PLZ]                 = PRS.WohnsitzPLZ,
  [Ort]                 = PRS.WohnsitzOrt,
  [Geburtsdatum]        = PRS.Geburtsdatum,
  [KVG-Name]            = ORG.Name,
  [Mitglieder-Nr]       = GES.KVGMitgliedNr,
  [versichert seit]     = GES.KVGVersichertSeit,
  [Abtretung]           = CONVERT(BIT, IsNull(GES.AbtretungKK, 0)),
  [KVG-Prämie]          = GES.KVGPraemie,
  [VVG-Prämie]          = GES.VVGPraemie,
  [Unfallversicherung]  = GES.KVGUnfallPraemie,
  [Prämienverbilligung] = GES.KVGZuschussBetrag,  
  [Jahresfranchise KVG] = GES.KVGFranchise, 
  [Jahresfranchise VVG] = GES.VVGFranchise,
  [Zahlung KVG]         = dbo.fnLOVText('ZahlungsPeriode', GES.KVGZahlungsPeriodeCode),
  [Zahlung VVG]         = dbo.fnLOVText('ZahlungsPeriode', GES.VVGZahlungsPeriodeCode),
  -- Aus Kompatibilitätsgründen auch die ASVS-Daten in BaGesundheit miteinbeziehen (Später können die ASVS-Daten in BaGesundheit ignoriert/entfernt werden)
  [ASV Anm.]           = ISNULL(ASV.DatumVon, GES.ASVSAnmeldung),
  [ASV Abm.]           = CASE WHEN ASV.WhASVSEintragID IS NULL THEN GES.ASVSAbmeldung ELSE ASV.DatumBis END,
  [zuständiger SAR]     = USR.LastName + isNull(', ' + USR.FirstName,'')
FROM @Person P
  INNER JOIN dbo.vwPerson     PRS WITH (READUNCOMMITTED) ON PRS.BaPersonID = P.BaPersonID     
  LEFT  JOIN dbo.BaGesundheit  GES WITH (READUNCOMMITTED) ON GES.BaPersonID = P.BaPersonID
  LEFT  JOIN dbo.BaInstitution ORG WITH (READUNCOMMITTED) ON ORG.BaInstitutionID = GES.KVGOrganisationID
  LEFT  JOIN dbo.XUser         USR WITH (READUNCOMMITTED) ON USR.UserID = P.UserID
  OUTER APPLY
  (
     SELECT TOP 1 ASV2.WhASVSEintragID, 
                  ASV2.DatumVon, 
                  ASV2.DatumBis
     FROM dbo.WhASVSEintrag ASV2 WITH (READUNCOMMITTED)
     WHERE ASV2.BaPersonID = PRS.BaPersonID
     ORDER BY ISNULL(ASV2.DatumBis, CONVERT(DATETIME, '40000101')) DESC, ASV2.DatumVon DESC -- Neuste Einträge (auch solche ohne Ende) zuerst
  ) ASV
WHERE 1 = 1
--- AND P.UserID = {edtUserID.LookupID}
ORDER BY PRS.NameVorname</value>
  </data>
</root>
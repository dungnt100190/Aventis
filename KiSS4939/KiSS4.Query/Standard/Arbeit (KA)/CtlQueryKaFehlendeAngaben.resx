<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <metadata name="qryQuery.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>17, 17</value>
  </metadata>
  <data name="qryQuery.SelectStatement" xml:space="preserve">
    <value>SELECT  BaPersonID$ = KAE.BaPersonID,
      Name = PRS.Name, 
	Vorname = PRS.Vorname, 
	Geschlecht = dbo.fnLOVText('Geschlecht', PRS.GeschlechtCode),
	Geburtsdatum = PRS.Geburtsdatum,
	Wohnort = PRS.WohnsitzPLZOrt,
	[Nationalität] = PRS.Nationalitaet,
	[Erlernter Beruf] = dbo.fnLOVText('KaBecoErlernterBeruf',Convert(VARCHAR, KA.KaBecoErlernterBerufCode)),
	Vorbildung = dbo.fnLOVText('KaAusbildungVorbildung',Convert(VARCHAR, KA.KaAusbildungVorbildungCode)),
	[AHV-Nr.] = PRS.AHVNummer,
     [Vers.-Nr.] = PRS.Versichertennummer,
	ALK = ORG.InstitutionNr,
	Anweisungtyp = dbo.fnLOVText('KaAnweisung', KAE.AnweisungCode),
	[Datum bis] = KAE.DatumBis,
	Austritt = AUS.AustrittDatum,
	[Gespräch] = 	Convert(bit, CASE KAE.AnweisungCode 
			                            WHEN 1 THEN 
				                            CASE FAL.FaProzessCode 
				                              WHEN 703 THEN 
					                              -- QJ
					                              KAI.GesprStattgefFlag										
				                              WHEN 704 THEN 
					                              -- QE
					                              CASE WHEN (',' + EPQ.IntakeCodes + ',' like '%,4,%') THEN 1 ELSE 0 END
				                              WHEN 707 THEN
					                              -- Assistenz
					                              isNull(ASS.GespraechStattgefunden, 0)
				                              ELSE 0
				                            END
			                            ELSE 0
			                            END),
	[Nicht ersch.] = Convert(bit, CASE KAE.AnweisungCode 
			                            WHEN 1 THEN 
				                            CASE FAL.FaProzessCode 
				                              WHEN 703 THEN 
					                              -- QJ
					                              KAI.NichtErschFlag										
				                              WHEN 704 THEN 
					                              -- QE
					                              CASE WHEN (',' + EPQ.IntakeCodes + ',' like '%,1,%' or ',' + EPQ.IntakeCodes + ',' like '%,2,%') THEN 1 ELSE 0 END
				                              WHEN 707 THEN
					                              -- Assistenz
					                              isNull(ASS.NichtErschienen, 0)
				                              ELSE 0
				                            END
			                            ELSE 0
			                            END),
	[Abbr. ALV] = 	Convert(bit, CASE KAE.AnweisungCode 
			                            WHEN 1 THEN 
				                            CASE FAL.FaProzessCode 
				                              WHEN 703 THEN 
					                              -- QJ
					                              KAI.AbgemeldetALVFlag											
				                              WHEN 704 THEN 
					                              -- QE
					                              CASE WHEN (',' + EPQ.IntakeCodes + ',' like '%,3,%') THEN 1 ELSE 0 END	
				                              WHEN 707 THEN
					                              -- Assistenz
					                              isNull(ASS.Abgemeldet, 0)
				                              ELSE 0
				                            END
			                            ELSE 0
			                          END),
	Fachbereich = dbo.fnLOVText('KAFachbereich', KZF.FachbereichID),
	[Zuständig KA] = XUR.LastName + isNull(', ' + XUR.FirstName,''),
	[Beschäftigungsgrad] = Convert(varchar, KAE.BeschGrad) + '%',
	Zuweiser = 	case when KAE.ZuweiserID &lt; 0 then
				isNull(XOU.ItemName, '')
			else isNull(ORG1.Name, '') 
			end,
	[SAR/PB] = case when KAE.ZuweiserID &lt; 0 then
			XUR1.LastName + isNull(' ' + XUR1.FirstName,'') 
		   else OKO.Name + isNull(' ' + OKO.Vorname,'')
		   end,
	[Pers. sichtbar SD] = Convert(bit, isNull(PRS.PersonSichtbarSDFlag, 0)),
	[Eintr. sichtbar SD] = Convert(bit, isNull(PRS.SichtbarSDFlag, 0)),
	[Niveau SEMO] = dbo.fnLOVText('KaQjNiveau', KZF.NiveauCode),
	[Status Warteliste SEMO] = dbo.fnLOVText('KaQjIntakeStatusWarteliste', KAI.WartelisteCode)
FROM dbo.KaEinsatz KAE WITH (READUNCOMMITTED)
   LEFT JOIN dbo.FaLeistung FAL WITH (READUNCOMMITTED) ON FAL.FaLeistungID = KAE.FaLeistungID
   LEFT JOIN dbo.vwPerson PRS ON PRS.BaPersonID = KAE.BaPersonID  
   LEFT JOIN dbo.KaAssistenz ASS ON ASS.FaLeistungID = FAL.FaLeistungID
   LEFT JOIN (SELECT  KAl.FaLeistungID, 
                      LEIl.BaPersonID,
                      KAl.KaBecoErlernterBerufCode,
                      KAl.KaAusbildungVorbildungCode
              FROM dbo.KaAusbildung KAl WITH (READUNCOMMITTED)
              INNER JOIN dbo.FaLeistung LEIl WITH (READUNCOMMITTED) ON LEIl.FaLeistungID = KAl.FaLeistungID
              WHERE LEIl.FaProzessCode = 700
                AND LEIl.ModulID = 7) KA ON KA.BaPersonID = KAE.BaPersonID
   LEFT JOIN dbo.KaQJProzess KPZ WITH (READUNCOMMITTED) ON KPZ.FaLeistungID = FAL.FaLeistungID
   LEFT JOIN dbo.KaQJIntake KAI WITH (READUNCOMMITTED) ON KAI.FaLeistungID = FAL.FaLeistungID
   LEFT JOIN dbo.KaQEEPQ EPQ WITH (READUNCOMMITTED) ON EPQ.FaLeistungID = FAL.FaLeistungID
   LEFT JOIN dbo.KaZuteilFachbereich KZF WITH (READUNCOMMITTED) ON KAE.BaPersonID = KZF.BaPersonID 
				AND KZF.KaZuteilFachbereichID = (SELECT TOP 1 KaZuteilFachbereichID
							FROM dbo.KaZuteilFachbereich WITH (READUNCOMMITTED)
							WHERE ZuteilungVon &lt;= COALESCE(KPZ.ProgEnde, EPQ.AustrittDatum, KAE.DatumBis)
							AND (IsNull(ZuteilungBis, DATEADD(DAY, 1, ZuteilungVon)) &gt; KAE.DatumVon)
							AND BaPersonID = KAE.BaPersonID
							ORDER BY ZuteilungVon DESC)
   LEFT JOIN dbo.XUser XUR WITH (READUNCOMMITTED)	ON XUR.UserID = KZF.ZustaendigKaID 	 
   LEFT JOIN dbo.BaInstitution ORG WITH (READUNCOMMITTED) ON ORG.BaInstitutionID = KAE.ALKasseID
   LEFT JOIN dbo.XUser XUR1 WITH (READUNCOMMITTED) ON XUR1.UserID = -KAE.ZuweiserID		
   LEFT JOIN dbo.BaInstitutionKontakt OKO WITH (READUNCOMMITTED) ON OKO.BaInstitutionKontaktID = KAE.ZuweiserID
   LEFT JOIN dbo.BaInstitution ORG1 WITH (READUNCOMMITTED)	 ON ORG1.BaInstitutionID =  OKO.BaInstitutionID	
   LEFT JOIN dbo.XOrgUnit_User OUU WITH (READUNCOMMITTED) ON OUU.UserID = -KAE.ZuweiserID
				AND (OUU.OrgUnitMemberCode = 1 OR OUU.OrgUnitMemberCode = 2)
   LEFT JOIN dbo.XOrgUnit XOU WITH (READUNCOMMITTED) ON XOU.OrgUnitID = OUU.OrgUnitID		
   OUTER APPLY dbo.fnKaGetAustrittDatumCode(FAL.FaLeistungID, KAE.KaEinsatzID) AUS
WHERE 1 = 1
---AND XUR.UserID = {edtZustKaID.LookupID}
---AND (KAE.DatumBis is null or KAE.DatumBis &gt;= {edtDatumVon})
---AND KAE.DatumVon &lt;= {edtDatumBis}
---AND KAE.KaEinsatzplatzID in (SELECT KEP.KaEinsatzplatzID FROM dbo.KaEinsatzplatz2 KEP WITH (READUNCOMMITTED) WHERE KEP.ProfilCode = {edtProfilCode})
---AND KAE.APVZusatzCode = {edtZusatzCode}
---AND KAE.KaEinsatzplatzID = {edtEinsatzPlatzID}
ORDER BY PRS.Name, PRS.Vorname, KZF.BaPersonID</value>
  </data>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="edtDatumBis.Properties.Buttons" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        iVBORw0KGgoAAAANSUhEUgAAAAwAAAAQCAYAAAAiYZ4HAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8
        YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAABMSURBVDhPYwABY2Pj/8RgsGIQgHFQBKEAqxyIQwyGKsdu
        MjrAqaGhgQErG6sGkAKYInSaOhpAYERrAAFkNk4NuACGBmIwVDkpgIEBAO2ojyYwtBe7AAAAAElFTkSu
        QmCC
</value>
  </data>
  <data name="edtDatumVon.Properties.Buttons" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        iVBORw0KGgoAAAANSUhEUgAAAAwAAAAQCAYAAAAiYZ4HAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8
        YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAABMSURBVDhPYwABY2Pj/8RgsGIQgHFQBKEAqxyIQwyGKsdu
        MjrAqaGhgQErG6sGkAKYInSaOhpAYERrAAFkNk4NuACGBmIwVDkpgIEBAO2ojyYwtBe7AAAAAElFTkSu
        QmCC
</value>
  </data>
</root>
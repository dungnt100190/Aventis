<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <metadata name="qryQuery.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>17, 17</value>
  </metadata>
  <data name="qryQuery.SelectStatement" xml:space="preserve">
    <value>/* Diese Abfrage richtet sich nach den in Zu- und Anweisungen erfassten Einsätzen. Die Eingrenzung auf das Datum wird
     einerseits im Arbeitsrapport aber auch in den Einsätzen beachtet. 
 * Sa und So geben die Anzahl Sa, So aus welche in dem Zeitraum DatumVon und DatumBis vorkommen.
 * Da mehrere Fachbereiche erfasst werden können werden auch zu jedem Einsatz alle Fachbereiche angezeigt welche in der 
     Maske Zuteilung Fachbereich erfasst werden.
 */

DECLARE @DatumVon DATETIME;
DECLARE @DatumBis DATETIME;

SET @DatumVon = {edtDatumVon};
SET @DatumBis = {edtDatumBis};

-----------------------------------------------------------------------------
-- Anpassungen für @@DATEFIRST vorbereiten
-- Die Nummer des ersten Wochentags holen: 1 = Montag, 2 = Dienstag, usw.
-- u.U. kann dies auch 2 = Montag, 3 = Dienstag, usw. sein
-----------------------------------------------------------------------------
DECLARE @Saturday             INT;
DECLARE @Sunday               INT;
DECLARE @NumberFirstDayOfWeek INT;

SET @NumberFirstDayOfWeek = @@DATEFIRST;

-- Die Nummer des Samstags gemäss Einstellung der DB holen
SET @Saturday = CASE @NumberFirstDayOfWeek
                  WHEN 1 THEN 6
                  WHEN 2 THEN 5
                  WHEN 3 THEN 4
                  WHEN 4 THEN 3
                  WHEN 5 THEN 2
                  WHEN 6 THEN 1
                  ELSE 7
                END;

-- Die Nummer des Sonntags gemäss Einstellung der DB holen
SET @Sunday = CASE @NumberFirstDayOfWeek
                WHEN 1 THEN 7
                WHEN 2 THEN 6
                WHEN 3 THEN 5
                WHEN 4 THEN 4
                WHEN 5 THEN 3
                WHEN 6 THEN 2
                ELSE 1
              END;

WITH cteKaArbeitsrapport (BaPersonID, KaEinsatzID, Datum, AM_AnwCode, PM_AnwCode)
AS(
  SELECT KAA.BaPersonID,
         KAA.KaEinsatzID,
         KAA.Datum,
         KAA.AM_AnwCode,
         KAA.PM_AnwCode
  FROM dbo.KaArbeitsrapport KAA WITH (READUNCOMMITTED)
    WHERE KAA.Datum BETWEEN @DatumVon AND @DatumBis
)

SELECT BaPersonID$     = PRS.BaPersonID,
       [Pers. Nr.]     = PRS.BaPersonID,
       [Name]          = PRS.Name,
       [Vorname]       = PRS.Vorname + ISNULL(' ' + PRS.Vorname2, ''),
       [Alter]         = CONVERT(INT, ((DATEDIFF(DD, PRS.Geburtsdatum, GETDATE()) + .5) / 365.25)),
       [m/w]           = dbo.fnLOVText('Geschlecht', PRS.GeschlechtCode),
       [Nationalität]  = LND.Text,
       [Einsatz von]   = KAE.DatumVon,
       [Einsatz bis]   = KAE.DatumBis,
       [Austritt]      = AUS.AustrittDatum,
       [BG]            = KAE.BeschGrad,
       [APV Nr.]       = dbo.fnLOVText('KaAPV', KEP.APVCode),
       [Zusatz]        = dbo.fnLOVText('KaAPVZusatz', KAE.APVZusatzCode),
       [Leistung]      = dbo.fnLOVText('FaProzess', LEI1.FaProzessCode),
       [Zuweiser]      = CASE
                           WHEN KAE.ZuweiserID &lt; 0
                             THEN ISNULL(XOU.ItemName, '')
                           ELSE OKO1.Name + ISNULL(', ' + OKO1.Vorname,'')
                         END,
       [Name Zuweiser] = CASE
                           WHEN KAE.ZuweiserID &lt; 0
                             THEN XUR1.LastName + ISNULL(', ' + XUR1.FirstName,'')
                           ELSE OKO.Name + ISNULL(', ' + OKO.Vorname,'')
                         END,
       [Datum von FB]  = KZF.ZuteilungVon,
       [Datum bis FB]  = KZF.ZuteilungBis,
       [Fachbereich]   = dbo.fnLOVText('KAFachbereich', KZF.FachbereichID),
       [Zuständig KA]  = USR2.LastName + ISNULL(' ' + USR2.FirstName, ''),
       [Fachleitung]   = USR1.LastName + ISNULL(' ' + USR1.FirstName, ''),
       [A]             = CONVERT(FLOAT, ((SELECT COUNT(*) FROM cteKaArbeitsrapport WHERE BaPersonID = PRS.BaPersonID AND KaEinsatzID = KAE.KaEinsatzID AND AM_AnwCode = 1) +
                                (SELECT COUNT(*) FROM cteKaArbeitsrapport WHERE BaPersonID = PRS.BaPersonID AND KaEinsatzID = KAE.KaEinsatzID AND PM_AnwCode = 1))) / 2,
       [B]             = CONVERT(FLOAT, ((SELECT COUNT(*) FROM cteKaArbeitsrapport WHERE BaPersonID = PRS.BaPersonID AND KaEinsatzID = KAE.KaEinsatzID AND AM_AnwCode = 2) +
                                (SELECT COUNT(*) FROM cteKaArbeitsrapport WHERE BaPersonID = PRS.BaPersonID AND KaEinsatzID = KAE.KaEinsatzID AND PM_AnwCode = 2))) / 2,
       [C]             = CONVERT(FLOAT, ((SELECT COUNT(*) FROM cteKaArbeitsrapport WHERE BaPersonID = PRS.BaPersonID AND KaEinsatzID = KAE.KaEinsatzID AND AM_AnwCode = 3) +
                                (SELECT COUNT(*) FROM cteKaArbeitsrapport WHERE BaPersonID = PRS.BaPersonID AND KaEinsatzID = KAE.KaEinsatzID AND PM_AnwCode = 3))) / 2,
       [E]             = CONVERT(FLOAT, ((SELECT COUNT(*) FROM cteKaArbeitsrapport WHERE BaPersonID = PRS.BaPersonID AND KaEinsatzID = KAE.KaEinsatzID AND AM_AnwCode = 4) +
                                (SELECT COUNT(*) FROM cteKaArbeitsrapport WHERE BaPersonID = PRS.BaPersonID AND KaEinsatzID = KAE.KaEinsatzID AND PM_AnwCode = 4))) / 2,
       [F]             = CONVERT(FLOAT, ((SELECT COUNT(*) FROM cteKaArbeitsrapport WHERE BaPersonID = PRS.BaPersonID AND KaEinsatzID = KAE.KaEinsatzID AND AM_AnwCode = 5) +
                                (SELECT COUNT(*) FROM cteKaArbeitsrapport WHERE BaPersonID = PRS.BaPersonID AND KaEinsatzID = KAE.KaEinsatzID AND PM_AnwCode = 5))) / 2,
       [G]             = CONVERT(FLOAT, ((SELECT COUNT(*) FROM cteKaArbeitsrapport WHERE BaPersonID = PRS.BaPersonID AND KaEinsatzID = KAE.KaEinsatzID AND AM_AnwCode = 6) +
                                (SELECT COUNT(*) FROM cteKaArbeitsrapport WHERE BaPersonID = PRS.BaPersonID AND KaEinsatzID = KAE.KaEinsatzID AND PM_AnwCode = 6))) / 2,
       [H]             = CONVERT(FLOAT, ((SELECT COUNT(*) FROM cteKaArbeitsrapport WHERE BaPersonID = PRS.BaPersonID AND KaEinsatzID = KAE.KaEinsatzID AND AM_AnwCode = 7) +
                                (SELECT COUNT(*) FROM cteKaArbeitsrapport WHERE BaPersonID = PRS.BaPersonID AND KaEinsatzID = KAE.KaEinsatzID AND PM_AnwCode = 7))) / 2,
       [I]             = CONVERT(FLOAT, ((SELECT COUNT(*) FROM cteKaArbeitsrapport WHERE BaPersonID = PRS.BaPersonID AND KaEinsatzID = KAE.KaEinsatzID AND AM_AnwCode = 8) +
                                (SELECT COUNT(*) FROM cteKaArbeitsrapport WHERE BaPersonID = PRS.BaPersonID AND KaEinsatzID = KAE.KaEinsatzID AND PM_AnwCode = 8))) / 2,
       [Y]             = CONVERT(FLOAT, ((SELECT COUNT(*) FROM cteKaArbeitsrapport WHERE BaPersonID = PRS.BaPersonID AND KaEinsatzID = KAE.KaEinsatzID AND AM_AnwCode = 10) +
                                (SELECT COUNT(*) FROM cteKaArbeitsrapport WHERE BaPersonID = PRS.BaPersonID AND KaEinsatzID = KAE.KaEinsatzID AND PM_AnwCode = 10))) / 2,
       [Z]             = CONVERT(FLOAT, ((SELECT COUNT(*) FROM cteKaArbeitsrapport WHERE BaPersonID = PRS.BaPersonID AND KaEinsatzID = KAE.KaEinsatzID AND AM_AnwCode = 11) +
                                (SELECT COUNT(*) FROM cteKaArbeitsrapport WHERE BaPersonID = PRS.BaPersonID AND KaEinsatzID = KAE.KaEinsatzID AND PM_AnwCode = 11))) / 2,
       [X]             = CONVERT(FLOAT, ((SELECT COUNT(*) FROM cteKaArbeitsrapport WHERE BaPersonID = PRS.BaPersonID AND KaEinsatzID = KAE.KaEinsatzID AND AM_AnwCode = 9) +
                                (SELECT COUNT(*) FROM cteKaArbeitsrapport WHERE BaPersonID = PRS.BaPersonID AND KaEinsatzID = KAE.KaEinsatzID AND PM_AnwCode = 9))) / 2,
       [Sa]            = (SELECT COUNT(*) 
                          FROM cteKaArbeitsrapport 
                          WHERE BaPersonID = PRS.BaPersonID 
                           AND KaEinsatzID = KAE.KaEinsatzID 
                           AND DATEPART(dw, Datum) = @Saturday),
       [So]            = (SELECT COUNT(*) 
                          FROM cteKaArbeitsrapport 
                          WHERE BaPersonID = PRS.BaPersonID 
                            AND KaEinsatzID = KAE.KaEinsatzID 
                            AND DATEPART(dw, Datum) = @Sunday)
FROM dbo.KaEinsatz                    KAE WITH (READUNCOMMITTED)
  INNER JOIN dbo.FaLeistung          LEI1 WITH (READUNCOMMITTED) ON LEI1.FaLeistungID = KAE.FaLeistungID
  LEFT  JOIN dbo.BaPerson             PRS WITH (READUNCOMMITTED) ON PRS.BaPersonID = KAE.BaPersonID
  LEFT  JOIN dbo.KaEinsatzplatz2      KEP WITH (READUNCOMMITTED) ON KEP.KaEinsatzplatzID = KAE.KaEinsatzplatzID
  OUTER APPLY dbo.fnKaGetAustrittDatumCode(KAE.FaLeistungID, KAE.KaEinsatzID) AUS
  LEFT  JOIN dbo.KaZuteilFachbereich  KZF WITH (READUNCOMMITTED) ON KZF.BaPersonID = PRS.BaPersonID
                                                                AND ISNULL(KZF.ZuteilungVon, '19000101') &lt;= ISNULL(ISNULL(AUS.AustrittDatum, KAE.DatumBis), '99991231') --nur die Zuteilungen, die aufgrund des Datums mit dem Einsatz zu tun haben, sonst werden unter Umständen Zeilen verdoppelt
                                                                AND ISNULL(KZF.ZuteilungBis, '99991231') &gt;= KAE.DatumVon
                                                                AND ISNULL(KZF.ZuteilungVon, '19000101') &lt;= @DatumBis
                                                                AND ISNULL(KZF.ZuteilungBis, '99991231') &gt;= @DatumVon 
  LEFT  JOIN dbo.BaLand               LND WITH (READUNCOMMITTED) ON LND.BaLandID = PRS.NationalitaetCode
  LEFT  JOIN dbo.FaLeistung           LEI WITH (READUNCOMMITTED) ON LEI.BaPersonID = PRS.BaPersonID AND LEI.FaProzessCode = 700 --Leistung KA - Allgemein
  LEFT  JOIN dbo.XUser               USR1 WITH (READUNCOMMITTED) ON USR1.UserID = KZF.FachleitungID
  LEFT  JOIN dbo.XUser               USR2 WITH (READUNCOMMITTED) ON USR2.UserID = LEI.UserID
  
  LEFT JOIN dbo.XUser                XUR1 WITH (READUNCOMMITTED) ON XUR1.UserID = -KAE.ZuweiserID
  LEFT JOIN dbo.XOrgUnit_User        OUU  WITH (READUNCOMMITTED) ON OUU.UserID = -KAE.ZuweiserID
                                                                AND (OUU.OrgUnitMemberCode = 1 OR OUU.OrgUnitMemberCode = 2)
  LEFT JOIN dbo.XOrgUnit             XOU  WITH (READUNCOMMITTED) ON XOU.OrgUnitID = OUU.OrgUnitID
  LEFT JOIN dbo.BaInstitutionKontakt OKO  WITH (READUNCOMMITTED) ON OKO.BaInstitutionKontaktID = KAE.ZuweiserID
  LEFT JOIN dbo.BaInstitution        OKO1 WITH (READUNCOMMITTED) ON OKO1.BaInstitutionID = OKO.BaInstitutionID
WHERE KAE.DatumVon &lt;= @DatumBis AND ISNULL(AUS.AustrittDatum, KAE.DatumBis) &gt;= @DatumVon
  AND KAE.AnweisungCode &lt;&gt; 1 --ohne Zuweisungen
  ---AND PRS.BaPersonID = {edtStes.LookupID} --Klient, STES (Stellensuchender)
  ---AND KEP.APVCode = {edtApvNummer} --APV-Nummer
  ---AND KAE.APVZusatzCode = {edtZusatz} --Zusatz
  ---AND USR2.UserID = {edtZustaendigKa.LookupID} --ZuständigKA
  ---AND KZF.FachleitungID = {edtFachleitung.LookupID} --Fachleitung
  ---AND KZF.FachbereichID = {edtFachbereich.LookupID} --Fachbereich
ORDER BY PRS.Name, PRS.Vorname, KAE.KaEinsatzID</value>
  </data>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="edtDatumBis.Properties.Buttons" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        iVBORw0KGgoAAAANSUhEUgAAAAwAAAAQCAYAAAAiYZ4HAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8
        YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAABMSURBVDhPYwABY2Pj/8RgsGIQgHFQBKEAqxyIQwyGKsdu
        MjrAqaGhgQErG6sGkAKYInSaOhpAYERrAAFkNk4NuACGBmIwVDkpgIEBAO2ojyYwtBe7AAAAAElFTkSu
        QmCC
</value>
  </data>
  <data name="edtDatumVon.Properties.Buttons" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        iVBORw0KGgoAAAANSUhEUgAAAAwAAAAQCAYAAAAiYZ4HAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8
        YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAABMSURBVDhPYwABY2Pj/8RgsGIQgHFQBKEAqxyIQwyGKsdu
        MjrAqaGhgQErG6sGkAKYInSaOhpAYERrAAFkNk4NuACGBmIwVDkpgIEBAO2ojyYwtBe7AAAAAElFTkSu
        QmCC
</value>
  </data>
  <data name="edtFachbereich.LookupSQL" xml:space="preserve">
    <value>select ID = Code, Fachbereich = Text, Abteilung = Value1
from   XLOVCode XLC
where  XLC.Text like '%' + {0} + '%'
and    XLC.Code in (select code from xlovcode where lovname = 'KAFachbereich' and text like 'Semo Ext%')
and    XLC.LOVName = 'KAFachbereich'
order by XLC.Text</value>
  </data>
</root>
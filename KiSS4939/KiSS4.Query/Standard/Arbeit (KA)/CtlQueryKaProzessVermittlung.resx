<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <metadata name="qryQuery.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>17, 17</value>
  </metadata>
  <data name="qryQuery.SelectStatement" xml:space="preserve">
    <value>DECLARE @ZustaendigKA_UserID INT,
        @STES_BaPersonID INT,
        @StatusHeute INT,
        @FaProzessCode INT,
        @HatEinsatz BIT,
        @SucheDatumVon DATETIME,
        @SucheDatumBis DATETIME;

--------------------------
--Default-Werte für Suche        
--------------------------
SET @SucheDatumVon = '19000101';
SET @SucheDatumBis = '99991231';
SET @StatusHeute = 3; -- aktiv und abgeschlossen

--------------------------
--Such-Werte übernehmen
--------------------------
---SET @ZustaendigKA_UserID = {edtZustKA.LookupID};
---SET @STES_BaPersonID = {edtNameSTES.LookupID};
---SET @StatusHeute = {edtStatusHeuteCode};
---SET @HatEinsatz = {edtEinsatz};
---SET @SucheDatumVon = {edtDatumVon};
---SET @SucheDatumBis = {edtDatumBis};
---SET @FaProzessCode = {edtLeistung};

--------------------------
--Interne Tabellen
--------------------------
DECLARE @Faelle TABLE (
  FaLeistungID INT,
  BaPersonID INT,
  Name VARCHAR(100),
  Vorname VARCHAR(100),
  [Alter] INT,
  Nationalitaet VARCHAR(200),
  Geschlecht VARCHAR(100),
  Phase VARCHAR(100),
  AbschlussGrund VARCHAR(200),
  Einsatz BIT,
  FaProzessCode VARCHAR(200)
);

IF OBJECT_ID('TempDB.dbo.#KontakteAggregiert') IS NOT NULL
BEGIN
  DROP TABLE #KontakteAggregiert;
END;

CREATE TABLE #KontakteAggregiert(
  FaLeistungID$ INT,
  FaProzessCode$ INT,
);
------------------------------------------------------
--Dynamische Spalten je nach verwendeter Kontaktarten
------------------------------------------------------
DECLARE @KontaktArtCount INT;
DECLARE @KontaktArtIterator INT;
DECLARE @KontaktArtCode INT;
DECLARE @KontaktArtText VARCHAR(200);

DECLARE @sql NVARCHAR(2000);

DECLARE @KontaktArtCodesTable TABLE
(
  ID INT NOT NULL IDENTITY(1, 1) PRIMARY KEY CLUSTERED,
  KontaktArtCode INT,
  KontaktArtText VARCHAR(200)
);

DECLARE @KontaktJobtimalArtCodesTable TABLE
(
  ID INT NOT NULL IDENTITY(1, 1) PRIMARY KEY CLUSTERED,
  KontaktArtCode INT,
  KontaktArtText VARCHAR(200)
);

-------------------------------------------------------------------------------
-- insert entries into temp table
-------------------------------------------------------------------------------
INSERT INTO @KontaktArtCodesTable (KontaktArtCode, KontaktArtText)
  SELECT LOV.Code, LOV.Text
  FROM dbo.XLOVCode LOV WITH (READUNCOMMITTED)
  WHERE LOV.LOVName='KaKontaktartProzess'
    AND LOV.IsActive = 1
  ORDER BY SortKey;
  
-- prepare vars for loop
SET @KontaktArtCount = @@ROWCOUNT;  -- needs to be done just after filling!
SET @KontaktArtIterator = 1;        -- needs to start just at the same value as IDENTITY column on table


INSERT INTO @Faelle (FaLeistungID, BaPersonID, Name, Vorname, [Alter], Nationalitaet, Geschlecht, Phase, AbschlussGrund, Einsatz, FaProzessCode)
SELECT
  LEI.FaLeistungID,
  LEI.BaPersonID,
  PRS.Name,
  PRS.Vorname,
  PRS.[Alter],
  PRS.Nationalitaet,
  dbo.fnLOVText('Geschlecht', PRS.GeschlechtCode),
  Phase = CASE 
             WHEN LEI.FaProzessCode = 705 THEN --BIBIP
                NULL
             WHEN LEI.FaProzessCode = 706 THEN --SI
                NULL     
             WHEN LEI.FaProzessCode = 711 THEN --Jobtimal 
                CASE JOB.AustrittgrundCode
                  WHEN 1 THEN 'aus Vermittlung'
                  WHEN 2 THEN 'aus Einsatz'
                  ELSE NULL
                END
             ELSE NULL
          END,
  AbschlussGrund = CASE
                     WHEN LEI.FaProzessCode = 705 THEN --BIBIP
                        CASE WHEN VBI.WechselKAInternGrundCode IS NULL OR VBI.WechselKAInternGrundCode = '' 
                                THEN dbo.fnLOVText('KaVermittlungDossierRetourAnSDGrund', VBI.DossierRetourAnSDGrundCode) 
                             ELSE dbo.fnLOVText('KaVermittlungGrundWechselKaIntern', VBI.WechselKAInternGrundCode) 
                        END
                     WHEN LEI.FaProzessCode = 706 THEN --SI
                        CASE WHEN VSI.WechselKAInternGrundCode IS NULL OR VSI.WechselKAInternGrundCode = '' 
                                THEN dbo.fnLOVText('KaVermittlungDossierRetourAnSDGrund', VSI.DossierRetourAnSDGrundCode) 
                             ELSE dbo.fnLOVText('KaVermittlungGrundWechselKaIntern', VSI.WechselKAInternGrundCode) 
                        END
                     WHEN LEI.FaProzessCode = 711 THEN --Jobtimal 
                          dbo.fnLOVText('KaVermittlungDossierRetourAnSDGrund', JOB.DossierRetourAnSDGrundCode)
                     ELSE NULL
                   END,
  Einsatz = CONVERT(BIT, ISNULL((SELECT TOP 1 1
                                 FROM dbo.KaVermittlungEinsatz KVE
                                   INNER JOIN dbo.KaVermittlungVorschlag KVV ON KVV.KaVermittlungVorschlagID = KVE.KaVermittlungVorschlagID
                                 WHERE KVV.FaLeistungID = LEI.FaLeistungID
                                   AND KVE.EinsatzVon IS NOT NULL), 0)),
  LEI.FaProzessCode
FROM dbo.FaLeistung                 LEI WITH (READUNCOMMITTED)
  INNER JOIN dbo.vwPerson           PRS WITH (READUNCOMMITTED) ON PRS.BaPersonID = LEI.BaPersonID
  LEFT  JOIN dbo.KaVermittlungBIBIP VBI WITH (READUNCOMMITTED) ON VBI.FaLeistungID = LEI.FaLeistungID
  LEFT  JOIN dbo.KaVermittlungSI    VSI WITH (READUNCOMMITTED) ON VSI.FaLeistungID = LEI.FaLeistungID
  LEFT  JOIN dbo.KaJobtimal JOB WITH (READUNCOMMITTED) ON JOB.FaLeistungID = LEI.FaLeistungID
WHERE (@FaProzessCode IS NULL AND LEI.FaProzessCode IN (705, 706, 711) OR LEI.FaProzessCode = @FaProzessCode)
  AND EXISTS(SELECT TOP 1 1
             FROM dbo.KaKontaktartProzess VPR WITH (READUNCOMMITTED)
             WHERE VPR.FaLeistungID = LEI.FaLeistungID
               AND VPR.Datum BETWEEN @SucheDatumVon AND @SucheDatumBis)
  AND (@StatusHeute = 3 -- aktiv und abgeschlossen
	     OR (@StatusHeute = 1 AND (LEI.DatumBis IS NULL OR LEI.DatumBis &gt;= GETDATE())) -- aktiv
	     OR (@StatusHeute = 2 AND LEI.DatumBis IS NOT NULL AND LEI.DatumBis &lt; GETDATE()) -- abgeschlossen
	    )
  AND (@ZustaendigKA_UserID IS NULL OR LEI.UserID = @ZustaendigKA_UserID)
  AND (@STES_BaPersonID IS NULL OR LEI.BaPersonID = @STES_BaPersonID);

----------------------------------
--Filter auf das Feld "Einsatz"
----------------------------------
DELETE FROM @Faelle
WHERE Einsatz &lt;&gt; @HatEinsatz --LOV: JaNein, 1: Ja, 0: Nein

-------------------------------
-- Kontaktarten ermitteln
-------------------------------
INSERT INTO #KontakteAggregiert(FaLeistungID$, FaProzessCode$)
  SELECT FaLeistungID, FaProzessCode
  FROM @Faelle;

WHILE (@KontaktArtIterator &lt;= @KontaktArtCount)
BEGIN
  -- get current entry
  SELECT @KontaktArtCode = TMP.KontaktArtCode,
         @KontaktArtText = TMP.KontaktArtText
  FROM @KontaktArtCodesTable TMP
  WHERE TMP.ID = @KontaktArtIterator;
  
  --Gibt es Kontakte dieser Kontaktart?
  IF(EXISTS(SELECT TOP 1 1
            FROM @Faelle FAL
              INNER JOIN dbo.KaKontaktartProzess VPR WITH (READUNCOMMITTED) ON VPR.FaLeistungID = FAL.FaLeistungID
                                                                                 AND VPR.Datum BETWEEN @SucheDatumVon AND @SucheDatumBis
            WHERE VPR.KaKontaktartProzessCode = @KontaktArtCode
            AND FAL.FaProzessCode &lt;&gt; 711))
  BEGIN
   
    SET @sql = N'ALTER TABLE #KontakteAggregiert ADD [' + @KontaktArtText + N'] INT;'
    
    --PRINT ('sql to execute:'+@sql)    
    EXECUTE sp_executesql @sql;
    
    
    SET @sql = N'UPDATE KAG SET [' + @KontaktArtText + N'] = ISNULL((SELECT COUNT(VPR.KaKontaktartProzessID)
                                                                     FROM dbo.KaKontaktartProzess VPR WITH (READUNCOMMITTED)
                                                                     WHERE VPR.FaLeistungID = KAG.FaLeistungID$
                                                                                AND KAG.FaProzessCode$ &lt;&gt; 711
                                                                       AND VPR.KaKontaktartProzessCode = ' + CONVERT(VARCHAR, @KontaktArtCode) + N'
                                                                       AND VPR.Datum BETWEEN ''' + CONVERT(VARCHAR, @SucheDatumVon) + N''' AND ''' + CONVERT(VARCHAR, @SucheDatumBis) + N'''
                                                                     GROUP BY VPR.KaKontaktartProzessCode), 0)
                 FROM #KontakteAggregiert KAG;';
    
    --PRINT ('sql to execute:'+@sql)
    EXECUTE sp_executesql @sql;

  END;
  
  -- prepare for next entry
  SET @KontaktArtIterator = @KontaktArtIterator + 1;
END;

----------------------------
--Kontaktart Jobtimal ermitteln
----------------------------
-------------------------------------------------------------------------------
-- insert entries into temp table
-------------------------------------------------------------------------------
INSERT INTO @KontaktJobtimalArtCodesTable (KontaktArtCode, KontaktArtText)
  SELECT LOV.Code, LOV.Text
  FROM dbo.XLOVCode LOV WITH (READUNCOMMITTED)
  WHERE LOV.LOVName='KaKontaktartProzessJobtimal'
    AND LOV.IsActive = 1
  ORDER BY SortKey;
  
-- prepare vars for loop
SET @KontaktArtCount = @@ROWCOUNT;
SET @KontaktArtIterator = 1;
WHILE (@KontaktArtIterator &lt;= @KontaktArtCount)
BEGIN
  -- get current entry
  SELECT @KontaktArtCode = TMP.KontaktArtCode,
         @KontaktArtText = TMP.KontaktArtText
  FROM @KontaktJobtimalArtCodesTable TMP
  WHERE TMP.ID = @KontaktArtIterator;
  
  --Gibt es Kontakte dieser Kontaktart?
  IF(EXISTS(SELECT TOP 1 1
            FROM @Faelle FAL
              INNER JOIN dbo.KaKontaktartProzess VPR WITH (READUNCOMMITTED) ON VPR.FaLeistungID = FAL.FaLeistungID
                                                                           AND VPR.Datum BETWEEN @SucheDatumVon AND @SucheDatumBis
            WHERE VPR.KaKontaktartProzessCode = @KontaktArtCode
            AND FAL.FaProzessCode = 711))
  BEGIN
    
    SET @sql = N'ALTER TABLE #KontakteAggregiert ADD [' + @KontaktArtText + ' Jobtimal' + N'] INT;'
    
    --PRINT ('sql to execute:'+@sql)    
    EXECUTE sp_executesql @sql;
    
    
    SET @sql = N'UPDATE KAG SET [' + @KontaktArtText + ' Jobtimal' + N'] = ISNULL((SELECT COUNT(VPR.KaKontaktartProzessID)
                                                                     FROM dbo.KaKontaktartProzess VPR WITH (READUNCOMMITTED)
                                                                     WHERE VPR.FaLeistungID = KAG.FaLeistungID$
                                                                       AND KAG.FaProzessCode$ = 711
                                                                       AND VPR.KaKontaktartProzessCode = ' + CONVERT(VARCHAR, @KontaktArtCode) + N'
                                                                       AND VPR.Datum BETWEEN ''' + CONVERT(VARCHAR, @SucheDatumVon) + N''' AND ''' + CONVERT(VARCHAR, @SucheDatumBis) + N'''
                                                                     GROUP BY VPR.KaKontaktartProzessCode), 0)
                 FROM #KontakteAggregiert KAG;';
    
    --PRINT ('sql to execute:'+@sql)
    EXECUTE sp_executesql @sql;
  END;
  
  -- prepare for next entry
  SET @KontaktArtIterator = @KontaktArtIterator + 1;
END;

--Spalte Phase nur einblenden, wenn mind. ein Wert existiert
IF(EXISTS(SELECT TOP 1 1
          FROM @Faelle FAL
          WHERE Phase IS NOT NULL))
BEGIN
  
  ALTER TABLE #KontakteAggregiert ADD [Phase] VARCHAR(100);
  
  UPDATE KAG SET [Phase] = FAL.Phase
  FROM #KontakteAggregiert KAG
    INNER JOIN @Faelle FAL ON FAL.FaLeistungID = KAG.FaLeistungID$;
END;


--OUTPUT 1: Liste
SELECT 
  BaPersonID$       = FAL.BaPersonID,
  [Pers. Nr.]       = FAL.BaPersonID,
  [Name]            = FAL.Name,
  [Vorname]         = FAL.Vorname,
  [Leistung]        = dbo.fnLOVText('FaProzess', FAL.FaProzessCode),
  KAG.*,
  [Grund Abschluss] = FAL.Abschlussgrund,
  [Einsatz]         = FAL.Einsatz
FROM @Faelle FAL
  INNER JOIN #KontakteAggregiert KAG ON KAG.FaLeistungID$ = FAL.FaLeistungID
ORDER BY FAL.Name, FAL.Vorname;

--OUTPUT 2: Rohdaten
SELECT
  [Pers. Nr.]     = FAL.BaPersonID,
  [Name]          = FAL.Name,
  [Vorname]       = FAL.Vorname,
  [Geschlecht]    = FAL.Geschlecht,
  [Alter]         = FAL.[Alter],
  [Nationalität]  = FAL.Nationalitaet,
  [Datum]         = VPR.Datum,
  [Kontaktart]    = CASE WHEN LEI.FaProzessCode = 711 -- Jobtimal
                         THEN LOCJ.[Text]
                         ELSE LOC.[Text]
                    END,
  [Leistung]      = dbo.fnLOVText('FaProzess', FAL.FaProzessCode)
FROM @Faelle FAL
  INNER JOIN FaLeistung LEI WITH (READUNCOMMITTED) ON LEI.FaLeistungID = FAL.FaLeistungID  LEFT JOIN dbo.KaKontaktartProzess VPR WITH (READUNCOMMITTED) ON VPR.FaLeistungID = FAL.FaLeistungID
                                                              AND VPR.Datum BETWEEN @SucheDatumVon AND @SucheDatumBis
  LEFT JOIN dbo.XLOVCode                  LOC WITH (READUNCOMMITTED) ON LOC.LOVName = 'KaKontaktartProzess' 
                                                                    AND LOC.Code = VPR.KaKontaktartProzessCode
  LEFT JOIN dbo.XLOVCode                  LOCJ WITH (READUNCOMMITTED) ON LOCJ.LOVName = 'KaKontaktartProzessJobtimal' 
                                                                    AND LOCJ.Code = VPR.KaKontaktartProzessCode
                                                                    
WHERE VPR.KaKontaktartProzessID IS NOT NULL
   OR NOT EXISTS (SELECT TOP 1 1
                  FROM @Faelle
                  WHERE BaPersonID = FAL.BaPersonID
                    AND FaLeistungID &lt;&gt; FAL.FaLeistungID)
ORDER BY FAL.Name, FAL.Vorname, VPR.Datum, LOC.SortKey;

IF OBJECT_ID('TempDB.dbo.#KontakteAggregiert') IS NOT NULL
BEGIN
  DROP TABLE #KontakteAggregiert;
END;</value>
  </data>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="edtDatumBis.Properties.Buttons" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        iVBORw0KGgoAAAANSUhEUgAAAAwAAAAQCAYAAAAiYZ4HAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8
        YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAABMSURBVDhPYwABY2Pj/8RgsGIQgHFQBKEAqxyIQwyGKsdu
        MjrAqaGhgQErG6sGkAKYInSaOhpAYERrAAFkNk4NuACGBmIwVDkpgIEBAO2ojyYwtBe7AAAAAElFTkSu
        QmCC
</value>
  </data>
  <data name="edtDatumVon.Properties.Buttons" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        iVBORw0KGgoAAAANSUhEUgAAAAwAAAAQCAYAAAAiYZ4HAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8
        YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAABMSURBVDhPYwABY2Pj/8RgsGIQgHFQBKEAqxyIQwyGKsdu
        MjrAqaGhgQErG6sGkAKYInSaOhpAYERrAAFkNk4NuACGBmIwVDkpgIEBAO2ojyYwtBe7AAAAAElFTkSu
        QmCC
</value>
  </data>
  <metadata name="$this.TrayHeight" type="System.Int32, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
    <value>55</value>
  </metadata>
</root>
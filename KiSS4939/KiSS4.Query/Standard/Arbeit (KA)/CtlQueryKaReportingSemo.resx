<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <metadata name="qryQuery.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>17, 17</value>
  </metadata>
  <data name="qryQuery.SelectStatement" xml:space="preserve">
    <value>DECLARE @DatumVon DATETIME;
DECLARE @DatumBis DATETIME;
DECLARE @ApvCode INT;
DECLARE @ZusatzCode INT;

--- SET @DatumVon = {edtDatumVon};
--- SET @DatumBis = {edtDatumBis};
--- SET @ApvCode = {edtApvNummer};
--- SET @ZusatzCode = {edtZusatz};

-- DEBUG
--SET @DatumVon = '20150101';
--SET @DatumBis = '20150630';
--SET @ApvCode = 1
--SET @ZusatzCode = 1

IF OBJECT_ID('TempDB.dbo.#TmpKaArbeitsrapport') IS NOT NULL 
BEGIN 
  DROP TABLE #TmpKaArbeitsrapport
END

-- Arbeitsrapport suchen
SELECT
  Anzahl          = SUM(CASE WHEN KAA.AM_AnwCode = 9 AND KAA.PM_AnwCode = 9 THEN 1.0 ELSE 0.5 END),
  [FaLeistungID$] = EIN.FaLeistungID,
  Monat           = MONTH(KAA.Datum),
  MonatText       = dbo.fnXMonat(MONTH(KAA.Datum))
INTO #TmpKaArbeitsrapport
FROM dbo.KaArbeitsrapport  KAA WITH(READUNCOMMITTED)
  INNER JOIN dbo.KaEinsatz EIN WITH(READUNCOMMITTED) ON EIN.KaEinsatzID = KAA.KaEinsatzID
WHERE (KAA.AM_AnwCode = 9 OR KAA.PM_AnwCode = 9) -- KaPraesenzCode, Anwesend
  AND EIN.AnweisungCode &lt;&gt; 1 -- 1:Zuweisung
  AND KAA.Datum &gt;= @DatumVon AND KAA.Datum &lt;= @DatumBis
GROUP BY EIN.FaLeistungID, MONTH(KAA.Datum)

-- Monatsspalten anhand DatumVon sortieren
DECLARE @Columns VARCHAR(MAX);
DECLARE @ColumnsSelect VARCHAR(MAX);
;WITH MonatCte AS
(
  SELECT Monat = 1 UNION ALL
  SELECT Monat = 2 UNION ALL
  SELECT Monat = 3 UNION ALL
  SELECT Monat = 4 UNION ALL
  SELECT Monat = 5 UNION ALL
  SELECT Monat = 6 UNION ALL
  SELECT Monat = 7 UNION ALL
  SELECT Monat = 8 UNION ALL
  SELECT Monat = 9 UNION ALL
  SELECT Monat = 10 UNION ALL
  SELECT Monat = 11 UNION ALL
  SELECT Monat = 12
)

SELECT @Columns       = STUFF((SELECT ', ' + QUOTENAME(dbo.fnXMonat(Monat))
                               FROM MonatCte CTE WITH (READUNCOMMITTED)
                               ORDER BY CASE WHEN Monat &lt; MONTH(@DatumVon) THEN 1 ELSE 0 END, Monat
                               FOR XML PATH('')),
                               1,
                               2, 
                               ''),
       @ColumnsSelect = STUFF((SELECT ', ' + QUOTENAME(dbo.fnXMonat(Monat)) + ' = ISNULL(' + QUOTENAME(dbo.fnXMonat(Monat)) + ', 0.0)' 
                               FROM MonatCte CTE WITH (READUNCOMMITTED)
                               ORDER BY CASE WHEN Monat &lt; MONTH(@DatumVon) THEN 1 ELSE 0 END, Monat
                               FOR XML PATH('')),
                               1,
                               2, 
                               '')

DECLARE @Sql VARCHAR(MAX);
SET @Sql = '
DECLARE @DatumVon DATETIME;
DECLARE @DatumBis DATETIME;
DECLARE @ApvCode INT;
DECLARE @ZusatzCode INT;

SET @DatumVon = &lt;@DatumVon&gt;;
SET @DatumBis = &lt;@DatumBis&gt;;
SET @ApvCode = &lt;@ApvCode&gt;;
SET @ZusatzCode = &lt;@ZusatzCode&gt;;

SELECT
  [BaPersonID$]         = PRS.BaPersonID,
  [Pers. Nr.]           = PRS.BaPersonID,
  [Name]                = PRS.Name,
  [Vorname]             = PRS.Vorname,
  [SV Nummer]           = PRS.Versichertennummer,
  [BG]                  = EINA.BeschGrad,
  [Geburtsdatum]        = PRS.Geburtsdatum,
  [Zuteilung]           = dbo.fnGetLOVMLText(''KaQjNiveau'', KIN.ZuteilungCode, 1),
  [Nationalität]        = PRS.Nationalitaet,
  [Ausl.-Status]        = dbo.fnGetLOVMLText(''Aufenthaltsstatus'', PRS.AuslaenderStatusCode, 1),
  [Geschlecht]          = dbo.fnGetLOVMLText(''Geschlecht'', PRS.GeschlechtCode, 1),
  [Zuweiser]            = CASE WHEN KIN.ZuweiserID &lt; 0 THEN ISNULL(XOU.ItemName, '''')
                               ELSE ISNULL(ORG1.Name, '''')
                          END,
  [APV Nr.]             = dbo.fnGetLOVMLText(''KaAPV'', EINA.APVCode, 1),
  [Zusatz]              = dbo.fnGetLOVMLText(''KaAPVZusatz'', EINA.APVZusatzCode, 1),
  [Anschlusslösung]     = dbo.fnGetLOVMLText(''KaQjGrundProgEnde'', KPR.ProgEndeCode, 1),
  [Abbruchgrund]        = dbo.fnGetLOVMLText(''KaQjGrundProgAbbruch'', KPR.AbbruchCode, 1),
  [Grund Programmende]  = CASE WHEN KPR.ProgEndeGrund = 1 THEN ''Massnahme beendet''
                               WHEN KPR.ProgEndeGrund = 2 THEN ''Arbeitgeber Abbruch''
                               WHEN KPR.ProgEndeGrund = 3 THEN ''Arbeitnehmer Abbruch''
                               WHEN KPR.ProgEndeGrund = 4 THEN ''Gegenseitiger Abbruch''
                          END,
  [Eintritt]            = (SELECT TOP 1 DatumVon
                           FROM dbo.KaEinsatz WITH (READUNCOMMITTED)
                           WHERE FaLeistungID = LEI.FaLeistungID
                           ORDER BY DatumVon ASC),
  [Programmende]        = (SELECT TOP 1 DatumBis
                           FROM dbo.KaEinsatz WITH (READUNCOMMITTED)
                           WHERE FaLeistungID = LEI.FaLeistungID
                           ORDER BY DatumVon DESC),
  [Austritt]            = EINA.AustrittDatum,
  ARB.* -- Monatsspalten dynamisch sortieren
FROM dbo.FaLeistung                   LEI WITH(READUNCOMMITTED)
  INNER JOIN dbo.vwPerson             PRS ON PRS.BaPersonID = LEI.BaPersonID
  LEFT  JOIN dbo.KaQJIntake           KIN WITH(READUNCOMMITTED) ON KIN.FaLeistungID = LEI.FaLeistungID
  LEFT  JOIN dbo.XOrgUnit_User        OUU WITH (READUNCOMMITTED) ON OUU.UserID = -KIN.ZuweiserID
                                                                AND (OUU.OrgUnitMemberCode = 1 OR OUU.OrgUnitMemberCode = 2)
  LEFT  JOIN dbo.XOrgUnit             XOU WITH(READUNCOMMITTED) ON XOU.OrgUnitID = OUU.OrgUnitID
  LEFT  JOIN dbo.KaQJProzess          KPR WITH(READUNCOMMITTED) ON KPR.FaLeistungID = LEI.FaLeistungID
  LEFT  JOIN dbo.XUser                ZUW WITH(READUNCOMMITTED) ON ZUW.UserID = -KIN.ZuweiserID
  LEFT  JOIN dbo.BaInstitutionKontakt OKO WITH(READUNCOMMITTED) ON OKO.BaInstitutionKontaktID = KIN.ZuweiserID
  LEFT  JOIN dbo.BaInstitution        ORG1 WITH(READUNCOMMITTED) ON ORG1.BaInstitutionID =  OKO.BaInstitutionID	
  OUTER APPLY (SELECT TOP 1
                 EIN.KaEinsatzID,
                 EIN.BeschGrad,
                 EIP.APVCode,
                 EIN.APVZusatzCode,
                 AUS.AustrittDatum,
                 EIN.DatumBis
               FROM dbo.KaEinsatz              EIN WITH(READUNCOMMITTED)
                 LEFT JOIN dbo.KaEinsatzplatz2 EIP WITH(READUNCOMMITTED) ON EIP.KaEinsatzplatzID = EIN.KaEinsatzplatzID
                 OUTER APPLY dbo.fnKaGetAustrittDatumCode(EIN.FaLeistungID, EIN.KaEinsatzID) AUS
               WHERE EIN.FaLeistungID = LEI.FaLeistungID
                 AND dbo.fnDatumUeberschneidung(EIN.DatumVon, ISNULL(AUS.AustrittDatum, EIN.DatumBis), @DatumVon, @DatumBis) = 1
                 AND EIN.AnweisungCode &lt;&gt; 1 -- 1:Zuweisung
               ORDER BY EIN.DatumVon DESC) EINA
  OUTER APPLY (SELECT [FaLeistungID$], &lt;columnsSelect&gt;
               FROM(SELECT [FaLeistungID$] = LEI.FaLeistungID, MonatText = dbo.fnXMonat(1), Anzahl = 0.0
                    UNION 
                    SELECT [FaLeistungID$], MonatText, Anzahl
                    FROM #TmpKaArbeitsrapport
                    WHERE [FaLeistungID$] = LEI.FaLeistungID) TMP
               PIVOT (
                 SUM(Anzahl)
                 FOR MonatText IN (&lt;columns&gt;))  PVT) ARB                 
WHERE LEI.FaProzessCode = 703 -- QJ
  AND EINA.KaEinsatzID IS NOT NULL
  AND EINA.APVZusatzCode = ISNULL(@ZusatzCode, EINA.APVZusatzCode)
  AND EINA.APVCode = ISNULL(@ApvCode, EINA.APVCode);'

-- Variablen ersetzen
SET @Sql = REPLACE(@Sql, '&lt;columns&gt;', @Columns);
SET @Sql = REPLACE(@Sql, '&lt;columnsSelect&gt;', @ColumnsSelect);
SET @Sql = REPLACE(@Sql, '&lt;@DatumVon&gt;', '''' + CONVERT(VARCHAR(MAX), @DatumVon) + '''');
SET @Sql = REPLACE(@Sql, '&lt;@DatumBis&gt;', '''' + CONVERT(VARCHAR(MAX), @DatumBis) + '''');
SET @Sql = REPLACE(@Sql, '&lt;@ApvCode&gt;', ISNULL(CONVERT(VARCHAR(MAX), @ApvCode), 'NULL'));
SET @Sql = REPLACE(@Sql, '&lt;@ZusatzCode&gt;', ISNULL(CONVERT(VARCHAR(MAX), @ZusatzCode), 'NULL'));

-- SQL ausführen
EXEC (@Sql)
</value>
  </data>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="edtDatumBis.Properties.Buttons" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        iVBORw0KGgoAAAANSUhEUgAAAAwAAAAQCAYAAAAiYZ4HAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8
        YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAABMSURBVDhPYwABY2Pj/8RgsGIQgHFQBKEAqxyIQwyGKsdu
        MjrAqaGhgQErG6sGkAKYInSaOhpAYERrAAFkNk4NuACGBmIwVDkpgIEBAO2ojyYwtBe7AAAAAElFTkSu
        QmCC
</value>
  </data>
  <data name="edtDatumVon.Properties.Buttons" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        iVBORw0KGgoAAAANSUhEUgAAAAwAAAAQCAYAAAAiYZ4HAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8
        YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAABMSURBVDhPYwABY2Pj/8RgsGIQgHFQBKEAqxyIQwyGKsdu
        MjrAqaGhgQErG6sGkAKYInSaOhpAYERrAAFkNk4NuACGBmIwVDkpgIEBAO2ojyYwtBe7AAAAAElFTkSu
        QmCC
</value>
  </data>
  <metadata name="$this.TrayHeight" type="System.Int32, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
    <value>55</value>
  </metadata>
</root>
<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <metadata name="qryQuery.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>17, 17</value>
  </metadata>
  <data name="qryQuery.SelectStatement" xml:space="preserve">
    <value>WITH AbklaerungCte (FaLeistungID, BeraterID, KursNr, StatusWl, DatumIntBeurt, IntBeurt, Praesenz, GrundDossier, Bemerkung, Datum, EinsatzVon, EinsatzIn)
AS 
(
  SELECT FaLeistungID  = AKZ.FaLeistungID,
         BeraterID     = AKZ.BeraterID,
         KursNr        = NULL,
         StatusWl      = dbo.fnLOVText('KaAbklaerungStatusDossier', KAI.KaAbklaerungStatusDossierCode),
         DatumIntBeurt = KAI.DatumIntegration,
         IntBeurt      = dbo.fnLOVText('KaAbklaerungIntegrBeur', KAI.KaAbklaerungIntegrBeurCode),
         Praesenz      = dbo.fnLOVText('KaAbklaerungPraesenz', KAI.KaAbklaerungPraesenzCode),
         GrundDossier  = dbo.fnLOVText('KaAbklärungGrundDoss', KAI.KaAbklaerungGrundDossCode),
         Bemerkung     = KAI.Bemerkung,
         Datum         = KAI.Datum,
         EinsatzVon    = NULL,
         EinsatzIn     = NULL
  FROM dbo.KaAKZuweiser               AKZ WITH (READUNCOMMITTED)
    INNER JOIN dbo.KaAbklaerungIntake KAI WITH (READUNCOMMITTED) ON KAI.FaLeistungID = AKZ.FaLeistungID
  WHERE AKZ.Erfassung IS NOT NULL
  --- AND AKZ.BeraterID = {edtUserID.LookupID}
  --- AND KAI.KaAbklaerungPhaseIntakeCode = {edtModulIntakeCode}
  --- AND KAI.KaAbklaerungStatusDossierCode = {edtStatusWL}
  --- AND {edtModulVertAbkl} IS NULL
  --- AND {edtKursID.LookupID} IS NULL
  
  UNION ALL
  
  SELECT FaLeistungID  = AKZ.FaLeistungID,
         BeraterID     = AKZ.BeraterID,
         KursNr        = KUE.KursNr,
         StatusWl      = dbo.fnLOVText('KaAbklaerungStatusDossier', KAV.KaAbklaerungStatusDossierCode),
         DatumIntBeurt = KAV.DatumIntegration,
         IntBeurt      = dbo.fnLOVText('KaAbklaerungIntegrBeur', KAV.KaAbklaerungIntegrBeurCode),
         Praesenz      = dbo.fnLOVText('KaAbklaerungPraesenz', KAV.KaAbklaerungPraesenzCode),
         GrundDossier  = dbo.fnLOVText('KaAbklärungGrundDoss', KAV.KaAbklaerungGrundDossCode),
         Bemerkung     = KAV.Bemerkung,
         Datum         = KAV.Datum,
         EinsatzVon    = KAV.EinsatzVon,
         EinsatzIn     = dbo.fnLOVText('KaAbklPhasenEinsatzin', KAV.KaAbklaerungProbeeinsatzInCode)
  FROM dbo.KaAKZuweiser                 AKZ WITH (READUNCOMMITTED)
    INNER JOIN dbo.KaAbklaerungVertieft KAV WITH (READUNCOMMITTED) ON KAV.FaLeistungID = AKZ.FaLeistungID
    LEFT  JOIN dbo.KaKurserfassung      KUE WITH (READUNCOMMITTED) ON KUE.KaKurserfassungID = KAV.KaKurserfassungID --Kurs hats nur bei Vertiefter Abklärung
  WHERE AKZ.Erfassung IS NOT NULL
  --- AND AKZ.BeraterID = {edtUserID.LookupID}
  --- AND KAV.KaAbklaerungPhaseVertiefteAbklaerungenCode = {edtModulVertAbkl}
  --- AND KAV.KaKurserfassungID = {edtKursID.LookupID}
  --- AND KAV.KaAbklaerungStatusDossierCode = {edtStatusWL}
  --- AND KAV.KaAbklaerungProbeeinsatzInCode = {edtEinsatzIn}
  --- AND {edtModulIntakeCode} IS NULL
)

SELECT  BaPersonID$             = LEI.BaPersonID,
        Name                    = PRS.Name,
        Vorname                 = PRS.Vorname,
        Anrede                  = PRS.Titel,
        Telefonnummer           = ISNULL(PRS.Telefon_P, PRS.MobilTel),
        [Nationalität]          = PRS.Nationalitaet,
        [Name SAR]              = CASE WHEN CTE.BeraterID &lt; 0 THEN XUR.LastName  ELSE OKO.Name    END,
        [Vorname SAR]           = CASE WHEN CTE.BeraterID &lt; 0 THEN XUR.FirstName ELSE OKO.Vorname END,
        [Datum AsD]             = (SELECT TOP 1 CONVERT(DATETIME, KAI1.Datum, 104)
                                   FROM dbo.KaAbklaerungIntake KAI1 WITH (READUNCOMMITTED)
                                   WHERE KAI1.KaAbklaerungPhaseIntakeCode = 1 -- Abklärung sur Dossier (AsD)
                                     AND KAI1.FaLeistungID = CTE.FaLeistungID
                                   ORDER BY KAI1.Datum DESC),
        [Kurs-Nr.]              = CTE.KursNr,
        [Status Dossier]        = CTE.StatusWl,
        [Probeeinsatz in]       = CTE.EinsatzIn,
        Einsatzbeginn           = CTE.EinsatzVon,
        [Datum Int.beurt.]      = CTE.DatumIntBeurt,
        [Int.beurteilung]       = CTE.IntBeurt,
        [Präsenz]               = CTE.Praesenz,
        [Grund Dossierrückgabe] = CTE.GrundDossier,
        Bemerkungen             = '"' + REPLACE(CONVERT(VARCHAR(8000), CTE.Bemerkung), CHAR(13), '') + '"'
FROM AbklaerungCte CTE
  LEFT JOIN dbo.FaLeistung           LEI WITH (READUNCOMMITTED) ON LEI.FaLeistungID = CTE.FaLeistungID
  LEFT JOIN dbo.vwPerson             PRS WITH (READUNCOMMITTED) ON PRS.BaPersonID = LEI.BaPersonID
  LEFT JOIN dbo.BaInstitutionKontakt OKO WITH (READUNCOMMITTED) ON OKO.BaInstitutionKontaktID = CTE.BeraterID
  LEFT JOIN dbo.XUser                XUR WITH (READUNCOMMITTED) ON XUR.UserID = -CTE.BeraterID
ORDER BY PRS.Name, PRS.Vorname, [Name SAR], [Vorname SAR], LEI.BaPersonID, LEI.FaLeistungID, CTE.Datum DESC;</value>
  </data>
</root>
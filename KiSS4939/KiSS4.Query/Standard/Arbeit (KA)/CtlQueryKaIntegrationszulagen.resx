<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <metadata name="qryQuery.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>17, 17</value>
  </metadata>
  <data name="qryQuery.SelectStatement" xml:space="preserve">
    <value>DECLARE @SucheFallfuehrungID INT;
DECLARE @SucheErsterTagMonat DATETIME;
DECLARE @SucheLetzterTagMonat DATETIME;
DECLARE @SucheMonat INT;
DECLARE @SucheJahr INT;

SET @SucheMonat = MONTH(GETDATE());
--- SET @SucheMonat = {edtMonat};

SET @SucheJahr = YEAR(GETDATE());
--- SET @SucheJahr = {edtJahr};

SET @SucheErsterTagMonat = dbo.fnDateSerial(@SucheJahr, @SucheMonat, 1);
SET @SucheLetzterTagMonat = DATEADD(dd, -1, DATEADD(m, 1, @SucheErsterTagMonat));

--sicherstellen, dass nicht in der Zukunft gesucht wird (z.B. im Januar, Suche mit Dezember -&gt; Dezember Vorjahr und nicht Dezember gleiches Jahr)
IF(@SucheErsterTagMonat &gt; GETDATE())
BEGIN
    SET @SucheErsterTagMonat = DATEADD(y, -1, @SucheErsterTagMonat);
    SET @SucheLetzterTagMonat = DATEADD(y, -1, @SucheLetzterTagMonat);
END;

SET @SucheFallfuehrungID = NULL;
--- SET @SucheFallfuehrungID = {edtSucheFallfuehrung};

IF (OBJECT_ID('TempDB.dbo.#Temp') IS NOT NULL)
BEGIN
  DROP TABLE #Temp;
END;

--Einsatz Temp Table
SELECT
  FaLeistungID = LEI.FaLeistungID,
  KaEinsatzID  =  KEI.KaEinsatzID
INTO #Temp
FROM dbo.FaLeistung LEI WITH (READUNCOMMITTED)
  CROSS APPLY (SELECT TOP 1
                      SKAE.KaEinsatzID
               FROM dbo.KaEinsatz SKAE WITH (READUNCOMMITTED)
               OUTER APPLY dbo.fnKaGetAustrittDatumCode(SKAE.FaLeistungID, SKAE.KaEinsatzID) AUS
               WHERE SKAE.AnweisungCode = 4 --Einsatz ohne Anweisung
                 AND SKAE.FaLeistungID = LEI.FaLeistungID
                 AND (dbo.fnDateOf(AUS.AustrittDatum) &gt;= @SucheErsterTagMonat OR (AUS.AustrittDatum IS NULL AND dbo.fnDateOf(SKAE.DatumBis) &gt;= @SucheErsterTagMonat))
                 AND dbo.fnDateOf(SKAE.DatumVon) &lt;= @SucheLetzterTagMonat
                  ORDER BY SKAE.DatumBis DESC) KEI
WHERE LEI.ModulID = 7 -- Modul KA
  AND LEI.FaProzessCode = 703 -- Phase QJ
--- AND LEI.BaPersonID = {edtNameSTESID.LookupID}

--CTE
;WITH OrgUnits (OrgUnitID, ItemName)
AS
(
  SELECT ORG.OrgUnitID, ORG.ItemName
  FROM dbo.XOrgUnit ORG WITH (READUNCOMMITTED)
  WHERE (ORG.ItemName LIKE 'Sozialdienst' AND 1 = @SucheFallfuehrungID)
     OR (ORG.ItemName LIKE 'EKS' AND 2 = @SucheFallfuehrungID)
     OR (ORG.ItemName LIKE 'Jugendamt' AND 3 = @SucheFallfuehrungID)

  UNION ALL

  SELECT ORG.OrgUnitID, ORG.ItemName
  FROM dbo.XOrgUnit ORG WITH (READUNCOMMITTED)
    INNER JOIN OrgUnits SDO ON SDO.OrgUnitID = ORG.ParentID
)

SELECT DISTINCT
  [BaPersonID$]         = LEI.BaPersonID,
  [FaLeistungID$]       = LEI.FaLeistungID,
  [KaEinsatzID$]        = KAE.KaEinsatzID,
  [Name]                = PRS.Name,
  [Vorname]             = PRS.Vorname,
  [Adresse]             = PRS.WohnsitzStrasseHausNr,
  [PLZ]                 = PRS.WohnsitzPLZ,
  [Ort]                 = PRS.WohnsitzOrt,
  [AHV-Nr.]             = PRS.AHVNummer,
  [Vers.-Nr.]           = PRS.Versichertennummer,
  [Beschäftigungsgrad]  = KAE.BeschGrad,
  [Anzahl Tage]         = CONVERT(FLOAT, ((SELECT COUNT(1)
                                           FROM dbo.KaArbeitsrapport KAR WITH (READUNCOMMITTED)
                                           WHERE KAR.BaPersonID = LEI.BaPersonID
                                             AND dbo.fnDateOf(KAR.Datum) &gt;= @SucheErsterTagMonat
                                             AND dbo.fnDateOf(KAR.Datum) &lt;= @SucheLetzterTagMonat
                                             AND dbo.fnDateOf(KAR.Datum) &gt;= dbo.fnDateOf(LEI.DatumVon) 
                                             AND ((dbo.fnDateOf(AUS.AustrittDatum) IS NULL AND dbo.fnDateOf(KAR.Datum) &lt;= dbo.fnDateOf(KAE.DatumBis)) OR dbo.fnDateOf(KAR.Datum) &lt;= dbo.fnDateOf(AUS.AustrittDatum))
                                             AND KAR.AM_AnwCode IN (1,2,3,4,5,7,8,9)) +
                                          (SELECT COUNT(1)
                                           FROM dbo.KaArbeitsrapport KAR WITH (READUNCOMMITTED)
                                           WHERE KAR.BaPersonID = LEI.BaPersonID
                                             AND dbo.fnDateOf(KAR.Datum) &gt;= @SucheErsterTagMonat
                                             AND dbo.fnDateOf(KAR.Datum) &lt;= @SucheLetzterTagMonat
                                             AND dbo.fnDateOf(KAR.Datum) &gt;= dbo.fnDateOf(LEI.DatumVon) 
                                             AND ((dbo.fnDateOf(AUS.AustrittDatum) IS NULL AND dbo.fnDateOf(KAR.Datum) &lt;= dbo.fnDateOf(KAE.DatumBis)) OR dbo.fnDateOf(KAR.Datum) &lt;= dbo.fnDateOf(AUS.AustrittDatum))
                                             AND KAR.PM_AnwCode IN (1,2,3,4,5,7,8,9)))) / 2,
  --
  [Zuständiger Sozialdienst] = CASE
                                 WHEN KPR.FallfuehrungID &lt; 0 THEN dbo.fnOrgUnitOfUser(-KPR.FallfuehrungID, 0)
                                 ELSE INS.Name
                               END,
  [SAR Anrede]               = ISNULL(OKO.Anrede, dbo.fnGetGenderMLTitle(SAR.GenderCode, 'dbGeneral', 'Herr', 'Frau', NULL, SAR.LanguageCode, NULL)),
  [SAR Name]                 = ISNULL(OKO.Name, SAR.LastName),
  [SAR Vorname]              = ISNULL(OKO.Vorname, SAR.FirstName),
  [SAR Mail]                 = ISNULL(OKO.EMail, SAR.EMail),
  [Eintrittsdatum]           = (SELECT MIN(DatumVon)
                                FROM dbo.KaEinsatz WITH (READUNCOMMITTED)
                                WHERE FaLeistungID = LEI.FaLeistungID
                                  AND AnweisungCode = 4),
  [Austritt]                 = AUS.AustrittDatum
FROM dbo.FaLeistung                   LEI WITH (READUNCOMMITTED)
  INNER JOIN #Temp                    TMP                        ON TMP.FaLeistungID = LEI.FaLeistungID
  INNER JOIN dbo.KaEinsatz            KAE WITH (READUNCOMMITTED) ON KAE.KaEinsatzID = TMP.KaEinsatzID
  LEFT JOIN dbo.KaQJProzess           KPR WITH (READUNCOMMITTED) ON KPR.FaLeistungID = LEI.FaLeistungID
  CROSS APPLY dbo.fnKaGetAustrittDatumCode(LEI.FaLeistungID, KAE.KaEinsatzID) AUS
  LEFT  JOIN dbo.vwPerson             PRS WITH (READUNCOMMITTED) ON PRS.BaPersonID = KAE.BaPersonID
  LEFT  JOIN dbo.BaInstitutionKontakt OKO WITH (READUNCOMMITTED) ON OKO.BaInstitutionKontaktID = KPR.FallfuehrungID
  LEFT  JOIN dbo.BaInstitution        INS WITH (READUNCOMMITTED) ON INS.BaInstitutionID = OKO.BaInstitutionID
  LEFT  JOIN dbo.XUser                SAR WITH (READUNCOMMITTED) ON SAR.UserID = -KPR.FallfuehrungID
WHERE (@SucheFallfuehrungID IS NULL OR ISNULL(KPR.FallfuehrungID, 0) &lt;&gt; 0)
  AND 1 = CASE
            -- all
            WHEN @SucheFallfuehrungID IS NULL THEN 1

            -- only users in given orgunits
            WHEN @SucheFallfuehrungID IN (1, 2, 3) THEN CASE
                                                      WHEN EXISTS (SELECT TOP 1 1
                                                                   FROM dbo.XOrgUnit_User SOUU
                                                                     INNER JOIN OrgUnits  CTE ON CTE.OrgUnitID = SOUU.OrgUnitID
                                                                   WHERE SOUU.UserID = -KPR.FallfuehrungID
                                                                     AND SOUU.OrgUnitMemberCode IN (1, 2)) THEN 1
                                                      ELSE 0
                                                    END
            -- only institutions
            WHEN @SucheFallfuehrungID = 4 THEN CASE
                                             WHEN KPR.FallfuehrungID &gt; 0 THEN 1
                                             ELSE 0
                                           END
            -- nothing
            ELSE 0
          END
ORDER BY PRS.Name;

IF (OBJECT_ID('TempDB.dbo.#Temp') IS NOT NULL)
BEGIN
  DROP TABLE #Temp;
END;</value>
  </data>
</root>
<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <metadata name="qryQuery.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>17, 17</value>
  </metadata>
  <data name="qryQuery.SelectStatement" xml:space="preserve">
    <value>declare @DoConvert bit

set @DoConvert = 0
--- set @DoConvert = {edtDoConvert}

DECLARE @DynaData TABLE(
   DynaFieldID INT,
   MaskName    VARCHAR(50),
   FieldName   VARCHAR(50),
   DynaValueID INT,
   FaPhaseID   INT,
   FaLeistungID    INT,
   Value       SQL_VARIANT,
   SollTyp     VARCHAR(50),  --SOLL TYP
   Typ         SQL_VARIANT,  --EFFEKTIVER TYP
   BaPersonID INT
)

--varchar/nvarchar: FieldCode 2
INSERT @DynaData
SELECT
DFD.DynaFieldID,
DFD.Maskname,
DFD.FieldName,
DVL.DynaValueID,
DVL.FaPhaseID,
DVL.FaLeistungID,
DVL.Value,
'text',
Typ = SQL_VARIANT_PROPERTY(DVL.Value,'BaseType'),
CASE WHEN DVL.FaLeistungID IS NOT NULL THEN FAL.BaPersonID
     WHEN DVL.FaPhaseID IS NOT NULL THEN (SELECT TOP 1 BaPersonID FROM dbo.FaLeistung WITH (READUNCOMMITTED) WHERE FaLeistungID = PHS.FaLeistungID)
END
FROM dbo.DynaField DFD WITH (READUNCOMMITTED)
INNER JOIN dbo.DynaValue DVL WITH (READUNCOMMITTED) ON DVL.DynaFieldID = DFD.DynaFieldID
LEFT  JOIN dbo.FaLeistung FAL WITH (READUNCOMMITTED) ON FAL.FaLeistungID = DVL.FaLeistungID
LEFT  JOIN dbo.FaPhase PHS WITH (READUNCOMMITTED) ON PHS.FaPhaseID = DVL.FaPhaseID
WHERE DFD.FieldCode = 2 AND
      SQL_VARIANT_PROPERTY(DVL.Value,'BaseType') &lt;&gt; 'nvarchar' AND
      SQL_VARIANT_PROPERTY(DVL.Value,'BaseType') &lt;&gt; 'varchar'

--int: FieldCode 4, 8 (Auswahl), 12 (DocumentID)
INSERT @DynaData
SELECT
DFD.DynaFieldID,
DFD.Maskname,
DFD.FieldName,
DVL.DynaValueID,
DVL.FaPhaseID,
DVL.FaLeistungID,
DVL.Value,
'int',
Typ = SQL_VARIANT_PROPERTY(DVL.Value,'BaseType'),
CASE WHEN DVL.FaLeistungID IS NOT NULL THEN FAL.BaPersonID
     WHEN DVL.FaPhaseID IS NOT NULL THEN (SELECT TOP 1 BaPersonID FROM dbo.FaLeistung WITH (READUNCOMMITTED) WHERE FaLeistungID = PHS.FaLeistungID)
END
FROM dbo.DynaField DFD WITH (READUNCOMMITTED)
INNER JOIN dbo.DynaValue DVL WITH (READUNCOMMITTED) ON DVL.DynaFieldID = DFD.DynaFieldID
LEFT  JOIN dbo.FaLeistung FAL WITH (READUNCOMMITTED) ON FAL.FaLeistungID = DVL.FaLeistungID
LEFT  JOIN dbo.FaPhase PHS WITH (READUNCOMMITTED) ON PHS.FaPhaseID = DVL.FaPhaseID
WHERE DFD.FieldCode IN (4,8,12)
      AND SQL_VARIANT_PROPERTY(DVL.Value,'BaseType') &lt;&gt; 'int'
      AND SQL_VARIANT_PROPERTY(DVL.Value,'BaseType') &lt;&gt; 'nvarchar'
      AND SQL_VARIANT_PROPERTY(DVL.Value,'BaseType') &lt;&gt; 'varchar' --&gt; sind ALLE als nvarchar abgelegt, das bleibt aber so

--Datetime: Fieldcode 5 oder 6
INSERT @DynaData
SELECT
DFD.DynaFieldID,
DFD.Maskname,
DFD.FieldName,
DVL.DynaValueID,
DVL.FaPhaseID,
DVL.FaLeistungID,
DVL.Value,
'datetime',
Typ = SQL_VARIANT_PROPERTY(DVL.Value,'BaseType'),
CASE WHEN DVL.FaLeistungID IS NOT NULL THEN FAL.BaPersonID
     WHEN DVL.FaPhaseID IS NOT NULL THEN (SELECT TOP 1 BaPersonID FROM dbo.FaLeistung WITH (READUNCOMMITTED) WHERE FaLeistungID = PHS.FaLeistungID)
END
FROM dbo.DynaField DFD WITH (READUNCOMMITTED)
INNER JOIN dbo.DynaValue DVL WITH (READUNCOMMITTED) ON DVL.DynaFieldID = DFD.DynaFieldID
LEFT  JOIN dbo.FaLeistung FAL WITH (READUNCOMMITTED) ON FAL.FaLeistungID = DVL.FaLeistungID
LEFT  JOIN dbo.FaPhase PHS WITH (READUNCOMMITTED) ON PHS.FaPhaseID = DVL.FaPhaseID
WHERE DFD.FieldCode IN (5,6) AND
      SQL_VARIANT_PROPERTY(DVL.Value,'BaseType') &lt;&gt; 'datetime'

--Bit: FieldCode 7
INSERT @DynaData
SELECT
DFD.DynaFieldID,
DFD.Maskname,
DFD.FieldName,
DVL.DynaValueID,
DVL.FaPhaseID,
DVL.FaLeistungID,
DVL.Value,
'bit',
Typ = SQL_VARIANT_PROPERTY(DVL.Value,'BaseType'),
CASE WHEN DVL.FaLeistungID IS NOT NULL THEN FAL.BaPersonID
     WHEN DVL.FaPhaseID IS NOT NULL THEN (SELECT TOP 1 BaPersonID FROM dbo.FaLeistung WITH (READUNCOMMITTED) WHERE FaLeistungID = PHS.FaLeistungID)
END
FROM dbo.DynaField DFD WITH (READUNCOMMITTED)
INNER JOIN dbo.DynaValue DVL WITH (READUNCOMMITTED) ON DVL.DynaFieldID = DFD.DynaFieldID
LEFT  JOIN dbo.FaLeistung FAL WITH (READUNCOMMITTED) ON FAL.FaLeistungID = DVL.FaLeistungID
LEFT  JOIN dbo.FaPhase PHS WITH (READUNCOMMITTED) ON PHS.FaPhaseID = DVL.FaPhaseID
WHERE DFD.FieldCode = 7 AND
      SQL_VARIANT_PROPERTY(DVL.Value,'BaseType') &lt;&gt; 'bit'

if @DoConvert = 1 begin

DECLARE @DynaValueID INT
DECLARE @Typ VARCHAR(50)
DECLARE @Value SQL_VARIANT

DECLARE cDynaData CURSOR STATIC FOR
    SELECT DynaValueID, SollTyp, Value
    FROM   @DynaData

  OPEN cDynaData
  FETCH NEXT FROM cDynaData INTO @DynaValueID, @Typ, @Value
  WHILE @@fetch_status = 0 BEGIN
     UPDATE dbo.DynaValue SET Value = CONVERT(NVARCHAR, Value) WHERE ISNUMERIC(CONVERT(VARCHAR,Value)) = 1 AND @Typ LIKE 'int' AND DynaValueID = @DynaValueID
     IF @Typ LIKE 'DATETIME'
     BEGIN
        IF ISDATE(CONVERT(VARCHAR,@Value)) = 1
           UPDATE dbo.DynaValue SET Value = CONVERT(DATETIME, Value) WHERE  DynaValueID = @DynaValueID
        ELSE
           UPDATE dbo.DynaValue SET Value = CONVERT(DATETIME, Value, 104) WHERE  DynaValueID = @DynaValueID
     END
     FETCH NEXT FROM cDynaData INTO @DynaValueID, @Typ, @Value
  END
  CLOSE cDynaData
DEALLOCATE cDynaData

END
SELECT DynaFieldID,
       Maskname,
       FieldName,
       DynaValueID,
       FaPhaseID,
       FaLeistungID,
       Value,
       SollTyp,
       Typ,
       BaPersonID$ = BaPersonID
FROM @DynaData
order by DynaValueID</value>
  </data>
  <assembly alias="System.Drawing" name="System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="xDocument.Properties.Buttons" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        iVBORw0KGgoAAAANSUhEUgAAAAwAAAAQCAYAAAAiYZ4HAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8
        YQUAAAAgY0hSTQAAeiYAAICEAAD6AAAAgOgAAHUwAADqYAAAOpgAABdwnLpRPAAAAF1JREFUOE9jZAAC
        Y2Pj/yAaGzh79iwjhjhIw///MzGwmJjYfxDGqSEtjeE/MgYpBhmEoYmQDSANKM7GpQHZmVg1oDsJxgdp
        pI4N2EIKJjbqJLIiDqSJEMaVovGKAwBnM3PWBP8PfwAAAABJRU5ErkJggg==
</value>
  </data>
</root>
<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <metadata name="qryQuery.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>17, 17</value>
  </metadata>
  <data name="qryQuery.SelectStatement" xml:space="preserve">
    <value>------------------------------
------ Benutzer / Benutzergruppen
------------------------------
SELECT Benutzer            = USR.LastName + isNull(', ' + USR.Firstname,''),
       [Zugeteilte Gruppe] = UGR.UserGroupName
FROM    dbo.XUser_UserGroup UUG WITH (READUNCOMMITTED)
  INNER JOIN dbo.XUserGroup UGR WITH (READUNCOMMITTED) ON UGR.UserGroupID = UUG.UserGroupID
  INNER JOIN dbo.XUser      USR WITH (READUNCOMMITTED) ON UUG.UserID = USR.UserID
WHERE 1=1
--- AND USR.UserID = {edtUserID.LookupID}
--- AND UGR.UserGroupID = {edtUserGroupID}
ORDER BY 1,2


------------------------------
------ Benutzer / Rechte
------------------------------

SELECT Benutzer  = USR.LastName + isNull(', ' + USR.Firstname,''),
       Recht     = UserText,
       Einfügen  = convert(bit, max(convert(int, UGR.mayInsert))),
       Mutieren  = convert(bit, max(convert(int, UGR.mayUpdate))),
       Löschen   = convert(bit, max(convert(int, UGR.mayDelete)))
FROM dbo.XUserGroup_Right        UGR WITH (READUNCOMMITTED)
  INNER JOIN dbo.XRight          RGT WITH (READUNCOMMITTED) ON RGT.RightID = UGR.RightID
  INNER JOIN dbo.XUser_UserGroup UUG WITH (READUNCOMMITTED) ON UUG.UserGroupID = UGR.UserGroupID
  INNER JOIN dbo.XUser           USR WITH (READUNCOMMITTED) ON USR.UserID = UUG.UserID
WHERE 1=1
and not USR.LastName like '[_]%'
and not USR.LastName like '-%'
--- AND USR.UserID = {edtUserID.LookupID}
--- AND CONVERT(VARCHAR, RGT.RightID) = {edtRightID}
GROUP BY USR.LastName + isNull(', ' + USR.Firstname,''), RGT.UserText

UNION ALL

SELECT Benutzer  = USR.LastName + isNull(', ' + USR.Firstname,''),
       Recht     = 'EM ' +
                  CASE MSK.ModulID
                       WHEN 2 THEN CASE MSK.FaPhaseCode
                                   WHEN 1 THEN 'FF-INT-'
                                   WHEN 2 THEN 'FF-BER-'
                                   ELSE 'FF-DOK-'
                              END
                       WHEN 5 THEN CASE MSK.VmProzessCode
                                   WHEN 1 THEN 'VM-MAS-'
                                   WHEN 2 THEN 'VM-VAT-'
                                   WHEN 3 THEN 'VM-EA-'
                                   WHEN 31 THEN 'VM-EA-SIE-'
                                   WHEN 32 THEN 'VM-EA-TES-'
                                   WHEN 33 THEN 'VM-EA-ERB-'
                                   WHEN 4 THEN 'VM-PFL-'
                                   ELSE 'VM-'
                                   END
                        ELSE ''
                        END +MSK.DisplayText,
       Einfügen  = convert(bit, max(convert(int, UGR.mayInsert))),
       Mutieren = convert(bit, max(convert(int, UGR.mayUpdate))),
       Löschen = convert(bit, max(convert(int, UGR.mayDelete)))
FROM	dbo.XUserGroup_Right UGR WITH (READUNCOMMITTED)
  INNER JOIN dbo.DynaMask MSK WITH (READUNCOMMITTED) ON MSK.Maskname = UGR.Maskname
  INNER JOIN dbo.XUser_UserGroup UUG WITH (READUNCOMMITTED) ON UUG.UserGroupID = UGR.UserGroupID
  INNER JOIN dbo.XUser           USR WITH (READUNCOMMITTED) ON USR.UserID = UUG.UserID
WHERE 1=1
and not USR.LastName like '[_]%'
and not USR.LastName like '-%'
--- AND USR.UserID = {edtUserID.LookupID}
--- AND MSK.MaskName = {edtRightID}
GROUP BY USR.LastName + isNull(', ' + USR.Firstname,''),
         'EM ' +
		CASE MSK.ModulID
		WHEN 2 THEN CASE MSK.FaPhaseCode
					WHEN 1 THEN 'FF-INT-'
					WHEN 2 THEN 'FF-BER-'
	ELSE 'FF-DOK-'
					END
		WHEN 5 THEN CASE MSK.VmProzessCode
					WHEN 1 THEN 'VM-MAS-'
					WHEN 2 THEN 'VM-VAT-'
					WHEN 3 THEN 'VM-EA-'
					WHEN 31 THEN 'VM-EA-SIE-'
					WHEN 32 THEN 'VM-EA-TES-'
					WHEN 33 THEN 'VM-EA-ERB-'
					WHEN 4 THEN 'VM-PFL-'
					ELSE 'VM-'
					END
                    ELSE ''
                    END +
		MSK.DisplayText
ORDER BY 1,2


------------------------------
------ Benutzergruppen / Rechte
------------------------------

SELECT Gruppe    = GRP.UserGroupName,
       Recht     = RGT.UserText,
       Einfügen  = convert(bit, UGR.mayInsert),
       Mutieren  = convert(bit, UGR.mayUpdate),
       Löschen   = convert(bit, UGR.mayDelete)
FROM dbo.XUserGroup_Right        UGR WITH (READUNCOMMITTED)
  INNER JOIN dbo.XUserGroup      GRP WITH (READUNCOMMITTED) ON GRP.UserGroupID = UGR.UserGroupID
  INNER JOIN dbo.XRight          RGT WITH (READUNCOMMITTED) ON RGT.RightID = UGR.RightID
WHERE 1=1
--- AND Grp.UserGroupID = {edtUserGroupID}
--- AND CONVERT(VARCHAR, RGT.RightID) = {edtRightID}

UNION ALL

SELECT GRP.UserGroupName,
       Recht     = 'EM ' +
                  CASE MSK.ModulID
                       WHEN 2 THEN CASE MSK.FaPhaseCode
                                   WHEN 1 THEN 'FF-INT-'
                                   WHEN 2 THEN 'FF-BER-'
                                   ELSE 'FF-DOK-'
                              END
                       WHEN 5 THEN CASE MSK.VmProzessCode
                                   WHEN 1 THEN 'VM-MAS-'
                                   WHEN 2 THEN 'VM-VAT-'
                                   WHEN 3 THEN 'VM-EA-'
                                   WHEN 31 THEN 'VM-EA-SIE-'
                                   WHEN 32 THEN 'VM-EA-TES-'
                                   WHEN 33 THEN 'VM-EA-ERB-'
                                   WHEN 4 THEN 'VM-PFL-'
                                   ELSE 'VM-'
                                   END
                        ELSE ''
                        END +MSK.DisplayText,
       Einfügen  = convert(bit, UGR.mayInsert),
       Mutieren  = convert(bit, UGR.mayUpdate),
       Löschen   = convert(bit,  UGR.mayDelete)
FROM	dbo.XUserGroup_Right UGR WITH (READUNCOMMITTED)
  INNER JOIN dbo.DynaMask MSK WITH (READUNCOMMITTED) ON MSK.Maskname = UGR.Maskname
  INNER JOIN dbo.XUserGroup      GRP WITH (READUNCOMMITTED) ON GRP.UserGroupID = UGR.UserGroupID
WHERE 1=1
--- AND GRP.UserGroupID = {edtUserGroupID}
--- AND MSK.MaskName = {edtRightID}

ORDER BY 1,2</value>
  </data>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="xDocument.Properties.Buttons" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        iVBORw0KGgoAAAANSUhEUgAAAAwAAAAQCAYAAAAiYZ4HAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8
        YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAABbSURBVDhPY2AAAmNj4/+4MEgeA4AU//8/EwOLiYn9B2Gc
        GtLSGP4jY5BikEEYmgjZANIAUgO3CZcGZGdi1YDuJBgfpJE6NmALKZjYqJPIijh8KRYmhzXlEhIEANZ8
        ev1ASni6AAAAAElFTkSuQmCC
</value>
  </data>
</root>
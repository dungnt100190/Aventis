<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <metadata name="qryQuery.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>17, 17</value>
  </metadata>
  <data name="qryQuery.SelectStatement" xml:space="preserve">
    <value>-- Nicht vergessen, try-catch also 2x ein select vorhanden

-- Wenn nur der aktuelle Benutzer erscheint dann folgendes auf
-- master ausführen "GRANT VIEW SERVER STATE TO kiss3"

BEGIN TRY
  SELECT Prozess            = P.spid,
         [gesperrt durch]   = P.blocked,
         [Verursacher]      = CASE WHEN EXISTS (SELECT TOP 1 1 
                                                FROM master.dbo.sysprocesses 
                                                WHERE blocked = P.spid AND 
                                                      P.blocked = 0) THEN '!'
                                   ELSE ''
                              END,
         [off. Transakt.]  = P.open_tran,  
         Benutzer          = CASE WHEN CHARINDEX('(',P.Hostname) &gt; 0 AND CHARINDEX(')',P.Hostname) &gt; 0 THEN VU.NameVorname
                                  ELSE P.loginame COLLATE database_default
                             END,
         Abteilung         = VU.OrgUnit,
         Telefon           = VU.Phone,
         PC                = P.Hostname,
         -- Status         = P.status,
         [angemeldet seit] = CONVERT(VARCHAR, P.login_time, 120),
         [letztmals aktiv] = CONVERT(VARCHAR, P.last_batch, 120),
         /*
         [Anzahl Sperren]  = (SELECT COUNT(1) 
                              FROM master.dbo.syslockinfo
                              WHERE req_spid = P.spid AND
                                    rsc_objid &gt; 0 AND 
                                    rsc_indid = 0 AND 
                                    rsc_type = 5),
          */
         [CPU Time]        = P.cpu,
         [I/O]             = P.physical_io,
         -- LetzerBefehl$  = (SELECT text FROM ::fn_get_sql(P.sql_handle))  -- SQL Server 2000 R3
         LetzerBefehl$     = (SELECT text 
                              FROM sys.dm_exec_sql_text(P.sql_handle))  -- SQL Server 2005
  FROM master..sysprocesses P
    INNER JOIN master..sysdatabases D                         ON P.dbid = D.dbid
    LEFT  JOIN dbo.XUser            XU WITH (READUNCOMMITTED) ON XU.LogonName = CASE WHEN CHARINDEX('(',P.Hostname) &gt; 0 AND CHARINDEX(')',P.Hostname) &gt; 0 THEN (SUBSTRING(P.Hostname, charindex('(',P.Hostname) + 1, charindex(')',P.Hostname) - charindex('(',P.Hostname) - 1)) COLLATE database_default
	                                                                                   ELSE '-' 
	                                                                              END
    LEFT  JOIN dbo.vwUser VU                                  ON VU.UserID = XU.UserID
  WHERE P.loginame LIKE 'kiss%' AND
        D.name = db_name() AND
        YEAR(P.last_batch) &lt;&gt; 1900
  --- AND ({edtSucheNurGesperrte} = 0 OR P.blocked != 0 OR EXISTS (SELECT TOP 1 1 from master.dbo.sysprocesses WHERE blocked = P.spid AND P.blocked = 0))
  ORDER BY [gesperrt durch] DESC, Benutzer, Prozess
END TRY
BEGIN CATCH
  -- Keine Berechtigung zum ausfuehren von sys.dm_exec_sql_text()
  SELECT Prozess            = P.spid,
         [gesperrt durch]   = P.blocked,
         [Verursacher]      = CASE WHEN EXISTS (SELECT TOP 1 1 
                                                FROM master.dbo.sysprocesses 
                                                WHERE blocked = P.spid AND 
                                                      P.blocked = 0) THEN '!'
                                   ELSE ''
                              END,
         [off. Transakt.]  = P.open_tran,
         Benutzer          = CASE WHEN CHARINDEX('(', P.Hostname) &gt; 0 AND CHARINDEX(')', P.Hostname) &gt; 0 THEN VU.NameVorname
                                  ELSE P.loginame COLLATE database_default
                             END,
         Abteilung         = VU.OrgUnit,
         Telefon           = VU.Phone,
         PC                = P.Hostname,
         -- Status         = P.status,
         [angemeldet seit] = CONVERT(VARCHAR, P.login_time, 120),
         [letztmals aktiv] = CONVERT(VARCHAR, P.last_batch, 120),
         /*
         [Anzahl Sperren]  = (SELECT COUNT(1) 
                              FROM master.dbo.syslockinfo
                              WHERE req_spid = P.spid AND
                                    rsc_objid &gt; 0 AND 
                                    rsc_indid = 0 AND 
                                    rsc_type = 5),
         */
         [CPU Time]        =  P.cpu,
         [I/O]             = P.physical_io,
         LetzerBefehl$     = '- (access denied)'
  FROM master..sysprocesses P
    INNER JOIN master..sysdatabases D                         ON P.dbid = D.dbid
    LEFT  JOIN dbo.XUser            XU WITH (READUNCOMMITTED) ON XU.LogonName = CASE WHEN CHARINDEX('(', P.Hostname) &gt; 0 AND CHARINDEX(')', P.Hostname) &gt; 0 THEN (SUBSTRING(P.Hostname, CHARINDEX('(', P.Hostname) + 1, CHARINDEX(')', P.Hostname) - CHARINDEX('(', P.Hostname) - 1)) COLLATE database_default
	                                                                                   ELSE '-' 
	                                                                              END
    LEFT  JOIN dbo.vwUser VU                                  ON VU.UserID = XU.UserID
  WHERE P.loginame LIKE 'kiss%' AND
        D.name = DB_NAME() AND
        YEAR(P.last_batch) &lt;&gt; 1900
  --- AND ({edtSucheNurGesperrte} = 0 OR P.blocked != 0 OR EXISTS (SELECT TOP 1 1 FROM master.dbo.sysprocesses WHERE blocked = P.spid AND P.blocked = 0))
  ORDER BY [gesperrt durch] DESC, Benutzer, Prozess
END CATCH</value>
  </data>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="xDocument.Properties.Buttons" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        iVBORw0KGgoAAAANSUhEUgAAAAwAAAAQCAYAAAAiYZ4HAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8
        YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAABbSURBVDhPY2AAAmNj4/+4MEgeA4AU//8/EwOLiYn9B2Gc
        GtLSGP4jY5BikEEYmgjZANIAUgO3CZcGZGdi1YDuJBgfpJE6NmALKZjYqJPIijh8KRYmhzXlEhIEANZ8
        ev1ASni6AAAAAElFTkSuQmCC
</value>
  </data>
  <metadata name="qrySperrUser.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>119, 17</value>
  </metadata>
  <metadata name="$this.TrayHeight" type="System.Int32, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
    <value>48</value>
  </metadata>
  <data name="qrySperrUser.SelectStatement" xml:space="preserve">
    <value>SELECT Prozess   = P.spid,
       Benutzer  = CASE WHEN CHARINDEX('(', P.Hostname) &gt; 0 AND CHARINDEX(')', P.Hostname) &gt; 0 THEN VU.NameVorname
                        ELSE P.loginame COLLATE database_default
                   END,
       Abteilung = VU.OrgUnit,
       Telefon   = VU.Phone,
       PC        = P.Hostname
FROM master..sysprocesses P
  LEFT JOIN dbo.XUser XU WITH (READUNCOMMITTED) ON XU.LogonName = CASE WHEN CHARINDEX('(', P.Hostname) &gt; 0 AND CHARINDEX(')', P.Hostname) &gt; 0 THEN (SUBSTRING(P.Hostname, CHARINDEX('(', P.Hostname) + 1, CHARINDEX(')', P.Hostname) - CHARINDEX('(', P.Hostname) - 1)) COLLATE database_default
	                                                                     ELSE '-' 
	                                                                END
  LEFT  JOIN dbo.vwUser VU                      ON VU.UserID = XU.UserID
WHERE P.loginame LIKE 'kiss%' AND 
      YEAR(P.last_batch) &lt;&gt; 1900 AND 
      P.spid = {0}</value>
  </data>
</root>
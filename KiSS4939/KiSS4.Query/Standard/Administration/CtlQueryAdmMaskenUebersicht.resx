<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <metadata name="qryQuery.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>17, 17</value>
  </metadata>
  <data name="qryQuery.SelectStatement" xml:space="preserve">
    <value>SELECT * FROM 
  (SELECT Modul = ISNULL(MOD2.ShortName, '-'),
         InternerName = CLA.ClassName,
         Typ = 'Modulbaum-Maske',
         Pfad = 'Fallbearbeitung -&gt; Modul ' + MOD.ShortName + ' -&gt; ' +
                ISNULL(TRE5.Name + ' -&gt; ', '') +
                ISNULL(TRE4.Name + ' -&gt; ', '') +
                ISNULL(TRE3.Name + ' -&gt; ', '') +
                ISNULL(TRE2.Name + ' -&gt; ', '') +
                ISNULL(TRE1.Name + ' -&gt; ', '') +
                ISNULL(TRE0.Name,''),
         Modulname = MOD2.Name,
         ModulID$ = CLA.ModulID
  FROM   XClass CLA
         INNER JOIN XModulTree TRE0 ON TRE0.ClassName = CLA.ClassName
         LEFT JOIN XModulTree TRE1 ON TRE1.ModulTreeID = TRE0.ModulTreeID_Parent
         LEFT JOIN XModulTree TRE2 ON TRE2.ModulTreeID = TRE1.ModulTreeID_Parent
         LEFT JOIN XModulTree TRE3 ON TRE3.ModulTreeID = TRE2.ModulTreeID_Parent
         LEFT JOIN XModulTree TRE4 ON TRE4.ModulTreeID = TRE3.ModulTreeID_Parent
         LEFT JOIN XModulTree TRE5 ON TRE5.ModulTreeID = TRE4.ModulTreeID_Parent
         LEFT JOIN XModul     MOD  ON MOD.ModulID = TRE0.ModulID
         LEFT JOIN XModul     MOD2 ON MOD2.ModulID = CLA.ModulID

  union all

  SELECT Modul = ISNULL(MOD2.ShortName, '-'),
         InternerName = CLA2.ClassName,
         Typ = 'Submaske',
         Pfad = 'Fallbearbeitung -&gt; Modul ' + MOD.ShortName + ' -&gt; ' +
                ISNULL(TRE5.Name + ' -&gt; ','') +
                ISNULL(TRE4.Name + ' -&gt; ','') +
                ISNULL(TRE3.Name + ' -&gt; ','') +
                ISNULL(TRE2.Name + ' -&gt; ','') +
                ISNULL(TRE1.Name + ' -&gt; ','') +
                ISNULL(TRE0.Name, ''),
         Modulname = MOD2.Name,
         ModulID$ = CLA.ModulID
  FROM   XClass CLA
         INNER JOIN XClassReference REF  ON REF.ClassName = CLA.ClassName
         INNER JOIN XClass          CLA2 ON CLA2.ClassName = REF.ClassName_Ref AND
                                            CLA2.BaseType = 'KiSS4.Gui.KissUserControl'
         INNER JOIN XModulTree      TRE0 ON TRE0.ClassName = CLA.ClassName
         LEFT JOIN XModulTree      TRE1 ON TRE1.ModulTreeID = TRE0.ModulTreeID_Parent
         LEFT JOIN XModulTree      TRE2 ON TRE2.ModulTreeID = TRE1.ModulTreeID_Parent
         LEFT JOIN XModulTree      TRE3 ON TRE3.ModulTreeID = TRE2.ModulTreeID_Parent
         LEFT JOIN XModulTree      TRE4 ON TRE4.ModulTreeID = TRE3.ModulTreeID_Parent
         LEFT JOIN XModulTree      TRE5 ON TRE5.ModulTreeID = TRE4.ModulTreeID_Parent
         LEFT JOIN XModul          MOD  ON MOD.ModulID = TRE0.ModulID
         LEFT JOIN XModul     MOD2 ON MOD2.ModulID = CLA.ModulID

  UNION ALL

  SELECT Modul = ISNULL(MOD2.ShortName,'-'),
         InternerName = CLA.ClassName,
         Typ = 'Menu-Maske',
         Pfad = 'Hauptmenu -&gt; ' +
                ISNULL(MEN5.Caption + ' -&gt; ','') +
                ISNULL(MEN4.Caption + ' -&gt; ','') +
                ISNULL(MEN3.Caption + ' -&gt; ','') +
                ISNULL(MEN2.Caption + ' -&gt; ','') +
                ISNULL(MEN1.Caption + ' -&gt; ','') +
                ISNULL(MEN0.Caption,''),
         Modulname = MOD2.Name,
         ModulID$ = CLA.ModulID
  FROM   XClass CLA
         INNER JOIN XMenuItem MEN0 ON MEN0.ClassName = CLA.ClassName
         LEFT JOIN XMenuItem MEN1 ON MEN1.MenuItemID = MEN0.ParentMenuItemID AND MEN1.ParentMenuItemID IS NOT NULL
         LEFT JOIN XMenuItem MEN2 ON MEN2.MenuItemID = MEN1.ParentMenuItemID AND MEN2.ParentMenuItemID IS NOT NULL
         LEFT JOIN XMenuItem MEN3 ON MEN3.MenuItemID = MEN2.ParentMenuItemID AND MEN3.ParentMenuItemID IS NOT NULL
         LEFT JOIN XMenuItem MEN4 ON MEN4.MenuItemID = MEN3.ParentMenuItemID AND MEN4.ParentMenuItemID IS NOT NULL
         LEFT JOIN XMenuItem MEN5 ON MEN5.MenuItemID = MEN4.ParentMenuItemID AND MEN5.ParentMenuItemID IS NOT NULL
         LEFT JOIN XModul    MOD2 ON MOD2.ModulID = CLA.ModulID

  UNION ALL

  SELECT Modul = ISNULL(MOD2.ShortName,'-'),
         InternerName = CLA.ClassName,
         Typ = 'Dialog',
         Pfad = 'Aufruf via ' + ISNULL(REF.ClassName,'?'),
         Modulname = MOD2.Name,
         ModulID$ = CLA.ModulID
  FROM   XClass CLA
         LEFT JOIN XMenuItem       MEN  ON MEN.ClassName = CLA.ClassName
         INNER JOIN XClassReference REF  ON REF.ClassName_Ref = CLA.ClassName
         LEFT JOIN XModul          MOD2 ON MOD2.ModulID = CLA.ModulID  WHERE  BaseType LIKE '%Dialog%' AND
         MEN.MenuItemID IS NULL) T

WHERE T.Modul NOT IN ('NV','FIB')
--- AND InternerName LIKE '%' + {edtSucheClassName} + '%'
--- AND ModulID$ = {edtSucheModul}

ORDER BY CASE WHEN Modul = '-' THEN 1 ELSE 0 END, Modul,InternerName</value>
  </data>
  <assembly alias="System.Drawing" name="System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="xDocument.Properties.Buttons" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        iVBORw0KGgoAAAANSUhEUgAAAAwAAAAQCAYAAAAiYZ4HAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8
        YQUAAAAgY0hSTQAAeiYAAICEAAD6AAAAgOgAAHUwAADqYAAAOpgAABdwnLpRPAAAAF1JREFUOE9jZAAC
        Y2Pj/yAaGzh79iwjhjhIw///MzGwmJjYfxDGqSEtjeE/MgYpBhmEoYmQDSANKM7GpQHZmVg1oDsJxgdp
        pI4N2EIKJjbqJLIiDqSJEMaVovGKAwBnM3PWBP8PfwAAAABJRU5ErkJggg==
</value>
  </data>
</root>
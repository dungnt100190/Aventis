<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <metadata name="qryQuery.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>17, 17</value>
  </metadata>
  <data name="qryQuery.SelectStatement" xml:space="preserve">
    <value>-- listet/löscht alle pro Personen mit mehrfach erfassten Beziehungen
DECLARE @LanguageCode INT;
SET @LanguageCode = {0};

declare @Loeschen bit

set @Loeschen = 0
---  set @Loeschen = {edtLoeschen}

declare @Correct table
(BaPersonID1           int,
 BaPersonID2           int,
 Count                  int,
 MaxBaPersonRelationID int)


insert @Correct
select BaPersonID1 = case when BaPersonID_1 &lt;= BaPersonID_2
                      then BaPersonID_1
                      else BaPersonID_2
                      end,
       BaPersonID2 = case when BaPersonID_1 &lt;= BaPersonID_2
                      then BaPersonID_2
                      else BaPersonID_1
                      end,
       Count(*),
       max(BaPerson_RelationID)
from   BaPerson_Relation
group by
       case when BaPersonID_1 &lt;= BaPersonID_2
       then BaPersonID_1
       else BaPersonID_2
       end,
       case when BaPersonID_1 &lt;= BaPersonID_2
       then BaPersonID_2
       else BaPersonID_1
       end
having count(*) &gt; 1

union all

select BaPersonID1 = BaPersonID_1,
       BaPersonID2 = BaPersonID_2,
       1,
       -1
from   dbo.BaPerson_Relation WITH (READUNCOMMITTED)
where BaPersonID_1 = BaPersonID_2


if @Loeschen = 1 begin
  delete DPR
  from   dbo.BaPerson_Relation DPR WITH (READUNCOMMITTED)
         inner join @Correct TMP on ((TMP.BaPersonID1 = DPR.BaPersonID_1 and TMP.BaPersonID2 = DPR.BaPersonID_2) or
                                     (TMP.BaPersonID1 = DPR.BaPersonID_2 and TMP.BaPersonID2 = DPR.BaPersonID_1)) and
                                    TMP.MaxBaPersonRelationID &lt;&gt; DPR.BaPerson_RelationID

  select Sort$ = 0,
         Person1 = PRS1.Name + isNull(', ' + PRS1.Vorname,''),
         Person2 = PRS2.Name + isNull(', ' + PRS2.Vorname,''),
         Anzahl = TMP.Count
  from   @Correct TMP
         inner join dbo.BaPerson PRS1 WITH (READUNCOMMITTED) on PRS1.BaPersonID = TMP.BaPersonID1
         inner join dbo.BaPerson PRS2 WITH (READUNCOMMITTED) on PRS2.BaPersonID = TMP.BaPersonID2
  union
  select 1, dbo.fnGetMLTextFromName('CtlQueryAdmDoppeltErfassteBeziehungen', 'TotalGeloeschteBeziehungen', @LanguageCode), null, @@RowCount
  order by 1,2,3 desc
end else begin
  select Sort$ = 0,
         Person1 = PRS1.Name + isNull(', ' + PRS1.Vorname,''),
         Person2 = PRS2.Name + isNull(', ' + PRS2.Vorname,''),
         Anzahl = TMP.Count
  from   @Correct TMP
         inner join dbo.BaPerson PRS1 WITH (READUNCOMMITTED) on PRS1.BaPersonID = TMP.BaPersonID1
         inner join dbo.BaPerson PRS2 WITH (READUNCOMMITTED) on PRS2.BaPersonID = TMP.BaPersonID2
  union
  select 1, dbo.fnGetMLTextFromName('CtlQueryAdmDoppeltErfassteBeziehungen', 'AnzahlDoppeltErfassteBeziehungen', @LanguageCode), null, (select count(*) from @Correct)
  order by 1,2,3 desc
end</value>
  </data>
</root>
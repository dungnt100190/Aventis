<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <metadata name="qryQuery.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>17, 17</value>
  </metadata>
  <data name="qryQuery.SelectStatement" xml:space="preserve">
    <value>DECLARE 
  @DatumVon DATETIME,
  @DatumBis DATETIME,      
  @InklusiveEinmalige BIT,
  @Forderungsart INT,
  @SumForderungenEinmalig MONEY,
  @SumZahlungenEinmalig MONEY,
  @SumForderungenPeriodisch MONEY,
  @SumZahlungenPeriodisch MONEY,
  @SumForderungen MONEY

SET @DatumVon = '01.01.1900'
SET @DatumBis = DATEADD(DAY, 1, GETDATE()) -- up to and including today
SET @InklusiveEinmalige = 0
SET @Forderungsart = null
SET @SumForderungenEinmalig = 0
SET @SumZahlungenEinmalig = 0

--- SET @InklusiveEinmalige = {edtInklEinmalige}
--- SET @DatumVon = {edtDatumVon}
--- SET @DatumBis = {edtDatumBis}
--- SET @Forderungsart = {edtForderungsart}

SET @DatumVon = CONVERT(DATETIME, @DatumVon, 104)
SET @DatumBis = CONVERT(DATETIME, @DatumBis, 104)

DECLARE @tspGetKontoauszug TABLE (
  tspGetKontoauszugID int IDENTITY(1,1) NOT NULL,
  KbBuchungID     int,
  Typ			  varchar(50),
  BelegNr		  int,
  Datum           datetime,
  DatumForderung  datetime,
  Glaeubiger      varchar(100), 
  Schuldner       varchar(100), 
  [Text]          varchar(200),
  BetragSoll      money,
  BetragHaben     money,
  SollKto		  varchar(10), 
  HabenKto		  varchar(10),
  Saldo           money,
  KbOpAusgleichID int,
  BaPersonID	  int,
  FaLeistungID    int,
  Einmalig        bit,
  Einnahmen       bit,
  Bemerkung       varchar(500)
  PRIMARY KEY(tspGetKontoauszugID)
)

INSERT INTO @tspGetKontoauszug 
EXEC spIkGetKontoauszug @Forderungsart, null, null, null, @DatumVon, @DatumBis, NULL, NULL, @InklusiveEinmalige, 0, 0, 0

SELECT  @SumForderungenEinmalig = ISNULL(SUM(CASE WHEN T.HabenKto IS NULL THEN T.BetragSoll ELSE -T.BetragSoll END), 0)
FROM @tspGetKontoauszug T 
	LEFT JOIN dbo.FaLeistung LEI WITH (READUNCOMMITTED) ON LEI.FaLeistungID = T.FaLeistungID
	LEFT JOIN dbo.FaLeistungArchiv LAR WITH (READUNCOMMITTED) ON LAR.FaLeistungID = LEI.FaLeistungID
	LEFT JOIN dbo.XUser USR WITH (READUNCOMMITTED) ON USR.UserID = LEI.UserID 
WHERE T.Einmalig = 1
---  AND (LAR.FaLeistungID IS NULL OR {edtInklArchivierte} = 1) -- nur NICHT archivierte OR archivierte explizit verlangt
---  AND (LEI.DatumBis IS NULL OR {edtInklAbgeschlossene} = 1) -- nur offene OR geschlossene explizit verlangt
---  AND USR.UserID = {edtSAR_ID.LookupID}
---  AND LEI.FaProzessCode = {edtInkassoTyp}
---  AND LEI.EroeffnungsGrundCode = {edtInkassoTypUnterart}
---  AND LEI.IkLeistungStatusCode = {edtInkassofallStatus}

SELECT  @SumForderungenPeriodisch = ISNULL(SUM(T.BetragSoll), 0)
FROM @tspGetKontoauszug T 
	LEFT JOIN dbo.FaLeistung LEI WITH (READUNCOMMITTED) ON LEI.FaLeistungID = T.FaLeistungID
	LEFT JOIN dbo.FaLeistungArchiv LAR WITH (READUNCOMMITTED) ON LAR.FaLeistungID = LEI.FaLeistungID
	LEFT JOIN dbo.XUser USR WITH (READUNCOMMITTED) ON USR.UserID = LEI.UserID 
WHERE T.Einmalig = 0
---  AND (LAR.FaLeistungID IS NULL OR {edtInklArchivierte} = 1) -- nur NICHT archivierte OR archivierte explizit verlangt
---  AND (LEI.DatumBis IS NULL OR {edtInklAbgeschlossene} = 1) -- nur offene OR geschlossene explizit verlangt
---  AND USR.UserID = {edtSAR_ID.LookupID}
---  AND LEI.FaProzessCode = {edtInkassoTyp}
---  AND LEI.EroeffnungsGrundCode = {edtInkassoTypUnterart}
---  AND LEI.IkLeistungStatusCode = {edtInkassofallStatus}

SELECT  @SumZahlungenPeriodisch = ISNULL(SUM(T.BetragHaben), 0)
FROM @tspGetKontoauszug T 
	LEFT JOIN dbo.FaLeistung LEI WITH (READUNCOMMITTED) ON LEI.FaLeistungID = T.FaLeistungID
	LEFT JOIN dbo.FaLeistungArchiv LAR WITH (READUNCOMMITTED) ON LAR.FaLeistungID = LEI.FaLeistungID
	LEFT JOIN dbo.XUser USR WITH (READUNCOMMITTED) ON USR.UserID = LEI.UserID 
WHERE T.Einmalig is NULL
---  AND (LAR.FaLeistungID IS NULL OR {edtInklArchivierte} = 1) -- nur NICHT archivierte OR archivierte explizit verlangt
---  AND (LEI.DatumBis IS NULL OR {edtInklAbgeschlossene} = 1) -- nur offene OR geschlossene explizit verlangt
---  AND USR.UserID = {edtSAR_ID.LookupID}
---  AND LEI.FaProzessCode = {edtInkassoTyp}
---  AND LEI.EroeffnungsGrundCode = {edtInkassoTypUnterart}
---  AND LEI.IkLeistungStatusCode = {edtInkassofallStatus}

IF @InklusiveEinmalige = 1
BEGIN
    -- Periodische und Einmalige
    SET @SumForderungen = @SumForderungenPeriodisch + @SumForderungenEinmalig
    SELECT 
      [Inkassoquote] = CASE @SumForderungen
        WHEN $0 THEN $100
        ELSE @SumZahlungenPeriodisch * 100.0 / @SumForderungen
      END,
      [periodische Forderungen] = @SumForderungenPeriodisch,
      [einmalige Forderungen] = @SumForderungenEinmalig,
      [Total Forderungen] = @SumForderungen,
      [Zahlungen] = @SumZahlungenPeriodisch + @SumZahlungenEinmalig
END ELSE BEGIN
    -- nur Periodische
    SELECT
      [Inkassoquote] = CASE @SumForderungenPeriodisch
        WHEN $0 THEN $100
        ELSE @SumZahlungenPeriodisch * 100.0 / @SumForderungenPeriodisch
      END,
      [periodische Forderungen] = @SumForderungenPeriodisch,
      [Zahlungen] = @SumZahlungenPeriodisch
END
</value>
  </data>
  <data name="ctlGotoFallStelleBI.BaPersonID" mimetype="application/x-microsoft.net.object.binary.base64">
    <value>
        AAEAAAD/////AQAAAAAAAAAEAQAAAB9TeXN0ZW0uVW5pdHlTZXJpYWxpemF0aW9uSG9sZGVyAwAAAARE
        YXRhCVVuaXR5VHlwZQxBc3NlbWJseU5hbWUBAAEICgIAAAAGAgAAAAAL
</value>
  </data>
  <metadata name="qryDetails.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>119, 17</value>
  </metadata>
  <data name="qryDetails.SelectStatement" xml:space="preserve">
    <value>DECLARE 
  @DatumVon DATETIME,
  @DatumBis DATETIME,      
  @InklusiveEinmalige BIT,
  @Forderungsart INT

SET @DatumVon = '01.01.1900'
SET @DatumBis = DATEADD(DAY, 1, GETDATE()) -- up to and including today
SET @InklusiveEinmalige = 0
SET @Forderungsart = null

--- SET @InklusiveEinmalige = {edtInklEinmalige}
--- SET @DatumVon = {edtDatumVon}
--- SET @DatumBis = {edtDatumBis}
--- SET @Forderungsart = {edtForderungsart}

SET @DatumVon = CONVERT(DATETIME, @DatumVon, 104)
SET @DatumBis = CONVERT(DATETIME, @DatumBis, 104)

DECLARE @tspGetKontoauszugDet TABLE (
  tspGetKontoauszugDetID int IDENTITY(1,1) NOT NULL,
  KbBuchungID     int,
  Typ			  varchar(50),
  BelegNr		  int,
  Datum           datetime,
  DatumForderung  datetime,
  Glaeubiger      varchar(100), 
  Schuldner       varchar(100), 
  [Text]          varchar(200),
  BetragSoll      money,
  BetragHaben     money,
  SollKto		  varchar(10), 
  HabenKto		  varchar(10),
  Saldo           money,
  KbOpAusgleichID int,
  BaPersonID	  int,
  FaLeistungID    int,
  Einmalig        bit,
  Einnahmen       bit,
  Bemerkung       varchar(500)
  PRIMARY KEY(tspGetKontoauszugDetID)
)

INSERT INTO @tspGetKontoauszugDet
EXEC spIkGetKontoauszug @Forderungsart, null, null, null, @DatumVon, @DatumBis, NULL, NULL, @InklusiveEinmalige, 0, 0, 0

SELECT Typ, 
    BelegNr,
    Datum,
    [Text],
    Forderung = BetragSoll,
    Zahlung = BetragHaben,
    SollKtoNr = SollKto,
    HabenKtoNr = HabenKto,
    Schuldner,
    [Gläubiger] = Glaeubiger,
    BaPersonID$ = T.BaPersonID
FROM @tspGetKontoauszugDet T 
  LEFT JOIN dbo.FaLeistung LEI WITH (READUNCOMMITTED) ON LEI.FaLeistungID = T.FaLeistungID
  LEFT JOIN dbo.FaLeistungArchiv LAR WITH (READUNCOMMITTED) ON LAR.FaLeistungID = LEI.FaLeistungID
  LEFT JOIN dbo.XUser USR WITH (READUNCOMMITTED) ON USR.UserID = LEI.UserID  
WHERE LEI.ModulID = 4
AND LEI.FaProzessCode &lt;&gt; 400
---  AND (LAR.FaLeistungID IS NULL OR {edtInklArchivierte} = 1) -- nur NICHT archivierte OR archivierte explizit verlangt
---  AND (LEI.DatumBis IS NULL OR {edtInklAbgeschlossene} = 1) -- nur offene OR geschlossene explizit verlangt
---  AND USR.UserID = {edtSAR_ID.LookupID}
---  AND LEI.FaProzessCode = {edtInkassoTyp}
---  AND LEI.EroeffnungsGrundCode = {edtInkassoTypUnterart}
---  AND LEI.IkLeistungStatusCode = {edtInkassofallStatus}
ORDER BY Schuldner, Datum</value>
  </data>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="edtDatumBis.Properties.Buttons" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        iVBORw0KGgoAAAANSUhEUgAAAAwAAAAQCAYAAAAiYZ4HAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8
        YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAABRSURBVDhPY2AAAmNj4//EYJBaMAApRqbhErjkiDEdZiiK
        Dcgmo7NxamhoYAA7DwSQ2Vg1gBTAFKHT1NGA7AyibBhuGoiKB5Jimpj0hM9AnHIA7aiPJlUTWpwAAAAA
        SUVORK5CYII=
</value>
  </data>
  <data name="edtDatumVon.Properties.Buttons" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        iVBORw0KGgoAAAANSUhEUgAAAAwAAAAQCAYAAAAiYZ4HAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8
        YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAABRSURBVDhPY2AAAmNj4//EYJBaMAApRqbhErjkiDEdZiiK
        Dcgmo7NxamhoYAA7DwSQ2Vg1gBTAFKHT1NGA7AyibBhuGoiKB5Jimpj0hM9AnHIA7aiPJlUTWpwAAAAA
        SUVORK5CYII=
</value>
  </data>
</root>
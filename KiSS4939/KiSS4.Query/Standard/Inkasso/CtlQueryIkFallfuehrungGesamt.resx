<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <metadata name="qryQuery.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>17, 17</value>
  </metadata>
  <data name="qryQuery.SelectStatement" xml:space="preserve">
    <value>-------------------------------------------------------------------------------
-- Declare and init var
-------------------------------------------------------------------------------
DECLARE @UserID_SAR INT;
DECLARE @DatumVon DATETIME;
DECLARE @DatumBis DATETIME;
DECLARE @AbschlussImZeitraum BIT;
DECLARE @InkassoTyp INT;
DECLARE @InkassoTypUnterart INT;
DECLARE @StatusCode INT;
DECLARE @VerjaehrungVon DATETIME;
DECLARE @VerjaehrungBis DATETIME;
DECLARE @IkFaelleOrGlaeubiger INT;

DECLARE @ShowIkFaelle BIT;
DECLARE @ShowGlaeubiger BIT;

DECLARE @SucheInkassoVonBis VARCHAR(100);
DECLARE @SucheVerjaehrungVonBis VARCHAR(100);

DECLARE @Abschlussgrund INT;

DECLARE @IkLeistung TABLE(
  ID INT IDENTITY (1, 1) NOT NULL,
  LeiFaLeistungID INT NOT NULL,
  LeiBaPersonID INT,
  LeiFaProzessCode INT,
  LeiBezeichnung VARCHAR(50),
  LeiSchuldnerBaPersonID INT,
  SchuldnerNameVorname VARCHAR(202),
  SchuldnerGeburtsdatum DATETIME,
  SchuldnerNationalitaet VARCHAR(200),
  SchuldnerHeimatort VARCHAR(110),
  SchuldnerWohnsitzPLZ VARCHAR(10),
  SchuldnerWohnsitzOrt VARCHAR(50),
  SchuldnerWohnsitzKanton VARCHAR(10),
  SchuldnerWohnsitzLand VARCHAR(200),
  LeiIkAufenthaltsartCode INT,
  LeiDatumVon DATETIME,
  LeiDatumBis DATETIME,
  LeiAbschlussGrundCode INT,
  LeiInkassoTyp VARCHAR(250),
  LeiUnterart VARCHAR(250),
  LeiIkVerjaehrungAm DATETIME,
  LeiBemuehung VARCHAR(250),
  LeiIkSchuldnerStatusCode INT,
  LeiStatus VARCHAR(250),
  LeiIkSchuldnerMahnen BIT,
  LeiIkIstRentenbezueger BIT,
  LeiIkHatUnterstuetzung BIT,
  LeiIkErreichungsGradCode INT,
  LeiIkEinnahmenQuoteCode INT,
  RttIkRechtstitelID INT,
  RttBaPersonID INT,
  RttRechtstitelInfo VARCHAR(2048),
  RttIkIndexTypCode INT,
  RttIndexStandVom DATETIME,
  RttIkIndexRundenCode INT,
  RttElterlicheSorge VARCHAR(250),
  RttIkBezugKinderzulagenCode INT,
  RttElterlicheSorgeBemerkung VARCHAR(200),
  RttRechtstitelAktuell VARCHAR(200),
  RttRechtstitelDatumVon DATETIME,
  RttRechtstitelRechtskraeftig DATETIME,
  RttIkRechtstitelGueltigBis DATETIME,
  LeiIkRueckerstattungTypCode INT,
  LeiIkForderungTitelCode INT,
  LeiIkDatumForderungstitel DATETIME,
  LeiIkDatumRechtskraft DATETIME,
  Archiv VARCHAR(1),
  UsrShortName VARCHAR(10),
  UsrNameVorname VARCHAR(202),
  ZeitraumInkasso VARCHAR(30),
  ZeitraumVerjaehrung VARCHAR(30)
);

SET @AbschlussImZeitraum = 0;
SET @ShowIkFaelle = 0;
SET @ShowGlaeubiger = 0;

---SET @UserID_SAR = {edtUserID.LookupID};
---SET @DatumVon = {edtInkassoVon};
---SET @DatumBis = {edtInkassoBis};
---SET @AbschlussImZeitraum = {edtAbschlussImZeitraum};
---SET @InkassoTyp = {edtInkassoTyp};
---SET @InkassoTypUnterart = {edtInkassoTypUnterart};
---SET @StatusCode = {edtInkassoStatus};
---SET @VerjaehrungVon = {edtVerjaehrungVon};
---SET @VerjaehrungBis = {edtVerjaehrungBis};
---SET @IkFaelleOrGlaeubiger = {edtIkFaelleOrGlaeubiger};
---SET @Abschlussgrund = {edtAbschlussgrund};

SELECT @SucheInkassoVonBis = dbo.fnGetZeitraumString(@DatumVon, @DatumBis);
SELECT @SucheVerjaehrungVonBis = dbo.fnGetZeitraumString(@VerjaehrungVon, @VerjaehrungBis);

IF @IkFaelleOrGlaeubiger IS NULL
BEGIN
  SET @ShowIkFaelle = 1;
  SET @ShowGlaeubiger = 1;
END
ELSE IF @IkFaelleOrGlaeubiger = 1
BEGIN 
  SET @ShowIkFaelle = 1;
END
ELSE IF @IkFaelleOrGlaeubiger = 2
BEGIN 
  SET @ShowGlaeubiger = 1;
END;

-------------------------------------------------------------------------------
-- Common work
-------------------------------------------------------------------------------
INSERT INTO @IkLeistung(LeiFaLeistungID, LeiBaPersonID, LeiFaProzessCode, LeiBezeichnung, LeiSchuldnerBaPersonID, 
                        SchuldnerNameVorname, SchuldnerGeburtsdatum, SchuldnerNationalitaet, SchuldnerHeimatort, 
                        SchuldnerWohnsitzPLZ, SchuldnerWohnsitzOrt, SchuldnerWohnsitzKanton, SchuldnerWohnsitzLand,
                        LeiIkAufenthaltsartCode, LeiDatumVon, LeiDatumBis, LeiAbschlussGrundCode, LeiInkassoTyp, LeiUnterart, 
                        LeiIkVerjaehrungAm, LeiBemuehung, LeiIkSchuldnerStatusCode, LeiStatus, LeiIkSchuldnerMahnen, LeiIkIstRentenbezueger, 
                        LeiIkHatUnterstuetzung, LeiIkErreichungsGradCode, LeiIkEinnahmenQuoteCode, 
                        RttIkRechtstitelID, RttBaPersonID, RttRechtstitelInfo, RttIkIndexTypCode, RttIndexStandVom, RttIkIndexRundenCode, 
                        RttElterlicheSorge, RttIkBezugKinderzulagenCode, RttElterlicheSorgeBemerkung, RttRechtstitelAktuell, 
                        RttRechtstitelDatumVon, RttRechtstitelRechtskraeftig, RttIkRechtstitelGueltigBis, 
                        LeiIkRueckerstattungTypCode, LeiIkForderungTitelCode, LeiIkDatumForderungstitel, LeiIkDatumRechtskraft, 
                        Archiv, UsrShortName, UsrNameVorname, ZeitraumInkasso, ZeitraumVerjaehrung)
  SELECT 
    LeiFaLeistungID              = LEI.FaLeistungID,
    LeiBaPersonID                = LEI.BaPersonID,
    LeiFaProzessCode             = LEI.FaProzessCode,
    LeiBezeichnung               = LEI.Bezeichnung,
    LeiSchuldnerBaPersonID       = LEI.SchuldnerBaPersonID,
    SchuldnerNameVorname         = PRS.NameVorname,
    SchuldnerGeburtsdatum        = PRS.Geburtsdatum,
    SchuldnerNationalitaet       = PRS.Nationalitaet,
    SchuldnerHeimatort           = PRS.Heimatort,
    SchuldnerWohnsitzPLZ         = PRS.WohnsitzPLZ,
    SchuldnerWohnsitzOrt         = PRS.WohnsitzOrt,
    SchuldnerWohnsitzKanton      = PRS.WohnsitzKanton,
    SchuldnerWohnsitzLand        = PRS.WohnsitzLand,
    LeiIkAufenthaltsartCode      = LEI.IkAufenthaltsartCode,
    LeiDatumVon                  = LEI.DatumVon,
    LeiDatumBis                  = LEI.DatumBis,
    LeiAbschlussGrundCode        = LEI.AbschlussGrundCode,
    LeiInkassoTyp                = dbo.fnLOVText('FaProzess', LEI.FaProzessCode),
    LeiUnterart                  = dbo.fnLOVText('EroeffnungsGrund', LEI.EroeffnungsGrundCode),
    LeiIkVerjaehrungAm           = LEI.IkVerjaehrungAm,
    LeiBemuehung                 = dbo.fnLOVText('IkInkassoBemuehung', LEI.IkInkassoBemuehungCode),
    LeiIkSchuldnerStatusCode     = LEI.IkSchuldnerStatusCode,
    LeiStatus                    = dbo.fnLOVText('IkLeistungStatus', LEI.IkLeistungStatusCode),
    LeiIkSchuldnerMahnen         = LEI.IkSchuldnerMahnen,
    LeiIkIstRentenbezueger       = LEI.IkIstRentenbezueger,
    LeiIkHatUnterstuetzung       = LEI.IkHatUnterstuetzung,
    LeiIkErreichungsGradCode     = LEI.IkErreichungsGradCode,
    LeiIkEinnahmenQuoteCode      = LEI.IkEinnahmenQuoteCode,
    RttIkRechtstitelID           = RTT.IkRechtstitelID,
    RttBaPersonID                = RTT.BaPersonID,
    RttRechtstitelInfo           = RTT.RechtstitelInfo,
    RttIkIndexTypCode            = RTT.IkIndexTypCode,
    RttIndexStandVom             = RTT.IndexStandVom,
    RttIkIndexRundenCode         = RTT.IkIndexRundenCode,
    RttElterlicheSorge           = dbo.fnLOVText('IkElterlicheSorge', RTT.IkElterlicheSorgeCode),
    RttIkBezugKinderzulagenCode  = RTT.IkBezugKinderzulagenCode,
    RttElterlicheSorgeBemerkung  = RTT.ElterlicheSorgeBemerkung,
    RttRechtstitelAktuell        = dbo.fnLOVText('IkRechtstitelTyp', RTT.IkRechtstitelTypCode),
    RttRechtstitelDatumVon       = RTT.RechtstitelDatumVon,
    RttRechtstitelRechtskraeftig = RTT.RechtstitelRechtskraeftig,
    RttIkRechtstitelGueltigBis   = RTT.IkRechtstitelGueltigBis,
    LeiIkRueckerstattungTypCode  = LEI.IkRueckerstattungTypCode,
    LeiIkForderungTitelCode      = LEI.IkForderungTitelCode,
    LeiIkDatumForderungstitel    = LEI.IkDatumForderungstitel,
    LeiIkDatumRechtskraft        = LEI.IkDatumRechtskraft,
    Archiv                       = CASE WHEN EXISTS(SELECT TOP 1 1
                                                    FROM dbo.FaLeistungArchiv LEA WITH (READUNCOMMITTED)
                                                    WHERE LEA.FaLeistungID = LEI.FaLeistungID)
                                        THEN 'x'
                                        ELSE ''
                                   END,
    UsrShortName                = USR.ShortName,
    UsrNameVorname              = USR.NameVorname,
    ZeitraumInkasso             = @SucheInkassoVonBis,
    ZeitraumVerjaehrung         = @SucheVerjaehrungVonBis
  FROM dbo.FaLeistung             LEI  WITH (READUNCOMMITTED)
    INNER JOIN dbo.vwPerson       PRS  WITH (READUNCOMMITTED) ON PRS.BaPersonID = LEI.SchuldnerBaPersonID
    INNER JOIN dbo.vwUser         USR  WITH (READUNCOMMITTED) ON USR.UserID = LEI.UserID
    LEFT  JOIN dbo.IkRechtstitel  RTT  WITH (READUNCOMMITTED) ON RTT.IkRechtstitelID = (SELECT TOP 1 IkRechtstitelID
                                                                                        FROM dbo.IkRechtstitel WITH (READUNCOMMITTED)
                                                                                        WHERE FaLeistungID = LEI.FaLeistungID
                                                                                        ORDER BY RechtstitelDatumVon)
  WHERE LEI.ModulID = 4 -- Inkasso
    AND PRS.Testperson = 0
    AND LEI.FaProzessCode &lt;&gt; 400 -- keine Abklärung
    AND (@UserID_SAR IS NULL OR @UserID_SAR = USR.UserID)
    AND (@InkassoTyp IS NULL OR @InkassoTyp = LEI.FaProzessCode)
    AND (@InkassoTypUnterart IS NULL OR @InkassoTypUnterart = LEI.EroeffnungsGrundCode )
    AND (@StatusCode IS NULL OR @StatusCode= LEI.IkLeistungStatusCode)
    AND (ISNULL(@DatumBis, '99991231') &gt;= LEI.DatumVon AND ISNULL(@DatumVon, '17530101') &lt;= ISNULL(LEI.DatumBis, '99991231'))
    AND (@DatumVon IS NOT NULL OR @DatumBis IS NOT NULL OR LEI.DatumBis IS NULL OR @Abschlussgrund IS NOT NULL) -- ohne Datumseingabe nur aktive Fälle anzeigen
    AND (@AbschlussImZeitraum = 0 OR (LEI.DatumBis IS NOT NULL AND LEI.DatumBis BETWEEN @DatumVon AND @DatumBis)) -- nur während Zeitraum abgeschlossene anzeigen
    AND (@VerjaehrungVon IS NULL AND @VerjaehrungBis IS NULL OR LEI.IkVerjaehrungAm BETWEEN ISNULL(@VerjaehrungVon, '17530101') AND ISNULL(@VerjaehrungBis, '99991231'))
    AND (@Abschlussgrund IS NULL OR LEI.AbschlussgrundCode = @Abschlussgrund);
    
    
-------------------------------------------------------------------------------
-- IK-Fälle
-------------------------------------------------------------------------------
IF @ShowIkFaelle = 1
BEGIN
  SELECT 
    [BaPersonID$]    = IKL.LeiBaPersonID,
    [FaLeistungID$]  = IKL.LeiFaLeistungID,
    [FaProzessCode$] = IKL.LeiFaProzessCode,
    
    Bezeichnung              = IKL.LeiBezeichnung,
    [ID Schuldner]           = IKL.LeiSchuldnerBaPersonID,
    Schuldner                = IKL.SchuldnerNameVorname,
    [Geb.datum Schuldner]    = IKL.SchuldnerGeburtsdatum,
    [Nationalität Schuldner] = IKL.SchuldnerNationalitaet,
    [Heimatort Schuldner]    = IKL.SchuldnerHeimatort,
    Aufenthaltsart           = dbo.fnLOVText('IkAufenthaltsart', IKL.LeiIkAufenthaltsartCode),
    [PLZ Schuldner]          = IKL.SchuldnerWohnsitzPLZ,
    [Ort Schuldner]          = IKL.SchuldnerWohnsitzOrt,
    [Kanton Schuldner]       = IKL.SchuldnerWohnsitzKanton,
    [Land Schuldner]         = IKL.SchuldnerWohnsitzLand,
    [Datum von]              = IKL.LeiDatumVon,
    [Datum bis]              = IKL.LeiDatumBis,
    Abschlussgrund           = dbo.fnLOVText('AbschlussGrund', IKL.LeiAbschlussGrundCode),
    [Inkasso-Typ]            = IKL.LeiInkassoTyp,
    Unterart                 = IKL.LeiUnterart,
    [Nächste Verjährung]     = IKL.LeiIkVerjaehrungAm,
    [Schuldner Status]       = dbo.fnLOVText('IkSchuldnerStatus', IKL.LeiIkSchuldnerStatusCode),
    [Status]                 = IKL.LeiStatus,
    [Bemühungen]             = IKL.LeiBemuehung,
    [Schuldner mahnen]       = IKL.LeiIkSchuldnerMahnen,
    [Schuldner ist Rentenbezüger] = IKL.LeiIkIstRentenbezueger,
    [Schuldner wird von fremdem Sozialdienst unterstützt] = IKL.LeiIkHatUnterstuetzung,
    [Begründung der Quote]        = dbo.fnLOVText('IkErreichungsGrad', IKL.LeiIkErreichungsGradCode),
    [Quote]                       = dbo.fnLOVText('IkEinnahmenQuote', IKL.LeiIkEinnahmenQuoteCode),
    [Info/Gericht/Rechtstitel]    = IKL.RttRechtstitelInfo,
    [Indexierung basierend auf]   = dbo.fnLOVText('IkIndexTyp', IKL.RttIkIndexTypCode),
    [Indexstand vom]              = IKL.RttIndexStandVom,
    Rundungsformel                = dbo.fnLOVText('IkIndexRunden', IKL.RttIkIndexRundenCode),
    [Elterliche Sorge]            = IKL.RttElterlicheSorge,
    [Bezung Kinderzulagen]        = dbo.fnLOVText('IkBezugKinderzulagen', IKL.RttIkBezugKinderzulagenCode),
    [Gesetzlicher Vertreter]      = PRS.NameVorname,
    [Elterliche Sorge, elterliche Vertretung] = IKL.RttElterlicheSorgeBemerkung,
    [Rechtstitel aktuell]                     = IKL.RttRechtstitelAktuell,
    [Rechtstitel von]                         = IKL.RttRechtstitelDatumVon,
    [Rechtstitel rechtskräftig ab]            = IKL.RttRechtstitelRechtskraeftig,
    [Rückerstattung]                          = dbo.fnLOVText('IkRueckerstattungTyp', IKL.LeiIkRueckerstattungTypCode),
    [Forderungstitel]                         = dbo.fnLOVText('IkForderungTitel', IKL.LeiIkForderungTitelCode),
    [Erstellung Forderungstitel]              = IKL.LeiIkDatumForderungstitel,
    [Rechtskraft Forderungstitel]             = IKL.LeiIkDatumRechtskraft,
    Archiv = IKL.Archiv,
    [MA-Kürzel]           = IKL.UsrShortName,
    [Mitarbeiter]         = IKL.UsrNameVorname,
    [Zeitraum Inkasso]    = IKL.ZeitraumInkasso,
    [Zeitraum Verjährung] = IKL.ZeitraumVerjaehrung
  FROM @IkLeistung IKL
    LEFT  JOIN dbo.vwPersonSimple PRS WITH (READUNCOMMITTED) ON PRS.BaPersonID = IKL.RttBaPersonID -- Gesetzlicher Vertreter
  ORDER BY IKL.SchuldnerNameVorname;
END 
ELSE
BEGIN
  SELECT [BaPersonID$] = NULL, 1;
END;

-------------------------------------------------------------------------------
-- Gläubiger
-------------------------------------------------------------------------------
IF @ShowGlaeubiger = 1
BEGIN
  SELECT 
    [BaPersonID$]    = IKL.LeiBaPersonID,
    [FaLeistungID$]  = IKL.LeiFaLeistungID,
    [FaProzessCode$] = IKL.LeiFaProzessCode,

    [ID Gläubiger]                 = GLB.BaPersonID,
    [Gläubiger]                    = PRS.NameVorname,
    [Antrag stellende Person]      = ANT.NameVorname,
    [Geb.datum Gläubiger]          = PRS.Geburtsdatum,
    [Nationalität Gläubiger]       = PRS.Nationalitaet,
    [Heimatort Gläubiger]          = PRS.Heimatort,
    [PLZ Gläubiger]                = PRS.WohnsitzPLZ,
    [Ort Gläubiger]                = PRS.WohnsitzOrt,
    [Kanton Gläubiger]             = PRS.WohnsitzKanton,
    [Land Gläubiger]               = PRS.WohnsitzLand,
    [ID Schuldner]                 = IKL.LeiSchuldnerBaPersonID,
    Schuldner                      = IKL.SchuldnerNameVorname,
    [Inkasso-Typ]                  = IKL.LeiInkassoTyp,
    Unterart                       = IKL.LeiUnterart,
    [Nächste Verjährung]           = IKL.LeiIkVerjaehrungAm,
    [IK-Nr.]                       = IKL.LeiFaLeistungID,
    Bezeichnung                    = IKL.LeiBezeichnung,
    [Datum von]                    = IKL.LeiDatumVon,
    [Datum bis]                    = IKL.LeiDatumBis,
    [Status]                       = IKL.LeiStatus,
    [Bemühungen]                   = IKL.LeiBemuehung,
    [Rechtstitel aktuell]          = IKL.RttRechtstitelAktuell,
    [Rechtstitel von]              = IKL.RttRechtstitelDatumVon,
    [Rechtstitel rechtskräftig ab] = IKL.RttRechtstitelRechtskraeftig,
    [Rechtstitel gültig bis]       = IKL.RttIkRechtstitelGueltigBis,
    [Elterliche Sorge]             = IKL.RttElterlicheSorge,
    Archiv                         = IKL.Archiv,
    [MA-Kürzel]                    = IKL.UsrShortName,
    [Mitarbeiter]                  = IKL.UsrNameVorname,
    [Zeitraum Inkasso]             = IKL.ZeitraumInkasso,
    [Zeitraum Verjährung]          = IKL.ZeitraumVerjaehrung
  FROM @IkLeistung              IKL
    INNER JOIN dbo.IkGlaeubiger GLB WITH (READUNCOMMITTED) ON GLB.FaLeistungID = IKL.LeiFaLeistungID OR GLB.IkRechtstitelID = IKL.RttIkRechtstitelID
    INNER JOIN dbo.vwPerson     PRS WITH (READUNCOMMITTED) ON PRS.BaPersonID = GLB.BaPersonID -- Gläubiger
     LEFT JOIN dbo.vwPerson     ANT WITH (READUNCOMMITTED) ON ANT.BaPersonID = GLB.BaPersonID_AntragStellendePerson -- Antrag stellende Person
  ORDER BY PRS.NameVorname;
END 
ELSE
BEGIN
  SELECT [BaPersonID$] = NULL, 2;
END;
</value>
  </data>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="edtInkassoBis.Properties.Buttons" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        iVBORw0KGgoAAAANSUhEUgAAAAwAAAAQCAYAAAAiYZ4HAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8
        YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAABRSURBVDhPY2AAAmNj4//EYJBaMAApRqbhErjkiDEdZiiK
        Dcgmo7NxamhoYAA7DwSQ2Vg1gBTAFKHT1NGA7AyibBhuGoiKB5Jimpj0hM9AnHIA7aiPJlUTWpwAAAAA
        SUVORK5CYII=
</value>
  </data>
  <data name="edtInkassoVon.Properties.Buttons" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        iVBORw0KGgoAAAANSUhEUgAAAAwAAAAQCAYAAAAiYZ4HAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8
        YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAABRSURBVDhPY2AAAmNj4//EYJBaMAApRqbhErjkiDEdZiiK
        Dcgmo7NxamhoYAA7DwSQ2Vg1gBTAFKHT1NGA7AyibBhuGoiKB5Jimpj0hM9AnHIA7aiPJlUTWpwAAAAA
        SUVORK5CYII=
</value>
  </data>
  <data name="edtVerjaehrungBis.Properties.Buttons" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        iVBORw0KGgoAAAANSUhEUgAAAAwAAAAQCAYAAAAiYZ4HAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8
        YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAABRSURBVDhPY2AAAmNj4//EYJBaMAApRqbhErjkiDEdZiiK
        Dcgmo7NxamhoYAA7DwSQ2Vg1gBTAFKHT1NGA7AyibBhuGoiKB5Jimpj0hM9AnHIA7aiPJlUTWpwAAAAA
        SUVORK5CYII=
</value>
  </data>
  <data name="edtVerjaehrungVon.Properties.Buttons" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        iVBORw0KGgoAAAANSUhEUgAAAAwAAAAQCAYAAAAiYZ4HAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8
        YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAABRSURBVDhPY2AAAmNj4//EYJBaMAApRqbhErjkiDEdZiiK
        Dcgmo7NxamhoYAA7DwSQ2Vg1gBTAFKHT1NGA7AyibBhuGoiKB5Jimpj0hM9AnHIA7aiPJlUTWpwAAAAA
        SUVORK5CYII=
</value>
  </data>
  <metadata name="$this.TrayHeight" type="System.Int32, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
    <value>64</value>
  </metadata>
</root>
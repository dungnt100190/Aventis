<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <metadata name="qryQuery.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>17, 17</value>
  </metadata>
  <data name="qryQuery.SelectStatement" xml:space="preserve">
    <value>IF OBJECT_ID('tempdb..#TMP') IS NOT NULL 
    DROP Table #TMP

DECLARE @InkassoTyp                integer  -- null: alle, sonst LOV AiInkassoTyp_REPORT (identisch AiInkassoTyp)
DECLARE @InkassoTypUnterart        integer  -- null: alle, sonst LOV AiInkassofallUnterart
DECLARE @SAR_ID                    integer  -- UserID des SAR, der den Report aufruft
DECLARE @NurLaufendeBevorschussung bit
DECLARE @InkassofallStatus         integer  -- null: alle, 1: LaufENDe Beiträge, 2: Restanz
DECLARE @NurExtensive              bit
DECLARE @VerjaehrungVon            datetime -- null: nach unten offen (past unlimited)
DECLARE @VerjaehrungBis            datetime -- null: nach oben offen (future unlimited)
DECLARE @InklAbgeschlossene        bit
DECLARE @InklArchivierte           bit
DECLARE @Abschlussgrund            INT;

---SET @InkassoTyp = {edtInkassoTyp}
---SET @InkassoTypUnterart = {edtInkassoTypUnterart}
---SET @SAR_ID = {edtUserID.LookupID}
---SET @NurLaufendeBevorschussung = {edtNurLaufendeBevorschussung}
---SET @InkassofallStatus = {edtInkassofallStatus}
---SET @NurExtensive = {edtExtensiveFaelle}
---SET @VerjaehrungVon = {edtDatumVon}
---SET @VerjaehrungBis = {edtDatumBis}
---SET @InklAbgeschlossene = {edtAbgeschlosseneFaelle}
---SET @InklArchivierte = {edtArchivierteFaelle}
---SET @Abschlussgrund = {edtAbschlussgrund}

/*
  Erstellt durch     :  M. Weber
  Erstellt am        :  30.03.2003
  Version            :  3.0
  History            :  14. Juli, Portierung und Erweiterung fuer V3.0
                        März 2008: Portierung auf V4.0 durch R.Hesterberg/M.Boss (Report --&gt; Abfrage)
                        Mai  2008: Korrektur C.Käser
                        Nov  2008: Korrektur C.Käser (Ticket 3219)
*/

DECLARE @TODAY_NOTIME datetime
SET @TODAY_NOTIME = CONVERT(datetime, CONVERT(VARCHAR, current_timestamp, 112))

SELECT
  [Gläubiger]              = PRSG.NameVorname,
  Geburtsdatum             = PRSG.Geburtsdatum,
  Schuldner                = PRSS.NameVorname,
  [monatl. Betrag]         = POS.BetragAuszahlung,
  InkassoTyp               = dbo.fnLOVText('FaProzess', LST.FaProzessCode),
  Unterart                 = dbo.fnLOVText('EroeffnungsGrund', LST.EroeffnungsGrundCode),
  [Rückerstattungtyp]      = dbo.fnLOVText('IkRueckerstattungTyp', LST.IkRueckerstattungTypCode),
  Abschlussgrund           = dbo.fnLOVText('Abschlussgrund', LST.AbschlussgrundCode),
  VerjaehrungAm            = LST.IkVerjaehrungAm,
  InkassoFallName          = AIF.InkassoFallName, 
  Status                   = dbo.fnLOVText('IkLeistungStatus', LST.IkLeistungStatusCode),
  [Bemühung]               = dbo.fnLOVText('IkInkassoBemuehung', LST.IkInkassoBemuehungCode),
  [Elterliche Sorge]       = AIF.ElterlicheSorgeBemerkung,
  Archiv                   = CASE 
                               WHEN FFA.FaLeistungID is null THEN '' 
                               ELSE 'x' 
                             END,
  SAR                      = USR.LogonName ,
  SARName                  = USR.NameVorname,
  BaPersonID$              = LST.BaPersonID,
  FaLeistungID$            = LST.FaLeistungID,
  GlaeubigerPersonID$      = GLB.BaPersonID
INTO #TMP
FROM dbo.FaLeistung               LST WITH (READUNCOMMITTED)
  LEFT  JOIN dbo.IkRechtstitel    AIF WITH (READUNCOMMITTED) ON AIF.FaleistungID = LST.FaleistungID
  LEFT  JOIN dbo.IkGlaeubiger     GLB WITH (READUNCOMMITTED) ON (GLB.FaLeistungID = LST.FaLeistungID OR GLB.IkRechtstitelID = AIF.IkRechtstitelID)
  INNER JOIN dbo.vwUser           USR WITH (READUNCOMMITTED) ON USR.UserID = LST.UserID
  LEFT  JOIN dbo.vwPerson         PRSS WITH (READUNCOMMITTED) ON PRSS.BaPersonID = LST.SchuldnerBaPersonID -- Schuldner
  LEFT  JOIN dbo.IkPosition       POS WITH (READUNCOMMITTED) ON POS.IkPositionID = 
    (
      SELECT TOP 1 IkPositionID
      FROM dbo.IkPosition WITH (READUNCOMMITTED)
      WHERE ((IkRechtstitelID = GLB.IkRechtstitelID and GLB.FaLeistungID IS NULL) 
          OR (FaLeistungID = GLB.FaLeistungID and GLB.IkRechtstitelID IS NULL))
        AND BaPersonID = GLB.BaPersonID
        AND ALBVBerechtigt = 1
        AND Monat = MONTH(getDate()) 
        AND Jahr = YEAR(getDate()) 
      ORDER BY Datum DESC
    )
  LEFT  JOIN dbo.vwPerson         PRSG WITH (READUNCOMMITTED) ON PRSG.BaPersonID = GLB.BaPersonID -- Gläubiger
  LEFT  JOIN dbo.FaLeistungArchiv FFA WITH (READUNCOMMITTED) ON FFA.FaLeistungID = LST.FaLeistungID AND FFA.CheckOut is NULL
WHERE LST.ModulID = 4 -- Inkasso
  AND PRSS.Testperson = 0
  AND LST.FaProzessCode &lt;&gt; 400 -- keine Abklärung
  AND (@InkassoTyp IS NULL OR @InkassoTyp = LST.FaProzessCode)
  AND (@InkassoTypUnterart IS NULL OR @InkassoTypUnterart = LST.EroeffnungsGrundCode )
  AND (@SAR_ID is null OR @SAR_ID = USR.UserID)
  AND (isNull(@NurLaufendeBevorschussung, 0) = 0 OR GLB.Aktiv = 1)
  AND (@InkassofallStatus IS NULL OR @InkassofallStatus = LST.IkLeistungStatusCode)
  AND (isNull(@NurExtensive, 0) = 0 OR AIF.IkInkassoBemuehungCode = 2)  -- 2 = Extensiv
  AND ((LST.IkVerjaehrungAm &gt;= @VerjaehrungVon AND LST.IkVerjaehrungAm &lt;= @VerjaehrungBis)
    OR (LST.IkVerjaehrungAm &gt;= @VerjaehrungVon AND @VerjaehrungBis IS NULL)
    OR (@VerjaehrungVon IS NULL AND LST.IkVerjaehrungAm &lt;= @VerjaehrungBis)
    OR (@VerjaehrungVon IS NULL AND @VerjaehrungBis IS NULL))
  AND (isNull(@InklAbgeschlossene, 0) = 1 OR (LST.DatumBis IS NULL OR LST.DatumBis &gt; @TODAY_NOTIME) OR (@Abschlussgrund IS NOT NULL))
  AND (isNull(@InklArchivierte, 0) = 1 OR FFA.FaLeistungID is null)
--- AND LST.IkRueckerstattungTypCode = {edtIkRueckerstattungTyp}
  AND (@Abschlussgrund IS NULL OR LST.AbschlussgrundCode = @Abschlussgrund)
ORDER BY PRSG.NameVorname  -- Gläubiger Default

SELECT 
  *, 
  AnzahlFaelle$     = (SELECT COUNT(DISTINCT FaLeistungID$) FROM #TMP),
  AnzahlGlaeubiger$ = (SELECT COUNT(DISTINCT GlaeubigerPersonID$) FROM #TMP)
FROM #TMP

IF OBJECT_ID('tempdb..#TMP') IS NOT NULL 
    DROP Table #TMP</value>
  </data>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="edtDatumBis.Properties.Buttons" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        iVBORw0KGgoAAAANSUhEUgAAAAwAAAAQCAYAAAAiYZ4HAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8
        YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAABRSURBVDhPY2AAAmNj4//EYJBaMAApRqbhErjkiDEdZiiK
        Dcgmo7NxamhoYAA7DwSQ2Vg1gBTAFKHT1NGA7AyibBhuGoiKB5Jimpj0hM9AnHIA7aiPJlUTWpwAAAAA
        SUVORK5CYII=
</value>
  </data>
  <data name="edtDatumVon.Properties.Buttons" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        iVBORw0KGgoAAAANSUhEUgAAAAwAAAAQCAYAAAAiYZ4HAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8
        YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAABRSURBVDhPY2AAAmNj4//EYJBaMAApRqbhErjkiDEdZiiK
        Dcgmo7NxamhoYAA7DwSQ2Vg1gBTAFKHT1NGA7AyibBhuGoiKB5Jimpj0hM9AnHIA7aiPJlUTWpwAAAAA
        SUVORK5CYII=
</value>
  </data>
  <metadata name="$this.TrayHeight" type="System.Int32, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
    <value>63</value>
  </metadata>
</root>
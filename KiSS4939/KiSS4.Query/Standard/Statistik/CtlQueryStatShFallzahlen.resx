<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <metadata name="qryQuery.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>17, 17</value>
  </metadata>
  <data name="qryQuery.SelectStatement" xml:space="preserve">
    <value>DECLARE @Fallzahlen TABLE(
  ModulID          int,
  FaLeistungID     int,
  FallPersonID     int,
  BaPersonID       int,
  Fallträger       varchar(5),
  Geschlecht       varchar(5),
  Zivilstand       varchar(30),
  Nationalität     varchar(50),
  AlterTyp         varchar(50),
  Ehe              bit,
  Kind             bit,
  SARSektion       varchar(100),
  AnzPersHaushalt  int,
  AnzPersUnterst   int,
  AnzahlUE         int,
  AnzahlFP         int,
  ArchiviertAm     datetime
)

DECLARE @Erhebungsjahr int
DECLARE @FusionierenBeiWenigerAls6MtUnterbruch bit
DECLARE @FTonly bit

SET @Erhebungsjahr = YEAR(GetDate())
SET @FusionierenBeiWenigerAls6MtUnterbruch = 0
SET @FTonly = 0

--- SET @Erhebungsjahr = {edtJahr}
--- SET @FusionierenBeiWenigerAls6MtUnterbruch = {edt6MontateRegel}
--- SET @FTonly = {edtFT}

-- aus Sozialhilfe via SH-Modul
INSERT @Fallzahlen (ModulID, FaLeistungID, FallPersonID, BaPersonID, Fallträger, AnzPersHaushalt, AnzPersUnterst, AnzahlUE, AnzahlFP)
SELECT ModulID         = FAL.ModulID,
       FaLeistungID    = FAL.FaLeistungID,
       FallPersonID    = FT.BaPersonID,
       BaPersonID      = PRS.BaPersonID,
       Fallträger      = CASE
                            WHEN FT.BaPersonID = PRS.BaPersonID
                            THEN 'x'
                            ELSE ''
                         END,
       AnzPersHaushalt = (SELECT COUNT(*)
                          FROM dbo.BgFinanzplan_BaPerson WITH (READUNCOMMITTED)
                          WHERE BgFinanzplanID = FP.BgFinanzplanID),
       AnzPersUnterst  = (SELECT COUNT(*)
                          FROM dbo.BgFinanzplan_BaPerson WITH (READUNCOMMITTED)
                          WHERE BgFinanzplanID = FP.BgFinanzplanID
                            AND IstUnterstuetzt = 1),
       AnzahlUE        = (SELECT COUNT(*)
                          FROM dbo.FaLeistung WITH (READUNCOMMITTED)
                          WHERE BaPersonID = FAL.BaPersonID
                           AND ModulID = 3
                           AND @Erhebungsjahr BETWEEN Year(DatumVon)
                           AND IsNull(Year(DatumBis),@Erhebungsjahr)),
       AnzahlFP        = (SELECT COUNT(*)
                          FROM dbo.FaLeistung A WITH (READUNCOMMITTED)
                            INNER JOIN dbo.BgFinanzplan B WITH (READUNCOMMITTED) ON B.FaLeistungID = A.FaLeistungID
                                                     AND B.BgBewilligungStatusCode in (5, 9)
                                                     AND @Erhebungsjahr BETWEEN Year(B.DatumVon)
                                                     AND IsNull(Year(B.DatumBis),@Erhebungsjahr)
                          WHERE A.BaPersonID = FAL.BaPersonID)
FROM dbo.FaLeistung FAL WITH (READUNCOMMITTED)
  INNER JOIN dbo.BaPerson              FT WITH (READUNCOMMITTED) ON FT.BaPersonID = FAL.BaPersonID
  INNER JOIN dbo.BgFinanzplan          FP WITH (READUNCOMMITTED) ON FP.FaLeistungID = FAL.FaLeistungID
                                      AND FP.BgFinanzplanID = (SELECT TOP 1 BgFinanzplanID
                                                               FROM dbo.BgFinanzplan WITH (READUNCOMMITTED)
                                                               WHERE FaLeistungID = FAL.FaLeistungID
                                                                 AND BgBewilligungStatusCode IN (5, 9)
                                                                 AND @Erhebungsjahr BETWEEN Year(DatumVon) AND Year(DatumBis)
                                                                 ORDER BY DatumVon DESC)
  LEFT  JOIN dbo.BgFinanzplan_BaPerson FPP WITH (READUNCOMMITTED) ON FPP.BgFinanzplanID = FP.BgFinanzplanID
                                      AND FPP.IstUnterstuetzt = 1
  LEFT  JOIN dbo.BaPerson              PRS WITH (READUNCOMMITTED) ON PRS.BaPersonID = FPP.BaPersonID
WHERE FAL.ModulID = 3 -- Sozialhilfe
   AND FT.Testperson = 0
   AND @Erhebungsjahr BETWEEN Year(FAL.DatumVon) AND IsNull(Year(FAL.DatumBis),@Erhebungsjahr)
   AND (@FusionierenBeiWenigerAls6MtUnterbruch = 0 OR
        FAL.DatumBis IS NULL OR
        NOT EXISTS(SELECT *
                   FROM dbo.FaLeistung           FAL2 WITH (READUNCOMMITTED)
                     INNER JOIN dbo.BgFinanzplan BFP2 WITH (READUNCOMMITTED) ON BFP2.FaLeistungID = FAL2.FaLeistungID AND
                                                                                BFP2.BgBewilligungStatusCode IN (5, 9) AND
                                                                                @Erhebungsjahr BETWEEN Year(BFP2.DatumVon) AND Year(BFP2.DatumBis)
                   WHERE FAL2.ModulID = 3 
                     AND FAL2.BaPersonID = FT.BaPersonID
                     AND @Erhebungsjahr BETWEEN Year(FAL2.DatumVon) AND IsNull(Year(FAL2.DatumBis),@Erhebungsjahr)
                     AND FAL2.FaLeistungID &lt;&gt; FAL.FaLeistungID
                     AND FAL.DatumBis &lt; FAL2.DatumVon
                     AND DateDiff(MONTH, FAL.DatumBis, FAL2.DatumVon) &lt; 6))

----- doppelt eingefügte BaPersonid's rauslöschen
DECLARE @Doppelte TABLE(
  FallPersonID INT,
  BaPersonID   INT,
  FaLeistungID INT
)

WHILE EXISTS(SELECT *
             FROM @Fallzahlen
             GROUP BY BaPersonID, FaLeistungID
             HAVING COUNT(*) &gt; 1)
BEGIN
   DELETE FROM @Doppelte

   INSERT INTO @Doppelte
   SELECT FallPersonID = (SELECT TOP 1 FallPersonID FROM @Fallzahlen WHERE BaPersonID = FZ.BaPersonID ORDER BY ModulID),
          BaPersonID,
          FaLeistungID
   FROM @Fallzahlen FZ
   GROUP BY BaPersonID, FaLeistungID
   HAVING COUNT(*) &gt; 1

   DELETE FZ
   FROM @Fallzahlen        FZ
     INNER JOIN @Doppelte  DP ON DP.FallPersonID = FZ.FallPersonID AND
                                 DP.BaPersonID   = FZ.BaPersonID AND
                                 DP.FaLeistungID = FZ.FaLeistungID
END
------ 

UPDATE FZ
SET    Geschlecht      = CASE PRS.GeschlechtCode
                            WHEN 1 THEN 'm'
                            WHEN 2 THEN 'f'
                            ELSE '?'
                         END,
       Zivilstand      = dbo.fnLOVText('Zivilstand', PRS.ZivilstandCode),
       Nationalität    = LAN.Text,
       AlterTyp        = CASE
                            WHEN CONVERT(int, ((DateDiff(dd,PRS.Geburtsdatum,GetDate())+.5)/365.25)) &lt; 18 THEN '0 - 17'
                            WHEN CONVERT(int, ((DateDiff(dd,PRS.Geburtsdatum,GetDate())+.5)/365.25)) BETWEEN 18 AND 25 THEN '18-25'
                            WHEN CONVERT(int, ((DateDiff(dd,PRS.Geburtsdatum,GetDate())+.5)/365.25)) BETWEEN 26 AND 35 THEN '26-35'
                            WHEN CONVERT(int, ((DateDiff(dd,PRS.Geburtsdatum,GetDate())+.5)/365.25)) BETWEEN 36 AND 50 THEN '36-50'
                            WHEN CONVERT(int, ((DateDiff(dd,PRS.Geburtsdatum,GetDate())+.5)/365.25)) BETWEEN 51 AND 65 THEN '51-65'
                            WHEN CONVERT(int, ((DateDiff(dd,PRS.Geburtsdatum,GetDate())+.5)/365.25)) &gt; 65 THEN 'ab 66  '
                            ELSE '?'
                         END,
       Ehe             = CASE WHEN IsNull(EH1.BaPerson_RelationID,EH2.BaPerson_RelationID) IS NULL THEN 0 ELSE 1 END,
       Kind            = CASE WHEN IsNull(KI1.BaPerson_RelationID,KI2.BaPerson_RelationID) IS NULL THEN 0 ELSE 1 END,
       SARSektion      = (SELECT MAX(ItemName)
                          FROM   dbo.XOrgUnit_User OUU WITH (READUNCOMMITTED)
                                 INNER JOIN dbo.XOrgUnit ORG WITH (READUNCOMMITTED) ON ORG.OrgUnitID = OUU.OrgUnitID
                          WHERE  OUU.UserID = FAL.UserID AND
                                 OUU.OrgUnitMemberCode = 2),
       ArchiviertAm    = (SELECT CheckIn
                          FROM   dbo.FaLeistungArchiv WITH (READUNCOMMITTED)
                          WHERE  FaLeistungID = FZ.FaLeistungID AND
                                 CheckOut IS NULL)
FROM   @FallZahlen FZ
       INNER JOIN dbo.FaLeistung            FAL WITH (READUNCOMMITTED) ON FAL.FaLeistungID = FZ.FaLeistungID
       LEFT  JOIN dbo.BaPerson              PRS WITH (READUNCOMMITTED) ON PRS.BaPersonID = FZ.BaPersonID
       LEFT  JOIN dbo.BaPerson_Relation     EH1 WITH (READUNCOMMITTED) ON EH1.BaPersonID_1 = FAL.BaPersonID AND
                                                EH1.BaRelationID in (13,14,15) AND
                                                EH1.BaPerson_RelationID = (SELECT MAX(BaPerson_RelationID)
                                                                            FROM   dbo.BaPerson_Relation WITH (READUNCOMMITTED)
                                                                            WHERE  BaPersonID_1 = FAL.BaPersonID AND
                                                                                   BaRelationID in (13,14,15))
       LEFT  JOIN dbo.BaPerson_Relation     EH2 WITH (READUNCOMMITTED) ON EH2.BaPersonID_2 = FAL.BaPersonID AND
                                                EH2.BaRelationID in (13,14,15) AND
                                                EH2.BaPerson_RelationID = (SELECT MAX(BaPerson_RelationID)
                                                                            FROM   dbo.BaPerson_Relation WITH (READUNCOMMITTED)
                                                                            WHERE  BaPersonID_2 = FAL.BaPersonID AND
                                                                                   BaRelationID in (13,14,15))
       LEFT  JOIN dbo.BaPerson_Relation     KI1 WITH (READUNCOMMITTED) ON KI1.BaPersonID_1 = FAL.BaPersonID AND
                                                KI1.BaRelationID in (1,6,7) AND
                                                KI1.BaPerson_RelationID = (SELECT MAX(BaPerson_RelationID)
                                                                            FROM   dbo.BaPerson_Relation WITH (READUNCOMMITTED)
                                                                            WHERE  BaPersonID_1 = FAL.BaPersonID AND
                                                                                   BaRelationID in (1,6,7))
       LEFT  JOIN dbo.BaPerson_Relation     KI2 WITH (READUNCOMMITTED) ON KI2.BaPersonID_2 = FAL.BaPersonID AND
                                                KI2.BaRelationID in (1,6,7) AND
                                                KI2.BaPerson_RelationID = (SELECT MAX(BaPerson_RelationID)
                                                                            FROM   dbo.BaPerson_Relation WITH (READUNCOMMITTED)
                                                                            WHERE  BaPersonID_2 = FAL.BaPersonID AND
                                                                                   BaRelationID in (1,6,7))
	   LEFT	 JOIN dbo.BaLand				LAN WITH (READUNCOMMITTED) ON PRS.NationalitaetCode = LAN.BaLandID																			


DECLARE @tmp TABLE
(
  Sektion varchar(40),
  Thema   varchar(40),
  Detail  varchar(40),
  Anzahl  int
)

-- Zivilstand
INSERT @tmp
SELECT SARSektion,'Zivilstand',Zivilstand, COUNT(*) Anzahl FROM @Fallzahlen
WHERE Fallträger = 'x'
GROUP BY SARSektion,Zivilstand
ORDER BY SARSektion,Zivilstand

-- Geschlecht
INSERT @tmp
SELECT SARSektion,'Geschlecht',Geschlecht, COUNT(*) Anzahl FROM @Fallzahlen
GROUP BY SARSektion,Geschlecht
ORDER BY SARSektion,Geschlecht

-- Altersgruppe
INSERT @tmp
SELECT SARSektion,'Altersgruppe',AlterTyp, COUNT(*) Anzahl FROM @Fallzahlen
GROUP BY SARSektion,AlterTyp
ORDER BY SARSektion,AlterTyp

-- CH/Ausland
INSERT @tmp
SELECT
  SARSektion,
  'CH/Ausland',
  CASE
    WHEN Nationalität = 'Schweiz' AND Geschlecht = 'F' THEN 'Schweizerin'
    WHEN Nationalität = 'Schweiz' AND Geschlecht = 'M' THEN 'Schweizer'
    WHEN Nationalität = 'Schweiz' AND Geschlecht = '?' THEN 'SchweizerIn(?)'
    WHEN Nationalität IS NULL OR Nationalität &lt;&gt; 'Schweiz' AND Geschlecht = 'F' THEN 'Ausländerin'
    WHEN Nationalität IS NULL OR Nationalität &lt;&gt; 'Schweiz' AND Geschlecht = 'M' THEN 'Ausländer'
    WHEN Nationalität IS NULL OR Nationalität &lt;&gt; 'Schweiz' AND Geschlecht = '?' THEN 'AusländerIn(?)'
  END,
  COUNT(*)
FROM @Fallzahlen
GROUP BY
  SARSektion,
  CASE
    WHEN Nationalität = 'Schweiz' AND Geschlecht = 'F' THEN 'Schweizerin'
    WHEN Nationalität = 'Schweiz' AND Geschlecht = 'M' THEN 'Schweizer'
    WHEN Nationalität = 'Schweiz' AND Geschlecht = '?' THEN 'SchweizerIn(?)'
    WHEN Nationalität IS NULL OR Nationalität &lt;&gt; 'Schweiz' AND Geschlecht = 'F' THEN 'Ausländerin'
    WHEN Nationalität IS NULL OR Nationalität &lt;&gt; 'Schweiz' AND Geschlecht = 'M' THEN 'Ausländer'
    WHEN Nationalität IS NULL OR Nationalität &lt;&gt; 'Schweiz' AND Geschlecht = '?' THEN 'AusländerIn(?)'
  END
ORDER BY 1,2,3

-- Haushalt
INSERT @tmp
SELECT
  SARSektion,
  'Haushalt',
  CASE
    WHEN Ehe = 0 AND Kind = 0 THEN 'Single_ohne_Kind'
    WHEN Ehe = 0 AND Kind = 1 THEN 'Single_mit_Kind'
    WHEN Ehe = 1 AND Kind = 0 THEN 'Ehe_ohne_Kind'
    WHEN Ehe = 1 AND Kind = 1 THEN 'Ehe_mit_Kind'
  END,
  COUNT(*)
FROM @Fallzahlen
WHERE Fallträger = 'x'
GROUP BY
  SARSektion,
  CASE
    WHEN Ehe = 0 AND Kind = 0 THEN 'Single_ohne_Kind'
    WHEN Ehe = 0 AND Kind = 1 THEN 'Single_mit_Kind'
    WHEN Ehe = 1 AND Kind = 0 THEN 'Ehe_ohne_Kind'
    WHEN Ehe = 1 AND Kind = 1 THEN 'Ehe_mit_Kind'
  END
ORDER BY 1,2,3

-- Output Detail (Liste 1)
SELECT --Modul              = CASE WHEN FZ.ModulID = 3 THEN 'SH' ELSE 'FF' END,
       [Fall Nr.]         = FAL.FaLeistungID,
       Fall               = FT.Name + IsNull(', ' + FT.Vorname,''),
       [Personen Nr.]     = PRS.BaPersonID,
       Person             = PRS.Name + IsNull(', ' + PRS.Vorname,''),
       Versichertennummer = PRS.Versichertennummer,
       Geöffnet           = FAL.DatumVon,
       Eröffnungsgrund    = ERG.Text,
       Geschlossen        = FAL.DatumBis,
       Abschlussgrund     = ABG.Text,
       Fallträger         = FZ.Fallträger,
       Geschlecht         = FZ.Geschlecht,
       Strasse            = PRS.WohnsitzStrasse,
       StrasseNr          = PRS.WohnsitzHausNr,
       PLZ                = PRS.WohnsitzPLZ,
       Ort                = PRS.WohnsitzOrt,
       Kanton             = PRS.WohnsitzKanton,
       Zivilstand         = FZ.Zivilstand,
       Nationalität       = FZ.Nationalität,
       Heimatort          = dbo.fnLOVText('Gemeinde', PRS.HeimatgemeindeBaGemeindeID),
       [Heimatort Kanton] = dbo.fnLOVColumnListe('Gemeinde', PRS.HeimatgemeindeBaGemeindeID, 'Value2'),
       Geburtsdatum       = PRS.Geburtsdatum,
       [Alter]            = CONVERT(int, ((DateDiff(dd,PRS.Geburtsdatum,GetDate())+.5)/365.25)),
       AlterTyp           = FZ.AlterTyp,
       [SAR Name]         = USR.LastName + IsNull(', ' + USR.FirstName,''),
       [SAR Kürzel]       = USR.LogonName,
       [SAR Sektion]      = FZ.SARSektion,
       AnzPersHaushalt    = FZ.AnzPersHaushalt,
       AnzPersUnterst     = FZ.AnzPersUnterst,
       AnzahlUE           = FZ.AnzahlUE,
       AnzahlFP           = FZ.AnzahlFP,
       ArchiviertAm       = FZ.ArchiviertAm,
       [Anzahl UM]        = (SELECT CONVERT( int,
	                              ROUND(
                                             (CONVERT(float, DateDiff(day, 
                                                                 CONVERT(DATETIME, '01.' + CONVERT(VARCHAR, MIN(BDG.Monat)) + '.' +  CONVERT(VARCHAR, @Erhebungsjahr), 104), 
                                                                 CONVERT(DATETIME, '28.' + CONVERT(VARCHAR,MAX(BDG.Monat)) + '.' +  CONVERT(VARCHAR, @Erhebungsjahr), 104)))
						/ CONVERT(float, 30)), 0)
                                        )
                             FROM dbo.FaLeistung LEI WITH (READUNCOMMITTED)
                                   INNER JOIN dbo.BgFinanzplan BFP WITH (READUNCOMMITTED) ON BFP.FaLeistungID = LEI.FaLeistungID
                                   INNER JOIN dbo.BgBudget     BDG WITH (READUNCOMMITTED) ON BDG.BgFinanzplanID = BFP.BgFinanzplanID
                             WHERE @Erhebungsjahr BETWEEN Year(BFP.DatumVon)
                             AND IsNull(Year(BFP.DatumBis), @Erhebungsjahr)
                             AND BDG.MasterBudget = 0
                             AND BDG.Jahr = @Erhebungsjahr
                             AND LEI.FaLeistungID = FAL.FaLeistungID),
       BaPersonID$        = FZ.FallPersonId
FROM   @Fallzahlen FZ
       INNER JOIN dbo.FaLeistung  FAL WITH (READUNCOMMITTED) ON FAL.FaLeistungID = FZ.FaLeistungID
       LEFT  JOIN dbo.XLOVCode    ERG WITH (READUNCOMMITTED) ON ERG.LOVName = 'EroeffnungsGrund' AND ERG.Code = FAL.EroeffnungsGrundCode
       LEFT  JOIN dbo.XLOVCode    ABG WITH (READUNCOMMITTED) ON ABG.LOVName = 'AbschlussHauptGrund' AND ABG.Code = FAL.AbschlussGrundCode
       INNER JOIN dbo.BaPerson    FT  WITH (READUNCOMMITTED) ON FT.BaPersonID = FAL.BaPersonID
       INNER JOIN dbo.XUser       USR WITH (READUNCOMMITTED) ON USR.UserID = FAL.UserID
       LEFT  JOIN vwPerson        PRS on PRS.BaPersonID = FZ.BaPersonID

WHERE (@FTonly = 0 OR FZ.BaPersonID = FZ.FallPersonID)
ORDER BY Fall

-- Output Total (Liste 2)
SELECT
  CASE WHEN grouping(Sektion) = 1 THEN 'Total' ELSE Sektion END AS Sektion,
  SUM(CASE Thema + '_' + Detail WHEN 'Zivilstand_ledig' THEN Anzahl ELSE 0 END) AS Zivilstand_ledig,
  SUM(CASE Thema + '_' + Detail WHEN 'Zivilstand_verheiratet' THEN Anzahl ELSE 0 END) AS Zivilstand_verheiratet,
  SUM(CASE Thema + '_' + Detail WHEN 'Zivilstand_in eingetragener Partnerschaft' THEN Anzahl ELSE 0 END) AS Zivilstand_in_eingetragener_Partnerschaft,
  SUM(CASE Thema + '_' + Detail WHEN 'Zivilstand_geschieden' THEN Anzahl ELSE 0 END) AS Zivilstand_geschieden,
  SUM(CASE Thema + '_' + Detail WHEN 'Zivilstand_verwitwet' THEN Anzahl ELSE 0 END) AS Zivilstand_verwitwet,
  SUM(CASE Thema + '_' + Detail WHEN 'Zivilstand_getrennt' THEN Anzahl ELSE 0 END) AS Zivilstand_getrennt,
  SUM(CASE Thema + '_' + Detail WHEN 'Zivilstand_nach Brauch verheiratet' THEN Anzahl ELSE 0 END) AS Zivilstand_nach_Brauch_verheiratet,
  SUM(CASE WHEN Thema = 'Zivilstand' AND Detail NOT IN ('ledig',
                                                        'verheiratet',
                                                        'in eingetragener Partnerschaft',
                                                        'geschieden',
                                                        'verwitwet',
                                                        'getrennt',
                                                        'nach Brauch verheiratet') THEN Anzahl ELSE 0 END) AS "Zivilstand_?", --Rest
  SUM(CASE Thema + '_' + Detail WHEN 'Haushalt_Single_ohne_Kind' THEN Anzahl ELSE 0 END) AS Haushalt_Single_ohne_Kind,
  SUM(CASE Thema + '_' + Detail WHEN 'Haushalt_Single_mit_Kind' THEN Anzahl ELSE 0 END) AS Haushalt_Single_mit_Kind,
  SUM(CASE Thema + '_' + Detail WHEN 'Haushalt_Ehe_ohne_Kind' THEN Anzahl ELSE 0 END) AS Haushalt_Ehe_ohne_Kind,
  SUM(CASE Thema + '_' + Detail WHEN 'Haushalt_Ehe_mit_Kind' THEN Anzahl ELSE 0 END) AS Haushalt_Ehe_mit_Kind,

  SUM(CASE Thema + '_' + Detail WHEN 'Geschlecht_F' THEN Anzahl ELSE 0 END) AS Geschlecht_F,
  SUM(CASE Thema + '_' + Detail WHEN 'Geschlecht_M' THEN Anzahl ELSE 0 END) AS Geschlecht_M,
  SUM(CASE Thema + '_' + Detail WHEN 'Geschlecht_?' THEN Anzahl ELSE 0 END) AS "Geschlecht_?",

  SUM(CASE Thema + '_' + Detail WHEN 'Altersgruppe_0 - 17' THEN Anzahl ELSE 0 END) AS "Altersgruppe_0 - 17",
  SUM(CASE Thema + '_' + Detail WHEN 'Altersgruppe_18-25' THEN Anzahl ELSE 0 END) AS "Altersgruppe_18-25",
  SUM(CASE Thema + '_' + Detail WHEN 'Altersgruppe_26-35' THEN Anzahl ELSE 0 END) AS "Altersgruppe_26-35",
  SUM(CASE Thema + '_' + Detail WHEN 'Altersgruppe_36-50' THEN Anzahl ELSE 0 END) AS "Altersgruppe_36-50",
  SUM(CASE Thema + '_' + Detail WHEN 'Altersgruppe_51-65' THEN Anzahl ELSE 0 END) AS "Altersgruppe_51-65",
  SUM(CASE Thema + '_' + Detail WHEN 'Altersgruppe_ab 66' THEN Anzahl ELSE 0 END) AS "Altersgruppe_ab 66",
  SUM(CASE Thema + '_' + Detail WHEN 'Altersgruppe_?' THEN Anzahl ELSE 0 END) AS "Altersgruppe ?",

  SUM(CASE Thema + '_' + Detail WHEN 'CH/Ausland_Ausländer' THEN Anzahl ELSE 0 END) AS "CH/Ausland_Ausländer",
  SUM(CASE Thema + '_' + Detail WHEN 'CH/Ausland_Ausländerin' THEN Anzahl ELSE 0 END) AS "CH/Ausland_Ausländerin",
  SUM(CASE Thema + '_' + Detail WHEN 'CH/Ausland_AusländerIn(?)' THEN Anzahl ELSE 0 END) AS "CH/Ausland_AusländerIn(?)",
  SUM(CASE Thema + '_' + Detail WHEN 'CH/Ausland_Schweizer' THEN Anzahl ELSE 0 END) AS "CH/Ausland_Schweizer",
  SUM(CASE Thema + '_' + Detail WHEN 'CH/Ausland_Schweizerin' THEN Anzahl ELSE 0 END) AS "CH/Ausland_Schweizerin",
  SUM(CASE Thema + '_' + Detail WHEN 'CH/Ausland_SchweizerIn(?)' THEN Anzahl ELSE 0 END) AS "CH/Ausland_SchweizerIn(?)"
FROM @tmp
GROUP BY Sektion WITH rollup

-- Output Total 2 (Liste 3)
--SELECT Modul                   = 'SH',
--       Fallträger              = (SELECT COUNT(*) FROM @Fallzahlen WHERE Fallträger = 'x' AND ModulID = 3),
--       [unterstützte Personen] = (SELECT COUNT(*) FROM @Fallzahlen WHERE ModulID = 3)
--UNION ALL
--SELECT Modul                   = 'FF',
--       Fallträger              = (SELECT COUNT(*) FROM @Fallzahlen WHERE Fallträger = 'x'  AND ModulID &lt;&gt; 3),
--       [unterstützte Personen] = (SELECT COUNT(*) FROM @Fallzahlen WHERE ModulID &lt;&gt; 3)
--UNION ALL
SELECT Modul                   = 'Total',
       Fallträger              = (SELECT COUNT(*) FROM @Fallzahlen WHERE Fallträger = 'x' ),
       [unterstützte Personen] = (SELECT COUNT(*) FROM @Fallzahlen)
</value>
  </data>
  <metadata name="$this.TrayHeight" type="System.Int32, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
    <value>55</value>
  </metadata>
</root>
<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <metadata name="qryQuery.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>17, 17</value>
  </metadata>
  <data name="qryQuery.SelectStatement" xml:space="preserve">
    <value>DECLARE @Jahr INT
SET @Jahr = Year(GetDate())
--- SET @Jahr = {edtJahr}

IF OBJECT_ID('tempdb..#BFSMussFelder') IS NOT NULL
  DROP TABLE #BFSMussFelder

SELECT Sektion         = (SELECT MAX(ItemName)
                          FROM   dbo.XOrgUnit_User OUU WITH (READUNCOMMITTED)
                                 INNER JOIN XOrgUnit ORG ON ORG.OrgUnitID = OUU.OrgUnitID
                          WHERE  OUU.UserID = FAL.UserID AND
                                 OUU.OrgUnitMemberCode = 2),
       SAR             = USR.LastName + ISNULL(', ' + USR.Firstname,''),
       Fall            = FT.NameVorname, 

       Geöffnet        = FAL.DatumVon, 
       Geschlossen     = FAL.DatumBis, 
       ArchiviertAm    = (SELECT CheckIn 
                          FROM   dbo.FaLeistungArchiv WITH (READUNCOMMITTED)
                          WHERE  FaLeistungID = FAL.FaLeistungID AND
                                 CheckOut IS NULL),

       Leistungsart    = dbo.fnLOVText('Leistungsart', FAL.LeistungsartCode),
       [ZustGemeinde]  = dbo.fnLOVText('Gemeinde', FAL.GemeindeCode),
       [AHV-Nr]        = PRS.AHVNummer,
       Fallträger      = CASE WHEN FT.BaPersonID = PRS.BaPersonID 
                         THEN 'x'
                         ELSE ''
                         END,
       Person          = PRS.NameVorname, 
       PLZ             = PRS.WohnsitzPLZ,
       Ort             = PRS.WohnsitzOrt,
       [Unters.Wohnsitz]= ISNULL(PRS.UntWohnsitzPLZ + ' ', '') + ISNULL(PRS.UntWohnsitzOrt, ''),
       Aufenthaltsort   = ISNULL(PRS.AufenthaltPLZ + ' ', '') + ISNULL(PRS.AufenthaltORT, ''),
       Heimatort        = CASE WHEN ISNULL(PRS.NationalitaetCode, 147) = 147 THEN PRS.Heimatort
                              ELSE '-'
                          END,
       InGemeindeSeit  = CASE WHEN PRS.InCHSeitGeburt = 1 THEN 'seit Geburt' ELSE CONVERT(VARCHAR, PRS.InGemeindeSeit, 104) END,
       [Zuzug Gemeinde]= ISNULL(PRS.ZuzugGdePLZ + ' ', '') + ISNULL(PRS.ZuzugGdeORT, ''),
       WohntImKantonSeit = CASE WHEN PRS.ImKantonSeitGeburt = 1 THEN 'seit Geburt' ELSE CONVERT(VARCHAR, PRS.ImKantonSeit, 104) END,
       [Zuzug Kanton]  = ISNULL(PRS.ZuzugKtPLZ+' ', '') + ISNULL(PRS.ZuzugKtORT, ''),
       Geburtsdatum    = CONVERT(VARCHAR, PRS.Geburtsdatum, 104),
       Geschlecht      = dbo.fnLOVText('Geschlecht', PRS.GeschlechtCode),
       Zivilstand      = dbo.fnLOVText('Zivilstand', PRS.ZivilstandCode),
       Nationalität    = PRS.Nationalitaet,
       Aufenthaltsstatus = CASE WHEN ISNULL(PRS.NationalitaetCode, -1) &lt;&gt; 147
                                  THEN dbo.fnLOVText('Aufenthaltsstatus', PRS.AuslaenderstatusCode)
                                ELSE '-'
                           END,
       AnzPersHaushalt = (SELECT COUNT(*) 
                          FROM   dbo.BgFinanzplan_BaPerson WITH (READUNCOMMITTED)
                          WHERE  BgFinanzplanID = FP.BgFinanzplanID),
       AnzPersUnterst  = (SELECT COUNT(*) 
                          FROM   dbo.BgFinanzplan_BaPerson WITH (READUNCOMMITTED)
                          WHERE  BgFinanzplanID = FP.BgFinanzplanID AND
                                 IstUnterstuetzt = 1),
       Wohnstatus         = dbo.fnLOVText('Wohnstatus', ADR.WohnStatusCode),
       Wohnungsgrösse     = dbo.fnLOVText('Wohnungsgroesse', ADR.WohnungsgroesseCode),
       Erwerbssituation   = dbo.fnLOVText('Erwerbssituation', ARB.ErwerbssituationStatus1Code),
       BeschäftigungsGrad = dbo.fnLOVText('Beschaeftigungsgrad', ARB.BeschaeftigungsGradCode),
       [Hauptgrund Teilzeit] = dbo.fnLOVText('Grundteilzeit', ARB.GrundTeilzeitarbeit1Code),       
       Ausgesteuert       = CONVERT(VARCHAR, ARB.AusgesteuertDatum, 104),
       ErlernterBeruf     = dbo.fnLOVText('Beruf', ARB.ErlernterBerufCode),
       Branche            = dbo.fnLOVText('Branche', ARB.BrancheCode),
       WieOftArbeitslos3J = CONVERT(VARCHAR, ARB.WieOftArbeitslos),
       LetzteTätigkeit    = dbo.fnLOVText('Beruf', ARB.BerufCode),
       [Höchste Ausb.]    = dbo.fnLOVText('Ausbildungstyp', ARB.HoechsteAusbildungCode),
       BeziehungZuFT      = CASE WHEN FT.BaPersonID &lt;&gt; PRS.BaPersonID 
                            THEN (SELECT TOP 1 
                                      CASE WHEN BaPersonID_1 = FT.BaPersonID
                                      THEN CASE PRS.GeschlechtCode 
                                           WHEN 1 THEN DRE.NameMaennlich2
                                           WHEN 2 THEN DRE.NameWeiblich2
                                           ELSE DRE.NameGenerisch2
                                           END
                                      ELSE CASE PRS.GeschlechtCode 
                                           WHEN 1 THEN DRE.NameMaennlich1
                                           WHEN 2 THEN DRE.NameWeiblich1
                                           ELSE DRE.NameGenerisch1
                                           END
                                      END
                               FROM   dbo.BaPerson_Relation DPR WITH (READUNCOMMITTED)
                                      LEFT JOIN dbo.BaRelation DRE WITH (READUNCOMMITTED) ON DRE.BaRelationID = DPR.BaRelationID
                               WHERE  (BaPersonID_1 = FT.BaPersonID AND BaPersonID_2 = PRS.BaPersonID) OR
                                      (BaPersonID_1 = PRS.BaPersonID AND BaPersonID_2 = FT.BaPersonID))
                                    
                            END,
       KrankenkasseName   = KVG.Name,
       KVGPrämie          = CONVERT(VARCHAR, GES.KVGPraemie),
       [KVG Zuschuss]     = CASE WHEN GES.ZuschussInAbklaerungFlag = 1 THEN 'In Abklaerung'
                                 ELSE CASE WHEN GES.KVGZuschussBetrag IS NULL THEN '' 
                                           WHEN GES.KVGZuschussBetrag &lt;&gt; 0 THEN  'ja' 
                                           ELSE 'nein' 
                                      END
                            END,
       [ALV]                = CONVERT(VARCHAR, (SELECT SUM(Betrag)
                               FROM dbo.fnBFSBudget(FAL.FaLeistungID, @Jahr, 0) -- no MasterBudget?
                               WHERE BaPersonID = PRS.BaPersonID AND 
                                     VarName = '10.022')), --dbo.fnGetBFSWert(PRS.DmgPersonID, '10.022', @Jahr, 1),     -- 0 ?
       [IV-Rente]           = CONVERT(VARCHAR, (SELECT SUM(Betrag)
                               FROM dbo.fnBFSBudget(FAL.FaLeistungID, @Jahr, 0) -- no MasterBudget?
                               WHERE BaPersonID = PRS.BaPersonID AND 
                                     VarName = '10.072')), --dbo.fnGetBFSWert(PRS.DmgPersonID, '10.072', @Jahr, 1),     -- 0 ?
       [MIZ]                = CONVERT(VARCHAR, (SELECT SUM(Betrag)
                               FROM dbo.fnBFSBudget(FAL.FaLeistungID, @Jahr, 0) -- no MasterBudget?
                               WHERE BaPersonID = PRS.BaPersonID AND 
                                     VarName = '10.212')), --dbo.fnGetBFSWert(PRS.DmgPersonID, '10.212', @Jahr, 1),     -- 0 ?
       [IZU]                = CONVERT(VARCHAR, (SELECT SUM(Betrag)
                               FROM dbo.fnBFSBudget(FAL.FaLeistungID, @Jahr, 0) -- no MasterBudget?
                               WHERE BaPersonID = PRS.BaPersonID AND 
                                     VarName = '10.222')), --dbo.fnGetBFSWert(PRS.DmgPersonID, '10.222', @Jahr, 1),     -- 0 ?
       [EFB]                = CONVERT(VARCHAR, (SELECT SUM(Betrag)
                               FROM dbo.fnBFSBudget(FAL.FaLeistungID, @Jahr, 0) -- no MasterBudget?
                               WHERE BaPersonID = PRS.BaPersonID AND 
                                     VarName = '10.232')), --dbo.fnGetBFSWert(PRS.DmgPersonID, '10.232', @Jahr, 1),     -- 0 ?

       [Kinderzulage]       = CONVERT(VARCHAR, (SELECT SUM(Betrag)
                               FROM dbo.fnBFSBudget(FAL.FaLeistungID, @Jahr, 0) -- no MasterBudget?
                               WHERE VarName = '12.052')), --dbo.fnGetBFSWert(PRS.DmgPersonID, '12.052', @Jahr, 1),     -- 0 ?
              
       BaPersonID$ = FAL.BaPersonID
INTO   #BFSMussfelder
FROM   dbo.FaLeistung FAL WITH (READUNCOMMITTED)
       INNER JOIN vwPerson               FT  ON FT.BaPersonID = FAL.BaPersonID
       INNER JOIN dbo.XUser              USR WITH (READUNCOMMITTED) ON USR.UserID = FAL.UserID
       INNER JOIN dbo.BgFinanzplan       FP  WITH (READUNCOMMITTED) ON FP.FaLeistungID = FAL.FaLeistungID AND
                                                FP.BgFinanzplanID = (SELECT TOP 1 BgFinanzplanID
                                                                     FROM   dbo.BgFinanzplan WITH (READUNCOMMITTED)
                                                                     WHERE  FaLeistungID = FAL.FaLeistungID AND
                                                                            BgBewilligungStatusCode IN (5, 9) AND 
                                                                            @Jahr BETWEEN YEAR(DatumVon) AND YEAR(DatumBis)
                                                                     ORDER BY DatumVon DESC)
       LEFT  JOIN dbo.BgFinanzplan_BaPerson  FPP WITH (READUNCOMMITTED) ON FPP.BgFinanzplanID = FP.BgFinanzplanID AND
                                                FPP.IstUnterstuetzt = 1
       LEFT  JOIN vwPerson                   PRS  ON PRS.BaPersonID = FPP.BaPersonID
       LEFT  JOIN dbo.BaArbeitAusbildung     ARB WITH (READUNCOMMITTED) ON ARB.BaPersonID = PRS.BaPersonID
       LEFT  JOIN dbo.BaGesundheit           GES WITH (READUNCOMMITTED) ON GES.BaPersonID = PRS.BaPersonID
       LEFT  JOIN dbo.BaInstitution          KVG WITH (READUNCOMMITTED) ON KVG.BaInstitutionID = GES.KVGOrganisationID
       LEFT  JOIN dbo.XOrgUnit_User          OUU WITH (READUNCOMMITTED) ON OUU.UserID = FAL.UserID AND
                                                 OUU.OrgUnitMemberCode = 2
       LEFT  JOIN dbo.XOrgUnit               ORG WITH (READUNCOMMITTED) ON ORG.OrgUnitID = OUU.OrgUnitID

       LEFT  JOIN dbo.BaAdresse              ADR WITH (READUNCOMMITTED) ON ADR.BaPersonID = PRS.BaPersonID

WHERE  FAL.ModulID = 3 AND -- Sozialhilfe
       @Jahr BETWEEN YEAR(FAL.DatumVon) AND ISNULL(YEAR(FAL.DatumBis),@Jahr) AND
       FT.Testperson = 0
--- AND ({edtFT} = 0 OR FT.BaPersonID = PRS.BaPersonID)
--- AND (ORG.OrgUnitID = {edtOrgUnitID} OR ORG.ParentID = {edtOrgUnitID})
--- AND FAL.UserID = {edtUserID.LookupID}

DECLARE @DontCare VARCHAR(5)
SET @DontCare = '-'

UPDATE #BFSMussFelder
SET    [AHV-Nr]             = @DontCare,
       PLZ                  = @DontCare,
       Ort                  = @DontCare,
       Heimatort            = @DontCare,
       InGemeindeSeit       = @DontCare,
       WohntImKantonSeit    = @DontCare,
       Geburtsdatum         = @DontCare,
       Geschlecht           = @DontCare,
       Zivilstand           = @DontCare,
       Nationalität         = @DontCare,
       Aufenthaltsstatus    = @DontCare,
       Wohnstatus           = @DontCare,
       Wohnungsgrösse       = @DontCare,
       Erwerbssituation     = @DontCare,
       BeschäftigungsGrad   = @DontCare,
       ErlernterBeruf       = @DontCare,
       WieOftArbeitslos3J   = @DontCare,
       LetzteTätigkeit      = @DontCare,
       KrankenkasseName     = @DontCare,
       KVGPrämie            = @DontCare,       
       [KVG Zuschuss]       = @DontCare,       
       [ALV]                = @DontCare,
       [IV-Rente]           = @DontCare,
       [MIZ]                = @DontCare,
       [IZU]                = @DontCare,
       [EFB]                = @DontCare,
       [Kinderzulage]       = @DontCare
WHERE Fallträger &lt;&gt; 'x'

UPDATE #BFSMussFelder
SET    BeziehungZuFT       = @DontCare
WHERE Fallträger = 'x'

---------------------------
--------- Abgespeckte Liste
---------------------------
SELECT Sektion,
       SAR,
       Fall,
       Geöffnet,
       Geschlossen,
       ArchiviertAm,
       Leistungsart,
       Fallträger,
       Person,
       PLZ,
       Ort,
       [Unters.Wohnsitz],
       Aufenthaltsort,
       Heimatort,
       InGemeindeSeit,
       [Zuzug Gemeinde],
       WohntImKantonSeit,
       [Zuzug Kanton],
       Geburtsdatum,
       Geschlecht,
       Zivilstand,
       Nationalität,
       Aufenthaltsstatus,
       AnzPersHaushalt,
       AnzPersUnterst,
       Wohnstatus,
       Wohnungsgrösse,
       Erwerbssituation,
       BeschäftigungsGrad,
       [Hauptgrund Teilzeit],
       Ausgesteuert,
       ErlernterBeruf,
       Branche,
       WieOftArbeitslos3J,
       LetzteTätigkeit,
       [Höchste Ausb.],
       BeziehungZuFT,
       KrankenkasseName,
       KVGPrämie,
       [KVG Zuschuss],
       [ALV],
       [IV-Rente],
       [MIZ],
       [IZU],
       [EFB], 
       BaPersonID$
FROM #BFSMussFelder 
ORDER BY Sektion, SAR, Fall, Fallträger DESC, Person</value>
  </data>
  <assembly alias="System.Drawing" name="System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="xDocument.Properties.Buttons" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        iVBORw0KGgoAAAANSUhEUgAAAAwAAAAQCAYAAAAiYZ4HAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8
        YQUAAAAgY0hSTQAAeiYAAICEAAD6AAAAgOgAAHUwAADqYAAAOpgAABdwnLpRPAAAAF1JREFUOE9jZAAC
        Y2Pj/yAaGzh79iwjhjhIw///MzGwmJjYfxDGqSEtjeE/MgYpBhmEoYmQDSANKM7GpQHZmVg1oDsJxgdp
        pI4N2EIKJjbqJLIiDqSJEMaVovGKAwBnM3PWBP8PfwAAAABJRU5ErkJggg==
</value>
  </data>
</root>
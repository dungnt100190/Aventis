<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <metadata name="qryQuery.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>17, 17</value>
  </metadata>
  <data name="qryQuery.SelectStatement" xml:space="preserve">
    <value>BEGIN

CREATE TABLE #Fallzahlen
(
  Fallträger     VARCHAR(5),
  Geschlecht     VARCHAR(5),
  Zivilstand     VARCHAR(30),
  Nationalität   VARCHAR(50),
  AlterTyp       VARCHAR(50),
  SARSektion     VARCHAR(100)
)

CREATE TABLE #tmp
(
  Sektion VARCHAR(40),
  Thema   VARCHAR(40),
  Detail  VARCHAR(40),
  Anzahl  INT
)

INSERT #Fallzahlen
SELECT Fallträger      = CASE 
                           WHEN FAL.BaPersonID = PRS.BaPersonID THEN 'x'
                           ELSE ''
                         END,
       Geschlecht      = CASE PRS.GeschlechtCode
                           WHEN 1 THEN 'M'
                           WHEN 2 THEN 'F'
                           ELSE '?'
                         END,
       Zivilstand      = CASE 
                           WHEN PRS.ZivilstandCode IN (1,2,3,4,5) THEN dbo.fnLOVText('Zivilstand', PRS.ZivilstandCode)
                           ELSE '?'
                         END,
       Nationalität    = CASE 
                           WHEN PRS.NationalitaetCode IS NULL THEN 'Schweiz'
                           ELSE PRS.Nationalitaet
                         END,
       AlterTyp        = CASE 
                           WHEN CONVERT(INT, ((DATEDIFF(dd, PRS.Geburtsdatum, GETDATE()) +.5) / 365.25)) &lt; 18 THEN '0 - 17'
                           WHEN CONVERT(INT, ((DATEDIFF(dd, PRS.Geburtsdatum, GETDATE()) +.5) / 365.25)) BETWEEN 18 AND 25 THEN '18-25'
                           WHEN CONVERT(INT, ((DATEDIFF(dd, PRS.Geburtsdatum, GETDATE()) +.5) / 365.25)) BETWEEN 26 AND 35 THEN '26-35'
                           WHEN CONVERT(INT, ((DATEDIFF(dd, PRS.Geburtsdatum, GETDATE()) +.5) / 365.25)) BETWEEN 36 AND 50 THEN '36-50'
                           WHEN CONVERT(INT, ((DATEDIFF(dd, PRS.Geburtsdatum, GETDATE()) +.5) / 365.25)) BETWEEN 51 AND 65 THEN '51-65'
                           WHEN CONVERT(INT, ((DATEDIFF(dd, PRS.Geburtsdatum, GETDATE()) +.5) / 365.25)) &gt; 65 THEN 'ab 66  '
                           ELSE '?'
                         END,
       SARSektion      = ISNULL(
                         (SELECT MAX(ItemName)
                          FROM dbo.XOrgUnit_User    OUU WITH (READUNCOMMITTED)
                            INNER JOIN dbo.XOrgUnit ORG WITH (READUNCOMMITTED) ON ORG.OrgUnitID = OUU.OrgUnitID
                          WHERE OUU.UserID = FAL.UserID 
                            AND OUU.OrgUnitMemberCode = 2),'-')
FROM   dbo.FaLeistung FAL WITH (READUNCOMMITTED)
  INNER JOIN dbo.BgFinanzplan          FP  WITH (READUNCOMMITTED) ON FP.FaLeistungID = FAL.FaLeistungID
                                                                 AND FP.BgFinanzplanID = (SELECT TOP 1 SUB.BgFinanzplanID
                                                                                          FROM dbo.BgFinanzplan SUB WITH (READUNCOMMITTED)
                                                                                          WHERE SUB.FaLeistungID = FAL.FaLeistungID
                                                                                            AND SUB.BgBewilligungStatusCode IN (5, 9)
---and {edtJahr} between year(DatumVon) and year(DatumBis)
---     AND ({edtDatumVon} BETWEEN DatumVon AND DatumBis
---     OR {edtDatumBis} BETWEEN DatumVon AND DatumBis
---     OR DatumVon BETWEEN {edtDatumVon} AND {edtDatumBis})
                                                                                          ORDER BY SUB.DatumVon DESC)
 LEFT  JOIN dbo.BgFinanzplan_BaPerson FPP WITH (READUNCOMMITTED) ON FPP.BgFinanzplanID = FP.BgFinanzplanID
                                                                 AND FPP.IstUnterstuetzt = 1              
 LEFT  JOIN dbo.vwPerson              PRS ON PRS.BaPersonID = FPP.BaPersonID                                                                                          
WHERE  FAL.ModulID = 3  AND -- Sozialhilfe
       PRS.Testperson = 0
---     AND  ({edtDatumVon} BETWEEN FAL.DatumVon AND ISNULL(FAL.DatumBis, {edtDatumVon})
---     OR {edtDatumBis} BETWEEN FAL.DatumVon AND ISNULL(FAL.DatumBis, {edtDatumBis})
---     OR FAL.DatumVon BETWEEN {edtDatumVon} AND {edtDatumBis})
---     AND {edtJahr} BETWEEN YEAR(FAL.DatumVon) AND ISNULL(YEAR(FAL.DatumBis), {edtJahr})
---     AND ISNULL({edtGemeindeCode}, FAL.GemeindeCode) = FAL.GemeindeCode

-- Zivilstand
INSERT #tmp
SELECT SARSektion, 'Zivilstand', Zivilstand, COUNT(*) Anzahl 
FROM #Fallzahlen
WHERE Fallträger = 'x'
GROUP BY SARSektion, Zivilstand
ORDER BY SARSektion, Zivilstand

-- Geschlecht
INSERT #tmp
SELECT SARSektion, 'Geschlecht', Geschlecht, COUNT(*) Anzahl 
FROM #Fallzahlen
GROUP BY SARSektion, Geschlecht
ORDER BY SARSektion, Geschlecht

-- Altersgruppe
INSERT #tmp
SELECT SARSektion, 'Altersgruppe', AlterTyp, COUNT(*) Anzahl 
FROM #Fallzahlen
GROUP BY SARSektion, AlterTyp
ORDER BY SARSektion, AlterTyp

-- CH/Ausland
INSERT #tmp
SELECT 
  SARSektion,
  'CH/Ausland',
  case 
    when Nationalität = 'Schweiz' and Geschlecht = 'F' then 'Schweizerin'
    when Nationalität = 'Schweiz' and Geschlecht = 'M' then 'Schweizer'
    when Nationalität = 'Schweiz' and Geschlecht = '?' then 'SchweizerIn(?)'
    when Nationalität &lt;&gt; 'Schweiz' and Geschlecht = 'F' then 'Ausländerin'
    when Nationalität &lt;&gt; 'Schweiz' and Geschlecht = 'M' then 'Ausländer'
    when Nationalität &lt;&gt; 'Schweiz' and Geschlecht = '?' then 'AusländerIn(?)'
  end,
  count(*) 
FROM #Fallzahlen
GROUP BY
  SARSektion,
  case 
    when Nationalität = 'Schweiz' and Geschlecht = 'F' then 'Schweizerin'
    when Nationalität = 'Schweiz' and Geschlecht = 'M' then 'Schweizer'
    when Nationalität = 'Schweiz' and Geschlecht = '?' then 'SchweizerIn(?)'
    when Nationalität &lt;&gt; 'Schweiz' and Geschlecht = 'F' then 'Ausländerin'
    when Nationalität &lt;&gt; 'Schweiz' and Geschlecht = 'M' then 'Ausländer'
    when Nationalität &lt;&gt; 'Schweiz' and Geschlecht = '?' then 'AusländerIn(?)'
  end
ORDER BY 1,2,3

SELECT 
  case when grouping(Sektion) = 1 then 'Total' else Sektion end as Sektion,
  sum(case Thema + '_' + Detail when 'Zivilstand_ledig' then Anzahl else 0 end) as Zivilstand_ledig,
  sum(case Thema + '_' + Detail when 'Zivilstand_verheiratet' then Anzahl else 0 end) as Zivilstand_verheiratet,
  sum(case Thema + '_' + Detail when 'Zivilstand_geschieden' then Anzahl else 0 end) as Zivilstand_geschieden,
  sum(case Thema + '_' + Detail when 'Zivilstand_verwitwet' then Anzahl else 0 end) as Zivilstand_verwitwet,
  sum(case Thema + '_' + Detail when 'Zivilstand_getrennt' then Anzahl else 0 end) as Zivilstand_getrennt,
  sum(case Thema + '_' + Detail when 'Zivilstand_?' then Anzahl else 0 end) as "Zivilstand_?",

  sum(case Thema + '_' + Detail when 'Geschlecht_F' then Anzahl else 0 end) as Geschlecht_F,
  sum(case Thema + '_' + Detail when 'Geschlecht_M' then Anzahl else 0 end) as Geschlecht_M,
  sum(case Thema + '_' + Detail when 'Geschlecht_?' then Anzahl else 0 end) as "Geschlecht_?",

  sum(case Thema + '_' + Detail when 'Altersgruppe_0 - 17' then Anzahl else 0 end) as "Altersgruppe_0 - 17",
  sum(case Thema + '_' + Detail when 'Altersgruppe_18-25' then Anzahl else 0 end) as "Altersgruppe_18-25",
  sum(case Thema + '_' + Detail when 'Altersgruppe_26-35' then Anzahl else 0 end) as "Altersgruppe_26-35",
  sum(case Thema + '_' + Detail when 'Altersgruppe_36-50' then Anzahl else 0 end) as "Altersgruppe_36-50",
  sum(case Thema + '_' + Detail when 'Altersgruppe_51-65' then Anzahl else 0 end) as "Altersgruppe_51-65",
  sum(case Thema + '_' + Detail when 'Altersgruppe_ab 66' then Anzahl else 0 end) as "Altersgruppe_ab 66",
  sum(case Thema + '_' + Detail when 'Altersgruppe_?' then Anzahl else 0 end) as "Altersgruppe ?",

  sum(case Thema + '_' + Detail when 'CH/Ausland_Ausländer' then Anzahl else 0 end) as "CH/Ausland_Ausländer",
  sum(case Thema + '_' + Detail when 'CH/Ausland_Ausländerin' then Anzahl else 0 end) as "CH/Ausland_Ausländerin",
  sum(case Thema + '_' + Detail when 'CH/Ausland_AusländerIn(?)' then Anzahl else 0 end) "as CH/Ausland_AusländerIn(?)",
  sum(case Thema + '_' + Detail when 'CH/Ausland_Schweizer' then Anzahl else 0 end) as "CH/Ausland_Schweizer",
  sum(case Thema + '_' + Detail when 'CH/Ausland_Schweizerin' then Anzahl else 0 end) as "CH/Ausland_Schweizerin",
  sum(case Thema + '_' + Detail when 'CH/Ausland_SchweizerIn(?)' then Anzahl else 0 end) as "CH/Ausland_SchweizerIn(?)"

FROM #tmp
GROUP BY Sektion WITH ROLLUP

DROP TABLE #Fallzahlen
DROP TABLE #tmp

END</value>
  </data>
  <assembly alias="System.Drawing" name="System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="xDocument.Properties.Buttons" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        iVBORw0KGgoAAAANSUhEUgAAAAwAAAAQCAYAAAAiYZ4HAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8
        YQUAAAAgY0hSTQAAeiYAAICEAAD6AAAAgOgAAHUwAADqYAAAOpgAABdwnLpRPAAAAF1JREFUOE9jZAAC
        Y2Pj/yAaGzh79iwjhjhIw///MzGwmJjYfxDGqSEtjeE/MgYpBhmEoYmQDSANKM7GpQHZmVg1oDsJxgdp
        pI4N2EIKJjbqJLIiDqSJEMaVovGKAwBnM3PWBP8PfwAAAABJRU5ErkJggg==
</value>
  </data>
  <data name="edtDatumVon.Properties.Buttons" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        iVBORw0KGgoAAAANSUhEUgAAAAwAAAAQCAYAAAAiYZ4HAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8
        YQUAAAAgY0hSTQAAeiYAAICEAAD6AAAAgOgAAHUwAADqYAAAOpgAABdwnLpRPAAAAFVJREFUOE9jZAAC
        Y2Pj/yCaEDh79iwjWA1MAzaNWOVAgsRguAuIcRKKGmROQwMD3D/IbKwaQApgitBp6mgAeYokG4abBmT/
        YKQ3smKapLREKFkjywMAd9eDN3Z9MMsAAAAASUVORK5CYII=
</value>
  </data>
  <data name="edtDatumBis.Properties.Buttons" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        iVBORw0KGgoAAAANSUhEUgAAAAwAAAAQCAYAAAAiYZ4HAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8
        YQUAAAAgY0hSTQAAeiYAAICEAAD6AAAAgOgAAHUwAADqYAAAOpgAABdwnLpRPAAAAFVJREFUOE9jZAAC
        Y2Pj/yCaEDh79iwjWA1MAzaNWOVAgsRguAuIcRKKGmROQwMD3D/IbKwaQApgitBp6mgAeYokG4abBmT/
        YKQ3smKapLREKFkjywMAd9eDN3Z9MMsAAAAASUVORK5CYII=
</value>
  </data>
  <metadata name="qryListe2.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>119, 17</value>
  </metadata>
  <data name="qryListe2.SelectStatement" xml:space="preserve">
    <value>BEGIN

CREATE TABLE #Fallzahlen
(
  Fallträger     VARCHAR(5),
  Geschlecht     VARCHAR(5),
  Zivilstand     VARCHAR(30),
  Nationalität   VARCHAR(50),
  AlterTyp       VARCHAR(50),
  SARGemeinde    VARCHAR(100)
)

CREATE TABLE #tmp
(
  Gemeinde VARCHAR(40),
  Thema   VARCHAR(40),
  Detail  VARCHAR(40),
  Anzahl  INT
)

INSERT #Fallzahlen
SELECT Fallträger      = CASE 
                           WHEN FAL.BaPersonID = PRS.BaPersonID THEN 'x'
                           ELSE ''
                         END,
       Geschlecht      = CASE PRS.GeschlechtCode
                           WHEN 1 THEN 'M'
                           WHEN 2 THEN 'F'
                           ELSE '?'
                         END,
       Zivilstand      = CASE 
                           WHEN PRS.ZivilstandCode IN (1,2,3,4,5) THEN dbo.fnLOVText('Zivilstand', PRS.ZivilstandCode)
                           ELSE '?'
                         END,
       Nationalität    = CASE 
                           WHEN PRS.NationalitaetCode IS NULL THEN 'Schweiz'
                           ELSE PRS.Nationalitaet
                         END,
       AlterTyp        = CASE 
                           WHEN CONVERT(INT, ((DATEDIFF(dd, PRS.Geburtsdatum, GETDATE()) +.5) / 365.25)) &lt; 18 THEN '0 - 17'
                           WHEN CONVERT(INT, ((DATEDIFF(dd, PRS.Geburtsdatum, GETDATE()) +.5) / 365.25)) BETWEEN 18 AND 25 THEN '18-25'
                           WHEN CONVERT(INT, ((DATEDIFF(dd, PRS.Geburtsdatum, GETDATE()) +.5) / 365.25)) BETWEEN 26 AND 35 THEN '26-35'
                           WHEN CONVERT(INT, ((DATEDIFF(dd, PRS.Geburtsdatum, GETDATE()) +.5) / 365.25)) BETWEEN 36 AND 50 THEN '36-50'
                           WHEN CONVERT(INT, ((DATEDIFF(dd, PRS.Geburtsdatum, GETDATE()) +.5) / 365.25)) BETWEEN 51 AND 65 THEN '51-65'
                           WHEN CONVERT(INT, ((DATEDIFF(dd, PRS.Geburtsdatum, GETDATE()) +.5) / 365.25)) &gt; 65 THEN 'ab 66  '
                           ELSE '?'
                         END,
       SARGemeinde     = ISNULL((SELECT GDE.Text FROM dbo.XLOVCode GDE WHERE GDE.LOVName = 'GemeindeSozialdienst' AND GDE.Code = FAL.GemeindeCode),'-')
FROM   dbo.FaLeistung FAL WITH (READUNCOMMITTED)
  INNER JOIN dbo.BgFinanzplan          FP  WITH (READUNCOMMITTED) ON FP.FaLeistungID = FAL.FaLeistungID
                                                                 AND FP.BgFinanzplanID = (SELECT TOP 1 SUB.BgFinanzplanID
                                                                                          FROM dbo.BgFinanzplan SUB WITH (READUNCOMMITTED)
                                                                                          WHERE SUB.FaLeistungID = FAL.FaLeistungID
                                                                                            AND SUB.BgBewilligungStatusCode IN (5, 9)
---and {edtJahr} between year(DatumVon) and year(DatumBis)
---     AND ({edtDatumVon} BETWEEN DatumVon AND DatumBis
---     OR {edtDatumBis} BETWEEN DatumVon AND DatumBis
---     OR DatumVon BETWEEN {edtDatumVon} AND {edtDatumBis})
                                                                                          ORDER BY SUB.DatumVon DESC)
 LEFT  JOIN dbo.BgFinanzplan_BaPerson FPP WITH (READUNCOMMITTED) ON FPP.BgFinanzplanID = FP.BgFinanzplanID
                                                                 AND FPP.IstUnterstuetzt = 1              
 LEFT  JOIN dbo.vwPerson              PRS ON PRS.BaPersonID = FPP.BaPersonID                                                                                          
WHERE  FAL.ModulID = 3  AND -- Sozialhilfe
       PRS.Testperson = 0
---     AND  ({edtDatumVon} BETWEEN FAL.DatumVon AND ISNULL(FAL.DatumBis, {edtDatumVon})
---     OR {edtDatumBis} BETWEEN FAL.DatumVon AND ISNULL(FAL.DatumBis, {edtDatumBis})
---     OR FAL.DatumVon BETWEEN {edtDatumVon} AND {edtDatumBis})
---     AND {edtJahr} BETWEEN YEAR(FAL.DatumVon) AND ISNULL(YEAR(FAL.DatumBis), {edtJahr})
---     AND ISNULL({edtGemeindeCode}, FAL.GemeindeCode) = FAL.GemeindeCode

-- Zivilstand
INSERT #tmp
SELECT SARGemeinde, 'Zivilstand', Zivilstand, COUNT(*) Anzahl 
FROM #Fallzahlen
WHERE Fallträger = 'x'
GROUP BY SARGemeinde, Zivilstand
ORDER BY SARGemeinde, Zivilstand

-- Geschlecht
INSERT #tmp
SELECT SARGemeinde, 'Geschlecht', Geschlecht, COUNT(*) Anzahl 
FROM #Fallzahlen
GROUP BY SARGemeinde, Geschlecht
ORDER BY SARGemeinde, Geschlecht

-- Altersgruppe
INSERT #tmp
SELECT SARGemeinde, 'Altersgruppe', AlterTyp, COUNT(*) Anzahl 
FROM #Fallzahlen
GROUP BY SARGemeinde, AlterTyp
ORDER BY SARGemeinde, AlterTyp

-- CH/Ausland
INSERT #tmp
SELECT 
  SARGemeinde,
  'CH/Ausland',
  case 
    when Nationalität = 'Schweiz' and Geschlecht = 'F' then 'Schweizerin'
    when Nationalität = 'Schweiz' and Geschlecht = 'M' then 'Schweizer'
    when Nationalität = 'Schweiz' and Geschlecht = '?' then 'SchweizerIn(?)'
    when Nationalität &lt;&gt; 'Schweiz' and Geschlecht = 'F' then 'Ausländerin'
    when Nationalität &lt;&gt; 'Schweiz' and Geschlecht = 'M' then 'Ausländer'
    when Nationalität &lt;&gt; 'Schweiz' and Geschlecht = '?' then 'AusländerIn(?)'
  end,
  count(*) 
FROM #Fallzahlen
GROUP BY
  SARGemeinde,
  case 
    when Nationalität = 'Schweiz' and Geschlecht = 'F' then 'Schweizerin'
    when Nationalität = 'Schweiz' and Geschlecht = 'M' then 'Schweizer'
    when Nationalität = 'Schweiz' and Geschlecht = '?' then 'SchweizerIn(?)'
    when Nationalität &lt;&gt; 'Schweiz' and Geschlecht = 'F' then 'Ausländerin'
    when Nationalität &lt;&gt; 'Schweiz' and Geschlecht = 'M' then 'Ausländer'
    when Nationalität &lt;&gt; 'Schweiz' and Geschlecht = '?' then 'AusländerIn(?)'
  end
ORDER BY 1,2,3

SELECT 
  case when grouping(Gemeinde) = 1 then 'Total' else Gemeinde end as Gemeinde,
  sum(case Thema + '_' + Detail when 'Zivilstand_ledig' then Anzahl else 0 end) as Zivilstand_ledig,
  sum(case Thema + '_' + Detail when 'Zivilstand_verheiratet' then Anzahl else 0 end) as Zivilstand_verheiratet,
  sum(case Thema + '_' + Detail when 'Zivilstand_geschieden' then Anzahl else 0 end) as Zivilstand_geschieden,
  sum(case Thema + '_' + Detail when 'Zivilstand_verwitwet' then Anzahl else 0 end) as Zivilstand_verwitwet,
  sum(case Thema + '_' + Detail when 'Zivilstand_getrennt' then Anzahl else 0 end) as Zivilstand_getrennt,
  sum(case Thema + '_' + Detail when 'Zivilstand_?' then Anzahl else 0 end) as "Zivilstand_?",

  sum(case Thema + '_' + Detail when 'Geschlecht_F' then Anzahl else 0 end) as Geschlecht_F,
  sum(case Thema + '_' + Detail when 'Geschlecht_M' then Anzahl else 0 end) as Geschlecht_M,
  sum(case Thema + '_' + Detail when 'Geschlecht_?' then Anzahl else 0 end) as "Geschlecht_?",

  sum(case Thema + '_' + Detail when 'Altersgruppe_0 - 17' then Anzahl else 0 end) as "Altersgruppe_0 - 17",
  sum(case Thema + '_' + Detail when 'Altersgruppe_18-25' then Anzahl else 0 end) as "Altersgruppe_18-25",
  sum(case Thema + '_' + Detail when 'Altersgruppe_26-35' then Anzahl else 0 end) as "Altersgruppe_26-35",
  sum(case Thema + '_' + Detail when 'Altersgruppe_36-50' then Anzahl else 0 end) as "Altersgruppe_36-50",
  sum(case Thema + '_' + Detail when 'Altersgruppe_51-65' then Anzahl else 0 end) as "Altersgruppe_51-65",
  sum(case Thema + '_' + Detail when 'Altersgruppe_ab 66' then Anzahl else 0 end) as "Altersgruppe_ab 66",
  sum(case Thema + '_' + Detail when 'Altersgruppe_?' then Anzahl else 0 end) as "Altersgruppe ?",

  sum(case Thema + '_' + Detail when 'CH/Ausland_Ausländer' then Anzahl else 0 end) as "CH/Ausland_Ausländer",
  sum(case Thema + '_' + Detail when 'CH/Ausland_Ausländerin' then Anzahl else 0 end) as "CH/Ausland_Ausländerin",
  sum(case Thema + '_' + Detail when 'CH/Ausland_AusländerIn(?)' then Anzahl else 0 end) "as CH/Ausland_AusländerIn(?)",
  sum(case Thema + '_' + Detail when 'CH/Ausland_Schweizer' then Anzahl else 0 end) as "CH/Ausland_Schweizer",
  sum(case Thema + '_' + Detail when 'CH/Ausland_Schweizerin' then Anzahl else 0 end) as "CH/Ausland_Schweizerin",
  sum(case Thema + '_' + Detail when 'CH/Ausland_SchweizerIn(?)' then Anzahl else 0 end) as "CH/Ausland_SchweizerIn(?)"

FROM #tmp
GROUP BY Gemeinde WITH ROLLUP

DROP TABLE #Fallzahlen
DROP TABLE #tmp

END</value>
  </data>
</root>
<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <metadata name="qryQuery.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>17, 17</value>
  </metadata>
  <data name="qryQuery.SelectStatement" xml:space="preserve">
    <value>DECLARE @Erhebungsjahr INT;

SET @Erhebungsjahr = YEAR(GetDate());

--- SET @Erhebungsjahr = {edtJahr};

SELECT Fall            = FT.Name + ISNULL(', ' + FT.Vorname,''),
       Geöffnet        = FAL.DatumVon,
       Geschlossen     = FAL.DatumBis,
       Fallträger      = CONVERT(BIT, CASE 
                                        WHEN FT.BaPersonID = PRS.BaPersonID THEN 1
                                        ELSE 0
                                      END),
       Person          = PRS.NameVorname,
       Geschlecht      = CASE PRS.GeschlechtCode
                           WHEN 1 THEN 'm'
                           WHEN 2 THEN 'f'
                           ELSE '?'
                         END,
       Strasse         = PRS.WohnsitzStrasse,
       StrasseNr       = PRS.WohnsitzHausNr,
       PLZ             = PRS.WohnsitzPLZ,
       Ort             = PRS.WohnsitzOrt,
       Kanton          = PRS.WohnsitzKanton,
       Zivilstand      = dbo.fnLOVText('Zivilstand', PRS.ZivilstandCode),
       Nationalität    = PRS.Nationalitaet,
       Heimatort       = PRS.Heimatort,       
       Geburtsdatum    = PRS.Geburtsdatum,
       [AHV-Nummer]    = PRS.AHVNummer,
       Versichertennummer = PRS.Versichertennummer,
       [Alter]         = CONVERT(INT, ((DATEDIFF(dd, PRS.Geburtsdatum, GETDATE()) + 0.5) / 365.25)),
       AlterTyp        = CASE
                           WHEN CONVERT(INT, ((DATEDIFF(dd, PRS.Geburtsdatum, GETDATE()) + 0.5) / 365.25)) &lt; 18 THEN '0 - 17'
                           WHEN CONVERT(INT, ((DATEDIFF(dd, PRS.Geburtsdatum, GETDATE()) + 0.5) / 365.25)) BETWEEN 18 AND 25 THEN '18-25'
                           WHEN CONVERT(INT, ((DATEDIFF(dd, PRS.Geburtsdatum, GETDATE()) + 0.5) / 365.25)) BETWEEN 26 AND 35 THEN '26-35'
                           WHEN CONVERT(INT, ((DATEDIFF(dd, PRS.Geburtsdatum, GETDATE()) + 0.5) / 365.25)) BETWEEN 36 AND 50 THEN '36-50'
                           WHEN CONVERT(INT, ((DATEDIFF(dd, PRS.Geburtsdatum, GETDATE()) + 0.5) / 365.25)) BETWEEN 51 AND 65 THEN '51-65'
                           WHEN CONVERT(INT, ((DATEDIFF(dd, PRS.Geburtsdatum, GETDATE()) + 0.5) / 365.25)) &gt; 65 THEN 'ab 66 '
                           ELSE '?'
                         END,
       [SAR Name]      = USR.LastName + ISNULL(', ' + USR.Firstname, ''),
       [SAR Kürzel]    = USR.LogonName,
       [SAR Sektion]   = (SELECT MAX(SUB2.ItemName)
                          FROM dbo.XOrgUnit_User    SUB1 WITH (READUNCOMMITTED)
                            INNER JOIN dbo.XOrgUnit SUB2 WITH (READUNCOMMITTED) ON SUB2.OrgUnitID = SUB1.OrgUnitID
                          WHERE SUB1.UserID = FAL.UserID
                            AND SUB1.OrgUnitMemberCode = 2),
       Gemeinde        = (SELECT SUB.[Text] FROM dbo.XLOVCode SUB WHERE SUB.LOVName = 'GemeindeSozialdienst' AND SUB.Code = FAL.GemeindeCode),
       AnzPersHaushalt = (SELECT COUNT(1)
                          FROM dbo.BgFinanzplan_BaPerson SUB WITH (READUNCOMMITTED)
                          WHERE SUB.BgFinanzplanID = FP.BgFinanzplanID),
       AnzPersUnterst  = (SELECT COUNT(1)
                          FROM dbo.BgFinanzplan_BaPerson SUB WITH (READUNCOMMITTED)
                          WHERE SUB.BgFinanzplanID = FP.BgFinanzplanID
                            AND SUB.IstUnterstuetzt = 1),
       AnzahlUE        = (SELECT COUNT(1)
                          FROM dbo.FaLeistung SUB WITH (READUNCOMMITTED)
                          WHERE SUB.BaPersonID = FAL.BaPersonID
                            AND SUB.ModulID = 3
                            AND @Erhebungsjahr BETWEEN YEAR(SUB.DatumVon) AND ISNULL(YEAR(SUB.DatumBis), @Erhebungsjahr)),
       AnzahlFP        = (SELECT COUNT(1)
                          FROM dbo.FaLeistung           SUB1 WITH (READUNCOMMITTED)
                            INNER JOIN dbo.BgFinanzplan SUB2 WITH (READUNCOMMITTED) ON SUB2.FaLeistungID = SUB1.FaLeistungID
                                                                                   AND SUB2.BgBewilligungStatusCode in (5, 9)
                                                                                   AND @Erhebungsjahr BETWEEN Year(SUB2.DatumVon)AND IsNull(Year(SUB2.DatumBis), @Erhebungsjahr)
                          WHERE SUB1.BaPersonID = FAL.BaPersonID),      
       ArchiviertAm    = (SELECT SUB.CheckIn
                          FROM dbo.FaLeistungArchiv SUB WITH (READUNCOMMITTED)
                          WHERE SUB.FaLeistungID = FAL.FaLeistungID 
                            AND SUB.CheckOut IS NULL),
       BaPersonID$ = FAL.BaPersonID
FROM dbo.FaLeistung                    FAL WITH (READUNCOMMITTED)              
  INNER JOIN dbo.BaPerson              FT  WITH (READUNCOMMITTED) ON FT.BaPersonID = FAL.BaPersonID
  INNER JOIN dbo.XUser                 USR WITH (READUNCOMMITTED) ON USR.UserID = FAL.UserID
  INNER JOIN dbo.BgFinanzplan          FP  WITH (READUNCOMMITTED) ON FP.FaLeistungID = FAL.FaLeistungID
                                                                 AND FP.BgFinanzplanID = (SELECT TOP 1 SUB.BgFinanzplanID
                                                                                          FROM dbo.BgFinanzplan SUB WITH (READUNCOMMITTED)
                                                                                          WHERE SUB.FaLeistungID = FAL.FaLeistungID
                                                                                            AND SUB.BgBewilligungStatusCode IN (5, 9)
                                                                                            AND @Erhebungsjahr BETWEEN Year(SUB.DatumVon) AND Year(SUB.DatumBis)
                                                                                          ORDER BY SUB.DatumVon DESC)
  LEFT  JOIN dbo.BgFinanzplan_BaPerson FPP WITH (READUNCOMMITTED) ON FPP.BgFinanzplanID = FP.BgFinanzplanID
                                                                 AND FPP.IstUnterstuetzt = 1              
  LEFT  JOIN dbo.vwPerson              PRS ON PRS.BaPersonID = FPP.BaPersonID
WHERE FAL.ModulID = 3 -- Sozialhilfe
--- AND ({edtFT} = 0 OR FT.BaPersonID = PRS.BaPersonID)
--- AND ({edtGemeindeCode} IS NULL OR {edtGemeindeCode} = FAL.GemeindeCode)
  AND FT.Testperson = 0 
  AND @Erhebungsjahr BETWEEN YEAR(FAL.DatumVon) AND ISNULL(YEAR(FAL.DatumBis), @Erhebungsjahr);</value>
  </data>
  <assembly alias="System.Drawing" name="System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="xDocument.Properties.Buttons" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        iVBORw0KGgoAAAANSUhEUgAAAAwAAAAQCAYAAAAiYZ4HAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8
        YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAABbSURBVDhPY2AAAmNj4/+4MEgeA4AU//8/EwOLiYn9B2Gc
        GtLSGP4jY5BikEEYmgjZANIAUgO3CZcGZGdi1YDuJBgfpJE6NmALKZjYqJPIijh8KRYmhzXlEhIEANZ8
        ev1ASni6AAAAAElFTkSuQmCC
</value>
  </data>
</root>
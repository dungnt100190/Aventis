<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="sqlQuery1.TrayLocation" type="System.Drawing.Point, System.Drawing">
    <value>115, 17</value>
  </data>
  <data name="qryQuery.SelectStatement" xml:space="preserve">
    <value>SELECT BaPersonID$ = PRS.BaPersonID,
       BgFinanzplanID$ = SFP.BgFinanzplanID,
       Sektion = ORG.ItemName,
       SAR = USR.LastName + IsNull(', ' + USR.FirstName,''),
       KlientIn = PRS.Name + IsNull(', ' + PRS.Vorname,''),
       [Finanzplan-Nr] = SFP.BgFinanzplanID,
       Typ = TYP.Text,
       Status = STA.Text,
       [geplant von] = SFP.GeplantVon,
       [geplant bis] = SFP.GeplantBis,
       [effektiv von] = SFP.DatumVon,
       [effektiv bis] = SFP.DatumBis,
       Eröffnungsgrund = EGR.Text,
       Abschlussgrund = AGR.Text,
       [Anz. Bew.Anfragen] = (SELECT COUNT(*) BgBewilligungID
                              FROM   dbo.BgBewilligung WITH (READUNCOMMITTED)
                              WHERE  BgFinanzplanID = SFP.BgFinanzplanID AND
                                     BgBewilligungCode = 1),
       [Anz. Bew.Antworten] = (SELECT COUNT(*) BgBewilligungID
                               FROM   dbo.BgBewilligung WITH (READUNCOMMITTED)
                               WHERE  BgFinanzplanID = SFP.BgFinanzplanID AND
                                      BgBewilligungCode &lt;&gt; 1)
FROM   dbo.BgFinanzplan SFP WITH (READUNCOMMITTED)
       INNER JOIN dbo.FaLeistung        FAL WITH (READUNCOMMITTED) ON FAL.FaLeistungID = SFP.FaLeistungID
       INNER JOIN dbo.BaPerson     PRS WITH (READUNCOMMITTED) ON PRS.BaPersonID = FAL.BaPersonID
       INNER JOIN dbo.XUser         USR WITH (READUNCOMMITTED) ON USR.UserID = FAL.UserID
       LEFT  JOIN dbo.XOrgUnit_User OUU WITH (READUNCOMMITTED) ON OUU.UserID = USR.UserID AND OUU.OrgUnitMemberCode = 2
       LEFT  JOIN dbo.XOrgUnit      ORG WITH (READUNCOMMITTED) ON ORG.OrgUnitID = OUU.OrgUnitID
       LEFT  JOIN dbo.XLOVCode      STA WITH (READUNCOMMITTED) ON STA.LOVName = 'BgBewilligungStatus'          AND STA.Code = BgBewilligungStatusCode
       LEFT  JOIN dbo.XLOVCode      TYP WITH (READUNCOMMITTED) ON TYP.LOVName = 'WhHilfeTyp'             AND TYP.Code = WhHilfeTypCode
       LEFT  JOIN dbo.XLOVCode      EGR WITH (READUNCOMMITTED) ON EGR.LOVName = 'BgFPGrundEroeffnung' AND EGR.Code = BgGrundEroeffnenCode
       LEFT  JOIN dbo.XLOVCode      AGR WITH (READUNCOMMITTED) ON AGR.LOVName = 'BgFPGrundAbschluss'  AND AGR.Code = BgGrundAbschlussCode
WHERE 1 = 1
--- AND (OUU.OrgUnitID = {edtOrgUnitID} OR ORG.ParentID = {edtOrgUnitID})
--- and USR.UserID = {edtUserID.LookupID}
--- AND EXISTS (SELECT *                                                                               -- {edtShGrundbedarfTypCode}
---             FROM BgBudget            BBG                                                           -- {edtShGrundbedarfTypCode}
---               INNER JOIN dbo.BgPosition  BPO WITH (READUNCOMMITTED) ON BPO.BgBudgetID = BBG.BgBudgetID AND BPO.BgPositionsartID = {edtShGrundbedarfTypCode}
---             WHERE BBG.BgFinanzplanID = SFP.BgFinanzplanID AND BBG.Masterbudget = 1)    -- {edtShGrundbedarfTypCode}
--- AND SFP.BgBewilligungStatusCode = {edtBgBewilligungStatusCode}

--- AND IsNull(SFP.DatumVon, SFP.GeplantVon) &gt;= {edtEroeffnungDatumVon}
--- AND IsNull(SFP.DatumVon, SFP.GeplantVon) &lt;= {edtEroeffnungDatumBis}
--- AND IsNull(SFP.DatumBis, SFP.GeplantBis) &gt;= {edtAbschlussDatumVon}
--- AND IsNull(SFP.DatumBis, SFP.GeplantBis) &lt;= {edtAbschlussDatumBis}

--- AND SFP.GeplantVon &gt;= {edtEroeffnungGeplantVon}
--- AND SFP.GeplantVon &lt;= {edtEroeffnungGeplantBis}
--- AND SFP.GeplantBis &gt;= {edtAbschlussGeplantVon}
--- AND SFP.GeplantBis &lt;= {edtAbschlussGeplantBis}

--- AND {edtJahr} BETWEEN YEAR(IsNull(SFP.DatumVon, SFP.GeplantVon)) AND YEAR(COALESCE(SFP.DatumBis, SFP.GeplantBis, GETDATE()))

  AND (NOT EXISTS (SELECT 1
                   FROM dbo.BgFinanzplan    FP WITH (READUNCOMMITTED)
                   WHERE FP.FaLeistungID = FAL.FaLeistungID
                     AND IsNull(FP.DatumVon, FP.GeplantVon) &gt; IsNull(SFP.DatumVon, SFP.GeplantVon)
---                  AND IsNull(FP.DatumVon, FP.GeplantVon) &gt;= {edtEroeffnungDatumVon}
---                  AND IsNull(FP.DatumVon, FP.GeplantVon) &lt;= {edtEroeffnungDatumBis}
---                  AND IsNull(FP.DatumBis, FP.GeplantBis) &gt;= {edtAbschlussDatumVon}
---                  AND IsNull(FP.DatumBis, FP.GeplantBis) &lt;= {edtAbschlussDatumBis}

---                  AND FP.GeplantVon &gt;= {edtEroeffnungGeplantVon}
---                  AND FP.GeplantVon &lt;= {edtEroeffnungGeplantBis}
---                  AND FP.GeplantBis &gt;= {edtAbschlussGeplantVon}
---                  AND FP.GeplantBis &lt;= {edtAbschlussGeplantBis}

---                  AND {edtJahr} BETWEEN YEAR(IsNull(FP.DatumVon, FP.GeplantVon)) AND YEAR(COALESCE(FP.DatumBis, FP.GeplantBis, GETDATE()))
                  )
---         OR {edtLastFinanzPlan} = 0
      )
ORDER BY Sektion, SAR, KlientIn, IsNull(SFP.DatumVon,SFP.GeplantVon)</value>
  </data>
  <data name="qryQuery.TrayLocation" type="System.Drawing.Point, System.Drawing">
    <value>17, 17</value>
  </data>
  <data name="xDocument.Properties.Buttons" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        iVBORw0KGgoAAAANSUhEUgAAAAwAAAAQCAYAAAAiYZ4HAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8
        YQUAAAAgY0hSTQAAeiYAAICEAAD6AAAAgOgAAHUwAADqYAAAOpgAABdwnLpRPAAAAF1JREFUOE9jZAAC
        Y2Pj/yAaGzh79iwjhjhIw///MzGwmJjYfxDGqSEtjeE/MgYpBhmEoYmQDSANKM7GpQHZmVg1oDsJxgdp
        pI4N2EIKJjbqJLIiDqSJEMaVovGKAwBnM3PWBP8PfwAAAABJRU5ErkJggg==
</value>
  </data>
</root>
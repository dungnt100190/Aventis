<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="qryQuery.SelectStatement" xml:space="preserve">
    <value>DECLARE @tmp TABLE (
  ID            int identity,
  SAR           varchar(200),
  Person        varchar(200),
  [Eröffnet]  	datetime,
  Geburtsdatum  datetime,
  [Alter]     	int,
  Altertyp	varchar(20),
  Geschlecht    varchar(50),       
  [Nationalität]	varchar(200),      
  [Letzte Tätigkeit] 	varchar(200),
  UserID$       int,
  BaPersonID$   int,
  [Höchste Ausb.]	varchar(200),
  [IV Abklärung]       	varchar(200),
  [Eingangsbestätigung] datetime,
  [Eröffnungsgrund] 	varchar(150)
primary key (ID))

DECLARE @FieldID INT
EXEC dbo.spGetDynaFldIDfromTextmarke 'FaIntEingangsbestätigung', @FieldID out

insert into @tmp
select SAR                = BEN.LastName + isNull(', ' + BEN.FirstName,''),
       Person             = PRS.NameVorname,
       [Eröffnet]         = FAL.DatumVon,
       Geburtsdatum       = PRS.Geburtsdatum,
       [Alter]            = PRS.[Alter],
       Altertyp           = case 
                                when PRS.[Alter] between 0 and 17 then '0-17'
                                when PRS.[Alter] between 18 and 25 then '18-25'
                                when PRS.[Alter] between 26 and 35 then '26-35'
                                when PRS.[Alter] between 36 and 50 then '36-50'
                                when PRS.[Alter] between 51 and 65 then '51-65'
                                else 'ab 66' end,
       Geschlecht         = dbo.fnLOVText('Geschlecht',PRS.GeschlechtCode),       
       [Nationalität]     = PRS.Nationalitaet,      
       [Letzte Tätigkeit] = dbo.fnLOVText('Beruf', ARB.BerufCode),
       UserID$            = BEN.UserID,
       BaPersonID$       = PRS.BaPersonID,
	  [Höchste Ausb.]    = dbo.fnLOVText('Ausbildungstyp', ARB.HoechsteAusbildungCode),
       [IV Abklärung]       = dbo.fnLOVText('IV-Eingliederung', DGS.IVEingliederungsmassnahmeCode),
	  [Eingangsbestätigung] = (select Convert(DateTime, DV1.Value, 104)
		from DynaValue DV1 
		where DV1.DynaFieldID = @FieldID
		and DV1.FaPhaseID = (select top 1 PHA.FaPhaseID 
				     from FaPhase PHA
					inner join FaLeistung FAL1 on FAL1.FaLeistungID = PHA.FaLeistungID
							and FAL1.BaPersonID = FAL.BaPersonID
							and FAL1.ModulID = 2
					where 1 = 1
--- 					AND FAL1.DatumBis is NULL or FAL1.DatumBis &gt;= {edtEroeffnungVon}
--- 					AND FAL1.DatumVon &lt;= {edtEroeffnungBis}					
--- 					AND PHA.DatumVon &gt;= {edtEroeffnungVon}
--- 					AND PHA.DatumVon &lt;= {edtEroeffnungBis}
					order by PHA.DatumVon DESC)),
	[Eröffnungsgrund] = FAL.EroeffnungsGrundCode
from   XUser BEN
	inner join FaLeistung         FAL on FAL.UserID = BEN.UserID
     	inner join vwPerson          PRS on PRS.BaPersonID = FAL.BaPersonID
                                          and FAL.ModulId = 3
	left  join BaGesundheit DGS on DGS.BaPersonID = PRS.BaPersonID
	left  join BaArbeitAusbildung ARB on ARB.BaPersonID = PRS.BaPersonID
	left  join XOrgUnit_User      OUU on OUU.UserID = FAL.UserID
                                          and OUU.OrgUnitMemberCode = 2
	left  join XOrgUnit           ORG on ORG.OrgUnitID = OUU.OrgUnitID	
where 1 = 1 
AND (PersonSichtbarSDFlag = dbo.fnGetPersonSichtbarFlag({0}) or PersonSichtbarSDFlag = 1) 
--- AND BEN.UserID =  {edtUserID.LookupID} 
--- AND (ORG.OrgUnitID = {edtOrgUnitID} OR ORG.ParentID = {edtOrgUnitID})
--- AND (       ({edtAlter}=1 AND PRS.[Alter] &gt;= 0  and  PRS.[Alter] &lt;=17)
---         OR  ({edtAlter}=2 AND PRS.[Alter] &gt;= 18  and  PRS.[Alter] &lt;=25)
---         OR  ({edtAlter}=3 AND PRS.[Alter] &gt;= 26  and  PRS.[Alter] &lt;=35)
---         OR  ({edtAlter}=4 AND PRS.[Alter] &gt;= 36  and  PRS.[Alter] &lt;=50)
---         OR  ({edtAlter}=5 AND PRS.[Alter] &gt;= 51  and  PRS.[Alter] &lt;=65)
---         OR  ({edtAlter}=6 AND PRS.[Alter] &gt;= 65)
---     ) -- {edtAlter} closing bracket
--- AND PRS.GeschlechtCode          = {edtGeschlecht}
--- AND PRS.NationalitaetCode       = {edtNationalitaet}


select SAR, Person, [Eingangsbestätigung], Geburtsdatum, [Alter], Altertyp,
  Geschlecht, [Nationalität], [Letzte Tätigkeit], UserID$,
  BaPersonID$, [Höchste Ausb.], [IV Abklärung], 
  [Eröffnungsgrund] = dbo.fnLOVText('Eroeffnungsgrund', [Eröffnungsgrund])
from @tmp
where 1 = 1
--- AND [Eingangsbestätigung] &gt;= {edtEroeffnungVon}
--- AND [Eingangsbestätigung] &lt;= {edtEroeffnungBis}
--- AND [Eröffnungsgrund] = {edtEroeffGrund}
order by SAR, Person</value>
  </data>
  <assembly alias="System.Drawing" name="System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="qryQuery.TrayLocation" type="System.Drawing.Point, System.Drawing">
    <value>17, 17</value>
  </data>
  <data name="xDocument.Properties.Buttons" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        iVBORw0KGgoAAAANSUhEUgAAAAwAAAAQCAYAAAAiYZ4HAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8
        YQUAAAAgY0hSTQAAeiYAAICEAAD6AAAAgOgAAHUwAADqYAAAOpgAABdwnLpRPAAAAF1JREFUOE9jZAAC
        Y2Pj/yAaGzh79iwjhjhIw///MzGwmJjYfxDGqSEtjeE/MgYpBhmEoYmQDSANKM7GpQHZmVg1oDsJxgdp
        pI4N2EIKJjbqJLIiDqSJEMaVovGKAwBnM3PWBP8PfwAAAABJRU5ErkJggg==
</value>
  </data>
</root>
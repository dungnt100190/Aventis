<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="qryQuery.SelectStatement" xml:space="preserve">
    <value>if object_id('tempdb..#ResultTable') is not null
  drop table #ResultTable


SELECT BaPersonID$          = FAL.BaPersonID,
       SAR                  = USR.LastName + isNull(', ' + USR.FirstName,''),
       Person               = PRS.Name + isNull(', ' + PRS.Vorname,''),
       [AHV-Nr.]            = PRS.AHVNummer,
       [Vers.-Nr.]          = PRS.Versichertennummer, 
       Status               = CASE
                                  WHEN FAL.DatumBis IS NULL THEN 'aktiv'
                                  WHEN ARC.FaLeistungID IS NULL THEN 'geschlossen'
                                  ELSE 'archiviert'
                              END,
       [SH-Eröffnung]       = FAL.DatumVon,
       [FP bis]             = SFP.DatumBis,
       [Budget]             = (SELECT TOP 1 dbo.fnXKurzMonat(BDG_IN.Monat) + ' ' + convert(varchar, BDG_IN.Jahr)
                              FROM dbo.BgFinanzplan      SFP_IN WITH (READUNCOMMITTED)
                                INNER JOIN dbo.BgBudget  BDG_IN WITH (READUNCOMMITTED) ON BDG_IN.BgFinanzplanID = SFP_IN.BgFinanzplanID
                              WHERE FaLeistungID = FAL.FaLeistungID
                                 AND BDG_IN.MasterBudget = 0 AND BDG_IN.BgBewilligungStatusCode = 5 -- letztes freigegebenes M.Budget (grün)
                                 AND BDG_IN.Jahr = (SELECT TOP 1 Jahr FROM dbo.BgBudget WITH (READUNCOMMITTED)
                                                    WHERE BgFinanzplanID = BDG_IN.BgFinanzplanID
                                                       AND MasterBudget = 0 AND BgBewilligungStatusCode = 5
                                                    ORDER BY Jahr DESC)
                                 AND BDG_IN.Monat = (SELECT TOP 1 Monat FROM dbo.BgBudget WITH (READUNCOMMITTED)
                                                     WHERE BgFinanzplanID = BDG_IN.BgFinanzplanID
                                                       AND Jahr = BDG_IN.Jahr
                                                       AND MasterBudget = 0 AND BgBewilligungStatusCode = 5
                                                     ORDER BY Jahr DESC, Monat DESC)
                               ORDER BY SFP_IN.DatumVon DESC),
       [Abschl. SH]         = FAL.DatumBis,
       [Archivieren am]     = DATEADD(MONTH, 6, FAL.DatumBis)
INTO #ResultTable
FROM   dbo.BgFinanzplan                SFP WITH (READUNCOMMITTED)
       INNER JOIN dbo.FaLeistung       FAL WITH (READUNCOMMITTED) ON FAL.FaLeistungID = SFP.FaLeistungID
       INNER JOIN dbo.BaPerson         PRS WITH (READUNCOMMITTED) ON PRS.BaPersonID = FAL.BaPersonID
       INNER JOIN dbo.XUser            USR WITH (READUNCOMMITTED) ON USR.UserID = FAL.UserID
       LEFT  JOIN dbo.FaLeistung       FAL2 WITH (READUNCOMMITTED) ON FAL2.BaPersonID = FAL.BaPersonID           
                                   AND FAL2.ModulID = 2 --Fallführung
                                   AND FAL2.DatumVon = (SELECT TOP 1 DatumVon FROM FaLeistung  -- aktuellster Fall
                                                        WHERE BaPersonID = FAL2.BaPersonID
                                                          AND ModulID = 2 
                                                        ORDER By DatumVon DESC)
       LEFT  JOIN dbo.XOrgUnit_User    OUU WITH (READUNCOMMITTED) ON OUU.UserID = FAL.UserID  AND
                                       OUU.OrgUnitMemberCode = 2
       LEFT  JOIN dbo.XOrgUnit         ORG WITH (READUNCOMMITTED) ON ORG.OrgUnitID = OUU.OrgUnitID
       LEFT  JOIN dbo.FaLeistungArchiv  ARC WITH (READUNCOMMITTED) ON ARC.FaLeistungID = FAL.FaLeistungID AND ARC.CheckOut IS NULL

WHERE SFP.BgFinanzplanID = (SELECT TOP 1 BgFinanzplanID
                            FROM dbo.BgFinanzplan WITH (READUNCOMMITTED)
                            WHERE FaLeistungID = FAL.FaLeistungID
---                           AND DatumVon &lt;= {edtDatumBis} AND IsNull(DatumBis, {edtDatumVon}) &gt;= {edtDatumVon} --Datum grenzt aktive Finanzpläne ein
                            ORDER BY DatumVon DESC)
--- AND CASE WHEN FAL.DatumBis IS NULL THEN 1 ELSE CASE WHEN ARC.FaLeistungID IS NULL THEN 2 ELSE 3 END END = {edtStatusCode}
--- AND (OUU.OrgUnitID = {edtOrgUnitID.LookupID} OR ORG.ParentID = {edtOrgUnitID.LookupID})
--- AND FAL.UserID = {edtUserID.LookupID}
--- AND FAL.BaPersonID = {edtBaPersonID.LookupID}
--- AND SFP.DatumVon &lt;= {edtDatumBis} AND IsNull(SFP.DatumBis, {edtDatumVon}) &gt;= {edtDatumVon} --Datum grenzt aktive Finanzpläne ein

IF 1=1 
--- AND {edtStatusCode} &lt;&gt; 1
  BEGIN
   SELECT *
   FROM #ResultTable
   ORDER BY SAR, Person
END
ELSE BEGIN
   SELECT BaPersonID$,
          SAR,
          Person,
          [AHV-Nr.],
          [Vers.-Nr.],
          Status,
          [SH-Eröffnung],
          [FP bis],
          [Budget]
   FROM #ResultTable
   ORDER BY SAR, Person
END</value>
  </data>
  <assembly alias="System.Drawing" name="System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="qryQuery.TrayLocation" type="System.Drawing.Point, System.Drawing">
    <value>17, 17</value>
  </data>
  <data name="xDocument.Properties.Buttons" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        iVBORw0KGgoAAAANSUhEUgAAAAwAAAAQCAYAAAAiYZ4HAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8
        YQUAAAAgY0hSTQAAeiYAAICEAAD6AAAAgOgAAHUwAADqYAAAOpgAABdwnLpRPAAAAF1JREFUOE9jZAAC
        Y2Pj/yAaGzh79iwjhjhIw///MzGwmJjYfxDGqSEtjeE/MgYpBhmEoYmQDSANKM7GpQHZmVg1oDsJxgdp
        pI4N2EIKJjbqJLIiDqSJEMaVovGKAwBnM3PWBP8PfwAAAABJRU5ErkJggg==
</value>
  </data>
</root>
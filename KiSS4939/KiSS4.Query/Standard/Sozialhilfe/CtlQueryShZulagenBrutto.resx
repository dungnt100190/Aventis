<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <metadata name="qryQuery.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>17, 17</value>
  </metadata>
  <data name="qryQuery.SelectStatement" xml:space="preserve">
    <value>DECLARE @ZulageCodes TABLE(
  ZulageCode INT
);

DECLARE @Positionen TABLE(
  BgPositionID    INT,
  BgBudgetID      INT,
  BaPersonID      INT,
  BgFinanzplanID  INT,
  Fall            VARCHAR(202), 
  Person          VARCHAR(202), 
  Sektion         VARCHAR(100),
  SAR             VARCHAR(402),
  Zulage          VARCHAR(200),
  Brutto          MONEY,
  Effektiv        MONEY,
  BudgetMonat     DATETIME
);

DECLARE @Budgets TABLE(
  BgBudgetID      INT
);

INSERT INTO @ZulageCodes (ZulageCode)
  SELECT value FROM dbo.fnSplit({edtZulagen}, ',');

INSERT INTO @Positionen (BgPositionID,BgBudgetID,BaPersonID,BgFinanzplanID,Fall,Person,
  Sektion,SAR,Zulage,Brutto,Effektiv,BudgetMonat)
SELECT 
  BgPositionID = POS.BgPositionID,
  BgBudgetID = BDG.BgBudgetID,
  BaPersonID = LEI.BaPersonID,
  BgFinanzplanID = FPL.BgFinanzplanID,
  Fall = PER_LEI.NameVorname, 
  Person = PER_POS.NameVorname,
  Sektion = ORU.ItemName,
  SAR = USR.NameVorname,
  Zulage = IsNull(ZUC.Text, 'Zulage aus Ausgabekonto'),
  Brutto = CASE WHEN POA.BgKategorieCode &lt;&gt; 101 THEN POS.BetragBudget ELSE $0.00 END, --Einzelzahlungen sollen keinen Betrag anzeigen
  Effektiv = EFF.BetragEffektiv,
  BudgetMonat = dbo.fnDateSerial(BDG.Jahr, BDG.Monat, 1)
FROM dbo.vwBgPosition POS WITH (READUNCOMMITTED)
  LEFT JOIN (SELECT KBK.BgPositionID, BetragEffektiv = CASE WHEN SUM(KBU.Betrag) = $0.00 THEN $0.00 ELSE SUM(KBK.Betrag * AUG.Total / (CASE WHEN KBU.Betrag &lt;&gt; 0 THEN KBU.Betrag ELSE 1 END)) END
              FROM KbBuchungKostenart KBK
               INNER JOIN KbBuchung  KBU ON KBU.KbBuchungID = KBK.KbBuchungID
               INNER JOIN (SELECT OpBuchungID, Total = SUM(Betrag)
                           FROM KbOpAusgleich
                           GROUP BY OpBuchungID) AUG ON AUG.OpBuchungID = KBU.KbBuchungID
             GROUP BY KBK.BgPositionID) EFF ON EFF.BgPositionID = POS.BgPositionID
  
  INNER JOIN dbo.BgBudget       BDG WITH (READUNCOMMITTED)      ON BDG.BgBudgetID = POS.BgBudgetID
  INNER JOIN dbo.BgFinanzplan   FPL	WITH (READUNCOMMITTED)     ON FPL.BgFinanzplanID = BDG.BgFinanzplanID
  INNER JOIN dbo.FaLeistung     LEI WITH (READUNCOMMITTED)      ON LEI.FaLeistungID = FPL.FaLeistungID
  INNER JOIN dbo.vwPerson       PER_LEI WITH (READUNCOMMITTED)  ON PER_LEI.BaPersonID = LEI.BaPersonID
  LEFT  JOIN dbo.vwPerson       PER_POS WITH (READUNCOMMITTED)  ON PER_POS.BaPersonID = POS.BaPersonID
  INNER JOIN dbo.vwUser         USR WITH (READUNCOMMITTED)      ON USR.UserID = LEI.UserID
  LEFT  JOIN dbo.XOrgUnit_User  OUU WITH (READUNCOMMITTED)      ON OUU.UserID = LEI.UserID AND OUU.OrgUnitMemberCode = 2
  LEFT JOIN dbo.XOrgUnit        ORU WITH (READUNCOMMITTED)      ON ORU.OrgUnitID = OUU.OrgUnitID
  LEFT JOIN dbo.BgSpezkonto     SPZ WITH (READUNCOMMITTED)      ON SPZ.BgSpezkontoID = POS.BgSpezkontoID
  LEFT JOIN dbo.BgPositionsart  POA WITH (READUNCOMMITTED)      ON POA.BgPositionsartID = POS.BgPositionsartID
  LEFT JOIN dbo.XLOVCode        ZUC WITH (READUNCOMMITTED)      ON ZUC.Code = POA.BgGruppeCode 
                                                                   AND ZUC.LOVName='BgGruppe'
WHERE BDG.Masterbudget = 0
---	AND OUU.OrgUnitID = {edtSektion}
---	AND USR.UserID = {edtUserID.LookupID}
---	AND dbo.fnDateSerial(BDG.Jahr, BDG.Monat, 1) &gt;= dbo.fnFirstDayOf({edtZeitraumVon})
---	AND dbo.fnDateSerial(BDG.Jahr, BDG.Monat, 1) &lt;= dbo.fnFirstDayOf({edtZeitraumBis})
---	AND PER_LEI.BaPersonID = {edtBaPersonID.LookupID}
---	AND ({edtHaushaltmitglied} = -1 OR PER_POS.BaPersonID = {edtHaushaltmitglied})
   	AND EXISTS (SELECT TOP 1 1
              FROM BgPositionsart POA1
                INNER JOIN @ZulageCodes ZUC ON ZUC.ZulageCode = POA1.BgGruppeCode
              WHERE ISNULL(POA1.DatumBis, '2999-12-31') &gt;= dbo.fnDateSerial(BDG.Jahr, BDG.Monat, 1) 
                AND ISNULL(POA1.DatumVon, '1900-01-01') &lt;= dbo.fnLastDayOf(dbo.fnDateSerial(BDG.Jahr, BDG.Monat, 1))
                AND (POA1.BgPositionsartID = POA.BgPositionsartID 
                      OR (POA1.BgKostenartID = SPZ.BgKostenartID AND POA.BgPositionsartID IS NULL))
             );

INSERT INTO @Budgets (BgBudgetID)
SELECT DISTINCT BgBudgetID
FROM @Positionen
WHERE Effektiv IS NOT NULL;

SELECT 
  Fall,
  Person,
  Sektion,
  SAR,
  Zulage,
  Brutto,
  Effektiv = IsNull(POS.Effektiv, $0.00),
  BudgetMonat,
  BaPersonID$ = BaPersonID,
  BgFinanzplanID$ = BgFinanzplanID,
  BgBudgetID$ = POS.BgBudgetID,
  BgPositionID$ = BgPositionID
FROM @Positionen POS
  INNER JOIN @Budgets BDG ON BDG.BgBudgetID = POS.BgBudgetID
ORDER BY BudgetMonat;
</value>
  </data>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="xDocument.Properties.Buttons" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        iVBORw0KGgoAAAANSUhEUgAAAAwAAAAQCAYAAAAiYZ4HAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8
        YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAABbSURBVDhPY2AAAmNj4/+4MEgeA4AU//8/EwOLiYn9B2Gc
        GtLSGP4jY5BikEEYmgjZANIAUgO3CZcGZGdi1YDuJBgfpJE6NmALKZjYqJPIijh8KRYmhzXlEhIEANZ8
        ev1ASni6AAAAAElFTkSuQmCC
</value>
  </data>
  <data name="edtZeitraumBis.Properties.Buttons" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        iVBORw0KGgoAAAANSUhEUgAAAAwAAAAQCAYAAAAiYZ4HAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8
        YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAABRSURBVDhPY2AAAmNj4//EYJBaMAApRqbhErjkiDEdZiiK
        Dcgmo7NxamhoYAA7DwSQ2Vg1gBTAFKHT1NGA7AyibBhuGoiKB5Jimpj0hM9AnHIA7aiPJlUTWpwAAAAA
        SUVORK5CYII=
</value>
  </data>
  <data name="edtZeitraumVon.Properties.Buttons" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        iVBORw0KGgoAAAANSUhEUgAAAAwAAAAQCAYAAAAiYZ4HAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8
        YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAABRSURBVDhPY2AAAmNj4//EYJBaMAApRqbhErjkiDEdZiiK
        Dcgmo7NxamhoYAA7DwSQ2Vg1gBTAFKHT1NGA7AyibBhuGoiKB5Jimpj0hM9AnHIA7aiPJlUTWpwAAAAA
        SUVORK5CYII=
</value>
  </data>
</root>
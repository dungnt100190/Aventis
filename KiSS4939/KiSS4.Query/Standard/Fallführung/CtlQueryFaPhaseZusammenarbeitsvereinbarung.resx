<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <metadata name="qryQuery.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>17, 17</value>
  </metadata>
  <data name="qryQuery.SelectStatement" xml:space="preserve">
    <value>DECLARE @LOVProdukt VARCHAR(20);
DECLARE @ProduktFldID INT;
DECLARE @FaIntZusammenarbeitsvertragDok INT;
DECLARE @FaZusammenarbeitsvertragDokument INT;
DECLARE @FaIntAusstattungVerBeginn INT;
DECLARE @FaIntAusstattungVerAuswert INT;
DECLARE @FaAusstattungVerBeginn INT;
DECLARE @FaAusstattungVerAuswert INT;

SET     @ProduktFldID =                     (SELECT DynaFieldID FROM dbo.DynaField WITH (READUNCOMMITTED) WHERE FieldName = 'FaAusstattungVerProdukt'); --Bern
SET     @FaIntZusammenarbeitsvertragDok =   (SELECT DynaFieldID FROM dbo.DynaField WITH (READUNCOMMITTED) WHERE FieldName = 'FaIntZusammenarbeitsvertragDok');
SET     @FaZusammenarbeitsvertragDokument = (SELECT DynaFieldID FROM dbo.DynaField WITH (READUNCOMMITTED) WHERE FieldName = 'FaZusammenarbeitsvertragDokument');
SET     @FaIntAusstattungVerBeginn =        (SELECT DynaFieldID FROM dbo.DynaField WITH (READUNCOMMITTED) WHERE FieldName = 'FaIntAusstattungVerBeginn');
SET     @FaAusstattungVerBeginn =           (SELECT DynaFieldID FROM dbo.DynaField WITH (READUNCOMMITTED) WHERE FieldName = 'FaAusstattungVerBeginn');
SET     @FaIntAusstattungVerAuswert =       (SELECT DynaFieldID FROM dbo.DynaField WITH (READUNCOMMITTED) WHERE FieldName = 'FaIntAusstattungVerAuswert');
SET     @FaAusstattungVerAuswert =          (SELECT DynaFieldID FROM dbo.DynaField WITH (READUNCOMMITTED) WHERE FieldName = 'FaAusstattungVerAuswert');

SET     @LOVProdukt = 'FaProdukt';

IF @ProduktFldID IS NULL BEGIN
  SET   @ProduktFldID =  (SELECT DynaFieldID FROM dbo.DynaField WITH (READUNCOMMITTED) WHERE FieldName = 'FaGrundangebotBedarf'); --Münsingen
  SET   @LOVProdukt = 'FaGrundangebot';
END

SELECT 
  Sektion             = ORG.ItemName,
  SAR                 = BEN.LastName + ISNULL(', ' + BEN.FirstName,''),
  NameDT              = PRS.Name,
  VornameDT           = PRS.Vorname,
  FallNr              = FAL.FaFallID,
  Versichertennummer  = PRS.Versichertennummer,  
  Zivilstand          = dbo.fnGetLOVMLText('Zivilstand', PRS.ZivilstandCode, 1),
  EntscheidDatum      = PRS.ErteilungVA,
  ZustaendigkeitBis   = PRS.CAusweisDatum,
  ModulID             = 'Fallführung', 
  ModulEroeffnet      = FAL.DatumVon,
  ModulAbgeschlossen  = FAL.DatumBis,
  SModulOffen         = CASE WHEN FAL1.FaLeistungID IS NULL THEN dbo.fnLOVText('JaNein', 0) --Nein
                          ELSE dbo.fnLOVText('JaNein', 1) --Ja
                        END,
  Phase               = CASE WHEN PHS.FaPhaseCode= 1 THEN dbo.fnLOVText('FaPhase', 1) --Intake
                             WHEN PHS.FaPhaseCode= 2 THEN dbo.fnLOVText('FaPhase', 2) --Beratung
                             WHEN PHS.FaPhaseCode= 3 THEN dbo.fnLOVText('FaPhase', 3) --Abschluss
                             ELSE NULL
                        END,
  PhaseEroeffnet      = PHS.DatumVon,
  PhaseAbgeschlossen  = PHS.DatumBis,
  Vertragsdokument    = DOC.DateLastSave,
  BeginnVertrag       = CONVERT(DATETIME, PDK2.Value, 104),
  AuswertungGeplant   = CONVERT(DATETIME, PDK3.Value, 104),
  UserID$             = BEN.UserID,
  BaPersonID$         = PRS.BaPersonID
FROM dbo.FaLeistung          FAL WITH (READUNCOMMITTED)
INNER JOIN dbo.BaPerson      PRS WITH (READUNCOMMITTED) ON PRS.BaPersonID = FAL.BaPersonID
LEFT  JOIN dbo.FaPhase       PHS WITH (READUNCOMMITTED) ON PHS.FaLeistungID = FAL.FaLeistungID
INNER JOIN dbo.XUser         BEN WITH (READUNCOMMITTED) ON FAL.UserID = BEN.UserID 
INNER JOIN dbo.XModul        MOD WITH (READUNCOMMITTED) ON MOD.ModulID = FAL.ModulID
LEFT  JOIN dbo.XOrgUnit_User OUU WITH (READUNCOMMITTED) ON OUU.UserID = FAL.UserID 
  AND OUU.OrgUnitMemberCode = 2
LEFT  JOIN dbo.XOrgUnit      ORG WITH (READUNCOMMITTED) ON ORG.OrgUnitID = OUU.OrgUnitID
/* DynaValues @ProduktFldID herausholen */
LEFT JOIN dbo.DynaValue      PDK WITH (READUNCOMMITTED) ON PDK.FaPhaseID = PHS.FaPhaseID
  AND PDK.DynaFieldID = @ProduktFldID 
  AND PDK.GridRowID = 1
  AND PDK.Value IS NOT NULL
  AND SQL_VARIANT_PROPERTY(PDK.Value,'BaseType')='int'
/* DynaValues Vertragsdokument herausholen */
LEFT JOIN dbo.DynaValue      PDK1 WITH (READUNCOMMITTED) ON PDK1.FaPhaseID = PHS.FaPhaseID
  AND PDK1.DynaFieldID = CASE WHEN PHS.FaPhaseCode = 1 THEN @FaIntZusammenarbeitsvertragDok --Intake
                          ELSE @FaZusammenarbeitsvertragDokument --Beratungsphase
                         END  
  AND PDK1.GridRowID = 1
  AND PDK1.Value IS NOT NULL
  AND SQL_VARIANT_PROPERTY(PDK1.Value,'BaseType')='int'
/* DynaValues Beginn Vertrag herausholen */
LEFT JOIN dbo.DynaValue      PDK2 WITH (READUNCOMMITTED) ON PDK2.FaPhaseID = PHS.FaPhaseID
  AND PDK2.DynaFieldID = CASE WHEN PHS.FaPhaseCode = 1 THEN @FaIntAusstattungVerBeginn --Intake
                          ELSE @FaAusstattungVerBeginn --Beratungsphase
                         END 
  AND PDK2.GridRowID = 1
  AND PDK2.Value IS NOT NULL
  AND SQL_VARIANT_PROPERTY(PDK2.Value,'BaseType')='datetime'
/* DynaValues Auswertung geplant herausholen */
LEFT JOIN dbo.DynaValue      PDK3 WITH (READUNCOMMITTED) ON PDK3.FaPhaseID = PHS.FaPhaseID
  AND PDK3.DynaFieldID = CASE WHEN PHS.FaPhaseCode = 1 THEN @FaIntAusstattungVerAuswert --Intake
                          ELSE @FaAusstattungVerAuswert --Beratungsphase
                         END
  AND PDK3.GridRowID = 1
  AND PDK3.Value IS NOT NULL
  AND SQL_VARIANT_PROPERTY(PDK3.Value,'BaseType')='datetime'
LEFT JOIN XDocument          DOC WITH (READUNCOMMITTED) ON DOC.DocumentID = PDK1.Value
/* Info ob's ein offenes S-Modul hat */
LEFT JOIN FaLeistung        FAL1 WITH(READUNCOMMITTED)  ON FAL1.BaPersonID = PRS.BaPersonID
  AND FAL1.ModulID = 3
  AND FAL1.DatumBis IS NULL

WHERE FAL.ModulID = 2 --Fallführung 
--- AND ORG.OrgUnitID = {edtSektion}
--- AND BEN.UserID =  {edtSAR.LookupID}
--- AND ({chkAbgeschlosseneAusblenden} = 0 OR PHS.DatumBis IS NULL)
--- AND ({chkNurAktiveF} = 0 OR FAL.DatumBis IS NULL)
--- AND ({chkFMitOffenemS} = 0 OR FAL1.FaLeistungID IS NOT NULL)
ORDER BY PRS.Name, PRS.Vorname, PHS.DatumVon /*PhaseEroeffnet*/</value>
  </data>
  <data name="edtSAR.LookupSQL" xml:space="preserve">
    <value>SELECT ID = UserID, 
       SAR = LastName + ISNULL(', ' + FirstName,''), 
       [Kuerzel] = LogonName
FROM XUser WITH(READUNCOMMITTED)
WHERE LastName + ISNULL(', ' + FirstName,'') LIKE {0} + '%' 
ORDER BY SAR</value>
  </data>
</root>
<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="qryQuery.SelectStatement" xml:space="preserve">
    <value>DECLARE @tmp Table(
   SAR              VARCHAR(200),
   BaPersonID       INT,
   FTBaPersonID     INT,
   FaLeistungID     INT,
   Eintritt         DATETIME,
   Austritt         DATETIME,
   Austrittsgrund   VARCHAR(200),
   GroesseUE        INT,
   GroesseHH        INT
)

DECLARE @Result Table(
   SAR    VARCHAR(200),
   Typ    VARCHAR(200),
   Wert   VARCHAR(200),
   Anzahl VARCHAR(200)
)

INSERT INTO @tmp
SELECT   DISTINCT
         SAR               = USR.LastName + ISNULL(', ' + USR.FirstName,''),
         PEA.BaPersonID,
         FTBaPersonID      = FAL.BaPersonID,
         FAL.FaLeistungID,
         Eintritt          = PEA.Eintritt,
         Austritt          = PEA.Austritt,
         Austrittsgrund    = dbo.fnLovText('AyEinAustrittGrund', PEA.AusGrundCode),
         [Grösse UE]       = (select count(*)
                              from   dbo.BgFinanzplan_BaPerson WITH (READUNCOMMITTED)
                              where  BgFinanzplanID = FP.BgFinanzplanID and
                                     IstUnterstuetzt = 1),
         [Grösse Haushalt] = (select count(*)
                              from   dbo.BgFinanzplan_BaPerson WITH (READUNCOMMITTED)
                              where  BgFinanzplanID = FP.BgFinanzplanID)
FROM dbo.fnAyPersonEinAustritt()    PEA
  INNER JOIN dbo.FaLeistung             FAL WITH (READUNCOMMITTED) ON FAL.FaLeistungID = PEA.FaLeistungID
  INNER JOIN dbo.BgFinanzplan           FP WITH (READUNCOMMITTED) ON FP.FaLeistungID = FAL.FaLeistungID
                                      AND FP.BgFinanzplanID = (SELECT TOP 1 BgFinanzplanID
                                                               FROM   dbo.BgFinanzplan WITH (READUNCOMMITTED)
                                                               WHERE  FaLeistungID = FAL.FaLeistungID
                                                               ORDER BY DatumVon DESC)
  INNER JOIN dbo.BgFinanzplan_BaPerson FPP WITH (READUNCOMMITTED) ON FPP.BgFinanzplanID = FP.BgFinanzplanID
                                       AND FPP.IstUnterstuetzt = 1

  INNER JOIN dbo.XUser USR WITH (READUNCOMMITTED) ON USR.UserID = FAL.UserID
WHERE FAL.ModulID = 6 
--- AND FAL.UserID =  {edtUserID.LookupID} 
--- AND PEA.Eintritt &lt;= {edtDatumBis} and isNull(PEA.Austritt, {edtDatumVon}) &gt;= {edtDatumVon}


DECLARE @sar       VARCHAR(200)
DECLARE @eintritte INT
DECLARE @austritte INT
DECLARE @grund     VARCHAR(200)
DECLARE @grundanzahl INT
DECLARE @bezeichnung VARCHAR(200)
DECLARE @anzahl INT
DECLARE @datumVon DATETIME
DECLARE @datumBis DATETIME

SET @datumVon = '17530101'
SET @datumBis = '99990101'
--- SET @datumVon = {edtDatumVon}
--- SET @datumBis = {edtDatumBis}

DECLARE cursorSAR CURSOR STATIC FOR
    SELECT SAR,
           Eintritte = SUM(CASE WHEN Eintritt IS NOT NULL AND Eintritt &gt;= @datumVon AND Eintritt &lt;= @datumBis THEN 1 ELSE 0 END),
           Austritte = SUM(CASE WHEN Austritt IS NOT NULL AND Austritt &gt;= @datumVon AND Eintritt &lt;= @datumBis THEN 1 ELSE 0 END)
    FROM   @tmp
    GROUP BY SAR
OPEN cursorSAR 
  FETCH NEXT FROM cursorSAR INTO @sar, @eintritte, @austritte
  WHILE @@fetch_status = 0 BEGIN
  
-------------------SAR 
    INSERT INTO @Result
    SELECT @sar, 'Ein-/Austritte', NULL, NULL
    
-------------------Eintritte 
    INSERT INTO @Result
    SELECT NULL, NULL, 'Eintritte', @eintritte
-------------------Austritte 
    INSERT INTO @Result
    SELECT NULL, NULL, 'Austritte', @austritte
    
-------------------Gründe
    INSERT INTO @Result ----SPACER
    SELECT NULL, 'Gründe', NULL, NULL

     DECLARE cursorGrund CURSOR STATIC FOR
        SELECT Austrittsgrund, COUNT(*)
        FROM @tmp
        WHERE SAR = @sar AND Austritt IS NOT NULL
        GROUP BY Austrittsgrund
     OPEN cursorGrund
     FETCH NEXT FROM cursorGrund INTO @grund, @grundanzahl
     WHILE @@fetch_status = 0 BEGIN
        INSERT INTO @Result
        SELECT NULL, NULL, @grund, @grundanzahl
        FETCH NEXT FROM cursorGrund INTO @grund, @grundanzahl
     END
    CLOSE cursorGrund
    DEALLOCATE cursorGrund

-------------------Aufenthaltstatus 
     INSERT INTO @Result ----SPACER
     SELECT NULL, 'Aufenthaltsstatus', NULL, NULL

     DECLARE cursorStatus CURSOR STATIC FOR
        SELECT dbo.fnLovText('Aufenthaltsstatus', PRS.AuslaenderStatusCode),
               COUNT(*)
        FROM @tmp            TMP
          INNER JOIN dbo.BaPerson PRS WITH (READUNCOMMITTED) ON  PRS.BaPersonID = TMP.BaPersonID
        WHERE SAR = @sar AND PRS.AuslaenderStatusCode IS NOT NULL
        GROUP BY AuslaenderStatusCode
     OPEN cursorStatus
     FETCH NEXT FROM cursorStatus INTO @bezeichnung, @anzahl
     WHILE @@fetch_status = 0 BEGIN
        INSERT INTO @Result
        SELECT NULL, NULL, @bezeichnung, @anzahl

        FETCH NEXT FROM cursorStatus INTO  @bezeichnung, @anzahl
     END
    CLOSE cursorStatus
    DEALLOCATE cursorStatus

---------------Demograf. Angaben
     INSERT INTO @Result ----SPACER
     SELECT NULL, 'Demographie', NULL, NULL

-------------------#Fälle
    INSERT INTO @Result 
    SELECT NULL,
           NULL,
           'Anzahl Fälle',
           (SELECT COUNT(Distinct FaLeistungID)
            FROM @tmp TMP
            WHERE SAR = @sar)

-------------------Unterst. Personen
    INSERT INTO @Result 
    SELECT NULL,
           NULL,
           'Unterst. Pers.',
           (SELECT SUM(GroesseUE) 
            FROM (SELECT GroesseUE
                  FROM @tmp TMP
                  WHERE SAR = @sar
                  GROUP BY FaLeistungid,GroesseUE) GUE)

-------------------Alter/Geschlecht
    INSERT INTO @Result
    SELECT NULL,
           NULL,
          'Männer',
           (SELECT COUNT(DISTINCT PRS.BaPersonID)
            FROM @tmp              TMP
              INNER JOIN dbo.BaPerson  PRS WITH (READUNCOMMITTED) ON  PRS.BaPersonID = TMP.BaPersonID
            WHERE SAR = @sar AND PRS.GeschlechtCode = 1  AND dbo.fngetage(PRS.Geburtsdatum, GETDATE())&gt;=25)

    INSERT INTO @Result
    SELECT NULL,
           NULL,
          'Frauen',
           (SELECT COUNT(DISTINCT PRS.BaPersonID)
            FROM @tmp              TMP
              INNER JOIN dbo.BaPerson  PRS WITH (READUNCOMMITTED) ON  PRS.BaPersonID = TMP.BaPersonID
            WHERE SAR = @sar AND PRS.GeschlechtCode = 2  AND dbo.fngetage(PRS.Geburtsdatum, GETDATE())&gt;=25)

    INSERT INTO @Result
    SELECT NULL,
           NULL,
          'j.E. Männer',
           (SELECT COUNT(DISTINCT PRS.BaPersonID)
            FROM @tmp              TMP
              INNER JOIN dbo.BaPerson  PRS WITH (READUNCOMMITTED) ON  PRS.BaPersonID = TMP.BaPersonID
            WHERE SAR = @sar AND PRS.GeschlechtCode = 1  AND dbo.fngetage(PRS.Geburtsdatum, GETDATE())BETWEEN 16 AND 24)


    INSERT INTO @Result
    SELECT NULL,
           NULL,
          'j.E. Frauen',
           (SELECT COUNT(DISTINCT PRS.BaPersonID)
            FROM @tmp              TMP
              INNER JOIN dbo.BaPerson  PRS WITH (READUNCOMMITTED) ON  PRS.BaPersonID = TMP.BaPersonID
            WHERE SAR = @sar AND PRS.GeschlechtCode = 2  AND dbo.fngetage(PRS.Geburtsdatum, GETDATE()) BETWEEN 16 AND 24)

    INSERT INTO @Result
    SELECT NULL,
           NULL,
          'Knaben',
           (SELECT COUNT(DISTINCT PRS.BaPersonID)
            FROM @tmp              TMP
              INNER JOIN dbo.BaPerson  PRS WITH (READUNCOMMITTED) ON  PRS.BaPersonID = TMP.BaPersonID
            WHERE SAR = @sar AND PRS.GeschlechtCode = 1  AND dbo.fngetage(PRS.Geburtsdatum, GETDATE()) &lt;= 15)

    INSERT INTO @Result
    SELECT NULL,
           NULL,
          'Mädchen',
           (SELECT COUNT(DISTINCT PRS.BaPersonID)
            FROM @tmp              TMP
              INNER JOIN dbo.BaPerson  PRS WITH (READUNCOMMITTED) ON  PRS.BaPersonID = TMP.BaPersonID
            WHERE SAR = @sar AND PRS.GeschlechtCode = 2  AND dbo.fngetage(PRS.Geburtsdatum, GETDATE()) &lt;= 15)

    FETCH NEXT FROM cursorSAR INTO @sar, @eintritte, @austritte
  END
  CLOSE cursorSAR
  DEALLOCATE cursorSAR

SELECT 
       SAR,
       Person           = PRS.Name + ISNULL(', ' + PRS.Vorname, ''),
       [N.Nr]           = PRS.NNummer,
       Eintritt,
       Austritt,
       Austrittsgrund,
       GroesseUE,
       GroesseHH,
       Status          = dbo.fnlovColumnListe('Aufenthaltsstatus', PRS.AuslaenderStatusCode, 'ShortText'),
       BaPersonID$ = TMP.FTBaPersonID
FROM @tmp              TMP
  INNER JOIN dbo.BaPerson  PRS WITH (READUNCOMMITTED) ON  PRS.BaPersonID = TMP.BaPersonID

SELECT * 
FROM @result


SELECT Eintritte = (SELECT COUNT(*) FROM @TMP WHERE Eintritt &gt;= @datumVon AND Eintritt &lt;= @datumBis),
       Austritte = (SELECT COUNT(*) FROM @TMP WHERE Austritt IS NOT NULL AND Austritt &gt;= @datumVon AND Austritt &lt;= @datumBis),
       Personen  = (SELECT SUM(GroesseUE) 
                    FROM (SELECT GroesseUE
                          FROM @tmp TMP
                          GROUP BY FaLeistungid,GroesseUE) GUE),
       Männer    =  (SELECT COUNT(DISTINCT PRS.BaPersonID)
                     FROM @tmp              TMP
                       INNER JOIN dbo.BaPerson PRS WITH (READUNCOMMITTED) ON  PRS.BaPersonID = TMP.BaPersonID
                     WHERE PRS.GeschlechtCode = 1  AND dbo.fngetage(PRS.Geburtsdatum, GETDATE()) &gt;= 25),
       Frauen    =  (SELECT COUNT(DISTINCT PRS.BaPersonID)
                     FROM @tmp              TMP
                       INNER JOIN dbo.BaPerson PRS WITH (READUNCOMMITTED) ON  PRS.BaPersonID = TMP.BaPersonID
                     WHERE PRS.GeschlechtCode = 2  AND dbo.fngetage(PRS.Geburtsdatum, GETDATE()) &gt;= 25),
       [j.E. Männer] =  (SELECT COUNT(DISTINCT PRS.BaPersonID)
                         FROM @tmp              TMP
                           INNER JOIN dbo.BaPerson PRS WITH (READUNCOMMITTED) ON  PRS.BaPersonID = TMP.BaPersonID
                         WHERE PRS.GeschlechtCode = 1  AND dbo.fngetage(PRS.Geburtsdatum, GETDATE())BETWEEN 16 AND 24),
       [j.E. Frauen] =  (SELECT COUNT(DISTINCT PRS.BaPersonID)
                         FROM @tmp              TMP
                           INNER JOIN dbo.BaPerson PRS WITH (READUNCOMMITTED) ON  PRS.BaPersonID = TMP.BaPersonID
                         WHERE PRS.GeschlechtCode = 2  AND dbo.fngetage(PRS.Geburtsdatum, GETDATE())BETWEEN 16 AND 24),
       Knaben    =  (SELECT COUNT(DISTINCT PRS.BaPersonID)
                     FROM @tmp              TMP
                       INNER JOIN dbo.BaPerson PRS WITH (READUNCOMMITTED) ON  PRS.BaPersonID = TMP.BaPersonID
                     WHERE PRS.GeschlechtCode = 1  AND dbo.fngetage(PRS.Geburtsdatum, GETDATE()) &lt;= 15),
       [Mädchen]    =  (SELECT COUNT(DISTINCT PRS.BaPersonID)
                     FROM @tmp              TMP
                       INNER JOIN dbo.BaPerson PRS WITH (READUNCOMMITTED) ON  PRS.BaPersonID = TMP.BaPersonID
                     WHERE PRS.GeschlechtCode = 2  AND dbo.fngetage(PRS.Geburtsdatum, GETDATE()) &lt;=15)</value>
  </data>
  <assembly alias="System.Drawing" name="System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="qryQuery.TrayLocation" type="System.Drawing.Point, System.Drawing">
    <value>17, 17</value>
  </data>
  <data name="xDocument.Properties.Buttons" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        iVBORw0KGgoAAAANSUhEUgAAAAwAAAAQCAYAAAAiYZ4HAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8
        YQUAAAAgY0hSTQAAeiYAAICEAAD6AAAAgOgAAHUwAADqYAAAOpgAABdwnLpRPAAAAF1JREFUOE9jZAAC
        Y2Pj/yAaGzh79iwjhjhIw///MzGwmJjYfxDGqSEtjeE/MgYpBhmEoYmQDSANKM7GpQHZmVg1oDsJxgdp
        pI4N2EIKJjbqJLIiDqSJEMaVovGKAwBnM3PWBP8PfwAAAABJRU5ErkJggg==
</value>
  </data>
  <data name="edtUserID.LookupSQL" xml:space="preserve">
    <value>select ID = UserID, 
SAR = LastName + isNull(', ' + FirstName,''), 
[Kuerzel] = LogonName
             
from   XUser 
             where LastName + isNull(', ' + FirstName,'') like {0} + '%' 
             order by SAR</value>
  </data>
</root>
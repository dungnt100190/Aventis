<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <metadata name="qryQuery.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>17, 17</value>
  </metadata>
  <data name="qryQuery.SelectStatement" xml:space="preserve">
    <value>-------------------------------------------------------------------------------
-- init table
-------------------------------------------------------------------------------
DECLARE @TmpData TABLE
(
 ID INT IDENTITY NOT NULL,
 SortKey INT,
 BaPersonID INT,
 Schluessel VARCHAR(20),
 Name VARCHAR(200),
 Datum DATETIME,
 DatumVon DATETIME,
 DatumBis DATETIME,
 LArt INT,
 Text VARCHAR(500),
 Betrag MONEY
);

-------------------------------------------------------------------------------
-- Zahnarzt
-------------------------------------------------------------------------------
INSERT INTO @TmpData
  SELECT 1,
         PRS.BaPersonID,
         REPLACE(REPLACE(PRS.NNummer, 'N', ''), ' ', ''),
         PRS.Name + ' ' + ISNULL(PRS.Vorname, ''),
         SEZ.RechnungDatum,
         CONVERT(DATETIME, SEZ.Value2),
         CONVERT(DATETIME, SEZ.Value3),
         672,  -- BFF-Kostenart für Zahnarzt
         CONVERT(VARCHAR(500), SEZ.Value1),
         SEZ.Betrag
  FROM dbo.FaLeistung             FAL WITH (READUNCOMMITTED)
    INNER JOIN dbo.BgFinanzplan   SFP WITH (READUNCOMMITTED) ON SFP.FaLeistungID = FAL.FaLeistungID
    INNER JOIN dbo.BgBudget       BDG WITH (READUNCOMMITTED) ON BDG.BgFinanzplanID = SFP.BgFinanzplanID
    INNER JOIN dbo.BgPosition     SEZ WITH (READUNCOMMITTED) ON SEZ.BgBudgetID = BDG.BgBudgetID
                                                            AND SEZ.BgKategorieCode IN (100, 101)
    INNER JOIN dbo.BgPositionsart BPT WITH (READUNCOMMITTED) ON BPT.BgPositionsartID = SEZ.BgPositionsartID
    INNER JOIN dbo.BgKostenart    FKA WITH (READUNCOMMITTED) ON FKA.BgKostenartID = BPT.BgKostenartID
    LEFT  JOIN dbo.BaPerson       PRS WITH (READUNCOMMITTED) ON PRS.BaPersonID = SEZ.BaPersonID
  WHERE FAL.ModulID = 6
    AND FKA.KontoNr IN ('031', '31')  -- Zahnarzt
--- AND FAL.UserID =  {edtUserID.LookupID}
--- AND SEZ.RechnungDatum BETWEEN {edtDatumVon} AND {edtDatumBis}
--- AND ({edtNurAktive} = 0 OR FAL.DatumBis IS NULL)

-------------------------------------------------------------------------------
-- Eigenleistungen aus Budgetzahlungen ohne Nettolohn 901
-------------------------------------------------------------------------------
INSERT INTO @TmpData
  SELECT 2,
         PRS.BaPersonID,
         MAX(REPLACE(REPLACE(PRS.NNummer, 'N', ''), ' ', '')),
         MAX(PRS.Name + ' ' + ISNULL(PRS.Vorname, '')),
         NULL,
         NULL,
         NULL,
         BPT.BgPositionsartCode - 60000,  -- BFF-Kostenart
         NULL,
         SUM(BPO.Betrag)
  FROM dbo.FaLeistung             FAL WITH (READUNCOMMITTED)
    INNER JOIN dbo.BgFinanzplan   SFP WITH (READUNCOMMITTED) ON SFP.FaLeistungID = FAL.FaLeistungID
    INNER JOIN dbo.BgBudget       BDG WITH (READUNCOMMITTED) ON BDG.BgFinanzplanID = SFP.BgFinanzplanID
    INNER JOIN dbo.BgPosition     BPO WITH (READUNCOMMITTED) ON BPO.BgBudgetID = BDG.BgBudgetID
    INNER JOIN dbo.BgPositionsart BPT WITH (READUNCOMMITTED) ON BPT.BgPositionsartID = BPO.BgPositionsartID
    LEFT  JOIN dbo.BaPerson       PRS WITH (READUNCOMMITTED) ON PRS.BaPersonID = ISNULL(BPO.BaPersonID, FAL.BaPersonID)
  WHERE FAL.ModulID = 6
    AND BDG.Masterbudget = 0              -- auch graue!
    AND BPT.BgGruppeCode = 6060           -- Leistungen zugunsten BFF
    AND BPT.BgPositionsartCode &lt;&gt; 60901   
--- AND FAL.UserID =  {edtUserID.LookupID}
--- AND dbo.fnDateSerial(BDG.Jahr, BDG.Monat, 1) BETWEEN {edtDatumVon} AND {edtDatumBis}
--- AND ({edtNurAktive} = 0 OR FAL.DatumBis IS NULL)
  GROUP BY PRS.BaPersonID, BPT.BgPositionsartCode;

-------------------------------------------------------------------------------
-- Nettolohn 901 aus Budgetzahlungen
-------------------------------------------------------------------------------
INSERT INTO @TmpData
  SELECT 2,
         PRS.BaPersonID,
         MAX(REPLACE(REPLACE(PRS.NNummer, 'N', ''), ' ', '')),
         MAX(PRS.Name + ' ' + ISNULL(PRS.Vorname, '')),
         NULL,
         NULL,
         NULL,
         MAX(BPT.BgPositionsartCode - 60000),  -- BFF-Kostenart
         NULL,
         SUM(BPO.Betrag + BPO.Reduktion - ISNULL(BPO2.Betrag, 0)) -- Nettolohn + Quellensteuer - Erwerbsunkosten
  FROM dbo.FaLeistung             FAL  WITH (READUNCOMMITTED)
    INNER JOIN dbo.BgFinanzplan   SFP  WITH (READUNCOMMITTED) ON SFP.FaLeistungID = FAL.FaLeistungID
    INNER JOIN dbo.BgBudget       BDG  WITH (READUNCOMMITTED) ON BDG.BgFinanzplanID = SFP.BgFinanzplanID
    INNER JOIN dbo.BgPosition     BPO  WITH (READUNCOMMITTED) ON BPO.BgBudgetID = BDG.BgBudgetID
    INNER JOIN dbo.BgPositionsart BPT  WITH (READUNCOMMITTED) ON BPT.BgPositionsartID = BPO.BgPositionsartID
    LEFT  JOIN dbo.BaPerson       PRS  WITH (READUNCOMMITTED) ON PRS.BaPersonID = ISNULL(BPO.BaPersonID, FAL.BaPersonID)
    LEFT  JOIN dbo.BgPosition     BPO2 WITH (READUNCOMMITTED) ON BPO2.BgPositionID_Parent = BPO.BgPositionID
  WHERE FAL.ModulID = 6
    AND BDG.Masterbudget = 0            -- auch graue!
    AND BPT.BgPositionsartCode = 60901    
--- AND FAL.UserID =  {edtUserID.LookupID}
--- AND dbo.fnDateSerial(BDG.Jahr, BDG.Monat, 1) BETWEEN {edtDatumVon} AND {edtDatumBis}
--- AND ({edtNurAktive} = 0 OR FAL.DatumBis IS NULL)
  GROUP BY PRS.BaPersonID;

-------------------------------------------------------------------------------
-- output
-------------------------------------------------------------------------------
SELECT [Schlüssel] = SUBSTRING(Schluessel, 1, 3) + '''' + SUBSTRING(Schluessel, 4, 3),
       Name,
       Datum,
       [L-Art Kopf] = NULL,
       [Datum von] = DatumVon,
       [Datum bis] = DatumBis,
       [L-Art] = LArt,
       Text,
       Betrag,
       BaPersonID$ = BaPersonID
FROM @TmpData
ORDER BY SortKey, Schluessel, Name, LArt;</value>
  </data>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="xDocument.Properties.Buttons" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        iVBORw0KGgoAAAANSUhEUgAAAAwAAAAQCAYAAAAiYZ4HAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8
        YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAABbSURBVDhPY2AAAmNj4/+4MEgeA4AU//8/EwOLiYn9B2Gc
        GtLSGP4jY5BikEEYmgjZANIAUgO3CZcGZGdi1YDuJBgfpJE6NmALKZjYqJPIijh8KRYmhzXlEhIEANZ8
        ev1ASni6AAAAAElFTkSuQmCC
</value>
  </data>
  <data name="ctlGotoFallStelleBI.BaPersonID" mimetype="application/x-microsoft.net.object.binary.base64">
    <value>
        AAEAAAD/////AQAAAAAAAAAEAQAAAB9TeXN0ZW0uVW5pdHlTZXJpYWxpemF0aW9uSG9sZGVyAwAAAARE
        YXRhCVVuaXR5VHlwZQxBc3NlbWJseU5hbWUBAAEICgIAAAAGAgAAAAAL
</value>
  </data>
  <metadata name="qryListe2.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>124, 17</value>
  </metadata>
  <data name="qryListe2.SelectStatement" xml:space="preserve">
    <value>-------------------------------------------------------------------------------
-- init table
-------------------------------------------------------------------------------
DECLARE @TmpData TABLE
(
 ID INT IDENTITY NOT NULL,
 SortKey INT,
 BaPersonID INT,
 Schluessel VARCHAR(20),
 Name VARCHAR(200),
 Datum DATETIME,
 DatumVon DATETIME,
 DatumBis DATETIME,
 LArt INT,
 Text VARCHAR(500),
 Betrag MONEY
);

-------------------------------------------------------------------------------
-- Zahnarzt
-------------------------------------------------------------------------------
INSERT INTO @TmpData
  SELECT 1,
         PRS.BaPersonID,
         REPLACE(REPLACE(PRS.NNummer, 'N', ''), ' ', ''),
         PRS.Name + ' ' + ISNULL(PRS.Vorname, ''),
         SEZ.RechnungDatum,
         CONVERT(DATETIME, SEZ.Value2),
         CONVERT(DATETIME, SEZ.Value3),
         672,  -- BFF-Kostenart für Zahnarzt
         CONVERT(VARCHAR(500), SEZ.Value1),
         SEZ.Betrag
  FROM dbo.FaLeistung             FAL WITH (READUNCOMMITTED)
    INNER JOIN dbo.BgFinanzplan   SFP WITH (READUNCOMMITTED) ON SFP.FaLeistungID = FAL.FaLeistungID
    INNER JOIN dbo.BgBudget       BDG WITH (READUNCOMMITTED) ON BDG.BgFinanzplanID = SFP.BgFinanzplanID
    INNER JOIN dbo.BgPosition     SEZ WITH (READUNCOMMITTED) ON SEZ.BgBudgetID = BDG.BgBudgetID
                                                            AND SEZ.BgKategorieCode IN (100, 101)
    INNER JOIN dbo.BgPositionsart BPT WITH (READUNCOMMITTED) ON BPT.BgPositionsartID = SEZ.BgPositionsartID
    INNER JOIN dbo.BgKostenart    FKA WITH (READUNCOMMITTED) ON FKA.BgKostenartID = BPT.BgKostenartID
    LEFT  JOIN dbo.BaPerson       PRS WITH (READUNCOMMITTED) ON PRS.BaPersonID = SEZ.BaPersonID
  WHERE FAL.ModulID = 6
    AND FKA.KontoNr IN ('031', '31')  -- Zahnarzt
--- AND FAL.UserID =  {edtUserID.LookupID}
--- AND SEZ.RechnungDatum BETWEEN {edtDatumVon} AND {edtDatumBis}
--- AND ({edtNurAktive} = 0 OR FAL.DatumBis IS NULL)

-------------------------------------------------------------------------------
-- Eigenleistungen aus Budgetzahlungen ohne Nettolohn 901
-------------------------------------------------------------------------------
INSERT INTO @TmpData
  SELECT 2,
         PRS.BaPersonID,
         MAX(REPLACE(REPLACE(PRS.NNummer, 'N', ''), ' ', '')),
         MAX(PRS.Name + ' ' + ISNULL(PRS.Vorname, '')),
         NULL,
         NULL,
         NULL,
         BPT.BgPositionsartCode - 60000,  -- BFF-Kostenart
         NULL,
         SUM(BPO.Betrag)
  FROM dbo.FaLeistung             FAL WITH (READUNCOMMITTED)
    INNER JOIN dbo.BgFinanzplan   SFP WITH (READUNCOMMITTED) ON SFP.FaLeistungID = FAL.FaLeistungID
    INNER JOIN dbo.BgBudget       BDG WITH (READUNCOMMITTED) ON BDG.BgFinanzplanID = SFP.BgFinanzplanID
    INNER JOIN dbo.BgPosition     BPO WITH (READUNCOMMITTED) ON BPO.BgBudgetID = BDG.BgBudgetID
    INNER JOIN dbo.BgPositionsart BPT WITH (READUNCOMMITTED) ON BPT.BgPositionsartID = BPO.BgPositionsartID
    LEFT  JOIN dbo.BaPerson       PRS WITH (READUNCOMMITTED) ON PRS.BaPersonID = ISNULL(BPO.BaPersonID, FAL.BaPersonID)
  WHERE FAL.ModulID = 6
    AND BDG.Masterbudget = 0              -- auch graue!
    AND BPT.BgGruppeCode = 6060           -- Leistungen zugunsten BFF
    AND BPT.BgPositionsartCode &lt;&gt; 60901   
--- AND FAL.UserID =  {edtUserID.LookupID}
--- AND dbo.fnDateSerial(BDG.Jahr, BDG.Monat, 1) BETWEEN {edtDatumVon} AND {edtDatumBis}
--- AND ({edtNurAktive} = 0 OR FAL.DatumBis IS NULL)
  GROUP BY PRS.BaPersonID, BPT.BgPositionsartCode;

-------------------------------------------------------------------------------
-- Nettolohn 901 aus Budgetzahlungen
-------------------------------------------------------------------------------
INSERT INTO @TmpData
  SELECT 2,
         PRS.BaPersonID,
         MAX(REPLACE(REPLACE(PRS.NNummer, 'N', ''), ' ', '')),
         MAX(PRS.Name + ' ' + ISNULL(PRS.Vorname, '')),
         NULL,
         NULL,
         NULL,
         MAX(BPT.BgPositionsartCode - 60000),  -- BFF-Kostenart
         NULL,
         SUM(BPO.Betrag + BPO.Reduktion - ISNULL(BPO2.Betrag, 0)) -- Nettolohn + Quellensteuer - Erwerbsunkosten
  FROM dbo.FaLeistung             FAL  WITH (READUNCOMMITTED)
    INNER JOIN dbo.BgFinanzplan   SFP  WITH (READUNCOMMITTED) ON SFP.FaLeistungID = FAL.FaLeistungID
    INNER JOIN dbo.BgBudget       BDG  WITH (READUNCOMMITTED) ON BDG.BgFinanzplanID = SFP.BgFinanzplanID
    INNER JOIN dbo.BgPosition     BPO  WITH (READUNCOMMITTED) ON BPO.BgBudgetID = BDG.BgBudgetID
    INNER JOIN dbo.BgPositionsart BPT  WITH (READUNCOMMITTED) ON BPT.BgPositionsartID = BPO.BgPositionsartID
    LEFT  JOIN dbo.BaPerson       PRS  WITH (READUNCOMMITTED) ON PRS.BaPersonID = ISNULL(BPO.BaPersonID, FAL.BaPersonID)
    LEFT  JOIN dbo.BgPosition     BPO2 WITH (READUNCOMMITTED) ON BPO2.BgPositionID_Parent = BPO.BgPositionID
  WHERE FAL.ModulID = 6
    AND BDG.Masterbudget = 0            -- auch graue!
    AND BPT.BgPositionsartCode = 60901    
--- AND FAL.UserID =  {edtUserID.LookupID}
--- AND dbo.fnDateSerial(BDG.Jahr, BDG.Monat, 1) BETWEEN {edtDatumVon} AND {edtDatumBis}
--- AND ({edtNurAktive} = 0 OR FAL.DatumBis IS NULL)
  GROUP BY PRS.BaPersonID;

-------------------------------------------------------------------------------
-- output
-------------------------------------------------------------------------------
SELECT [Schlüssel] = SUBSTRING(Schluessel, 1, 3) + '''' + SUBSTRING(Schluessel, 4, 3),
       NAME        = Name,
       [L-Art]     = LArt,
       Betrag      = CONVERT(NUMERIC(11, 2), SUM(Betrag)), 
       BaPersonID$ = BaPersonID
FROM @TmpData
GROUP BY BaPersonID, Schluessel, Name, LArt, SortKey
ORDER BY SortKey, Schluessel, Name, LArt;</value>
  </data>
  <data name="edtDatumVon.Properties.Buttons" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        iVBORw0KGgoAAAANSUhEUgAAAAwAAAAQCAYAAAAiYZ4HAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8
        YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAABRSURBVDhPY2AAAmNj4//EYJBaMAApRqbhErjkiDEdZiiK
        Dcgmo7NxamhoYAA7DwSQ2Vg1gBTAFKHT1NGA7AyibBhuGoiKB5Jimpj0hM9AnHIA7aiPJlUTWpwAAAAA
        SUVORK5CYII=
</value>
  </data>
  <data name="edtDatumBis.Properties.Buttons" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        iVBORw0KGgoAAAANSUhEUgAAAAwAAAAQCAYAAAAiYZ4HAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8
        YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAABRSURBVDhPY2AAAmNj4//EYJBaMAApRqbhErjkiDEdZiiK
        Dcgmo7NxamhoYAA7DwSQ2Vg1gBTAFKHT1NGA7AyibBhuGoiKB5Jimpj0hM9AnHIA7aiPJlUTWpwAAAAA
        SUVORK5CYII=
</value>
  </data>
</root>
<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <metadata name="qryQuery.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>17, 17</value>
  </metadata>
  <data name="qryQuery.SelectStatement" xml:space="preserve">
    <value>-- Cockpit Fallbelastung Wohlen

DECLARE @DatumVon          DATETIME
DECLARE @DatumBis          DATETIME
DECLARE @GrundangebotFldID INT
SET @DatumVon = {edtDatumVon}--'20050101'--
SET @DatumBis = {edtDatumBis}--'20051231'--
SET @GrundangebotFldID       = (SELECT DynaFieldID FROM dbo.DynaField WITH (READUNCOMMITTED) WHERE FieldName = 'FaBeratungsplanGrundangebot')

DECLARE @FallbelastungHilfsTabelle TABLE (
   DatumVon          DATETIME,
   DatumBis          DATETIME,
   GrundangebotCode  INT,
   GemeindeCode      INT
)
DECLARE @Fallbelastung TABLE(
   GemeindeCode     INT,
   GrundangebotCode INT,
   AnzahlTage       FLOAT
)

INSERT @FallbelastungHilfsTabelle
SELECT
PHS.DatumVon,
PHS.DatumBis,
CASE when PHS.FaPhaseCode = 1
                          THEN 1
                          ELSE CONVERT(INT, GRA.Value)
                          END,
CASE WHEN FAL.GemeindeCode IS NULL THEN -1
     ELSE FAL.GemeindeCode
END
                 FROM dbo.FaLeistung FAL WITH (READUNCOMMITTED)
                 INNER JOIN dbo.FaPhase PHS WITH (READUNCOMMITTED) ON PHS.FaLeistungID = FAL.FaLeistungID AND
                     ( (PHS.DatumVon &lt;= @DatumVon AND (PHS.DatumBis &gt;= @DatumVon OR PHS.DatumBis IS NULL))
                                    OR
                      (PHS.DatumVon BETWEEN @DatumVon AND @DatumBis))
                 LEFT JOIN dbo.DynaValue GRA WITH (READUNCOMMITTED) ON GRA.FaPhaseID = PHS.FaPhaseID and
                                   GRA.DynaFieldID = @GrundangebotFldID and
                                   GRA.GridRowID = 1 and
                                   GRA.Value is not null and
                                   SQL_VARIANT_PROPERTY(GRA.Value,'BaseType')='int'
                 WHERE FAL.ModulID = 2
INSERT @Fallbelastung
SELECT
MAX(GemeindeCode),
GrundangebotCode,
SUM(
CASE
   WHEN DatumBis IS NULL OR DatumBis &gt; @DatumBis -- fall noch aktiv
   THEN CASE
            WHEN DatumVon &lt; @DatumVon
                THEN DATEDIFF(DAY, @DatumVon, @DatumBis)
            ELSE
                DATEDIFF(DAY, DatumVon, @DatumBis)
    END
    ELSE
        CASE
             WHEN DatumVon &lt; @DatumVon
                 THEN DATEDIFF(DAY, @DatumVon, DatumBis)
             ELSE
                 DATEDIFF(DAY, DatumVon, DatumBis)
        END
END
)
FROM @FallbelastungHilfsTabelle
GROUP BY GrundangebotCode, GemeindeCode

DECLARE @faktor FLOAT

SET @faktor = (SELECT Value1 FROM dbo.XLOVCode WITH (READUNCOMMITTED) WHERE LOVName = 'FaGrundangebot' AND Code = 1)
UPDATE @Fallbelastung SET AnzahlTage = (@faktor/30.4166)*AnzahlTage WHERE GrundangebotCode = 1 --DIES SIND DIE STELLENPROZENTE!
SET @faktor = (SELECT Value1 FROM dbo.XLOVCode WITH (READUNCOMMITTED) WHERE LOVName = 'FaGrundangebot' AND Code = 2)
UPDATE @Fallbelastung SET AnzahlTage = (@faktor/30.4166)*AnzahlTage WHERE GrundangebotCode = 2
SET @faktor = (SELECT Value1 FROM dbo.XLOVCode WITH (READUNCOMMITTED) WHERE LOVName = 'FaGrundangebot' AND Code = 3)
UPDATE @Fallbelastung SET AnzahlTage = (@faktor/30.4166)*AnzahlTage WHERE GrundangebotCode = 3
SET @faktor = (SELECT Value1 FROM dbo.XLOVCode WITH (READUNCOMMITTED) WHERE LOVName = 'FaGrundangebot' AND Code = 4)
UPDATE @Fallbelastung SET AnzahlTage = (@faktor/30.4166)*AnzahlTage WHERE GrundangebotCode = 4
SET @faktor = (SELECT Value1 FROM dbo.XLOVCode WITH (READUNCOMMITTED) WHERE LOVName = 'FaGrundangebot' AND Code = 5)
UPDATE @Fallbelastung SET AnzahlTage = (@faktor/30.4166)*AnzahlTage WHERE GrundangebotCode = 5
SET @faktor = (SELECT AVG(CONVERT(DECIMAL, Value1)) FROM dbo.XLOVCode WITH (READUNCOMMITTED) WHERE LOVName = 'FaGrundangebot')
UPDATE @Fallbelastung SET AnzahlTage = (@faktor/30.4166)*AnzahlTage WHERE GrundangebotCode is null


DECLARE @Total FLOAT
SET @Total = (SELECT SUM(AnzahlTage) FROM @Fallbelastung)
SELECT
Gemeinde          = CASE WHEN XGMD.Text IS NULL THEN 'Keine Angabe'
                         ELSE XGMD.Text
                    END,
Stellenprozent    = ROUND(SUM(anzahlTage), 2),
[Anteil Gemeinde] = ROUND((SUM(anzahlTage)*100.0)/@Total, 2)
FROM @Fallbelastung
LEFT JOIN dbo.XLOVCode XGMD WITH (READUNCOMMITTED) ON XGMD.LovName  = 'GemeindeSozialdienst' AND XGMD.Code = gemeindecode
GROUP BY XGMD.Text</value>
  </data>
  <assembly alias="System.Drawing" name="System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="xDocument.Properties.Buttons" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        iVBORw0KGgoAAAANSUhEUgAAAAwAAAAQCAYAAAAiYZ4HAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8
        YQUAAAAgY0hSTQAAeiYAAICEAAD6AAAAgOgAAHUwAADqYAAAOpgAABdwnLpRPAAAAF1JREFUOE9jZAAC
        Y2Pj/yAaGzh79iwjhjhIw///MzGwmJjYfxDGqSEtjeE/MgYpBhmEoYmQDSANKM7GpQHZmVg1oDsJxgdp
        pI4N2EIKJjbqJLIiDqSJEMaVovGKAwBnM3PWBP8PfwAAAABJRU5ErkJggg==
</value>
  </data>
  <data name="edtDatumBis.Properties.Buttons" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        iVBORw0KGgoAAAANSUhEUgAAAAwAAAAQCAYAAAAiYZ4HAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8
        YQUAAAAgY0hSTQAAeiYAAICEAAD6AAAAgOgAAHUwAADqYAAAOpgAABdwnLpRPAAAAFVJREFUOE9jZAAC
        Y2Pj/yCaEDh79iwjWA1MAzaNWOVAgsRguAuIcRKKGmROQwMD3D/IbKwaQApgitBp6mgAeYokG4abBmT/
        YKQ3smKapLREKFkjywMAd9eDN3Z9MMsAAAAASUVORK5CYII=
</value>
  </data>
  <data name="edtDatumVon.Properties.Buttons" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        iVBORw0KGgoAAAANSUhEUgAAAAwAAAAQCAYAAAAiYZ4HAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8
        YQUAAAAgY0hSTQAAeiYAAICEAAD6AAAAgOgAAHUwAADqYAAAOpgAABdwnLpRPAAAAFVJREFUOE9jZAAC
        Y2Pj/yCaEDh79iwjWA1MAzaNWOVAgsRguAuIcRKKGmROQwMD3D/IbKwaQApgitBp6mgAeYokG4abBmT/
        YKQ3smKapLREKFkjywMAd9eDN3Z9MMsAAAAASUVORK5CYII=
</value>
  </data>
</root>
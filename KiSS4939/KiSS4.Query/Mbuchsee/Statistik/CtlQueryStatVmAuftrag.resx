<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <metadata name="qryQuery.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>17, 17</value>
  </metadata>
  <data name="qryQuery.SelectStatement" xml:space="preserve">
    <value>DECLARE @DatumVon DATETIME
DECLARE @DatumBis DATETIME

SET @DatumVon = {edtDatumVon}--'20050101'--
SET @DatumBis = {edtDatumBis}--'20051030'--

DECLARE @Aufnahmen TABLE(
   Auftrag      INT,
   UserID       INT,
   Eröffnung    DATETIME)

DECLARE @Abschlüsse TABLE(
   Auftrag            INT,
   UserID             INT,
   AbschlussgrundCode INT,
   Abschluss          DATETIME)

DECLARE @Result TABLE(
   Beschreibung          VARCHAR (100),
   SAR                   VARCHAR (100),
   Eröffnungen           INT,
   Abschlüsse            INT, 
   SortKey$              INT)

DECLARE @Gruende TABLE(
      ID$            INT IDENTITY(1,1) PRIMARY KEY,
      Sortkey$       INT,
      SAR            VARCHAR(100),
      Abschlussgrund VARCHAR(100),
      Anzahl         INT)


INSERT @Aufnahmen
SELECT VmAuftragCode,
       UserID,
       DatumVon
FROM dbo.FaLeistung WITH (READUNCOMMITTED)
WHERE ModulID = 5         --VM
  AND FaProzessCode = 505 --VM Auftrag
  AND DatumVon BETWEEN @DatumVon AND @DatumBis

INSERT @Abschlüsse
SELECT VmAuftragCode,
       UserID,
       AbschlussgrundCode,
       DatumVon
FROM dbo.FaLeistung WITH (READUNCOMMITTED)
WHERE ModulID = 5         --VM
  AND FaProzessCode = 505 --VM Auftrag
  AND DatumBis BETWEEN @DatumVon AND @DatumBis

DECLARE @auftragCode      INT
DECLARE @userID           INT
DECLARE @aufCounter       INT
DECLARE @absCounter       INT
DECLARE @SortKey          INT
SET @SortKey = 0
 
DECLARE cursorSAR CURSOR STATIC FOR
SELECT UserID
FROM dbo.XUser WITH (READUNCOMMITTED)

OPEN cursorSAR
FETCH NEXT FROM cursorSAR INTO @userID
WHILE @@FETCH_STATUS = 0 BEGIN
   DECLARE cursorAuftrag CURSOR STATIC FOR
   SELECT Code
   FROM dbo.XLOVCode WITH (READUNCOMMITTED) WHERE LOVName = 'VmAuftrag'

   OPEN cursorAuftrag
   FETCH NEXT FROM cursorAuftrag INTO @auftragCode
   WHILE @@fetch_status = 0 BEGIN
      SET @aufCounter = (SELECT COUNT(*) 
                        FROM @Aufnahmen
                        WHERE Auftrag = @auftragCode
                              AND UserID = @userID
                        )
      SET @absCounter = (SELECT COUNT(*) 
                        FROM @Abschlüsse
                        WHERE Auftrag = @auftragCode
                              AND UserID = @userID
                        )

      INSERT @Result
      SELECT Beschreibung = dbo.fnLOVText('VmAuftrag', @auftragCode),
             SAR = LastName + isNull(', ' + FirstName,''),
             @aufCounter,
             @absCounter,
             @sortKey
      FROM dbo.XUser WITH (READUNCOMMITTED)
      WHERE UserID = @userID
            AND (@aufCounter &gt; 0 OR @absCounter &gt; 0)
      FETCH NEXT FROM cursorAuftrag INTO @auftragCode      
   END
   CLOSE cursorAuftrag
   DEALLOCATE cursorAuftrag
   --null aufträge
   SET @aufCounter = (SELECT COUNT(*) 
                      FROM @Aufnahmen
                      WHERE Auftrag IS NULL
                            AND UserID = @userID
                        )
   SET @absCounter = (SELECT COUNT(*) 
                      FROM @Abschlüsse
                      WHERE Auftrag IS NULL
                            AND UserID = @userID
                      )

    INSERT @Result
    SELECT Beschreibung = 'Nicht Angegeben',
           SAR = LastName + isNull(', ' + FirstName,''),
           @aufCounter,
           @absCounter,
           @sortKey
    FROM dbo.XUser WITH (READUNCOMMITTED)
    WHERE UserID = @userID
          AND (@aufCounter &gt; 0 OR @absCounter &gt; 0)

   FETCH NEXT FROM cursorSAR INTO @userID
   SET @SortKey = @SortKey + 1

END
CLOSE cursorSAR
DEALLOCATE cursorSAR

------ Gesamt Total
INSERT INTO @Result
SELECT 'zzzz', NULL,
       SUM(Eröffnungen),
       SUM(Abschlüsse),
       99999
FROM @Result

----- Total pro Grund
INSERT @Result
SELECT Beschreibung, 
       'Total',
       SUM(Eröffnungen),
       SUM(Abschlüsse),
       9999
FROM @Result
WHERE Beschreibung &lt;&gt; 'zzzz'
GROUP BY Beschreibung
       
------ Leerzeilen
INSERT @Result SELECT Beschreibung, NULL, NULL, NULL, 99999 FROM @Result GROUP BY Beschreibung

SELECT CASE WHEN (Beschreibung = 'zzzz' AND Eröffnungen &gt; 0) THEN 'Total' WHEN SAR IS NULL THEN '' ELSE Beschreibung END,
       SAR,
       Eröffnungen,
       Abschlüsse,
       SortKey$
FROM @Result	
ORDER BY Beschreibung, SortKey$, SAR



---------------------------------
-------- Liste 2: Abschlussgründe
---------------------------------

------ SAR
INSERT INTO  @Gruende
SELECT FAL.AbschlussgrundCode,
       SAR    = MAX(USR.LastName) + isnull(', ' + MAX(USR.FirstName),''),
       Grund  = dbo.fnLovText('VmAuftragAbschlussgrund', FAL.AbschlussgrundCode),
       Anzahl = COUNT(*)
FROM @Abschlüsse       FAL
  INNER JOIN dbo.XUser USR  WITH (READUNCOMMITTED) ON USR.UserID = FAL.UserID
WHERE FAL.AbschlussgrundCode IS NOT NULL
GROUP BY FAL.UserID, FAL.AbschlussgrundCode
ORDER BY 2

------ Total Grund
INSERT INTO  @Gruende
SELECT FAL.AbschlussgrundCode,
       'Total',
       Grund  = dbo.fnLovText('VmAuftragAbschlussgrund', FAL.AbschlussgrundCode),
       Anzahl = COUNT(*)
FROM @Abschlüsse       FAL
  INNER JOIN dbo.XUser USR  WITH (READUNCOMMITTED) ON USR.UserID = FAL.UserID
WHERE FAL.AbschlussgrundCode IS NOT NULL
GROUP BY FAL.AbschlussgrundCode

------ Leerzeile nach Total Grund
INSERT INTO  @Gruende
SELECT FAL.AbschlussgrundCode, NULL, NULL, NULL
FROM @Abschlüsse       FAL
  INNER JOIN dbo.XUser USR  WITH (READUNCOMMITTED) ON USR.UserID = FAL.UserID
WHERE FAL.AbschlussgrundCode IS NOT NULL
GROUP BY FAL.AbschlussgrundCode

------ Total 
INSERT INTO  @Gruende
SELECT 99999,
       'Total',
       NULL,
       Anzahl = (SELECT COUNT(*) FROM @Abschlüsse  FAL  INNER JOIN XUser USR ON USR.UserID = FAL.UserID WHERE AbschlussgrundCode IS NOT NULL)

------ Leerzeile nach Total
INSERT INTO  @Gruende SELECT 8888, NULL, NULL, NULL

SELECT SAR, Abschlussgrund, Anzahl
FROM @Gruende
ORDER BY Sortkey$, ID$</value>
  </data>
  <assembly alias="System.Drawing" name="System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="xDocument.Properties.Buttons" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        iVBORw0KGgoAAAANSUhEUgAAAAwAAAAQCAYAAAAiYZ4HAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8
        YQUAAAAgY0hSTQAAeiYAAICEAAD6AAAAgOgAAHUwAADqYAAAOpgAABdwnLpRPAAAAF1JREFUOE9jZAAC
        Y2Pj/yAaGzh79iwjhjhIw///MzGwmJjYfxDGqSEtjeE/MgYpBhmEoYmQDSANKM7GpQHZmVg1oDsJxgdp
        pI4N2EIKJjbqJLIiDqSJEMaVovGKAwBnM3PWBP8PfwAAAABJRU5ErkJggg==
</value>
  </data>
  <data name="edtDatumBis.Properties.Buttons" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        iVBORw0KGgoAAAANSUhEUgAAAAwAAAAQCAYAAAAiYZ4HAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8
        YQUAAAAgY0hSTQAAeiYAAICEAAD6AAAAgOgAAHUwAADqYAAAOpgAABdwnLpRPAAAAFVJREFUOE9jZAAC
        Y2Pj/yCaEDh79iwjWA1MAzaNWOVAgsRguAuIcRKKGmROQwMD3D/IbKwaQApgitBp6mgAeYokG4abBmT/
        YKQ3smKapLREKFkjywMAd9eDN3Z9MMsAAAAASUVORK5CYII=
</value>
  </data>
  <data name="edtDatumVon.Properties.Buttons" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        iVBORw0KGgoAAAANSUhEUgAAAAwAAAAQCAYAAAAiYZ4HAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8
        YQUAAAAgY0hSTQAAeiYAAICEAAD6AAAAgOgAAHUwAADqYAAAOpgAABdwnLpRPAAAAFVJREFUOE9jZAAC
        Y2Pj/yCaEDh79iwjWA1MAzaNWOVAgsRguAuIcRKKGmROQwMD3D/IbKwaQApgitBp6mgAeYokG4abBmT/
        YKQ3smKapLREKFkjywMAd9eDN3Z9MMsAAAAASUVORK5CYII=
</value>
  </data>
</root>
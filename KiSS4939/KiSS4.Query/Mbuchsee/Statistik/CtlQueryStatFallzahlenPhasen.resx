<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <metadata name="qryQuery.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>17, 17</value>
  </metadata>
  <data name="qryQuery.SelectStatement" xml:space="preserve">
    <value>DECLARE @Result Table(
   Phase        VARCHAR (100),
   Abteilung    VARCHAR (100),
   SAR          VARCHAR (100),
   Beschreibung VARCHAR (100),
   Anzahl       INT,
   SortKey$     INT
)

DECLARE @AufnahmenPhase Table(
   UserName  VARCHAR (100),
   Abteilung VARCHAR (100)
)

DECLARE @Aufnahmen Table(
    UserName           VARCHAR (100),
    Abteilung          VARCHAR (100),
    Anmeldeart         VARCHAR (100),
    AnmeldeKategorie   VARCHAR (100),
    Kontaktveranlasser VARCHAR (100),
    Gemeinde           VARCHAR (100)
)

DECLARE @Abschlüsse Table(
    UserName           VARCHAR (100),
    Gemeinde           VARCHAR (100),
    Abschlussgrund     VARCHAR (100),
    Abteilung          VARCHAR (100)
)
--TODO vereinfachen
DECLARE @AufnahmenBer Table(
   UserName  VARCHAR (100),
   Abteilung VARCHAR (100)
)
DECLARE @AbschlüsseBer Table(
   UserName           VARCHAR (100),
   Abteilung          VARCHAR (100),
   AbschlussGrundCode INT
)
DECLARE @TotalBearbeitet Table(
   UserName  VARCHAR (100),
   Abteilung VARCHAR (100)
)

DECLARE @DatumVon DATETIME
DECLARE @DatumBis DATETIME
SET @DatumVon = {edtDatumVon}--'20050728'--
SET @DatumBis = {edtDatumBis}--'20051001'--

-- Dynafields
DECLARE @AnmeldeDatumFldID       INT
DECLARE @AufnahmeartFldID        INT
DECLARE @AufnahmekategorieFldID  INT
DECLARE @KontaktveranlasserFldID INT
SET @AnmeldeDatumFldID       = (select DynaFieldID from DynaField where FieldName = 'FaIntAnmeldungDatum')
SET @AufnahmeartFldID        = (select DynaFieldID from DynaField where FieldName = 'FaIntAufnahmeart')
SET @AufnahmekategorieFldID  = (select DynaFieldID from DynaField where FieldName = 'FaIntKategorieKlient')
SET @KontaktveranlasserFldID = (select DynaFieldID from DynaField where FieldName = 'FaIntKontaktveranlasser')

--BEGIN SET DATA @AufnahmenPhase
INSERT @AufnahmenPhase
SELECT USR.LastName + isNull(', ' + Usr.FirstName,''),
       XOU.ItemName
FROM  dbo.FaPhase            PHS WITH (READUNCOMMITTED)
INNER JOIN dbo.XUser         USR WITH (READUNCOMMITTED)  ON USR.UserID = PHS.UserID
INNER JOIN dbo.XOrgUnit_User OUU WITH (READUNCOMMITTED)  ON OUU.UserID = PHS.UserID
                                 AND OUU.OrgUnitMemberCode = 2
INNER JOIN dbo.XOrgUnit      XOU WITH (READUNCOMMITTED)  ON XOU.OrgUnitID = OUU.OrgUnitID
WHERE PHS.DatumVon BETWEEN @DatumVon AND @DatumBis
      AND PHS.FaPhaseCode = 1
---   AND XOU.OrgUnitID = {edtOrgUnitID}
--END SET DATA @AufnahmenPhase 

-- BEGIN SET DATA @Aufnahmen
INSERT @Aufnahmen
SELECT USR.LastName + isNull(', ' + Usr.FirstName,''),
       XOU.ItemName,
       LIAA.TEXT, 
       LIKT.Text,
       LIKV.Text,
       GMD.Text
FROM  dbo.DynaValue          IAD  WITH (READUNCOMMITTED)  
INNER JOIN dbo.FaPhase       PHS  WITH (READUNCOMMITTED)  ON PHS.FaPhaseID = IAD.FaPhaseID
INNER JOIN dbo.XUser         USR  WITH (READUNCOMMITTED)  ON USR.UserID = PHS.UserID
INNER JOIN dbo.XOrgUnit_User OUU  WITH (READUNCOMMITTED)  ON OUU.UserID = PHS.UserID AND OUU.OrgUnitMemberCode = 2
INNER JOIN dbo.XOrgUnit      XOU  WITH (READUNCOMMITTED)  ON XOU.OrgUnitID = OUU.OrgUnitID
INNER JOIN dbo.FaLeistung    FAL  WITH (READUNCOMMITTED)  ON FAL.FaLeistungID = PHS.FaLeistungID
LEFT  JOIN dbo.DynaValue     IAA  WITH (READUNCOMMITTED) ON IAA.FaPhaseID = IAD.FaPhaseID
                                  AND IAA.DynaFieldID = @AufnahmeartFldID 
LEFT  JOIN dbo.XLOVCode      LIAA WITH (READUNCOMMITTED) ON LIAA.Code = IAA.Value
                                  AND LIAA.LovName = 'FaAufnahmeart'
LEFT  JOIN dbo.DynaValue     IKT  WITH (READUNCOMMITTED)  ON IKT.FaPhaseID = IAD.FaPhaseID
                                  AND IKT.DynaFieldID = @AufnahmekategorieFldID 
LEFT  JOIN dbo.XLOVCode      LIKT WITH (READUNCOMMITTED) ON LIKT.Code = IKT.Value
                                  AND LIKT.LovName = 'FaKategorieKlient' 
LEFT  JOIN dbo.DynaValue     IKV  WITH (READUNCOMMITTED)  ON IKV.FaPhaseID = IAD.FaPhaseID
                                  AND IKV.DynaFieldID = @KontaktveranlasserFldID 
LEFT  JOIN dbo.XLOVCode      LIKV WITH (READUNCOMMITTED) ON LIKV.Code = IKV.Value
                                  AND LIKV.LovName = 'FaKontaktveranlasser' 
LEFT  JOIN dbo.XLOVCode      GMD  WITH (READUNCOMMITTED) ON GMD.Code = FAL.GemeindeCode
                                 AND GMD.LOVName = 'GemeindeSozialdienst'
WHERE IAD.DynaFieldID = @AnmeldeDatumFldID
      AND CONVERT(DATETIME, IAD.Value) BETWEEN @DatumVon AND @DatumBis
---   AND XOU.OrgUnitID = {edtOrgUnitID}

-- END SET DATA @Aufnahmen

-- BEGIN SET DATA @Abschlüsse
INSERT @Abschlüsse
SELECT USR.LastName + isNull(', ' + Usr.FirstName,''),
       GMD.Text,
       ABG.Text,
       XOU.ItemName
FROM  dbo.FaPhase            PHS 
INNER JOIN dbo.XUser         USR WITH (READUNCOMMITTED) ON USR.UserID = PHS.UserID
INNER JOIN dbo.FaLeistung    FAL WITH (READUNCOMMITTED) ON FAL.FaLeistungID = PHS.FaLeistungID
INNER JOIN dbo.XOrgUnit_User OUU WITH (READUNCOMMITTED) ON OUU.UserID = PHS.UserID
                                 AND OUU.OrgUnitMemberCode = 2
INNER JOIN dbo.XOrgUnit      XOU WITH (READUNCOMMITTED)  ON XOU.OrgUnitID = OUU.OrgUnitID
LEFT  JOIN dbo.XLOVCode      GMD WITH (READUNCOMMITTED) ON GMD.Code = FAL.GemeindeCode
                             AND GMD.LOVName = 'GemeindeSozialdienst'
LEFT  JOIN dbo.XLOVCode ABG WITH (READUNCOMMITTED) ON ABG.Code = PHS.AbschlussGrundCode
                             AND ABG.LOVName = 'FaAbschlussgrundIntPhase'

WHERE PHS.DatumBis BETWEEN @DatumVon AND @DatumBis
      AND PHS.FaPhaseCode = 1 --nur Intake!
---   AND XOU.OrgUnitID = {edtOrgUnitID}
-- END SET DATA @Abschlüsse

--BEGIN SET DATA @Aufnahmen Beratung
INSERT @AufnahmenBer
SELECT USR.LastName + isNull(', ' + Usr.FirstName,''),
       XOU.ItemName
FROM  dbo.FaPhase            PHS WITH (READUNCOMMITTED)
INNER JOIN dbo.XUser         USR WITH (READUNCOMMITTED)  ON USR.UserID = PHS.UserID
INNER JOIN dbo.XOrgUnit_User OUU WITH (READUNCOMMITTED)  ON OUU.UserID = PHS.UserID
                                 AND OUU.OrgUnitMemberCode = 2
INNER JOIN dbo.XOrgUnit      XOU WITH (READUNCOMMITTED)  ON XOU.OrgUnitID = OUU.OrgUnitID
WHERE PHS.DatumVon BETWEEN @DatumVon AND @DatumBis
      AND PHS.FaPhaseCode = 2 --Beratung
---   AND XOU.OrgUnitID = {edtOrgUnitID}
--END SET DATA @Aufnahmen Beratung

--BEGIN SET DATA @Abschlüsse Beratung
INSERT @AbschlüsseBer
SELECT USR.LastName + isNull(', ' + Usr.FirstName,''), 
       XOU.ItemName, 
       PHS.AbschlussGrundCode
FROM  dbo.FaPhase            PHS WITH (READUNCOMMITTED)
INNER JOIN dbo.XUser         USR WITH (READUNCOMMITTED)  ON USR.UserID = PHS.UserID
INNER JOIN dbo.XOrgUnit_User OUU WITH (READUNCOMMITTED)  ON OUU.UserID = PHS.UserID
                                 AND OUU.OrgUnitMemberCode = 2
INNER JOIN dbo.XOrgUnit      XOU WITH (READUNCOMMITTED)  ON XOU.OrgUnitID = OUU.OrgUnitID
WHERE PHS.DatumBis BETWEEN @DatumVon AND @DatumBis
      AND PHS.FaPhaseCode = 2 --Beratung
---   AND XOU.OrgUnitID = {edtOrgUnitID}
--END SET DATA @Abschlüsse Beratung

--BEGIN SET DATA @Totalbearbeitet
INSERT @Totalbearbeitet
SELECT USR.LastName + isNull(', ' + Usr.FirstName,''),
       XOU.ItemName
FROM  dbo.FaLeistung             FAL WITH (READUNCOMMITTED)
INNER JOIN dbo.XUser             USR WITH (READUNCOMMITTED)  ON USR.UserID = FAL.UserID
INNER JOIN dbo.XOrgUnit_User     OUU WITH (READUNCOMMITTED)  ON OUU.UserID = FAL.UserID
                                 AND OUU.OrgUnitMemberCode = 2
INNER JOIN dbo.XOrgUnit          XOU WITH (READUNCOMMITTED)  ON XOU.OrgUnitID = OUU.OrgUnitID
WHERE ((FAL.DatumVon &lt;= @DatumVon AND (FAL.DatumBis &gt;= @DatumVon OR FAL.DatumBis IS NULL))
                OR
FAL.DatumVon BETWEEN @DatumVon AND @DatumBis)
AND (FAL.ModulID &lt;&gt; 2 OR
         NOT EXISTS (SELECT 1 
                     FROM   dbo.FaLeistung 
                     WHERE  BaPersonID = FAL.BaPersonID AND
                            DatumVon &lt;= @DatumBis AND
                            ISNULL(DatumBis,@DatumVon) &gt;= @DatumVon AND
                            ModulID &lt;&gt; 2))
---   AND XOU.OrgUnitID = {edtOrgUnitID}
--END SET DATA @Totalbearbeitet 



DECLARE @sortKey    INT
SET @sortKey = 0

DECLARE @abtName      VARCHAR(100)
DECLARE cursorAbteilung CURSOR STATIC FOR
   SELECT ItemName
   FROM dbo.XOrgUnit
 
OPEN cursorAbteilung
   FETCH NEXT FROM cursorAbteilung INTO @abtName
   WHILE @@fetch_status = 0 BEGIN
--BEGIN Aufnahmen nach SAR
--HEADER Phase, Abteilung
      INSERT @Result
      SELECT 'Abklärung', 
             @abtName, 
             '',
             '',
             NULL,
             @sortKey
             WHERE ((SELECT COUNT(*) FROM @Aufnahmen WHERE Abteilung=@abtName) &gt; 0 OR (SELECT COUNT(*) FROM @Abschlüsse WHERE Abteilung=@abtName) &gt; 0)
--HEADER Beschreibung
      INSERT @Result
      SELECT '', 
             '', 
             '',
             'Neu-Aufnahmen',
             NULL,
             @sortKey 
            FROM @Aufnahmen
            WHERE Abteilung = @abtName 
            HAVING COUNT(*) &gt;0
--DATA
      INSERT @Result
      SELECT '',
             '',
             UserName,
             '',
             COUNT(*),
             @sortKey
             FROM @Aufnahmen 
             WHERE Abteilung = @abtName
             GROUP BY UserName
--TOTAL
       INSERT @Result
       SELECT '', '', '', 'Total', COUNT(*),@sortKey FROM @Aufnahmen WHERE Abteilung = @abtName HAVING COUNT(*) &gt;0
--END NeuAufnahmen nach SAR

--SPACER
INSERT @Result SELECT '', '', '', '', NULL ,@sortKey  FROM @Aufnahmen WHERE Abteilung = @abtName HAVING COUNT(*) &gt;0


--BEGIN PhasenEröffnungen nach SAR
--HEADER Beschreibung
      INSERT @Result
      SELECT '', 
             '', 
             '',
             'Phaseneröffnungen',
             NULL,
             @sortKey 
            FROM @AufnahmenPhase
            WHERE Abteilung = @abtName 
            HAVING COUNT(*) &gt;0
--DATA
      INSERT @Result
      SELECT '',
             '',
             UserName,
             '',
             COUNT(*),
             @sortKey
             FROM @AufnahmenPhase 
             WHERE Abteilung = @abtName
             GROUP BY UserName
--TOTAL
       INSERT @Result
       SELECT '', '', '', 'Total', COUNT(*),@sortKey FROM @AufnahmenPhase WHERE Abteilung = @abtName HAVING COUNT(*) &gt;0
--END PhasenEröffnungen nach SAR

--SPACER
INSERT @Result SELECT '', '', '', '', NULL ,@sortKey  FROM @Aufnahmen WHERE Abteilung = @abtName HAVING COUNT(*) &gt;0

--BEGIN Anmeldearten
--HEADER Beschreibung
      INSERT @Result
      SELECT '', '', '', 'Aufnahmeart', NULL ,@sortKey  FROM @Aufnahmen WHERE Abteilung = @abtName HAVING COUNT(*) &gt;0
--DATA
      INSERT @Result
      SELECT '',
             '',
             UserName,
             CASE WHEN Anmeldeart IS NULL THEN 'nicht angegeben'
                  ELSE Anmeldeart
             END,
             COUNT(*),
             @sortKey
      FROM @Aufnahmen
      WHERE Abteilung = @abtName
      GROUP BY UserName, Anmeldeart
--TOTAL
       INSERT @Result
       SELECT '', 
              '', 
              'Total', 
              CASE WHEN Anmeldeart IS NULL THEN 'nicht angegeben'
                   ELSE Anmeldeart 
              END, 
              COUNT(*),
              @sortKey 
              FROM @Aufnahmen WHERE Abteilung = @abtName GROUP BY Anmeldeart  HAVING COUNT(*) &gt;0
--END Anmeldearten

--SPACER
INSERT @Result SELECT '', '', '', '', NULL ,@sortKey  FROM @Aufnahmen WHERE Abteilung = @abtName HAVING COUNT(*) &gt;0

--BEGIN Aufnahmen nach Ort
--HEADER Beschreibung
      INSERT @Result
      SELECT '', '', '', 'Aufnahmen nach Ort', NULL ,@sortKey  FROM @Aufnahmen WHERE Abteilung = @abtName HAVING COUNT(*) &gt;0
--DATA
      INSERT @Result
      SELECT '',
             '',
             '',  
             CASE WHEN Gemeinde IS NULL THEN 'nicht angegeben'
                  ELSE Gemeinde
             END, 
             COUNT(*),
             @sortKey
      FROM @Aufnahmen
      WHERE Abteilung = @abtName
      GROUP BY Gemeinde, Abteilung
--END Aufnahmen nach Ort

--SPACER
INSERT @Result SELECT '', '', '', '', NULL ,@sortKey  FROM @Aufnahmen WHERE Abteilung = @abtName HAVING COUNT(*) &gt;0

--BEGIN Aufnahmen nach Kategorie
--HEADER Beschreibung
      INSERT @Result
      SELECT '', '', '', 'Aufnahmen nach Kategorie', NULL ,@sortKey  FROM @Aufnahmen WHERE Abteilung = @abtName HAVING COUNT(*) &gt;0
--DATA
      INSERT @Result
      SELECT '',
             '',
             '',
             CASE WHEN AnmeldeKategorie IS NULL THEN 'nicht angegeben'
                  ELSE AnmeldeKategorie
             END,
             COUNT(*),
             @sortKey
      FROM @Aufnahmen
      WHERE Abteilung = @abtName
      GROUP BY AnmeldeKategorie
--END Aufnahmen nach Kategorie

--SPACER
INSERT @Result SELECT '', '', '', '', NULL ,@sortKey  FROM @Aufnahmen WHERE Abteilung = @abtName HAVING COUNT(*) &gt;0

--BEGIN Aufnahmen nach Kontaktveranlasser
--HEADER Beschreibung
      INSERT @Result
      SELECT '', '', '', 'Aufnahmen nach Kontaktveranlasser', NULL ,@sortKey  FROM @Aufnahmen WHERE Abteilung = @abtName HAVING COUNT(*) &gt;0
--DATA
      INSERT @Result
      SELECT '',
             '',
             '',
             CASE WHEN Kontaktveranlasser IS NULL THEN 'nicht angegeben'
                  ELSE Kontaktveranlasser
             END, 
             COUNT(*),
             @sortKey
      FROM @Aufnahmen
      WHERE Abteilung = @abtName
      GROUP BY Kontaktveranlasser
-- END Aufnahmen nach Kontaktveranlasser

--SPACER
INSERT @Result SELECT '', '', '', '', NULL ,@sortKey  FROM @Aufnahmen WHERE Abteilung = @abtName HAVING COUNT(*) &gt;0

--BEGIN Abschlüsse nach SAR
--HEADER Beschreibung
      INSERT @Result
      SELECT '', '', '', 'Abschlüsse', NULL ,@sortKey  FROM @Abschlüsse WHERE Abteilung = @abtName HAVING COUNT(*) &gt;0
--DATA
      INSERT @Result
      SELECT '',
             '',
             UserName,
             '',
             COUNT(*),
             @sortKey
       FROM @Abschlüsse
       WHERE Abteilung = @abtName
       GROUP BY UserName
--TOTAL
       INSERT @Result
       SELECT '', '', '', 'Total', COUNT(*),@sortKey FROM @Abschlüsse WHERE Abteilung = @abtName HAVING COUNT(*) &gt;0
--END Abschlüsse nach SAR

--SPACER
INSERT @Result SELECT '', '', '', '', NULL ,@sortKey  FROM @Aufnahmen WHERE Abteilung = @abtName HAVING COUNT(*) &gt;0

--BEGIN Abschlüsse nach Ort
--HEADER Beschreibung
      INSERT @Result
      SELECT '', '', '', 'Abschlüsse nach Ort', NULL ,@sortKey  FROM @Abschlüsse WHERE Abteilung = @abtName HAVING COUNT(*) &gt;0
--DATA
      INSERT @Result
      SELECT '',
             '',
             '',
             CASE WHEN Gemeinde IS NULL THEN 'nicht angegeben'
                  ELSE Gemeinde
             END,
             COUNT(*),
             @sortKey
       FROM @Abschlüsse
       WHERE Abteilung = @abtName
       GROUP BY Gemeinde, Abteilung
--END Abschlüsse nach Ort

--SPACER
INSERT @Result SELECT '', '', '', '', NULL ,@sortKey  FROM @Abschlüsse WHERE Abteilung = @abtName HAVING COUNT(*) &gt;0

--BEGIN Abschlüsse nach Grund
--HEADER Beschreibung
      INSERT @Result
      SELECT '', '', '', 'Abschlüsse nach Grund', NULL ,@sortKey  FROM @Abschlüsse WHERE Abteilung = @abtName HAVING COUNT(*) &gt;0
--DATA
      INSERT @Result
      SELECT '',
             '',
             '',
             CASE WHEN Abschlussgrund IS NULL THEN 'nicht angegeben'
                  ELSE Abschlussgrund
             END,
             COUNT(*),
             @sortKey
       FROM @Abschlüsse
       WHERE Abteilung = @abtName
       GROUP BY Abschlussgrund, Abteilung
--END Abschlüsse nach Grund
--SPACER
INSERT @Result SELECT '', '', '', '', NULL ,@sortKey  FROM @Abschlüsse WHERE Abteilung = @abtName HAVING COUNT(*) &gt;0

       SET @sortKey = @sortKey + 1
       FETCH NEXT FROM cursorAbteilung INTO @abtName
  END
CLOSE cursorAbteilung


OPEN cursorAbteilung
   FETCH NEXT FROM cursorAbteilung INTO @abtName
   WHILE @@fetch_status = 0 BEGIN
--BEGIN Neue Beratungsphasen
--HEADER Phase, Abteilung
      INSERT @Result
      SELECT 'Beratung', 
             @abtName, 
             '',
             '',
             NULL,
             @sortKey
             WHERE ((SELECT COUNT(*) FROM @AufnahmenBer WHERE Abteilung=@abtName) &gt; 0 
                   OR (SELECT COUNT(*) FROM @AbschlüsseBer WHERE Abteilung=@abtName) &gt; 0
                   OR (SELECT COUNT(*) FROM @TotalBearbeitet WHERE Abteilung=@abtName) &gt;0)
--HEADER Beschreibung
      INSERT @Result
      SELECT '', 
             '', 
             '',
             'Neu-Aufnahmen',
             NULL,
             @sortKey 
            FROM @AufnahmenBer
            WHERE Abteilung = @abtName 
            HAVING COUNT(*) &gt; 0
--DATA
        INSERT @Result
        SELECT '',
               '',
               UserName,
               '',
               COUNT(*),
               @sortKey
        FROM  @AufnahmenBer
        WHERE Abteilung = @abtName
        GROUP BY UserName
--TOTAL
       INSERT @Result
       SELECT '', '', '', 'Total', COUNT(*),@sortKey FROM @AufnahmenBer WHERE Abteilung = @abtName HAVING COUNT(*) &gt;0
--END Neue Beratungsphasen

--SPACER
INSERT @Result SELECT '', '', '', '', NULL ,@sortKey  FROM @AufnahmenBer WHERE Abteilung = @abtName HAVING COUNT(*) &gt;0

--BEGIN Abschlüsse Beratungsphasen
--HEADER Beschreibung
      INSERT @Result
      SELECT '', 
             '', 
             '',
             'Abschlüsse',
             NULL,
             @sortKey 
            FROM @AbschlüsseBer
            WHERE Abteilung = @abtName 
            HAVING COUNT(*) &gt; 0
--DATA
        INSERT @Result
        SELECT '',
               '',
               UserName,
               '',
               COUNT(*),
               @sortKey
        FROM  @AbschlüsseBer
        WHERE Abteilung = @abtName
        GROUP BY UserName
--nach Grund

        INSERT @Result
        SELECT '',
               '',
               '',
               CASE WHEN AbschlussGrundCode IS NULL THEN 'nicht angegeben'
                    ELSE dbo.fnLOVText('FaAbschlussgrundBerPhase', AbschlussGrundCode)
               END,
               COUNT(*),
               @sortKey
        FROM  @AbschlüsseBer
        WHERE Abteilung = @abtName
        GROUP BY AbschlussGrundCode
--
--TOTAL
       INSERT @Result
       SELECT '', '', '', 'Total', COUNT(*),@sortKey FROM @AbschlüsseBer WHERE Abteilung = @abtName HAVING COUNT(*) &gt;0
--END Abschlüsse Beratungsphasen
--SPACER
INSERT @Result SELECT '', '', '', '', NULL ,@sortKey  FROM @AbschlüsseBer WHERE Abteilung = @abtName HAVING COUNT(*) &gt;0

--BEGIN Total bearbeitete Fälle
--HEADER Beschreibung
      INSERT @Result
      SELECT '', 
             '', 
             '',
             'Total bearbeitete Fälle',
             NULL,
             @sortKey 
            FROM @TotalBearbeitet
            WHERE Abteilung = @abtName 
            HAVING COUNT(*) &gt; 0
--DATA
        INSERT @Result
        SELECT '',
               '',
               UserName,
               '',
               COUNT(*),
               @sortKey
        FROM  @TotalBearbeitet
        WHERE Abteilung = @abtName
        GROUP BY UserName
--TOTAL
       INSERT @Result
       SELECT '', '', '', 'Total', COUNT(*),@sortKey FROM @TotalBearbeitet WHERE Abteilung = @abtName HAVING COUNT(*) &gt;0
--END Total bearbeitete Fälle

     SET @sortKey = @sortKey + 1
     FETCH NEXT FROM cursorAbteilung INTO @abtName
  END
CLOSE cursorAbteilung
DEALLOCATE cursorAbteilung


SELECT * FROM @Result</value>
  </data>
  <assembly alias="System.Drawing" name="System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="xDocument.Properties.Buttons" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        iVBORw0KGgoAAAANSUhEUgAAAAwAAAAQCAYAAAAiYZ4HAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8
        YQUAAAAgY0hSTQAAeiYAAICEAAD6AAAAgOgAAHUwAADqYAAAOpgAABdwnLpRPAAAAF1JREFUOE9jZAAC
        Y2Pj/yAaGzh79iwjhjhIw///MzGwmJjYfxDGqSEtjeE/MgYpBhmEoYmQDSANKM7GpQHZmVg1oDsJxgdp
        pI4N2EIKJjbqJLIiDqSJEMaVovGKAwBnM3PWBP8PfwAAAABJRU5ErkJggg==
</value>
  </data>
  <data name="edtDatumVon.Properties.Buttons" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        iVBORw0KGgoAAAANSUhEUgAAAAwAAAAQCAYAAAAiYZ4HAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8
        YQUAAAAgY0hSTQAAeiYAAICEAAD6AAAAgOgAAHUwAADqYAAAOpgAABdwnLpRPAAAAFVJREFUOE9jZAAC
        Y2Pj/yCaEDh79iwjWA1MAzaNWOVAgsRguAuIcRKKGmROQwMD3D/IbKwaQApgitBp6mgAeYokG4abBmT/
        YKQ3smKapLREKFkjywMAd9eDN3Z9MMsAAAAASUVORK5CYII=
</value>
  </data>
  <data name="edtDatumBis.Properties.Buttons" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        iVBORw0KGgoAAAANSUhEUgAAAAwAAAAQCAYAAAAiYZ4HAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8
        YQUAAAAgY0hSTQAAeiYAAICEAAD6AAAAgOgAAHUwAADqYAAAOpgAABdwnLpRPAAAAFVJREFUOE9jZAAC
        Y2Pj/yCaEDh79iwjWA1MAzaNWOVAgsRguAuIcRKKGmROQwMD3D/IbKwaQApgitBp6mgAeYokG4abBmT/
        YKQ3smKapLREKFkjywMAd9eDN3Z9MMsAAAAASUVORK5CYII=
</value>
  </data>
</root>
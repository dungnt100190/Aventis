<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <metadata name="qryQuery.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>17, 17</value>
  </metadata>
  <data name="qryQuery.SelectStatement" xml:space="preserve">
    <value>DECLARE @DatumVon DATETIME
DECLARE @DatumBis DATETIME
SET @DatumVon = {edtDatumVon}
SET @DatumBis = {edtDatumBis}

DECLARE @Result TABLE(
   Beschreibung VARCHAR(100),
   SAR          VARCHAR(100),
   Anzahl       INT,
   Sortkey$     INT
)

DECLARE @FaIntAnmeldungDatum int
DECLARE @FaIntAnlassVM       int
DECLARE @VmBsZustimDatum     int

exec spGetDynaFldIDfromTextmarke 'FaIntAnlassVM',  @FaIntAnlassVM out
exec spGetDynaFldIDfromTextmarke 'FaIntAnmeldungDatum',  @FaIntAnmeldungDatum out
exec spGetDynaFldIDfromTextmarke 'VmBsZustimDatum',  @VmBsZustimDatum out

--Genehmigung Bericht
INSERT @Result
SELECT Beschreibung = CASE WHEN AVA.Value IS NULL THEN 'nicht angegeben'
                           ELSE dbo.fnLOVText('FaAnlassVMAbkl채rung',CONVERT(INT, AVA.value))
                      END,
       SAR          = ISNULL(USR.LastName,'') + ISNULL(', ' + USR.FirstName,''),
       Anzahl       = COUNT(*),
       Sortkey$     = CASE WHEN AVA.Value IS NULL THEN 100
                           ELSE 10*CONVERT(INT, AVA.Value)
                      END
FROM dbo.DynaValue          AMD WITH (READUNCOMMITTED)
  INNER JOIN dbo.FaPhase    PHS WITH (READUNCOMMITTED) ON PHS.FaPhaseID = AMD.FaPhaseID
  INNER JOIN dbo.FaLeistung FAL WITH (READUNCOMMITTED) ON FAL.FaLeistungID = PHS.FaLeistungID
  INNER JOIN dbo.XUser      USR WITH (READUNCOMMITTED) ON USR.UserID = FAL.UserID
  LEFT  JOIN dbo.DynaValue  AVA WITH (READUNCOMMITTED) ON AVA.DynaFieldID = @FaIntAnlassVM
                                                      AND AVA.FaPhaseID   = AMD.FaPhaseID
                                                      AND AVA.GridRowID   = AMD.GridRowID
WHERE AMD.DynaFieldID = @FaIntAnmeldungDatum
  AND CONVERT(DATETIME, AMD.Value) BETWEEN @DatumVon AND @DatumBis
  AND (AVA.Value IN (1,2,3,4,5,6) OR AVA.Value IS NULL)
GROUP BY AVA.Value, ISNULL(USR.LastName,'') + ISNULL(', ' + USR.FirstName,'')

-- Total nach Beschreibung
INSERT @Result
SELECT Beschreibung, 'Total', SUM(Anzahl), MIN(Sortkey$)+1 FROM @Result
GROUP BY Beschreibung

--Genemigung Berichte
INSERT @Result
SELECT Beschreibung = 'Genehmigung Berichte',
       SAR          = 'Total',
       Anzahl       = COUNT(*),
       Sortkey$     = 400
FROM dbo.VmBericht          BER WITH (READUNCOMMITTED) --Zustimmung (Vertr채ge)
  INNER JOIN dbo.FaLeistung FAL WITH (READUNCOMMITTED) ON FAL.FaLeistungID = BER.FaLeistungID
WHERE BER.Passation1 BETWEEN @DatumVon AND @DatumBis

--Vertr채ge
INSERT @Result
SELECT Beschreibung = 'Zustimmung zu Vertr채ge',
       SAR          = 'Total',
       Anzahl       = COUNT(*),
       Sortkey$     = 600
FROM dbo.DynaValue BER WITH (READUNCOMMITTED)
WHERE BER.DynaFieldID = @VmBsZustimDatum
  AND CONVERT(DATETIME, BER.Value) BETWEEN @DatumVon AND @DatumBis

--Leerzeilen
IF EXISTS (SELECT * FROM @Result WHERE Sortkey$ = 11)
   INSERT @Result SELECT NULL, NULL, NULL,12
IF EXISTS (SELECT * FROM @Result WHERE Sortkey$ = 21)
   INSERT @Result SELECT NULL, NULL, NULL,22
IF EXISTS (SELECT * FROM @Result WHERE Sortkey$ = 31)
   INSERT @Result SELECT NULL, NULL, NULL,32
IF EXISTS (SELECT * FROM @Result WHERE Sortkey$ = 41)
   INSERT @Result SELECT NULL, NULL, NULL,42
IF EXISTS (SELECT * FROM @Result WHERE Sortkey$ = 51)
   INSERT @Result SELECT NULL, NULL, NULL,52
IF EXISTS (SELECT * FROM @Result WHERE Sortkey$ = 61)
   INSERT @Result SELECT NULL, NULL, NULL,62
INSERT @Result SELECT NULL, NULL, NULL,300
INSERT @Result SELECT NULL, NULL, NULL,500

SELECT Beschreibung, SAR, Anzahl 
FROM @Result
ORDER BY Sortkey$</value>
  </data>
  <assembly alias="System.Drawing" name="System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="xDocument.Properties.Buttons" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        iVBORw0KGgoAAAANSUhEUgAAAAwAAAAQCAYAAAAiYZ4HAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8
        YQUAAAAgY0hSTQAAeiYAAICEAAD6AAAAgOgAAHUwAADqYAAAOpgAABdwnLpRPAAAAF1JREFUOE9jZAAC
        Y2Pj/yAaGzh79iwjhjhIw///MzGwmJjYfxDGqSEtjeE/MgYpBhmEoYmQDSANKM7GpQHZmVg1oDsJxgdp
        pI4N2EIKJjbqJLIiDqSJEMaVovGKAwBnM3PWBP8PfwAAAABJRU5ErkJggg==
</value>
  </data>
  <data name="edtDatumBis.Properties.Buttons" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        iVBORw0KGgoAAAANSUhEUgAAAAwAAAAQCAYAAAAiYZ4HAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8
        YQUAAAAgY0hSTQAAeiYAAICEAAD6AAAAgOgAAHUwAADqYAAAOpgAABdwnLpRPAAAAFVJREFUOE9jZAAC
        Y2Pj/yCaEDh79iwjWA1MAzaNWOVAgsRguAuIcRKKGmROQwMD3D/IbKwaQApgitBp6mgAeYokG4abBmT/
        YKQ3smKapLREKFkjywMAd9eDN3Z9MMsAAAAASUVORK5CYII=
</value>
  </data>
  <data name="edtDatumVon.Properties.Buttons" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        iVBORw0KGgoAAAANSUhEUgAAAAwAAAAQCAYAAAAiYZ4HAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8
        YQUAAAAgY0hSTQAAeiYAAICEAAD6AAAAgOgAAHUwAADqYAAAOpgAABdwnLpRPAAAAFVJREFUOE9jZAAC
        Y2Pj/yCaEDh79iwjWA1MAzaNWOVAgsRguAuIcRKKGmROQwMD3D/IbKwaQApgitBp6mgAeYokG4abBmT/
        YKQ3smKapLREKFkjywMAd9eDN3Z9MMsAAAAASUVORK5CYII=
</value>
  </data>
</root>
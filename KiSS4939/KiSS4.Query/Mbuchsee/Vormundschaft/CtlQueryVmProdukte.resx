<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <metadata name="qryQuery.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>17, 17</value>
  </metadata>
  <data name="qryQuery.SelectStatement" xml:space="preserve">
    <value>/*
* Produkte sind nicht aus einer LOV-Liste oder ähnlichem. 
*/

DECLARE @Stichtag DATETIME
SET @Stichtag = GETDATE()
--- SET @Stichtag = {edtStichtag}

DECLARE @Data TABLE(
  UserID      INT,
  Produkt     VARCHAR(200),
  BaPersonID INT,
  FaleistungID    INT
)

DECLARE @Result TABLE (
  ID$          INT IDENTITY(1,1) PRIMARY KEY,
  SAR          VARCHAR(200),
  Produkt      VARCHAR(200),
  [Fallträger] VARCHAR(200),
  BaPersonID$ INT,
  Sortkey1$    VARCHAR(200),
  Sortkey2$    VARCHAR(200),
  Sortkey3$    INT
)

/*
* Regel 1 + 2 VM/PRIMA
*/
INSERT INTO @Data
SELECT UserID = LEI.UserID,
       Produkt = CASE WHEN ERN.VmPrimaID IS NOT NULL THEN 'Private Mandate'
                      ELSE 'Vormundschaftliche Mandate' 
                 END,
       BaPersonID = LEI.BaPersonID,
       FaleistungID = LEI.FaleistungID
FROM Faleistung LEI
  LEFT  JOIN VmMassnahme MSN ON MSN.FaleistungID = LEI.FaleistungID   
                            AND MSN.VmMassnahmeID = (SELECT TOP 1 VmMassnahmeID  -- letzte Massnahme
                                                     FROM   VmMassnahme
                                                     WHERE  FaleistungID = LEI.FaleistungID
                                                     ORDER BY DatumVon DESC)
  LEFT JOIN VmErnennung ERN ON ERN.VmMassnahmeID = MSN.VmMassnahmeID
                           AND ERN.VmErnennungID = (SELECT TOP 1 VmErnennungID -- letzte Ernennung
                                                    FROM   VmErnennung
                                                    WHERE  VmMassnahmeID = MSN.VmMassnahmeID
                                                    ORDER BY Ernennung DESC)
WHERE LEI.ModulID = 5
  AND LEI.FaProzessCode = 501
  AND (LEI.DatumBis &gt; @Stichtag OR LEI.DatumBis IS NULL)
  AND LEI.DatumVon &lt; @Stichtag                         -- Eröffnung vor Stichtag
  AND (MSN.DatumBis &gt; @Stichtag OR MSN.DatumBis IS NULL)

/*
* Regel 3 VM Abklärungen
*/
DECLARE @FaIntAnmeldungDatum int
DECLARE @FaIntAnlassVM       int

exec spGetDynaFldIDfromTextmarke 'FaIntAnlassVM',  @FaIntAnlassVM out
exec spGetDynaFldIDfromTextmarke 'FaIntAnmeldungDatum',  @FaIntAnmeldungDatum out

INSERT INTO @Data
SELECT UserID      = LEI.UserID,
       Produkt     = 'VM Abklärungen',
       BaPersonID = LEI.BaPersonID,
       FaleistungID    = LEI.FaleistungID
FROM DynaValue     AMD
INNER JOIN FaPhase PHS ON PHS.FaPhaseID = AMD.FaPhaseID
INNER JOIN Faleistung  LEI ON LEI.FaleistungID  = PHS.FaleistungID
INNER JOIN XUser   USR ON USR.UserID    = LEI.UserID
LEFT  JOIN DynaValue AVA ON AVA.DynaFieldID = @FaIntAnlassVM
                        AND AVA.FaPhaseID   = AMD.FaPhaseID
                        AND AVA.GridRowID   = AMD.GridRowID
WHERE AMD.DynaFieldID = @FaIntAnmeldungDatum
  AND CONVERT(DATETIME, AMD.Value) &lt; @Stichtag
  AND isNull(PHS.DatumBis, '99990101') &gt; @Stichtag
  AND LEI.DatumVon &lt; @Stichtag                         -- Eröffnung vor Stichtag
  AND (AVA.Value IN (1,2,5,6))

/*
* Regel 4 Unterhaltsverträge: Neu und Aberkennungsklage
*/
INSERT INTO @Data
SELECT UserID      = LEI.UserID,
       Produkt     = 'Unterhaltsverträge: Neu und Aberkennungsklage',
       BaPersonID = LEI.BaPersonID,
       FaleistungID    = LEI.FaleistungID
FROM Faleistung              LEI
  INNER  JOIN VmVaterschaft VTR ON LEI.FaleistungID = VTR.FaleistungID
WHERE LEI.ModulID = 5                                --Vormundschaft
  AND LEI.FaProzessCode = 502                            --Vaterschaftsabklärung
  AND isNull(LEI.DatumBis, '99990101') &gt; @Stichtag
  AND LEI.DatumVon &lt; @Stichtag                         -- Eröffnung vor Stichtag
  AND (VTR.UHVDatum &lt; @Stichtag OR VTR.SorgerechtVereinbDatum &lt; @Stichtag)

/*
* Regel 5,6,7,9,10,12,14 
* Frage: Was ist mit Null-Werten oder Wert 8 in VmAuftragCode?
*/
INSERT INTO @Data
SELECT UserID      = LEI.UserID,
       Produkt     = CASE WHEN LEI.VmAuftragCode = 1 THEN 'Kinderzuteilungsberichte'
                          WHEN LEI.VmAuftragCode = 2 THEN 'Kontrolle Kindsvermögen'
                          WHEN LEI.VmAuftragCode = 3 THEN 'Besuchsregelungen'
                          WHEN LEI.VmAuftragCode = 4 THEN 'Unterhaltsverträge: Abänderungen'
                          WHEN LEI.VmAuftragCode = 5 THEN 'Scheidungsurteil'
                          WHEN LEI.VmAuftragCode = 6 THEN 'Adoptionserklärungen'
                          WHEN LEI.VmAuftragCode = 7 THEN 'Adoptionserklärungen'
                          WHEN LEI.VmAuftragCode = 9 THEN 'andere'
                          WHEN LEI.VmAuftragCode IS NULL THEN  'VM-Auftrag: Kein Auftrag gewählt'
                     END,
       BaPersonID = LEI.BaPersonID,
       FaleistungID    = LEI.FaleistungID
FROM Faleistung LEI
WHERE LEI.ModulID = 5                                   --VM
  AND LEI.FaProzessCode = 505                           --VM Auftrag
  AND LEI.DatumVon &lt; @Stichtag                         -- Eröffnung vor Stichtag
  AND isNull(LEI.DatumBis, '99990101') &gt; @Stichtag -- Vm-Auftrag nicht abgeschlossen

/*
* Regel 8 psB
*/
DECLARE @FaAusstattungVerBeginn    INT
EXEC spGetDynaFldIDfromTextmarke 'FaAusstattungVerBeginn',    @FaAusstattungVerBeginn out

INSERT INTO @Data
SELECT UserID      = LEI.UserID,
       Produkt     = 'psB',
       BaPersonID = LEI.BaPersonID,
       FaleistungID    = LEI.FaleistungID
FROM   Faleistung LEI
  INNER JOIN FaPhase PHS ON PHS.FaleistungID = LEI.FaleistungID
                        AND isNull(PHS.DatumBis, '99990101') &gt; @Stichtag -- Phase nicht abgeschlossen
  INNER JOIN DynaValue VER ON VER.DynaFieldID IN (@FaAusstattungVerBeginn)
                        AND VER.FaPhaseID   = PHS.FaPhaseID
                        AND CONVERT(DATETIME, VER.Value) &lt; @Stichtag     -- Vertrag vor Stichtag
WHERE LEI.ModulID = 2 --Fallführung
  AND LEI.DatumVon &lt; @Stichtag                         -- Eröffnung vor Stichtag


/*
* Regel 13 Erbschaft
*/
INSERT INTO @Data
SELECT UserID      = LEI.UserID,
       Produkt     = 'Erbschaft',
       BaPersonID = LEI.BaPersonID,
       FaleistungID    = LEI.FaleistungID
FROM   Faleistung LEI
WHERE LEI.ModulID = 5                            --Vormundschaftsmodul
  AND LEI.FaProzessCode = 503                        --Erbschaft
  AND LEI.DatumVon &lt; @Stichtag                     -- Eröffnung vor Stichtag
  AND isNull(LEI.DatumBis, '99990101') &gt; @Stichtag -- Vm-Auftrag nicht abgeschlossen


/*
* Resultat aufbereiten
*/
-- Headerzeile SAR
INSERT INTO @Result (SAR, Produkt, [Fallträger], BaPersonID$, Sortkey1$, Sortkey2$, Sortkey3$)
SELECT SAR       = MAX(USR.LastName) + isNull(', ' + MAX(USR.FirstName),''), 
       NULL, NULL, 0,
       Sortkey1$ = MAX(USR.LastName) + isNull(', ' + MAX(USR.FirstName),''),
       Sortkey2$ = MIN(DAT.Produkt),
       Sortkey3$ = -1
FROM @Data         DAT
  INNER JOIN XUser USR ON USR.UserID = DAT.UserID
---AND DAT.UserID = {edtUserID.LookupID}
---AND isNull(DAT.Produkt, {edtProdukt}) LIKE {edtProdukt} 
GROUP BY DAT.UserID

-- Data
INSERT INTO @Result
SELECT SAR          = NULL,
       Produkt      = DAT.Produkt,
       Person       = PRS.Name + isNull(', ' + PRS.Vorname,''),
       BaPersonID$ = DAT.BaPersonID,
       Sortkey1$    = USR.LastName + isNull(', ' + USR.FirstName,''),
       Sortkey2$    = DAT.Produkt,
       Sortkey3$    = 0
FROM @Data   DAT
  INNER JOIN XUser         USR ON USR.UserID = DAT.UserID
  INNER JOIN BaPerson     PRS ON PRS.BaPersonID = DAT.BaPersonID
---AND DAT.UserID = {edtUserID.LookupID}
---AND isNull(DAT.Produkt, {edtProdukt}) LIKE {edtProdukt} 

-- Leerzeile
INSERT INTO @Result (SAR, Produkt, [Fallträger], BaPersonID$, Sortkey1$, Sortkey2$, Sortkey3$)
SELECT SAR       = NULL,
       NULL, NULL, 0,
       Sortkey1$ = MAX(USR.LastName) + isNull(', ' + MAX(USR.FirstName),''),
       Sortkey2$ = DAT.Produkt,
       Sortkey3$ = 999999999
FROM @Data         DAT
  INNER JOIN XUser USR ON USR.UserID = DAT.UserID
---AND DAT.UserID = {edtUserID.LookupID}
---AND isNull(DAT.Produkt, {edtProdukt}) LIKE {edtProdukt} 
GROUP BY DAT.UserID, DAT.Produkt

-- Total
INSERT INTO @Result (SAR, Produkt, [Fallträger], BaPersonID$, Sortkey1$, Sortkey2$, Sortkey3$)
SELECT SAR        = NULL,
       Produkt     = 'Anzahl Total', 
       Fallträger = CONVERT(VARCHAR, COUNT(*)),
       0,
       Sortkey1$  = MAX(USR.LastName) + isNull(', ' + MAX(USR.FirstName),''),
       Sortkey2$  = DAT.Produkt,
       Sortkey3$  = 111111111
FROM @Data         DAT
  INNER JOIN XUser USR ON USR.UserID = DAT.UserID
---AND DAT.UserID = {edtUserID.LookupID}
---AND isNull(DAT.Produkt, {edtProdukt}) LIKE {edtProdukt} 
GROUP BY DAT.UserID, Produkt


SELECT *
FROM @Result
ORDER BY Sortkey1$, Sortkey2$, Sortkey3$, [Fallträger]</value>
  </data>
  <assembly alias="System.Drawing" name="System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="xDocument.Properties.Buttons" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        iVBORw0KGgoAAAANSUhEUgAAAAwAAAAQCAYAAAAiYZ4HAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8
        YQUAAAAgY0hSTQAAeiYAAICEAAD6AAAAgOgAAHUwAADqYAAAOpgAABdwnLpRPAAAAF1JREFUOE9jZAAC
        Y2Pj/yAaGzh79iwjhjhIw///MzGwmJjYfxDGqSEtjeE/MgYpBhmEoYmQDSANKM7GpQHZmVg1oDsJxgdp
        pI4N2EIKJjbqJLIiDqSJEMaVovGKAwBnM3PWBP8PfwAAAABJRU5ErkJggg==
</value>
  </data>
  <data name="edtStichtag.Properties.Buttons" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        iVBORw0KGgoAAAANSUhEUgAAAAwAAAAQCAYAAAAiYZ4HAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8
        YQUAAAAgY0hSTQAAeiYAAICEAAD6AAAAgOgAAHUwAADqYAAAOpgAABdwnLpRPAAAAFVJREFUOE9jZAAC
        Y2Pj/yCaEDh79iwjWA1MAzaNWOVAgsRguAuIcRKKGmROQwMD3D/IbKwaQApgitBp6mgAeYokG4abBmT/
        YKQ3smKapLREKFkjywMAd9eDN3Z9MMsAAAAASUVORK5CYII=
</value>
  </data>
</root>
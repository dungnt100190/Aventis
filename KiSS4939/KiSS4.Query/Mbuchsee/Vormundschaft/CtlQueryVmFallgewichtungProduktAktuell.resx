<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <metadata name="qryQuery.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>17, 17</value>
  </metadata>
  <data name="qryQuery.SelectStatement" xml:space="preserve">
    <value>SET NOCOUNT ON
CREATE TABLE #Data (
	UserID      INT,
	Produkt     INT,
	BaPersonID INT,
	FaLeistungID    INT
)

DECLARE @Stichtag DATETIME
SET @Stichtag = GETDATE()

INSERT INTO #Data
EXEC dbo.spVmGetProdukte 1, null, @Stichtag

SET NOCOUNT OFF

DECLARE @Aktuell TABLE (
  UserID        int,
  BaPersonID   int,
  ZGBCodes      varchar(100),
  Stichdatum    datetime,
  FalltypCode   int,
  BewilligtCode int,
  Tage          int,
  ProduktID	int
)

INSERT INTO @Aktuell
SELECT UserID        = DAT.UserID,
       BaPersonID   = DAT.BaPersonID,
       ZGBCodes      = VMN.ZGBCodes,
       Stichdatum    = convert(datetime,STI.Text + convert(varchar,VBW.VmFallgewichtungJahr),104),
       FallTypCode   = VBW.VmMandatstypCode,
       BewilligtCode = VBW.VmMandatstypBewilligtCode,
       Tage = datediff(d,convert(datetime,STI.Text + convert(varchar,VBW.VmFallgewichtungJahr),104),getdate()),
       ProduktID     = DAT.Produkt
FROM   #Data DAT
       LEFT  JOIN dbo.VmBewertung VBW WITH (READUNCOMMITTED) on VBW.FaLeistungID = DAT.FaLeistungID and 
				     VBW.ProduktID = DAT.Produkt AND
                                     VBW.VmBewertungID = (select top 1 VmBewertungID
                                                          from   VmBewertung WITH (READUNCOMMITTED)
                                                          where  FaLeistungID = DAT.FaLeistungID and
								 ProduktID = DAT.Produkt and
                                                                 VmMandatstypCode is not null
                                                          order by VmFallgewichtungJahr desc,VmFallgewichtungStichtagCode desc)
       LEFT  JOIN dbo.XLOVCode    STI WITH (READUNCOMMITTED) on STI.LOVName = 'VmFallgewichtungStichtag' and
                                     STI.Code = VBW.VmFallgewichtungStichtagCode
       LEFT  JOIN dbo.VmMassnahme VMN WITH (READUNCOMMITTED) on VMN.FaLeistungID = DAT.FaLeistungID and
                                     VMN.VmMassnahmeID = (select top 1 VmMassnahmeID
                                                          from   VmMassnahme WITH (READUNCOMMITTED)
                                                          where  FaLeistungID = DAT.FaLeistungID and
                                                                 DatumVon &lt;= convert(datetime,STI.Text + convert(varchar,VBW.VmFallgewichtungJahr),104)
                                                          order by DatumVon desc)
WHERE  1 = 1
--- and VBW.UserID = {edtUserID.LookupID}
      
-- output 1: alle aktuellen Bewertungen
SELECT SAR        = USR.LastName + isNull(', ' + USR.FirstName,''),
       Produkt	  = dbo.fnLOVText('VmProdukt', AKT.ProduktID),
       Mandant    = PRS.Name + isNull(', ' + PRS.Vorname,''),
       ZGB        = Replace(dbo.fnLOVTextListe('VmZGB',AKT.ZGBCodes),' ZGB',''),
       Stichdatum = AKT.Stichdatum,
       Falltyp    = TYP.Text,
       bewilligt  = BEW.Text,
       Tage       = AKT.Tage,
       BaPersonID$ = AKT.BaPersonID
FROM   @Aktuell AKT
       inner join dbo.BaPerson    PRS WITH (READUNCOMMITTED)  on PRS.BaPersonID = AKT.BaPersonID
       left  join dbo.XUser       USR WITH (READUNCOMMITTED)  on USR.UserID = AKT.UserID
       left  join dbo.XLOVCode    TYP WITH (READUNCOMMITTED)  on TYP.LOVName = 'vmMandatstyp' and
                                     TYP.Code = AKT.FallTypCode
       left  join dbo.XLOVCode    BEW WITH (READUNCOMMITTED) on BEW.LOVName = 'vmMandatstyp' and
                                     BEW.Code = AKT.BewilligtCode
WHERE 1 = 1
--- AND AKT.BaPersonID = {edtBaPersonID.LookupID}
--- AND ({edtAbweichung} = 0 or isNull(AKT.FallTypCode,-1) &lt;&gt; isNull(AKT.BewilligtCode,-1))
ORDER BY SAR,Mandant,Produkt

DECLARE @AnsatzA int
DECLARE @AnsatzB int
DECLARE @AnsatzC int
DECLARE @AnsatzD int
DECLARE @AnsatzE int

SET @AnsatzA = (select convert(int,Value1) from dbo.XLOVCode WITH (READUNCOMMITTED) where LOVName = 'vmMandatstyp' and Code = 1)
SET @AnsatzB = (select convert(int,Value1) from dbo.XLOVCode WITH (READUNCOMMITTED) where LOVName = 'vmMandatstyp' and Code = 2)
SET @AnsatzC = (select convert(int,Value1) from dbo.XLOVCode WITH (READUNCOMMITTED) where LOVName = 'vmMandatstyp' and Code = 3)
SET @AnsatzD = (select convert(int,Value1) from dbo.XLOVCode WITH (READUNCOMMITTED) where LOVName = 'vmMandatstyp' and Code = 4)
SET @AnsatzE = (select convert(int,Value1) from dbo.XLOVCode WITH (READUNCOMMITTED) where LOVName = 'vmMandatstyp' and Code = 5)

-- output 2: Auslastung pro SAR
SELECT SAR            = USR.LastName + isNull(', ' + USR.FirstName,''),
       Mandate        = TYP.TypA + TYP.TypB + TYP.TypC + TYP.TypD + TYP.TypE + TYP.NoTyp,
       [Typ A]        = TYP.TypA,
       [Typ B]        = TYP.TypB,
       [Typ C]        = TYP.TypC,
       [Typ D]        = TYP.TypD,
       [Typ E]        = TYP.TypE,
       [ohne Typ]     = TYP.NoTyp,
       [Std Total]    = TYP.TypA * @AnsatzA + TYP.TypB * @AnsatzB + TYP.TypC * @AnsatzC + TYP.TypD * @AnsatzD + TYP.TypE * @AnsatzE,
       [Std pro Jahr] = USR.HoursPerYearForCaseMgmt,
       [Auslastung %] = convert(int,convert(float,TYP.TypA * @AnsatzA + TYP.TypB * @AnsatzB + TYP.TypC * @AnsatzC + TYP.TypD * @AnsatzD + TYP.TypE * @AnsatzE) / USR.HoursPerYearForCaseMgmt * 100),
       [Stellen %]    = USR.JobPercentage
FROM   (SELECT UserID = U.UserID,
               TypA   = (select count(*) from @Aktuell where UserID = U.UserID and BewilligtCode = 1),
               TypB   = (select count(*) from @Aktuell where UserID = U.UserID and BewilligtCode = 2),
               TypC   = (select count(*) from @Aktuell where UserID = U.UserID and BewilligtCode = 3),
               TypD   = (select count(*) from @Aktuell where UserID = U.UserID and BewilligtCode = 4),
	       TypE   = (select count(*) from @Aktuell where UserID = U.UserID and BewilligtCode = 5),
               NoTyp  = (select count(*) from @Aktuell where UserID = U.UserID and BewilligtCode is null)
        FROM   (SELECT distinct UserID FROM @Aktuell) U) TYP
       inner join dbo.XUser       USR WITH (READUNCOMMITTED) on USR.UserID = TYP.UserID
ORDER BY SAR

DROP TABLE #Data</value>
  </data>
  <assembly alias="System.Drawing" name="System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="xDocument.Properties.Buttons" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        iVBORw0KGgoAAAANSUhEUgAAAAwAAAAQCAYAAAAiYZ4HAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8
        YQUAAAAgY0hSTQAAeiYAAICEAAD6AAAAgOgAAHUwAADqYAAAOpgAABdwnLpRPAAAAF1JREFUOE9jZAAC
        Y2Pj/yAaGzh79iwjhjhIw///MzGwmJjYfxDGqSEtjeE/MgYpBhmEoYmQDSANKM7GpQHZmVg1oDsJxgdp
        pI4N2EIKJjbqJLIiDqSJEMaVovGKAwBnM3PWBP8PfwAAAABJRU5ErkJggg==
</value>
  </data>
</root>
<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <metadata name="qryQuery.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>17, 17</value>
  </metadata>
  <data name="qryQuery.SelectStatement" xml:space="preserve">
    <value>DECLARE
  @DatumVon DATETIME,
  @DatumBis DATETIME,
  @ProzessCode INT,
  @GemeindeCode INT,
  @OrgUnitID INT;

/* ProzessCode:
  1: Präventionen
  2: Abklärungen/Auftrag
  3: Massnahmeführung
  4: Pflegekinderaufsicht
*/

SELECT @DatumVon = dbo.fnDateSerial(YEAR(GETDATE()), 1, 1);
SELECT @DatumBis = GETDATE();

--- SET @DatumVon = {edtDatumVon};
--- SET @DatumBis = {edtDatumBis};
--- SET @ProzessCode = {edtProzess};
--- SET @GemeindeCode = {edtGemeindeCode};
--- SET @OrgUnitID = {edtOrgUnitID};

SET @DatumBis = DATEADD(s, -1, DATEADD(d, 1, @DatumBis)); -- unmittelbar vor Mitternacht

SELECT DISTINCT
  Gemeinde          = GDE.Text, 
  SAR               = USR.LastName + ISNULL(', ' + USR.Firstname, ''),
  Person            = PRS.Name + ISNULL(', ' + PRS.Vorname, ''), 
  Eröffnet          = LEI.DatumVon,
  Geschlossen       = LEI.DatumBis,
  BaPersonID$       = LEI.BaPersonID,
  [Eröffnungsgrund] = dbo.fnLOVText('EroeffnungsGrund', LEI.EroeffnungsGrundCode),
  Abschlussgrund    = dbo.fnLOVText('KesAbschlussgrund', LEI.AbschlussGrundCode)
FROM dbo.FaLeistung            LEI WITH (READUNCOMMITTED)
  INNER JOIN dbo.BaPerson      PRS WITH (READUNCOMMITTED) ON PRS.BaPersonID = LEI.BaPersonID
                                                         AND PRS.Testperson = 0
  LEFT  JOIN dbo.XUser         USR WITH (READUNCOMMITTED) ON USR.UserId = LEI.UserID
  LEFT  JOIN dbo.XOrgUnit_User OUU WITH (READUNCOMMITTED) ON OUU.UserID = LEI.UserID
                                                         AND OUU.OrgUnitMemberCode = 2
  LEFT  JOIN dbo.XOrgUnit      XOU WITH (READUNCOMMITTED) ON XOU.OrgUnitID = OUU.OrgUnitID
  LEFT  JOIN dbo.XLOVCode      GDE WITH (READUNCOMMITTED) ON GDE.LovName = 'GemeindeSozialdienst'
                                                         AND GDE.Code = LEI.GemeindeCode
WHERE LEI.DatumVon &lt;= @DatumBis
  AND ISNULL(LEI.DatumBis, '99991231') &gt;= @DatumVon
  AND LEI.ModulID = 5 -- KES in V
  AND (@ProzessCode IS NULL
       OR (@ProzessCode = 1 AND EXISTS (SELECT TOP 1 1
                                        FROM dbo.KesPraevention KPR WITH (READUNCOMMITTED)
                                        WHERE KPR.FaLeistungID = LEI.FaLeistungID))
       OR (@ProzessCode = 2 AND EXISTS (SELECT TOP 1 1
                                        FROM dbo.KesAuftrag KAU WITH (READUNCOMMITTED)
                                        WHERE KAU.FaLeistungID = LEI.FaLeistungID))
       OR (@ProzessCode = 3 AND EXISTS (SELECT TOP 1 1
                                        FROM dbo.KesMassnahme KMA WITH (READUNCOMMITTED)
                                        WHERE KMA.FaLeistungID = LEI.FaLeistungID
                                          AND KMA.IsDeleted = 0))
       OR (@ProzessCode = 4 AND EXISTS (SELECT TOP 1 1
                                        FROM dbo.KesPflegekinderaufsicht KPF WITH (READUNCOMMITTED)
                                        WHERE KPF.FaLeistungID = LEI.FaLeistungID)))
  AND (@GemeindeCode IS NULL OR LEI.GemeindeCode = @GemeindeCode)
  AND (@OrgUnitID IS NULL OR XOU.OrgUnitID = @OrgUnitID)
ORDER BY 1, 2, 3, 4, 5;
</value>
  </data>
  <metadata name="qryListe2.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>119, 17</value>
  </metadata>
  <data name="qryListe2.SelectStatement" xml:space="preserve">
    <value>DECLARE
  @DatumVon DATETIME,
  @DatumBis DATETIME,
  @ProzessCode INT,
  @GemeindeCode INT,
  @OrgUnitID INT;

/* ProzessCode:
  1: Präventionen
  2: Abklärungen/Auftrag
  3: Massnahmeführung
  4: Pflegekinderaufsicht
*/

SELECT @DatumVon = dbo.fnDateSerial(YEAR(GETDATE()), 1, 1);
SELECT @DatumBis = GETDATE();

--- SET @DatumVon = {edtDatumVon};
--- SET @DatumBis = {edtDatumBis};
--- SET @ProzessCode = {edtProzess};
--- SET @GemeindeCode = {edtGemeindeCode};
--- SET @OrgUnitID = {edtOrgUnitID};

SET @DatumBis = DATEADD(s, -1, DATEADD(d, 1, @DatumBis)); -- unmittelbar vor Mitternacht

DECLARE @Leistung TABLE
(
  FaLeistungID INT,
  GemeindeCode INT,
  UserID  INT,
  AtBegin INT,
  Opened  INT,
  Closed  INT
);

DECLARE @Result TABLE
(
  UserID INT,
  GemeindeCode INT,
  AtBegin INT,
  Opened INT,
  Closed INT,
  Abschnitt VARCHAR(MAX),
  Art VARCHAR(MAX),
  SortKey INT
);

-- @Leistung: KES im betrachteten Zeitraum
INSERT @Leistung
  SELECT
    LEI.FaLeistungID,
    LEI.GemeindeCode,
    LEI.UserID,
    AtBegin = 0,--CASE WHEN LEI.DatumVon &lt;  @DatumVon THEN 1 ELSE 0 END,
    Opened  = 0,--CASE WHEN LEI.DatumVon &gt;= @DatumVon THEN 1 ELSE 0 END,
    Closed  = 0--CASE WHEN ISNULL(LEI.DatumBis, '99991231') &lt;= @DatumBis THEN 1 ELSE 0 END
  FROM dbo.FaLeistung             LEI  WITH (READUNCOMMITTED)
    INNER JOIN dbo.BaPerson       PRS  WITH (READUNCOMMITTED) ON PRS.BaPersonID = LEI.BaPersonID
                                                             AND PRS.Testperson = 0  
    LEFT  JOIN dbo.XOrgUnit_User  OUU  WITH (READUNCOMMITTED) ON OUU.UserID = LEI.UserID
                                                             AND OUU.OrgUnitMemberCode = 2
    LEFT  JOIN dbo.XOrgUnit       XOU  WITH (READUNCOMMITTED) ON XOU.OrgUnitID = OUU.OrgUnitID
  WHERE LEI.DatumVon &lt;= @DatumBis
    AND ISNULL(LEI.DatumBis, '99991231') &gt;= @DatumVon
    AND LEI.ModulID = 5 -- KES in V
    AND (@ProzessCode IS NULL
         OR (@ProzessCode = 1 AND EXISTS (SELECT TOP 1 1
                                          FROM dbo.KesPraevention KPR WITH (READUNCOMMITTED)
                                          WHERE KPR.FaLeistungID = LEI.FaLeistungID))
         OR (@ProzessCode = 2 AND EXISTS (SELECT TOP 1 1
                                          FROM dbo.KesAuftrag KAU WITH (READUNCOMMITTED)
                                          WHERE KAU.FaLeistungID = LEI.FaLeistungID))
         OR (@ProzessCode = 3 AND EXISTS (SELECT TOP 1 1
                                          FROM dbo.KesMassnahme KMA WITH (READUNCOMMITTED)
                                          WHERE KMA.FaLeistungID = LEI.FaLeistungID
                                            AND KMA.IsDeleted = 0))
         OR (@ProzessCode = 4 AND EXISTS (SELECT TOP 1 1
                                          FROM dbo.KesPflegekinderaufsicht KPF WITH (READUNCOMMITTED)
                                          WHERE KPF.FaLeistungID = LEI.FaLeistungID)))
    AND (@GemeindeCode IS NULL OR LEI.GemeindeCode = @GemeindeCode)
    AND (@OrgUnitID IS NULL OR XOU.OrgUnitID = @OrgUnitID)
  GROUP BY LEI.FaLeistungID, LEI.GemeindeCode, LEI.UserID, LEI.DatumVon, LEI.DatumBis;

INSERT INTO @Result
  -- Präventionen
  SELECT
    LEI.UserID,
    LEI.GemeindeCode,
    AtBegin = SUM(CASE WHEN ISNULL(KPR.DatumVon, '17530101') &lt;  @DatumVon THEN 1 ELSE 0 END),
    Opened  = SUM(CASE WHEN ISNULL(KPR.DatumVon, '17530101') &gt;= @DatumVon THEN 1 ELSE 0 END),
    Closed  = SUM(CASE WHEN ISNULL(KPR.DatumBis, '99991231') &lt;= @DatumBis THEN 1 ELSE 0 END),
    Abschnitt = 'Präventionen',
    Art = LOC.Text,
    SortKey = 1
  FROM @Leistung                  LEI
    INNER JOIN dbo.KesPraevention KPR WITH (READUNCOMMITTED) ON KPR.FaLeistungID = LEI.FaLeistungID
    INNER JOIN dbo.XLOVCode       LOC WITH (READUNCOMMITTED) ON LOC.LOVName = 'KesPraeventionsart'
                                                            AND LOC.Code = KPR.KesPraeventionsartCode
  WHERE ISNULL(KPR.DatumVon, '17530101') &lt;= @DatumBis
    AND ISNULL(KPR.DatumBis, '99991231') &gt;= @DatumVon
    AND (@ProzessCode IS NULL OR @ProzessCode = 1)
  GROUP BY LEI.UserID, LEI.GemeindeCode, LOC.Text
  UNION ALL
  
  -- Abklärung/Auftrag
  SELECT
    LEI.UserID,
    LEI.GemeindeCode,
    AtBegin = SUM(CASE
                    WHEN LOC.Code IN (5, 10) -- 5: Gemeinsame elterliche Sorge KS, 10: Vaterschafts- und Unterhaltsregelung
                      THEN CASE
                             WHEN DOK.Bearbeitung = 1 OR KAU.KesAuftragDurchCode = 4 -- Abklärungsauftrag KESB
                               THEN CASE WHEN ISNULL(KAU.DatumAuftrag, '17530101') &lt; @DatumVon THEN 1 ELSE 0 END
                             ELSE 0
                           END
                    ELSE CASE WHEN ISNULL(KAU.DatumAuftrag, '17530101') &lt; @DatumVon THEN 1 ELSE 0 END
                  END),
    Opened  = SUM(CASE WHEN ISNULL(KAU.DatumAuftrag, '17530101') &gt;= @DatumVon THEN 1 ELSE 0 END),
    Closed  = SUM(CASE WHEN ISNULL(KAU.AbschlussDatum, '99991231') &lt;= @DatumBis THEN 1 ELSE 0 END),
    Abschnitt = 'Abklärung/Auftrag',
    Art = LOC.Text,
    SortKey = 2
  FROM @Leistung              LEI
    INNER JOIN dbo.KesAuftrag KAU WITH (READUNCOMMITTED) ON KAU.FaLeistungID = LEI.FaLeistungID
    INNER JOIN dbo.XLOVCode   LOC WITH (READUNCOMMITTED) ON LOC.LOVName = 'KesAuftragAbklaerungsart'
                                                        AND LOC.Code = KAU.KesAuftragAbklaerungsartCode
    OUTER APPLY (SELECT TOP 1 Bearbeitung = 1
                 FROM dbo.KesDokument WITH (READUNCOMMITTED)
                 WHERE KesAuftragID = KAU.KesAuftragID
                   AND IsDeleted = 0) DOK
  WHERE ISNULL(KAU.DatumAuftrag, '17530101') &lt;= @DatumBis
    AND ISNULL(KAU.AbschlussDatum, '99991231') &gt;= @DatumVon
    AND (@ProzessCode IS NULL OR @ProzessCode = 2)
  GROUP BY LEI.UserID, LEI.GemeindeCode, LOC.Text
  UNION ALL
  
  -- Massnahmeführung
  SELECT
    LEI.UserID,
    LEI.GemeindeCode,
    AtBegin = SUM(CASE WHEN ISNULL(KMA.DatumVon, '17530101') &lt;  @DatumVon THEN 1 ELSE 0 END),
    Opened  = SUM(CASE WHEN ISNULL(KMA.DatumVon, '17530101') &gt;= @DatumVon THEN 1 ELSE 0 END),
    Closed  = SUM(CASE WHEN ISNULL(KMA.DatumBis, '99991231') &lt;= @DatumBis THEN 1 ELSE 0 END),
    Abschnitt = 'Massnahmeführung',
    Art = 'Massnahmen',
    SortKey = 3
  FROM @Leistung LEI
    INNER JOIN dbo.KesMassnahme KMA WITH (READUNCOMMITTED) ON KMA.FaLeistungID = LEI.FaLeistungID
                                                          AND KMA.IsDeleted = 0
  WHERE ISNULL(KMA.DatumVon, '17530101') &lt;= @DatumBis
    AND ISNULL(KMA.DatumBis, '99991231') &gt;= @DatumVon
    AND (@ProzessCode IS NULL OR @ProzessCode = 3)
  GROUP BY LEI.UserID, LEI.GemeindeCode
  UNION ALL
  -- Massnahmeführung Mandatsführende Person
  SELECT
    LEI.UserID,
    LEI.GemeindeCode,
    AtBegin = SUM(CASE WHEN ISNULL(KMP.DatumMandatVon, '17530101') &lt;  @DatumVon THEN 1 ELSE 0 END),
    Opened  = SUM(CASE WHEN ISNULL(KMP.DatumMandatVon, '17530101') &gt;= @DatumVon THEN 1 ELSE 0 END),
    Closed  = SUM(CASE WHEN ISNULL(KMP.DatumMandatBis, '99991231') &lt;= @DatumBis THEN 1 ELSE 0 END),
    Abschnitt = 'Massnahmeführung Mandatsführende Person',
    Art = LOC.Text,
    SortKey = 4
  FROM @Leistung LEI
    INNER JOIN dbo.KesMassnahme              KMA WITH (READUNCOMMITTED) ON KMA.FaLeistungID = LEI.FaLeistungID
                                                                       AND KMA.IsDeleted = 0
    INNER JOIN dbo.KesMandatsfuehrendePerson KMP WITH (READUNCOMMITTED) ON KMP.KesMassnahmeID = KMA.KesMassnahmeID
                                                                       AND KMP.IsDeleted = 0
    INNER JOIN dbo.XLOVCode                  LOC WITH (READUNCOMMITTED) ON LOC.LOVName = 'KesBeistandsart'
                                                                       AND LOC.Code = KMP.KesBeistandsartCode
  WHERE ISNULL(KMP.DatumMandatVon, '17530101') &lt;= @DatumBis
    AND ISNULL(KMP.DatumMandatBis, '99991231') &gt;= @DatumVon
    AND (@ProzessCode IS NULL OR @ProzessCode = 3)
  GROUP BY LEI.UserID, LEI.GemeindeCode, LOC.Text
  UNION ALL
  -- Massnahmeführung Berichte/Rechnungen
  SELECT
    LEI.UserID,
    LEI.GemeindeCode,
    AtBegin = SUM(CASE WHEN ISNULL(KMB.DatumVon, '17530101') &lt;  @DatumVon THEN 1 ELSE 0 END),
    Opened  = SUM(CASE WHEN ISNULL(KMB.DatumVon, '17530101') &gt;= @DatumVon THEN 1 ELSE 0 END),
    Closed  = SUM(CASE WHEN ISNULL(KMB.DatumBis, '99991231') &lt;= @DatumBis THEN 1 ELSE 0 END),    
    Abschnitt = 'Massnahmeführung Berichte/Rechnungen',
    Art = LOC.Text,
    SortKey = 5
  FROM @Leistung LEI
    INNER JOIN dbo.KesMassnahme        KMA WITH (READUNCOMMITTED) ON KMA.FaLeistungID = LEI.FaLeistungID
                                                                 AND KMA.IsDeleted = 0
    INNER JOIN dbo.KesMassnahmeBericht KMB WITH (READUNCOMMITTED) ON KMB.KesMassnahmeID = KMA.KesMassnahmeID
    INNER JOIN dbo.XLOVCode            LOC WITH (READUNCOMMITTED) ON LOC.LOVName = 'KesMassnahmeBerichtsart'
                                                                 AND LOC.Code = KMB.KesMassnahmeBerichtsartCode
  WHERE ISNULL(KMB.DatumVon, '17530101') &lt;= @DatumBis
    AND ISNULL(KMB.DatumBis, '99991231') &gt;= @DatumVon
    AND (@ProzessCode IS NULL OR @ProzessCode = 3)
  GROUP BY LEI.UserID, LEI.GemeindeCode, LOC.Text
  UNION ALL
  -- Massnahmeführung Aufträge/Anträge
  SELECT
    LEI.UserID,
    LEI.GemeindeCode,
    AtBegin = SUM(CASE WHEN ISNULL(MAU.BeschlussVom, '17530101') &lt;  @DatumVon THEN 1 ELSE 0 END),
    Opened  = SUM(CASE WHEN ISNULL(MAU.BeschlussVom, '17530101') &gt;= @DatumVon THEN 1 ELSE 0 END),
    Closed  = SUM(CASE WHEN ISNULL(MAU.ErledigungBis, '99991231') &lt;= @DatumBis THEN 1 ELSE 0 END),
    Abschnitt = 'Massnahmeführung Aufträge/Anträge',
    Art = LOC.Text,
    SortKey = 6
  FROM @Leistung LEI
    INNER JOIN dbo.KesMassnahme        KMA WITH (READUNCOMMITTED) ON KMA.FaLeistungID = LEI.FaLeistungID
                                                                 AND KMA.IsDeleted = 0
    INNER JOIN dbo.KesMassnahmeAuftrag MAU WITH (READUNCOMMITTED) ON MAU.KesMassnahmeID = KMA.KesMassnahmeID
                                                                 AND MAU.IsDeleted = 0
    INNER JOIN dbo.XLOVCode            LOC WITH (READUNCOMMITTED) ON LOC.LOVName = 'KesMassnahmeGeschaeftsart'
                                                                 AND LOC.Code = MAU.KesMassnahmeGeschaeftsartCode
  WHERE ISNULL(MAU.BeschlussVom, '17530101') &lt;= @DatumBis
    AND ISNULL(MAU.ErledigungBis, '99991231') &gt;= @DatumVon
    AND (@ProzessCode IS NULL OR @ProzessCode = 3)
  GROUP BY LEI.UserID, LEI.GemeindeCode, LOC.Text
  UNION ALL

  -- Pflegekinderaufsicht
  SELECT
    LEI.UserID,
    LEI.GemeindeCode,
    AtBegin = SUM(CASE WHEN ISNULL(KPK.DatumVon, '17530101') &lt;  @DatumVon THEN 1 ELSE 0 END),
    Opened  = SUM(CASE WHEN ISNULL(KPK.DatumVon, '17530101') &gt;= @DatumVon THEN 1 ELSE 0 END),
    Closed  = SUM(CASE WHEN ISNULL(KPK.DatumBis, '99991231') &lt;= @DatumBis THEN 1 ELSE 0 END),
    Abschnitt = 'Pflegekinderaufsicht',
    Art = LOC.Text,
    SortKey = 7
  FROM @Leistung LEI
    INNER JOIN dbo.KesPflegekinderaufsicht KPK WITH (READUNCOMMITTED) ON KPK.FaLeistungID = LEI.FaLeistungID
    INNER JOIN dbo.XLOVCode                LOC WITH (READUNCOMMITTED) ON LOC.LOVName = 'KesPflegeart'
                                                                     AND LOC.Code = KPK.KesPflegeartCode
  WHERE ISNULL(KPK.DatumVon, '17530101') &lt;= @DatumBis
    AND ISNULL(KPK.DatumBis, '99991231') &gt;= @DatumVon
    AND (@ProzessCode IS NULL OR @ProzessCode = 4)
  GROUP BY LEI.UserID, LEI.GemeindeCode, LOC.Text;

SELECT
  Abteilung = ORG.ItemName,
  Abschnitt = CTE.Abschnitt,
  Art = CTE.Art,
  FB = USR.LastName + ISNULL(' ' + USR.FirstName, ''),
  [Aktuelle Fälle Beginn] = SUM(CTE.AtBegin),
  [Aufgenommene Fälle]    = SUM(CTE.Opened),
  [Total Bearbeitet]      = SUM(CTE.AtBegin) + SUM(CTE.Opened),
  [Abgeschlossene Fälle]  = SUM(CTE.Closed),
  [Aktuelle Fälle Ende]   = SUM(CTE.AtBegin) + SUM(CTE.Opened) - SUM(CTE.Closed),
  CTE.SortKey
FROM @Result CTE
  INNER JOIN dbo.XUser         USR WITH (READUNCOMMITTED) ON USR.UserID = CTE.UserID
  LEFT  JOIN dbo.XOrgUnit_User OUU WITH (READUNCOMMITTED) ON OUU.UserID = CTE.UserID
                                                         AND OUU.OrgUnitMemberCode = 2
  LEFT  JOIN dbo.XOrgUnit      ORG WITH (READUNCOMMITTED) ON ORG.OrgUnitID = OUU.OrgUnitID
WHERE CTE.AtBegin &gt; 0 
   OR CTE.Opened &gt; 0 
   OR CTE.Closed &gt; 0
GROUP BY CTE.SortKey, ORG.ItemName, CTE.Abschnitt, CTE.Art, USR.LastName, USR.FirstName
ORDER BY CTE.SortKey, 1, 2, 3, 4;

SELECT
  Abteilung = ORG.ItemName,
  Abschnitt = CTE.Abschnitt,
  Art = CTE.Art,
  Gemeinde = LOC.Text,
  [Aktuelle Fälle Beginn] = SUM(CTE.AtBegin),
  [Aufgenommene Fälle]    = SUM(CTE.Opened),
  [Total Bearbeitet]      = SUM(CTE.AtBegin) + SUM(CTE.Opened),
  [Abgeschlossene Fälle]  = SUM(CTE.Closed),
  [Aktuelle Fälle Ende]   = SUM(CTE.AtBegin) + SUM(CTE.Opened) - SUM(CTE.Closed),
  CTE.SortKey
FROM @Result CTE
  LEFT JOIN dbo.XLOVCode      LOC WITH (READUNCOMMITTED) ON LOC.LOVName = 'GemeindeSozialdienst'
                                                        AND LOC.Code = CTE.GemeindeCode
  LEFT JOIN dbo.XOrgUnit_User OUU WITH (READUNCOMMITTED) ON OUU.UserID = CTE.UserID
                                                        AND OUU.OrgUnitMemberCode = 2
  LEFT JOIN dbo.XOrgUnit      ORG WITH (READUNCOMMITTED) ON ORG.OrgUnitID = OUU.OrgUnitID
WHERE CTE.AtBegin &gt; 0 
   OR CTE.Opened &gt; 0 
   OR CTE.Closed &gt; 0  
GROUP BY CTE.SortKey, ORG.ItemName, CTE.Abschnitt, CTE.Art, LOC.Text
ORDER BY CTE.SortKey, 1, 2, 3, 4;

</value>
  </data>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="edtDatumVon.Properties.Buttons" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        iVBORw0KGgoAAAANSUhEUgAAAAwAAAAQCAYAAAAiYZ4HAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8
        YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAABMSURBVDhPYwABY2Pj/8RgsGIQgHFQBKEAqxyIQwyGKsdu
        MjrAqaGhgQErG6sGkAKYInSaOhpAYERrAAFkNk4NuACGBmIwVDkpgIEBAO2ojyYwtBe7AAAAAElFTkSu
        QmCC
</value>
  </data>
  <data name="edtDatumBis.Properties.Buttons" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        iVBORw0KGgoAAAANSUhEUgAAAAwAAAAQCAYAAAAiYZ4HAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8
        YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAABMSURBVDhPYwABY2Pj/8RgsGIQgHFQBKEAqxyIQwyGKsdu
        MjrAqaGhgQErG6sGkAKYInSaOhpAYERrAAFkNk4NuACGBmIwVDkpgIEBAO2ojyYwtBe7AAAAAElFTkSu
        QmCC
</value>
  </data>
  <metadata name="$this.TrayHeight" type="System.Int32, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
    <value>61</value>
  </metadata>
</root>
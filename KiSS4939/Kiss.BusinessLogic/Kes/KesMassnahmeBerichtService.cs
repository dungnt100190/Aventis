using System;
using System.Collections.Generic;
using Kiss.BusinessLogic.Sys;

using Kiss.DataAccess.Interfaces;
using Kiss.DataAccess.Sys;
using Kiss.DbContext;
using Kiss.Infrastructure;
using Kiss.Infrastructure.IoC;
using Kiss.Interfaces.BL;

namespace Kiss.BusinessLogic.Kes
{
    public class KesMassnahmeBerichtService : ServiceCRUD<KesMassnahmeBericht>
    {
        private KesMassnahmeBerichtService()
        {
        }

        public void DeleteEntities(IList<KesMassnahmeBericht> entityList)
        {
            foreach (var entity in entityList)
            {
                DeleteEntity(entity);
            }
        }

        public virtual IList<KesMassnahmeBericht> GetByKesMassnahmeId(int kesMassnahmeId, bool inclDeleted)
        {
            using (var unitOfWork = CreateNewUnitOfWork<IKissUnitOfWork>())
            {
                return unitOfWork.KesMassnahmeBericht.GetByKesMassnahmeId(kesMassnahmeId, inclDeleted);
            }
        }

        public override IServiceResult SaveEntity(KesMassnahmeBericht entityToSave)
        {
            var result = base.SaveEntity(entityToSave);

            var xtagService = Container.Resolve<XTaskAutoGeneratedService>();
            xtagService.UpdateKesMassnahmePeriodeBisPendenz(entityToSave);
            xtagService.UpdateKesMassnahmeVersandPendenz(entityToSave);

            return result;
        }

        protected override IServiceResult RemoveDependentEntities(DataAccess.Interfaces.IUnitOfWork unitOfWork, KesMassnahmeBericht entityToRemove)
        {
            try
            {
                // Dokumente löschen
                var documentRepository = (XDocumentRepository)unitOfWork.Repository<XDocument>();
                documentRepository.Remove(entityToRemove.DocumentID_Bericht);
                documentRepository.Remove(entityToRemove.DocumentID_Rechnung);
                documentRepository.Remove(entityToRemove.DocumentID_VerfuegungKESB);
                documentRepository.Remove(entityToRemove.DocumentID_Versand);
                return ServiceResult.Ok();
            }
            catch (Exception ex)
            {
                return new ServiceResult(ex);
            }
        }
    }
}
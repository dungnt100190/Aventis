using System;
using System.Collections.Generic;
using System.IO;

using Kiss.BusinessLogic.LocalResources.Kes;
using Kiss.BusinessLogic.Sys;
using Kiss.DataAccess.Interfaces;
using Kiss.DataAccess.Sys;
using Kiss.DbContext;
using Kiss.DbContext.DTO.Kes;
using Kiss.Infrastructure;
using Kiss.Infrastructure.Document;
using Kiss.Infrastructure.IoC;
using Kiss.Interfaces.BL;

namespace Kiss.BusinessLogic.Kes
{
    public class KesDokumentService : ServiceCRUD<KesDokument>
    {
        private KesDokumentService()
        {
        }

        public virtual IList<KesDokumentDTO> GetByFaLeistungId(int faLeistungId, int kesDokumentTypCode, bool inclDeleted)
        {
            using (var unitOfWork = CreateNewUnitOfWork<IKissUnitOfWork>())
            {
                return unitOfWork.KesDokument.GetByFaLeistungId(faLeistungId, kesDokumentTypCode, inclDeleted);
            }
        }

        public virtual IList<KesDokumentDTO> GetByKesAuftragId(int kesAuftragId, int kesDokumentTypCode, bool inclDeleted)
        {
            using (var unitOfWork = CreateNewUnitOfWork<IKissUnitOfWork>())
            {
                return unitOfWork.KesDokument.GetByKesAuftragId(kesAuftragId, kesDokumentTypCode, inclDeleted);
            }
        }

        public IServiceResult SaveAsPdf(List<KesDokumentDTO> dtoList, string pdfFileName)
        {
            if (dtoList.Count == 0)
            {
                return ServiceResult.Error(KesServiceRes.ErrorKeinDokumentAusgewählt);
            }

            var documentService = Container.Resolve<XDocumentService>();
            var documentFiles = new List<PdfFileInfo>();
            var tempPath = Path.Combine(Path.GetTempPath(), "KiSS");

            IServiceResult result = ServiceResult.Ok();

            foreach (var kesDokumentDTO in dtoList)
            {
                var documentId = kesDokumentDTO.WrappedEntity.XDocumentID_Dokument;

                if (documentId.HasValue)
                {
                    var document = documentService.GetByDocumentID(documentId.Value);
                    var fileName = Path.Combine(tempPath, document.DocumentID + ".pdf");

                    result.Add(documentService.SaveDocumentAsPdf(document, fileName));

                    documentFiles.Add(new PdfFileInfo(new FileInfo(fileName)));
                }
            }

            if (!result.IsOk)
            {
                return result;
            }

            var mergedPdf = PdfHelper.MergeDocuments(documentFiles, pdfFileName);
            return mergedPdf.MergeResult;
        }

        public override IServiceResult SaveEntity(KesDokument entityToSave)
        {
            var result = base.SaveEntity(entityToSave);

            var xtagService = Container.Resolve<XTaskAutoGeneratedService>();
            xtagService.InsertKesDokumentVersandPendenz(entityToSave);

            return result;
        }

        protected override IServiceResult RemoveDependentEntities(DataAccess.Interfaces.IUnitOfWork unitOfWork, KesDokument entityToRemove)
        {
            try
            {
                // Dokumente löschen
                var documentRepository = (XDocumentRepository)unitOfWork.Repository<XDocument>();
                documentRepository.Remove(entityToRemove.XDocumentID_Dokument);
                documentRepository.Remove(entityToRemove.XDocumentID_Versand);
                return ServiceResult.Ok();
            }
            catch (Exception ex)
            {
                return new ServiceResult(ex);
            }
        }
    }
}
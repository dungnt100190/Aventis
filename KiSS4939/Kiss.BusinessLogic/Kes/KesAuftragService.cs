using System;
using System.Collections.Generic;
using Kiss.BusinessLogic.LocalResources.Kes;
using Kiss.BusinessLogic.Sys;
using Kiss.DataAccess.Interfaces;
using Kiss.DataAccess.Sys;
using Kiss.DbContext;
using Kiss.Infrastructure;
using Kiss.Infrastructure.IoC;
using Kiss.Interfaces.BL;

namespace Kiss.BusinessLogic.Kes
{
    public class KesAuftragService : ServiceCRUD<KesAuftrag>
    {
        private KesAuftragService()
        {
        }

        public virtual IList<KesAuftrag> GetByFaLeistungId(int faLeistungId)
        {
            using (var unitOfWork = CreateNewUnitOfWork<IKissUnitOfWork>())
            {
                return unitOfWork.KesAuftrag.GetByFaLeistungId(faLeistungId);
            }
        }

        public override IServiceResult SaveEntity(KesAuftrag entityToSave)
        {
            var leistungService = Container.Resolve<KesLeistungService>();
            var leistung = leistungService.GetEntityById(entityToSave.FaLeistungID);

            if (entityToSave.DatumAuftrag < leistung.DatumVon)
            {
                return ServiceResult.Error(KesServiceRes.ErrorDatumVon, leistung.DatumVon);
            }

            var result = base.SaveEntity(entityToSave);

            if (result.IsOk)
            {
                using (var unitOfWork = CreateNewUnitOfWork<IKissUnitOfWork>())
                {
                    unitOfWork.KesAuftrag.UpdateBetroffenePersonen(entityToSave);
                    unitOfWork.SaveChanges();
                }
            }

            var xtagService = Container.Resolve<XTaskAutoGeneratedService>();
            xtagService.UpdateKesAuftragFristBisPendenz(entityToSave);
            xtagService.ErledigeKesDokumentVersandPendenzen(entityToSave);

            return result;
        }

        protected override IServiceResult RemoveDependentEntities(DataAccess.Interfaces.IUnitOfWork uow, KesAuftrag entityToRemove)
        {
            var unitOfWork = (IKissUnitOfWork)uow;
            try
            {
                if (unitOfWork.KesDokument.HasKesDokument(entityToRemove.KesAuftragID))
                {
                    return ServiceResult.Error(KesServiceRes.ErrorDeleteDokumenteExistieren);
                }

                // Dokumente löschen
                var documentRepository = (XDocumentRepository)unitOfWork.Repository<XDocument>();
                documentRepository.Remove(entityToRemove.DocumentID_Auftrag);
                documentRepository.Remove(entityToRemove.DocumentID_BeschlussRueckmeldung);

                // KesAuftrag_BaPerson löschen
                unitOfWork.KesAuftrag.DeleteAllBetroffenePersonen(entityToRemove.KesAuftragID);
                return ServiceResult.Ok();
            }
            catch (Exception ex)
            {
                return new ServiceResult(ex);
            }
        }
    }
}
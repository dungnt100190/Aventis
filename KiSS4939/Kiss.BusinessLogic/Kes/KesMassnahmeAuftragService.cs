using System;
using System.Collections.Generic;

using Kiss.BusinessLogic.LocalResources.Kes;
using Kiss.BusinessLogic.Sys;
using Kiss.DataAccess.Interfaces;
using Kiss.DataAccess.Sys;
using Kiss.DbContext;
using Kiss.Infrastructure;
using Kiss.Infrastructure.IoC;
using Kiss.Interfaces.BL;

namespace Kiss.BusinessLogic.Kes
{
    public class KesMassnahmeAuftragService : ServiceCRUD<KesMassnahmeAuftrag>
    {
        private readonly KesMassnahmeService _kessMassnahmeService;

        private KesMassnahmeAuftragService(KesMassnahmeService kessMassnahmeService)
        {
            _kessMassnahmeService = kessMassnahmeService;
        }

        public void DeleteEntities(IList<KesMassnahmeAuftrag> entityList)
        {
            foreach (var entity in entityList)
            {
                DeleteEntity(entity);
            }
        }

        public override IServiceResult DeleteEntity(int kesMassnahmeAuftragId)
        {
            var xtagService = Container.Resolve<XTaskAutoGeneratedService>();
            xtagService.DeleteKesMassnahmeAuftragVersandPendenz(kesMassnahmeAuftragId);

            return base.DeleteEntity(kesMassnahmeAuftragId);
        }

        public virtual IList<KesMassnahmeAuftrag> GetByFaLeistungID(int faLeistungID, bool inclDeleted)
        {
            using (var unitOfWork = CreateNewUnitOfWork<IKissUnitOfWork>())
            {
                var auftrags = unitOfWork.KesMassnahmeAuftrag.GetByFaLeistungID(faLeistungID, inclDeleted);
                auftrags = SetZgbArtikelTextInKesMassnahmeAuftrags(unitOfWork, auftrags);
                return auftrags;
            }
        }

        public virtual IList<KesMassnahmeAuftrag> GetByKesMassnahmeID(int kesMassnahmeID, bool inclDeleted)
        {
            using (var unitOfWork = CreateNewUnitOfWork<IKissUnitOfWork>())
            {
                var auftrags = unitOfWork.KesMassnahmeAuftrag.GetByKesMassnahmeID(kesMassnahmeID, inclDeleted);
                auftrags = SetZgbArtikelTextInKesMassnahmeAuftrags(unitOfWork, auftrags);
                return auftrags;
            }
        }

        public override IServiceResult SaveEntity(KesMassnahmeAuftrag kesMassnahmeAuftrag)
        {
            var leistungService = Container.Resolve<KesLeistungService>();
            if (kesMassnahmeAuftrag.KesMassnahme != null)
            {
                var leistung = leistungService.GetEntityById(kesMassnahmeAuftrag.KesMassnahme.FaLeistungID);

                if (kesMassnahmeAuftrag.BeschlussVom < leistung.DatumVon)
                {
                    return ServiceResult.Error(KesServiceRes.ErrorDatumVon, leistung.DatumVon);
                }
            }

            var xtagService = Container.Resolve<XTaskAutoGeneratedService>();
            xtagService.UpdateKesMassnahmeAuftragVersandPendenz(kesMassnahmeAuftrag);

            var result = base.SaveEntity(kesMassnahmeAuftrag);
            if (result.IsOk)
            {
                //muss nach Speichern des Auftrags gemacht werden
                xtagService.UpdateKesMassnahmeAuftragErledigungPendenz(kesMassnahmeAuftrag);
            }

            return result;
        }

        protected override IServiceResult RemoveDependentEntities(DataAccess.Interfaces.IUnitOfWork unitOfWork, KesMassnahmeAuftrag entityToRemove)
        {
            try
            {
                // Dokumente löschen
                var documentRepository = (XDocumentRepository)unitOfWork.Repository<XDocument>();
                documentRepository.Remove(entityToRemove.DocumentID_Bericht);
                documentRepository.Remove(entityToRemove.DocumentID_Beschluss);
                documentRepository.Remove(entityToRemove.DocumentID_VerfuegungKESB);
                documentRepository.Remove(entityToRemove.DocumentID_Versand);
                return ServiceResult.Ok();
            }
            catch (Exception ex)
            {
                return new ServiceResult(ex);
            }
        }

        private IList<KesMassnahmeAuftrag> SetZgbArtikelTextInKesMassnahmeAuftrags(IKissUnitOfWork unitOfWork, IList<KesMassnahmeAuftrag> kesMassnamgeAuftrags)
        {
            foreach (var auftrag in kesMassnamgeAuftrags)
            {
                var massnahme = auftrag.KesMassnahme;
                _kessMassnahmeService.SetZgbArtikelTextKurzOfMassnahme(unitOfWork, massnahme);
                auftrag.KesMassnahme = massnahme;
            }

            return kesMassnamgeAuftrags;
        }
    }
}
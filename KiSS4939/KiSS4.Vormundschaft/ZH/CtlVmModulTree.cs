#region Header

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.832
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#endregion

using System;
using System.Windows.Forms;
using KiSS4.Common;
using KiSS4.DB;
using KiSS4.Gui;
using Kiss.Interfaces.UI;

namespace KiSS4.Vormundschaft.ZH
{
    public class CtlVmModulTree : KiSS4.Common.KissModulTree
    {
        #region Fields

        private DevExpress.XtraBars.BarButtonItem btnDelete;
        private DevExpress.XtraBars.BarButtonItem btnFallZuteilung;
        private DevExpress.XtraBars.BarButtonItem btnNeuesMasterbudget;
        private DevExpress.XtraBars.BarButtonItem btnNeuesMonatsbudget;
        private DevExpress.XtraBars.BarButtonItem btnNewK;
        private DevExpress.XtraBars.BarButtonItem btnNewKVermittlung;
        private DevExpress.XtraTreeList.Columns.TreeListColumn colName;
        private KissCheckEdit edtShowAllBudgets;
        private KissCheckEdit edtShowAllMasterBudgets;
        private int KgKontoblattBaPersonID_ = 0;
        private Panel panel1;

        #endregion

        #region Constructors

        public CtlVmModulTree(int BaPersonID, System.Windows.Forms.Panel panelDetail)
            : base(BaPersonID, panelDetail, Gui.ModulID.V)
        {
            // This call is required by the Windows Form Designer.
            InitializeComponent();

            this.popup_Tree.LinksPersistInfo.Clear();
            this.popup_Tree.LinksPersistInfo.AddRange(new DevExpress.XtraBars.LinkPersistInfo[]
            {
                // Neue Verwaltung Klientengelder
                new DevExpress.XtraBars.LinkPersistInfo(this.btnNewK),
                new DevExpress.XtraBars.LinkPersistInfo(this.btnNewKVermittlung),

                // Neues Master-/Monatsbudget
                new DevExpress.XtraBars.LinkPersistInfo(this.btnNeuesMasterbudget,true),
                new DevExpress.XtraBars.LinkPersistInfo(this.btnNeuesMonatsbudget),

                // Löschen:
                new DevExpress.XtraBars.LinkPersistInfo(this.btnDelete, true),

                // zusätzliche Menus:
                new DevExpress.XtraBars.LinkPersistInfo(this.btnFallZuteilung, true)
            });

            this.FillTree();
            this.kissTree.ExpandAll();
            AllMasterBudgetsVisible = edtShowAllMasterBudgets.Checked;
        }

        public CtlVmModulTree()
        {
            this.InitializeComponent();
        }

        #endregion

        #region Windows Form Designer generated code

        /// <summary>
        /// Required method for Designer support - do not modify
        /// the contents of this method with the code editor.
        /// </summary>
        private void InitializeComponent()
        {
            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(CtlVmModulTree));
            this.btnDelete = new DevExpress.XtraBars.BarButtonItem();
            this.btnFallZuteilung = new DevExpress.XtraBars.BarButtonItem();
            this.btnNeuesMasterbudget = new DevExpress.XtraBars.BarButtonItem();
            this.btnNeuesMonatsbudget = new DevExpress.XtraBars.BarButtonItem();
            this.btnNewK = new DevExpress.XtraBars.BarButtonItem();
            this.btnNewKVermittlung = new DevExpress.XtraBars.BarButtonItem();
            this.colName = new DevExpress.XtraTreeList.Columns.TreeListColumn();
            this.panel1 = new System.Windows.Forms.Panel();
            this.edtShowAllBudgets = new KiSS4.Gui.KissCheckEdit();
            this.edtShowAllMasterBudgets = new KiSS4.Gui.KissCheckEdit();
            ((System.ComponentModel.ISupportInitialize)(this.kissTree)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(this.barManager_Tree)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(this.popup_Tree)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(this.qryModulTree)).BeginInit();
            this.panel1.SuspendLayout();
            ((System.ComponentModel.ISupportInitialize)(this.edtShowAllBudgets.Properties)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(this.edtShowAllMasterBudgets.Properties)).BeginInit();
            this.SuspendLayout();
            //
            // kissTree
            //
            this.kissTree.Appearance.Empty.BackColor = System.Drawing.Color.Transparent;
            this.kissTree.Appearance.Empty.ForeColor = System.Drawing.Color.White;
            this.kissTree.Appearance.Empty.Options.UseBackColor = true;
            this.kissTree.Appearance.Empty.Options.UseForeColor = true;
            this.kissTree.Appearance.EvenRow.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(236)))), ((int)(((byte)(227)))), ((int)(((byte)(215)))));
            this.kissTree.Appearance.EvenRow.ForeColor = System.Drawing.Color.Black;
            this.kissTree.Appearance.EvenRow.Options.UseBackColor = true;
            this.kissTree.Appearance.EvenRow.Options.UseForeColor = true;
            this.kissTree.Appearance.FocusedCell.BackColor = System.Drawing.Color.Transparent;
            this.kissTree.Appearance.FocusedCell.ForeColor = System.Drawing.Color.White;
            this.kissTree.Appearance.FocusedCell.Options.UseBackColor = true;
            this.kissTree.Appearance.FocusedCell.Options.UseForeColor = true;
            this.kissTree.Appearance.FocusedRow.ForeColor = System.Drawing.Color.White;
            this.kissTree.Appearance.FocusedRow.Options.UseForeColor = true;
            this.kissTree.Appearance.FooterPanel.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(230)))), ((int)(((byte)(216)))), ((int)(((byte)(174)))));
            this.kissTree.Appearance.FooterPanel.Font = new System.Drawing.Font("Microsoft Sans Serif", 11F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Pixel);
            this.kissTree.Appearance.FooterPanel.ForeColor = System.Drawing.Color.Black;
            this.kissTree.Appearance.FooterPanel.Options.UseBackColor = true;
            this.kissTree.Appearance.FooterPanel.Options.UseFont = true;
            this.kissTree.Appearance.FooterPanel.Options.UseForeColor = true;
            this.kissTree.Appearance.GroupButton.BackColor = System.Drawing.Color.Transparent;
            this.kissTree.Appearance.GroupButton.Font = new System.Drawing.Font("Microsoft Sans Serif", 9F, System.Drawing.FontStyle.Bold);
            this.kissTree.Appearance.GroupButton.ForeColor = System.Drawing.Color.Black;
            this.kissTree.Appearance.GroupButton.Options.UseBackColor = true;
            this.kissTree.Appearance.GroupButton.Options.UseFont = true;
            this.kissTree.Appearance.GroupButton.Options.UseForeColor = true;
            this.kissTree.Appearance.GroupFooter.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(240)))), ((int)(((byte)(226)))), ((int)(((byte)(184)))));
            this.kissTree.Appearance.GroupFooter.ForeColor = System.Drawing.Color.Black;
            this.kissTree.Appearance.GroupFooter.Options.UseBackColor = true;
            this.kissTree.Appearance.GroupFooter.Options.UseForeColor = true;
            this.kissTree.Appearance.HeaderPanel.BackColor = System.Drawing.Color.Tan;
            this.kissTree.Appearance.HeaderPanel.Font = new System.Drawing.Font("Microsoft Sans Serif", 8F, System.Drawing.FontStyle.Bold);
            this.kissTree.Appearance.HeaderPanel.ForeColor = System.Drawing.Color.Black;
            this.kissTree.Appearance.HeaderPanel.Options.UseBackColor = true;
            this.kissTree.Appearance.HeaderPanel.Options.UseFont = true;
            this.kissTree.Appearance.HeaderPanel.Options.UseForeColor = true;
            this.kissTree.Appearance.HideSelectionRow.BackColor = System.Drawing.Color.PowderBlue;
            this.kissTree.Appearance.HideSelectionRow.Font = new System.Drawing.Font("Arial", 12F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Pixel);
            this.kissTree.Appearance.HideSelectionRow.ForeColor = System.Drawing.Color.Black;
            this.kissTree.Appearance.HideSelectionRow.Options.UseBackColor = true;
            this.kissTree.Appearance.HideSelectionRow.Options.UseFont = true;
            this.kissTree.Appearance.HideSelectionRow.Options.UseForeColor = true;
            this.kissTree.Appearance.HorzLine.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(230)))), ((int)(((byte)(216)))), ((int)(((byte)(174)))));
            this.kissTree.Appearance.HorzLine.ForeColor = System.Drawing.Color.Red;
            this.kissTree.Appearance.HorzLine.Options.UseBackColor = true;
            this.kissTree.Appearance.HorzLine.Options.UseForeColor = true;
            this.kissTree.Appearance.OddRow.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(242)))), ((int)(((byte)(236)))), ((int)(((byte)(215)))));
            this.kissTree.Appearance.OddRow.Font = new System.Drawing.Font("Arial", 12F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Pixel);
            this.kissTree.Appearance.OddRow.ForeColor = System.Drawing.Color.Black;
            this.kissTree.Appearance.OddRow.Options.UseBackColor = true;
            this.kissTree.Appearance.OddRow.Options.UseFont = true;
            this.kissTree.Appearance.OddRow.Options.UseForeColor = true;
            this.kissTree.Appearance.Preview.BackColor = System.Drawing.Color.White;
            this.kissTree.Appearance.Preview.Font = new System.Drawing.Font("Microsoft Sans Serif", 11F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Pixel);
            this.kissTree.Appearance.Preview.ForeColor = System.Drawing.Color.Maroon;
            this.kissTree.Appearance.Preview.Options.UseBackColor = true;
            this.kissTree.Appearance.Preview.Options.UseFont = true;
            this.kissTree.Appearance.Preview.Options.UseForeColor = true;
            this.kissTree.Appearance.Row.BackColor = System.Drawing.Color.Transparent;
            this.kissTree.Appearance.Row.Font = new System.Drawing.Font("Arial", 12F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Pixel);
            this.kissTree.Appearance.Row.ForeColor = System.Drawing.Color.Black;
            this.kissTree.Appearance.Row.Options.UseBackColor = true;
            this.kissTree.Appearance.Row.Options.UseFont = true;
            this.kissTree.Appearance.Row.Options.UseForeColor = true;
            this.kissTree.Appearance.SelectedRow.ForeColor = System.Drawing.Color.White;
            this.kissTree.Appearance.SelectedRow.Options.UseForeColor = true;
            this.kissTree.Appearance.TreeLine.BackColor = System.Drawing.Color.White;
            this.kissTree.Appearance.TreeLine.ForeColor = System.Drawing.Color.Gray;
            this.kissTree.Appearance.TreeLine.Options.UseBackColor = true;
            this.kissTree.Appearance.TreeLine.Options.UseForeColor = true;
            this.kissTree.Appearance.VertLine.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(230)))), ((int)(((byte)(216)))), ((int)(((byte)(174)))));
            this.kissTree.Appearance.VertLine.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(198)))), ((int)(((byte)(166)))), ((int)(((byte)(70)))));
            this.kissTree.Appearance.VertLine.Options.UseBackColor = true;
            this.kissTree.Appearance.VertLine.Options.UseForeColor = true;
            this.kissTree.Appearance.VertLine.Options.UseTextOptions = true;
            this.kissTree.Appearance.VertLine.TextOptions.HAlignment = DevExpress.Utils.HorzAlignment.Near;
            this.kissTree.Columns.AddRange(new DevExpress.XtraTreeList.Columns.TreeListColumn[] {
            this.colName});
            this.kissTree.DataSource = this.qryModulTree;
            this.kissTree.OptionsBehavior.AutoSelectAllInEditor = false;
            this.kissTree.OptionsBehavior.CloseEditorOnLostFocus = false;
            this.kissTree.OptionsBehavior.Editable = false;
            this.kissTree.OptionsBehavior.KeepSelectedOnClick = false;
            this.kissTree.OptionsBehavior.MoveOnEdit = false;
            this.kissTree.OptionsBehavior.ShowToolTips = false;
            this.kissTree.OptionsBehavior.SmartMouseHover = false;
            this.kissTree.OptionsMenu.EnableColumnMenu = false;
            this.kissTree.OptionsMenu.EnableFooterMenu = false;
            this.kissTree.OptionsSelection.EnableAppearanceFocusedCell = false;
            this.kissTree.OptionsView.AutoWidth = false;
            this.kissTree.OptionsView.EnableAppearanceEvenRow = true;
            this.kissTree.OptionsView.EnableAppearanceOddRow = true;
            this.kissTree.OptionsView.ShowIndicator = false;
            this.kissTree.OptionsView.ShowVertLines = false;
            this.kissTree.Size = new System.Drawing.Size(320, 438);
            this.kissTree.Styles.AddReplace("PressedColumn", new DevExpress.Utils.ViewStyle("PressedColumn", "TreeList", new System.Drawing.Font("Microsoft Sans Serif", 8F, System.Drawing.FontStyle.Bold), "HeaderPanel", ((DevExpress.Utils.StyleOptions)(((DevExpress.Utils.StyleOptions.StyleEnabled | DevExpress.Utils.StyleOptions.UseBackColor)
                                | DevExpress.Utils.StyleOptions.UseForeColor))), true, false, false, DevExpress.Utils.HorzAlignment.Near, DevExpress.Utils.VertAlignment.Center, null, System.Drawing.Color.FromArgb(((int)(((byte)(247)))), ((int)(((byte)(239)))), ((int)(((byte)(222))))), System.Drawing.Color.FromArgb(((int)(((byte)(255)))), ((int)(((byte)(255)))), ((int)(((byte)(255)))))));
            this.kissTree.CustomDrawNodeCell += new DevExpress.XtraTreeList.CustomDrawNodeCellEventHandler(this.kissTree_CustomDrawNodeCell);
            //
            // barManager_Tree
            //
            this.barManager_Tree.Items.AddRange(new DevExpress.XtraBars.BarItem[] {
            this.btnDelete,
            this.btnNeuesMonatsbudget,
            this.btnNeuesMasterbudget,
            this.btnFallZuteilung,
            this.btnNewK,
            this.btnNewKVermittlung});
            this.barManager_Tree.MaxItemId = 9;
            this.barManager_Tree.QueryShowPopupMenu += new DevExpress.XtraBars.QueryShowPopupMenuEventHandler(this.barManager_Tree_QueryShowPopupMenu);
            //
            // btnFallInfo
            //
            this.btnFallInfo.CategoryGuid = new System.Guid("f96a77cc-41a0-4295-8f5a-5c2410a21ef7");
            this.btnFallInfo.Glyph = ((System.Drawing.Image)(resources.GetObject("btnFallInfo.Glyph")));
            //
            // btnFallZugriff
            //
            this.btnFallZugriff.CategoryGuid = new System.Guid("f96a77cc-41a0-4295-8f5a-5c2410a21ef7");
            this.btnFallZugriff.Glyph = ((System.Drawing.Image)(resources.GetObject("btnFallZugriff.Glyph")));
            //
            // btnDelete
            //
            this.btnDelete.Caption = "Löschen";
            this.btnDelete.Glyph = ((System.Drawing.Image)(resources.GetObject("btnDelete.Glyph")));
            this.btnDelete.Id = 3;
            this.btnDelete.Name = "btnDelete";
            this.btnDelete.ItemClick += new DevExpress.XtraBars.ItemClickEventHandler(this.btnDelete_ItemClick);
            //
            // btnFallZuteilung
            //
            this.btnFallZuteilung.Caption = "Fallzuteilung";
            this.btnFallZuteilung.Glyph = ((System.Drawing.Image)(resources.GetObject("btnFallZuteilung.Glyph")));
            this.btnFallZuteilung.Id = 6;
            this.btnFallZuteilung.Name = "btnFallZuteilung";
            this.btnFallZuteilung.ItemClick += new DevExpress.XtraBars.ItemClickEventHandler(this.btnFallZuteilung_ItemClick);
            //
            // btnNeuesMasterbudget
            //
            this.btnNeuesMasterbudget.Caption = "Neues Masterbudget";
            this.btnNeuesMasterbudget.Id = 5;
            this.btnNeuesMasterbudget.ImageIndex = 1312;
            this.btnNeuesMasterbudget.Name = "btnNeuesMasterbudget";
            this.btnNeuesMasterbudget.ItemClick += new DevExpress.XtraBars.ItemClickEventHandler(this.btnNeuesMasterbudget_ItemClick);
            //
            // btnNeuesMonatsbudget
            //
            this.btnNeuesMonatsbudget.Caption = "Neues Monatsbudget";
            this.btnNeuesMonatsbudget.Id = 4;
            this.btnNeuesMonatsbudget.ImageIndex = 1323;
            this.btnNeuesMonatsbudget.Name = "btnNeuesMonatsbudget";
            this.btnNeuesMonatsbudget.ItemClick += new DevExpress.XtraBars.ItemClickEventHandler(this.btnNeuesMonatsbudget_ItemClick);
            //
            // btnNewK
            //
            this.btnNewK.Caption = "Neue Verwaltung Klientengelder (KES-Massn.)";
            this.btnNewK.Id = 7;
            this.btnNewK.ImageIndex = 1501;
            this.btnNewK.Name = "btnNewK";
            this.btnNewK.ItemClick += new DevExpress.XtraBars.ItemClickEventHandler(this.btnNewK_ItemClick);
            //
            // btnNewKVermittlung
            //
            this.btnNewKVermittlung.Caption = "Neue Verwaltung Klientengelder (Vermittlungsfall)";
            this.btnNewKVermittlung.Id = 8;
            this.btnNewKVermittlung.ImageIndex = 1501;
            this.btnNewKVermittlung.Name = "btnNewKVermittlung";
            this.btnNewKVermittlung.ItemClick += new DevExpress.XtraBars.ItemClickEventHandler(this.btnNewKVermittlung_ItemClick);
            //
            // colName
            //
            this.colName.Caption = "Klientengelder";
            this.colName.FieldName = "Name";
            this.colName.Name = "colName";
            this.colName.OptionsColumn.AllowSort = false;
            this.colName.VisibleIndex = 0;
            this.colName.Width = 267;
            //
            // panel1
            //
            this.panel1.Controls.Add(this.edtShowAllBudgets);
            this.panel1.Controls.Add(this.edtShowAllMasterBudgets);
            this.panel1.Dock = System.Windows.Forms.DockStyle.Bottom;
            this.panel1.Location = new System.Drawing.Point(0, 438);
            this.panel1.Name = "panel1";
            this.panel1.Size = new System.Drawing.Size(320, 34);
            this.panel1.TabIndex = 6;
            //
            // edtShowAllBudgets
            //
            this.edtShowAllBudgets.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Left)
                        | System.Windows.Forms.AnchorStyles.Right)));
            this.edtShowAllBudgets.EditValue = true;
            this.edtShowAllBudgets.Location = new System.Drawing.Point(165, 7);
            this.edtShowAllBudgets.Name = "edtShowAllBudgets";
            this.edtShowAllBudgets.Properties.Appearance.BackColor = System.Drawing.Color.Transparent;
            this.edtShowAllBudgets.Properties.Appearance.Options.UseBackColor = true;
            this.edtShowAllBudgets.Properties.Caption = "alle Monatsbudgets anzeigen";
            this.edtShowAllBudgets.Size = new System.Drawing.Size(151, 19);
            this.edtShowAllBudgets.TabIndex = 1;
            this.edtShowAllBudgets.Visible = false;
            //
            // edtShowAllMasterBudgets
            //
            this.edtShowAllMasterBudgets.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Left)
                        | System.Windows.Forms.AnchorStyles.Right)));
            this.edtShowAllMasterBudgets.EditValue = true;
            this.edtShowAllMasterBudgets.Location = new System.Drawing.Point(3, 7);
            this.edtShowAllMasterBudgets.Name = "edtShowAllMasterBudgets";
            this.edtShowAllMasterBudgets.Properties.Appearance.BackColor = System.Drawing.Color.Transparent;
            this.edtShowAllMasterBudgets.Properties.Appearance.Options.UseBackColor = true;
            this.edtShowAllMasterBudgets.Properties.Caption = "alle Masterbudgets anzeigen";
            this.edtShowAllMasterBudgets.Size = new System.Drawing.Size(313, 19);
            this.edtShowAllMasterBudgets.TabIndex = 0;
            this.edtShowAllMasterBudgets.EditValueChanged += new System.EventHandler(this.edtShowAllMasterBudgets_EditValueChanged);
            //
            // CtlVmModulTree
            //
            this.Controls.Add(this.panel1);
            this.Name = "CtlVmModulTree";
            this.Controls.SetChildIndex(this.barDockControl1, 0);
            this.Controls.SetChildIndex(this.barDockControl2, 0);
            this.Controls.SetChildIndex(this.barDockControl4, 0);
            this.Controls.SetChildIndex(this.barDockControl3, 0);
            this.Controls.SetChildIndex(this.panel1, 0);
            this.Controls.SetChildIndex(this.kissTree, 0);
            ((System.ComponentModel.ISupportInitialize)(this.kissTree)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(this.barManager_Tree)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(this.popup_Tree)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(this.qryModulTree)).EndInit();
            this.panel1.ResumeLayout(false);
            ((System.ComponentModel.ISupportInitialize)(this.edtShowAllBudgets.Properties)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(this.edtShowAllMasterBudgets.Properties)).EndInit();
            this.ResumeLayout(false);
        }

        #endregion

        #region Public Methods

        public void DisplayTree(string treeID)
        {
            kissTree.DataSource = null; //sonst Exception: open DataReader!

            this.FillTree();
            AllMasterBudgetsVisible = edtShowAllMasterBudgets.Checked;

            /*
            //auf oberstes Fallverlauf öffnen und positionieren
            if (kissTree.Nodes.Count > 2){
                 this.kissTree.Nodes[2].Expanded = true;
                 kissTree.FocusedNode = kissTree.Nodes[2];
                 //Dokumentation öffnen
                 if (this.kissTree.Nodes[2].Nodes.Count > 0)
                      this.kissTree.Nodes[2].Nodes[0].Expanded = true;
                      //obersten Aufnahmeprozess oder LösungsprozessDokumentation öffnen
                      if (this.kissTree.Nodes[2].Nodes.Count > 1)
                      this.kissTree.Nodes[2].Nodes[1].Expanded = true;
            }
            else if(kissTree.Nodes.Count > 1)
            {
                 //Fallverlauf anzeigen
                 kissTree.FocusedNode = kissTree.Nodes[1];
            }
            else
            {
                 this.ShowDetail(null);
            }
            */
            //ev. Neupositionierung auf neuen Eintrag
            if (treeID != string.Empty)
            {
                DevExpress.XtraTreeList.Nodes.TreeListNode node = DBUtil.FindNodeByValue(kissTree.Nodes, treeID, "ID");
                if (node != null)
                {
                    kissTree.FocusedNode = node;
                    node.Expanded = true;
                    kissTree_AfterFocusNode(null, new DevExpress.XtraTreeList.NodeEventArgs(node));
                }
            }
        }

        /// <include file='..\KiSS4.Gui\KiSS4.Gui.XML' path='doc/members/member[@name="M:KiSS4.Gui.IViewMessaging.ReceiveMessage"]/*'/>
        public override bool ReceiveMessage(System.Collections.Specialized.HybridDictionary parameters)
        {
            // ensure that the node is visible, otherwise it can't be selected
            if (parameters != null && parameters.Count > 1 && parameters["Action"] as string == "JumpToPath" && parameters.Contains("TreeNodeID"))
            {
                DevExpress.XtraTreeList.Nodes.TreeListNode nodeToSelect = kissTree.FindNodeByKeyID(parameters["TreeNodeID"]);
                if (nodeToSelect != null)
                    nodeToSelect.Visible = true;
            }

            return base.ReceiveMessage(parameters);
        }

        #endregion

        #region Protected Methods

        public override void Refresh()
        {
            base.Refresh();
            AllMasterBudgetsVisible = edtShowAllMasterBudgets.Checked;
        }

        protected override void kissTree_AfterFocusNode(object sender, DevExpress.XtraTreeList.NodeEventArgs e)
        {
            try
            {
                Cursor.Current = Cursors.WaitCursor;
                // handle empty node
                if (e == null || e.Node == null)
                {
                    return;
                }

                IKissView ctrl = null;
                string ID = e.Node.GetValue("ID") as string;
                object BaPersonID = e.Node.GetValue("BaPersonID");
                object fallBaPersonID = e.Node.GetValue("FallBaPersonID");
                object FaLeistungID = e.Node.GetValue("FaLeistungID");
                string Name = e.Node.GetValue("Name") as string;
                object IconID = e.Node.GetValue("IconID");
                object KgBudgetID = e.Node.GetValue("KgBudgetID");
                object KgMasterbudgetID = e.Node.GetValue("KgMasterBudgetID");

                string className = e.Node.GetValue("ClassName") as string;
                System.Type type = AssemblyLoader.GetType(className);
                bool isNew = true;

                if (type != null)
                {
                    ctrl = _showDetail.GetDetailControl(type, false);
                    if (ctrl != null)
                    {
                        isNew = false;
                    }
                    else
                    {
                        ctrl = _showDetail.GetDetailControl(type, true);
                    }
                    ctrl.Name = Name;
                }
                if (ctrl == null || ID != null && ID.StartsWith("X"))
                {
                    ShowDetail(ctrl, true); // ID scheint nie mit X zu starten, auch ctl dürfte nie null sein
                    return;
                }

                switch (className)
                {
                    case "CtlKgDokumentenPool":
                        AssemblyLoader.InvokeMethode(ctrl, "InitOnlyForPerson", (int)BaPersonID);
                        break;

                    case "CtlKgLeistung":
                        AssemblyLoader.InvokeMethode(ctrl, "Init", Name, this.GetIcon(e), (int)FaLeistungID);
                        break;

                    case "CtlKgKontoblatt":
                        if (isNew || KgKontoblattBaPersonID_ != (int)BaPersonID)        // If this is the first time, or if the person has changed, then we initialize the view
                        {
                            KgKontoblattBaPersonID_ = (int)BaPersonID;      // Store the person so we can check again the next time
                            AssemblyLoader.InvokeMethode(ctrl, "Init", Name, this.GetIcon(e), (int)FaLeistungID, (int)BaPersonID, (int)fallBaPersonID);
                        }
                        this.ShowDetail(ctrl, false);
                        return;

                    case "CtlKgPeriode":
                    case "CtlKgBuchung":
                    case "CtlKgBilanzErfolg":
                    case "CtlKgJournal":
                    case "CtlKgKonto":
                        AssemblyLoader.InvokeMethode(ctrl, "Init", Name, this.GetIcon(e), (int)FaLeistungID, (int)BaPersonID);
                        break;

                    case "CtlKgBudget":
                        if (DBUtil.IsEmpty(KgMasterbudgetID)) KgMasterbudgetID = 0;
                        AssemblyLoader.InvokeMethode(ctrl, "Init", Name, this.GetIcon(e), (int)KgBudgetID, (int)KgMasterbudgetID, (int)FaLeistungID, (int)BaPersonID);

                        break;

                    default:
                        try
                        {
                            AssemblyLoader.InvokeMethode(ctrl, "Init", Name, this.GetIcon(e));
                        }
                        catch { }
                        break;
                }
                ShowDetail(ctrl, true);
            }
            finally
            {
                Cursor.Current = Cursors.Default;
            }
        }

        #endregion

        #region Private Methods

        private bool AllMasterBudgetsVisible
        {
            set
            {
                DateTime today = DateTime.Today;
                DevExpress.XtraTreeList.Nodes.TreeListNode firstMasterbudget = null;
                bool anyMasterbudgetVisible = false;
                DevExpress.XtraTreeList.Nodes.TreeListNode focusedNode = base.FocusedNode;
                foreach (DevExpress.XtraTreeList.Nodes.TreeListNode nodeLeistung in kissTree.Nodes)
                {
                    // node entspricht K-Leistung
                    foreach (DevExpress.XtraTreeList.Nodes.TreeListNode node in nodeLeistung.Nodes)
                    {
                        if ("CtlKgBudget" == node.GetValue("ClassName") as string && DBUtil.IsEmpty(node.GetValue("KgMasterBudgetID")))
                        {
                            if (firstMasterbudget == null)
                                firstMasterbudget = node;

                            DateTime? masterBudgetVon = node.GetValue("BewilligtVon") as DateTime?;
                            DateTime? masterBudgetBis = node.GetValue("BewilligtBis") as DateTime?;
                            bool aktuellesMasterbudget = masterBudgetVon != null && masterBudgetVon <= today && (masterBudgetBis == null || today <= masterBudgetBis);
                            bool zukuenftigesMasterbudget = masterBudgetVon != null && today <= masterBudgetVon && (masterBudgetBis == null || today <= masterBudgetBis);
                            bool focusedNodeIsChild = focusedNode != null && focusedNode.ParentNode == node;
                            if (value || aktuellesMasterbudget || zukuenftigesMasterbudget)
                            {
                                node.Visible = true;
                                // das aktuelle Masterbudget wird aufgeklappt
                                // das Masterbudget des fokussierten Monatsbudget darf nicht geschlossen werden
                                // oder wenn das letzte Masterbudget in der Vergangenheit liegt, wird dieses aufgeklappt
                                node.Expanded = aktuellesMasterbudget ||
                                                focusedNodeIsChild ||
                                                !anyMasterbudgetVisible && !aktuellesMasterbudget && !zukuenftigesMasterbudget;
                                anyMasterbudgetVisible = true;
                            }
                            else
                            {
                                // Verstecke diesen Node
                                node.Visible = false;
                                node.Expanded = false;
                            }
                        }
                    }
                }
                if (!anyMasterbudgetVisible && firstMasterbudget != null)
                {
                    firstMasterbudget.Visible = true;
                    firstMasterbudget.Expanded = true;
                }
            }
        }

        private void barManager_Tree_QueryShowPopupMenu(object sender, DevExpress.XtraBars.QueryShowPopupMenuEventArgs e)
        {
            foreach (DevExpress.XtraBars.BarItemLink barItemLink in e.Menu.ItemLinks)
                barItemLink.Item.Visibility = DevExpress.XtraBars.BarItemVisibility.Never;

            if (kissTree.FocusedNode == null)
            {
                if (DBUtil.UserHasRight("CtlVmModulTree_NeueVerwaltungKlientengelder"))
                {
                    btnNewK.Visibility = DevExpress.XtraBars.BarItemVisibility.Always;
                    btnNewKVermittlung.Visibility = DevExpress.XtraBars.BarItemVisibility.Always;
                }
            }
            else
            {
                // Fallzugriff/Fallinfo/Fallzuteilung:
                btnFallZuteilung.Visibility = DevExpress.XtraBars.BarItemVisibility.Always;

                int FaFallID = Utils.ConvertToInt(kissTree.FocusedNode.GetValue("FaFallID"));
                int FaLeistungID = Utils.ConvertToInt(kissTree.FocusedNode.GetValue("FaLeistungID"));
                int MasterBudgetID = Utils.ConvertToInt(kissTree.FocusedNode.GetValue("KgMasterBudgetID"));
                int BudgetID = Utils.ConvertToInt(kissTree.FocusedNode.GetValue("KgBudgetID"));

                string ClassName = Utils.ConvertToString(kissTree.FocusedNode.GetValue("ClassName"));
                int BaPersonID = Utils.ConvertToInt(kissTree.FocusedNode.GetValue("BaPersonID"));

                bool closed = (bool)DBUtil.ExecuteScalarSQL(@"
                    Select convert(bit,case when DatumBis is Null then 0 else 1 end)
                    from   FaLeistung
                    where  FaLeistungID = {0}",
                     FaLeistungID);

                int CountPerioden = (int)DBUtil.ExecuteScalarSQL(@"
                    Select count(*)
                    from   KgPeriode
                    where  FaLeistungID = {0}",
                     FaLeistungID);

                //neues K
                if (DBUtil.UserHasRight("CtlVmModulTree_NeueVerwaltungKlientengelder"))
                {
                    btnNewK.Visibility = DevExpress.XtraBars.BarItemVisibility.Always;
                    btnNewKVermittlung.Visibility = DevExpress.XtraBars.BarItemVisibility.Always;
                }

                //neues MasterBudget
                if (!closed && (CountPerioden > 0) && DBUtil.UserHasRight("CtlVmModulTree_NeuesMasterbudget"))
                {
                    btnNeuesMasterbudget.Visibility = DevExpress.XtraBars.BarItemVisibility.Always;
                }

                //neues Monatsbudget
                if (!closed && (ClassName == "CtlKgBudget") && DBUtil.UserHasRight("CtlVmModulTree_NeuesMonatsbudget"))
                {
                    int KgMasterBudgetID = (MasterBudgetID == 0) ? BudgetID : MasterBudgetID;
                    bool bewilligt = (bool)DBUtil.ExecuteScalarSQL(@"
                        Select convert(bit,case when KgBewilligungCode = 5 then 1 else 0 end)
                        from   KgBudget
                        where  KgBudgetID = {0}",
                         KgMasterBudgetID);

                    if (bewilligt) btnNeuesMonatsbudget.Visibility = DevExpress.XtraBars.BarItemVisibility.Always;
                }

                //Löschen
                switch (ClassName)
                {
                    case "CtlKgLeistung":
                        if (!closed && DBUtil.UserHasRight("CtlVmModulTree_VerwaltungKlientengelderLoeschen"))
                        {
                            btnDelete.Visibility = DevExpress.XtraBars.BarItemVisibility.Always;
                        }
                        break;

                    case "CtlKgBudget":
                        if (!closed)
                        {
                            int KgBudgetID = Utils.ConvertToInt(kissTree.FocusedNode.GetValue("KgBudgetID"));
                            int BewStatus = Utils.ConvertToInt(kissTree.FocusedNode.GetValue("KgBewilligungCode"));
                            if (DBUtil.IsEmpty(kissTree.FocusedNode.GetValue("KgMasterBudgetID")))
                            {
                                if (BewStatus <= 5) // Neu ist es auch erlaubt, ein bewilligtes Masterbudget zu löschen, falls kein Geldfluss existiert. Dies wird beim Löschen überprüft
                                    btnDelete.Visibility = DevExpress.XtraBars.BarItemVisibility.Always;
                            }
                            else
                            {
                                if (BewStatus < 5)
                                    btnDelete.Visibility = DevExpress.XtraBars.BarItemVisibility.Always;
                            }
                        }
                        break;
                }
            }

            e.Cancel = false;
            foreach (DevExpress.XtraBars.BarItemLink barItemLink in e.Menu.ItemLinks)
                if (barItemLink.Item.Visibility != DevExpress.XtraBars.BarItemVisibility.Never) return;

            e.Cancel = true;
        }

        private void btnDelete_ItemClick(object sender, DevExpress.XtraBars.ItemClickEventArgs e)
        {
            string ClassName = Utils.ConvertToString(kissTree.FocusedNode.GetValue("ClassName"));

            //Löschen
            try
            {
                switch (ClassName)
                {
                    case "CtlKgLeistung":
                        //TODO: check ob bereits unlöschbare Daten erfasst wurden (KgPeriode, bewilligte Masterbudget etc.)
                        int FaLeistungID = Utils.ConvertToInt(kissTree.FocusedNode.GetValue("FaLeistungID"));
                        DBUtil.ExecSQLThrowingException("delete FaLeistung where FaLeistungID = {0}", FaLeistungID);
                        break;

                    case "CtlKgBudget":
                        //TODO: check ob bereits unlöschbare Daten erfasst wurden
                        int BewStatus = Utils.ConvertToInt(kissTree.FocusedNode.GetValue("KgBewilligungCode"));
                        int KgBudgetID = Utils.ConvertToInt(kissTree.FocusedNode.GetValue("KgBudgetID"));

                        DBUtil.ThrowExceptionOnOpenTransaction();
                        try
                        {
                            Session.BeginTransaction();
                            DBUtil.ExecSQLThrowingException(@"EXEC spKgBudget_Delete {0}", @KgBudgetID);
                            Session.Commit();
                        }
                        finally
                        {
                            if (Session.Transaction != null)
                                Session.Rollback();
                        }

                        // das Masterbudget fokussieren, damit das refresh nicht flackert
                        if (kissTree.FocusedNode != null && kissTree.FocusedNode.ParentNode != null)
                            kissTree.FocusedNode = kissTree.FocusedNode.ParentNode;

                        break;
                }
                FormController.SendMessage("FrmFall", "Action", "RefreshTree");
            }
            catch (KissCancelException ex)
            {
                ex.ShowMessage();
            }
        }

        private void btnFallZuteilung_ItemClick(object sender, DevExpress.XtraBars.ItemClickEventArgs e)
        {
            FormController.ShowDialogOnMain("DlgFallZuteilung", this.BaPersonID);
        }

        private void btnNeuesMasterbudget_ItemClick(object sender, DevExpress.XtraBars.ItemClickEventArgs e)
        {
            int FaLeistungID = Utils.ConvertToInt(kissTree.FocusedNode.GetValue("FaLeistungID"));

            SqlQuery qry = DBUtil.OpenSQL(@"exec spKgBudget_CreateMaster {0}", FaLeistungID);

            DisplayTree("CtlKgLeistung" + FaLeistungID.ToString() + @"\Masterbudget" + qry["NewKgBudgetID"].ToString());
        }

        private void btnNeuesMonatsbudget_ItemClick(object sender, DevExpress.XtraBars.ItemClickEventArgs e)
        {
            int FaLeistungID = Utils.ConvertToInt(kissTree.FocusedNode.GetValue("FaLeistungID"));
            int MasterBudgetID = Utils.ConvertToInt(kissTree.FocusedNode.GetValue("KgMasterBudgetID"));
            int BudgetID = Utils.ConvertToInt(kissTree.FocusedNode.GetValue("KgBudgetID"));

            int KgMasterBudgetID = (MasterBudgetID == 0) ? BudgetID : MasterBudgetID;

            SqlQuery qry = DBUtil.OpenSQL(@"
                EXECUTE spKgBudget_Create {0}, {1}", KgMasterBudgetID, Session.User.UserID);

            if (DBUtil.IsEmpty(qry["KgBudgetID"]))
            {
                KissMsg.ShowInfo(qry["Error"].ToString());
            }
            else
            {
                DisplayTree("CtlKgLeistung" + FaLeistungID.ToString() +
                                     @"\Masterbudget" + KgMasterBudgetID.ToString() +
                                     @"\Monatsbudget" + qry["KgBudgetID"].ToString());
            }
        }

        private void btnNewK_ItemClick(object sender, DevExpress.XtraBars.ItemClickEventArgs e)
        {
            NewK(false);
        }

        private void btnNewKVermittlung_ItemClick(object sender, DevExpress.XtraBars.ItemClickEventArgs e)
        {
            NewK(true);
        }

        private void edtShowAllMasterBudgets_EditValueChanged(object sender, EventArgs e)
        {
            AllMasterBudgetsVisible = edtShowAllMasterBudgets.Checked;
        }

        private void NewK(bool vermittlung)
        {
            // Prüfe, ob eine aktive Fallführung existiert
            object obj = DBUtil.ExecuteScalarSQL("SELECT FaFallID FROM FaLeistung WHERE BaPersonID = {0} AND FaProzessCode = 200 AND DatumBis IS NULL", this.BaPersonID);

            if (obj == null)
            {
                KissMsg.ShowInfo("Ohne aktive Fallführung kann keine Klientengelder-Verwaltung erzeugt werden.");
                return;
            }

            KissLookupDialog dlg = new KissLookupDialog();
            if (!dlg.SearchData(@"
            SELECT DISTINCT
                   FaFallID$        = FAL.FaFallID,
                   BaPersonID$      = PRS.BaPersonID,
                   Person           = PRS.Name + isnull(', ' + PRS.Vorname,''),
                   [hat aktives K]  = convert(bit, case when exists
                                       (SELECT 1
                                        FROM   FaLeistung
                                        WHERE  FaFallID = FAL.FaFallID AND
                                               BaPersonID = PRS.BaPersonID AND
                                               FaProzessCode = 500 AND
                                               DatumBis is null)
                                       then 1 else 0 end)
            FROM   FaFall FAL
                   INNER JOIN FaFallPerson FPR ON FPR.FaFallID = FAL.FaFallID
                   INNER JOIN BaPerson     PRS ON PRS.BaPersonID = FPR.BaPersonID
            WHERE  FAL.BaPersonID = {0} AND
                   FAL.DatumBis is null
            ORDER BY Person",
         this.BaPersonID.ToString(),
         false))
                return;

            if ((bool)dlg["hat aktives K"])
            {
                KissMsg.ShowInfo(dlg["Person"].ToString() + " hat bereits eine aktive Verwaltung der Klientengelder!");
                return;
            }

            int BaPersonID = (int)dlg["BaPersonID$"];
            int FaFallID = (int)dlg["FaFallID$"];

            // neue FaLeistung
            SqlQuery qry = DBUtil.OpenSQL(@"

              declare @LastFaLeistungID int
              declare @LastDatumBis datetime

              declare @NewFaLeistungID int
              declare @NewDatumVon datetime

              --letzte abgeschlossene K-Leistung dieser Person abfragen
              select top 1 @LastFaLeistungID = FaLeistungID, @LastDatumBis = DatumBis
              from   FaLeistung
              where  FaFallID = {0}
                 and BaPersonID = {1}
                 and ModulID = 5 --Wir wollen die letzte K-Leistung
                 and DatumBis is not null
              order by DatumBis desc

              --existiert eine abgeschlossene K-Leistung und ist das Datum grösser oder gleich heute, wird der Folgetag als neues DatumVon genommen
              if @LastDatumBis >= GetDate()
                set @NewDatumVon = dbo.fnDateOf(DateAdd(d,1,@LastDatumBis))
              else
                set @NewDatumVon = dbo.fnDateOf(GetDate()) --sonst (keine Leistung oder in der Vergangenheit abgeschlossen): DatumVon = aktuelles Datum

              insert FaLeistung (FaFallID, BaPersonID, UserID, DatumVon, ModulID, FaProzessCode, EroeffnungsGrundCode, Creator, Created, Modifier, Modified)
              values ({0}, {1}, {2}, @NewDatumVon, 5, 500, {3}, {4}, GetDate(), {4}, GetDate())

              select FaLeistungID = convert(int,@@identity)",
            FaFallID,
            BaPersonID,
            Session.User.UserID,
            vermittlung ? 50002 : 50001,
            DBUtil.GetDBRowCreatorModifier());

            int FaLeistungID = (int)qry["FaLeistungID"];

            //Eintrag Fallverlaufsprotokoll
            DBUtil.ExecSQL(@"
              INSERT FaJournal (FaFallID,FaLeistungID,UserID,BaPersonID,Text)
            VALUES ({0},{1},{2},{3},{4})",
         FaFallID,
         FaLeistungID,
         Session.User.UserID,
         BaPersonID,
         vermittlung ? "Verwaltung Klientengelder (Vermittlungsfall) angelegt" :
                            "Verwaltung Klientengelder (KES-Massnahme) angelegt");

            FormController.SendMessage("FrmFall", "Action", "RefreshTree");
            this.kissTree.MoveFirst();
            this.kissTree.FocusedNode.Expanded = true;

            // Refresh Tree
            //DisplayTree("CtlKgLeistung" + FaLeistungID.ToString());
        }

        private void SetPopupMenuVisibility(DevExpress.XtraBars.BarButtonItem btn, bool IsVisible)
        {
            if (IsVisible)
                btn.Visibility = DevExpress.XtraBars.BarItemVisibility.Always;
            else
                btn.Visibility = DevExpress.XtraBars.BarItemVisibility.Never;
        }

        #endregion

        private void kissTree_CustomDrawNodeCell(object sender, DevExpress.XtraTreeList.CustomDrawNodeCellEventArgs e)
        {
            if (e.Column.Name == "colName" && "CtlKgLeistung" == e.Node.GetValue("ClassName") as string)
            {
                e.Appearance.Font = new System.Drawing.Font("Arial", 12F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Pixel);
            }
        }
    }
}
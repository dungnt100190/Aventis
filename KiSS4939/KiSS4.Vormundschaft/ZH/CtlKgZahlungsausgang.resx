<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <metadata name="qryZahlungsausgang.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>17, 17</value>
  </metadata>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="edtDokumentHidden.Properties.Buttons" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        iVBORw0KGgoAAAANSUhEUgAAAAwAAAAQCAYAAAAiYZ4HAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8
        YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAABbSURBVDhPY2AAAmNj4/+4MEgeA4AU//8/EwOLiYn9B2Gc
        GtLSGP4jY5BikEEYmgjZANIAUgO3CZcGZGdi1YDuJBgfpJE6NmALKZjYqJPIijh8KRYmhzXlEhIEANZ8
        ev1ASni6AAAAAElFTkSuQmCC
</value>
  </data>
  <data name="edtDokumentHidden.Properties.Buttons1" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        iVBORw0KGgoAAAANSUhEUgAAAAwAAAAQCAYAAAAiYZ4HAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8
        YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAABYSURBVDhPY2AAgv/GDP9BGMQmCsA0kKUJlw0YhuGzBafN
        2PxC0H/ICggqRg4xohTDPEySYnRbCMYLcmgRjBd0p+B1GklBSijScMYy0cmCUEiQHMywoAbRAOu5cfWb
        3MWkAAAAAElFTkSuQmCC
</value>
  </data>
  <data name="edtDokumentHidden.Properties.Buttons2" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        iVBORw0KGgoAAAANSUhEUgAAAAwAAAAQCAYAAAAiYZ4HAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8
        YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAABESURBVDhPY2AAAmNj4/+4MEgeA4AU//8/EwOLiYn9B2GS
        NIAMwtBEyAaQBpAauE24NCA7c1TDcAklfCkWJoc15RISBADnY6JvWzLnEAAAAABJRU5ErkJggg==
</value>
  </data>
  <data name="edtDokumentHidden.Properties.Buttons3" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        iVBORw0KGgoAAAANSUhEUgAAAAwAAAAQCAYAAAAiYZ4HAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8
        YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAABmSURBVDhPrVILCkAhCPMUXsTTdlprD3wE0z6QIIFuTk2R
        YWbmlSNPBrB7I1dVh18RUIhIOwUQgPmVKsLc5ltCM6EFlAoAHxMCvHq/weehrxRiK8ctZb8dsbdrzZRI
        YXWxkUsvdxfsDTKNHjjMKwAAAAAASUVORK5CYII=
</value>
  </data>
  <data name="picTitel.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8
        YQUAAAAgY0hSTQAAeiYAAICEAAD6AAAAgOgAAHUwAADqYAAAOpgAABdwnLpRPAAAAH5JREFUOE+1k4EK
        wCAIRP10/7ztRjeciWmwQAblvc50IiLjNFQVWhknC7ovgKDoiz0XMcAmwZZ158C5Aw+ysHm2Au4k1FSN
        ENB5zH8AVfuzfa6NHf9Pg/wcNACc3GUSdyVYIXPLo0zLvBVCrtS8t2uFLyD7G63VSCyFukMdNy8jIYRu
        w1w30AAAAABJRU5ErkJggg==
</value>
  </data>
  <data name="qryZahlungsausgang.SelectStatement" xml:space="preserve">
    <value>SELECT
  ZEI.KgZahlungseingangID,
  ZEI.Datum,
  ZEI.BaPersonID,
  ZEI.BaInstitutionID,
  ZEI.Debitor,
  ZEI.KgKontoID,
  ZEI.Betrag,
  ZEI.Mitteilung,
  ZEI.PscdKontoKlient,
  ZEI.PscdKontoauszug,
  ZEI.PscdKontoauszugPos,
  ZEI.Bemerkung,
  ZEI.KgZahlungseingangArtCode,
  ZEI.Ausgeglichen,
  ZEI.ErstelltUserID,
  ZEI.ErstelltDatum,
  ZEI.MutiertUserID,
  ZEI.MutiertDatum,
  Mandant     = PRS.NameVorname,
--  Adresse     = PRS.Wohnsitz,
  [Beist. oder Vorm.] = (SELECT TOP 1 USR.[User]
                FROM [dbo].[vwVmGetMTName] USR
                WHERE USR.BaPersonID = ZEI.BaPersonID
                ORDER BY CASE WHEN ZEI.Datum BETWEEN ISNULL(USR.DatumVon, '17530101') AND ISNULL(USR.DatumBis, '30001231') THEN 2
                  ELSE 1 END DESC, USR.DatumVon DESC),
  FallBaPersonID = (SELECT TOP 1 FAL.BaPersonID FROM FaLeistung LEI INNER JOIN FaFall FAL ON FAL.FaFallID = LEI.FaFallID WHERE LEI.BaPersonID = ZEI.BaPersonID ORDER BY CASE WHEN LEI.FaProzessCode = 500 THEN 1 ELSE 0 END DESC, LEI.DatumVon DESC),
  GVC_Code = ISNULL(COD.Text + ' ', '') + '(' + CONVERT(VARCHAR(5), ZEI.KgZahlungseingangArtCode) + ')'
FROM   dbo.KgZahlungseingang       ZEI
  LEFT JOIN dbo.vwPerson     PRS WITH (READUNCOMMITTED) ON PRS.BaPersonID = ZEI.BaPersonID
  LEFT JOIN dbo.XLOVCode COD ON COD.LOVName = 'KgZahlungseingangArt' AND COD.Code = ZEI.KgZahlungseingangArtCode
WHERE (ZEI.KgZahlungseingangArtCode &lt;&gt; 299 /*PSCD-Auszahlungen*/ AND ZEI.Betrag &lt; 0)
--- AND ZEI.Datum &gt;= {edtDatumVonX}
--- AND ZEI.Datum &lt;= {edtDatumBisX}
--- AND ZEI.BaPersonID = {edtBaPersonIDX.LookupID} 
--- AND ABS(ZEI.Betrag) &gt;= {edtBetragVonX}
--- AND ABS(ZEI.Betrag) &lt;= {edtBetragBisX}
--- AND ({edtNurAusgeglichenX} = 0 OR ZEI.Ausgeglichen = 0)
--- AND Mitteilung like '%' + {edtMitteilungX} + '%'
--- AND (({rbtnLebend} = 0 AND PRS.Sterbedatum IS NULL) OR ({rbtnLebend} = 1 AND PRS.Sterbedatum IS NOT NULL)) -- Wenn "Nur Lebende" selektiert ist, muss das Sterbedatum leer sein -- Wenn "Nur Todesfaelle" selektiert ist, muss das Sterbedatum gesetzt sein
--- AND ISNULL(COD.Text + ' ', '') + '(' + CONVERT(VARCHAR(5), ZEI.KgZahlungseingangArtCode) + ')' LIKE '%' + {edtGVC} + '%'
order by ZEI.Datum
</value>
  </data>
  <metadata name="qryKontoVorschau.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>305, 17</value>
  </metadata>
  <data name="qryKontoVorschau.SelectStatement" xml:space="preserve">
    <value>DECLARE @KontoNr varchar(10), @BaPersonID int
SET @BaPersonID = {0}
SET @KontoNr = {1}

--SET @BaPersonID = 197985
--SET @KontoNr = '3310'

SELECT
  BUC.KgBuchungID,
  BUC.BuchungsDatum,
  Buchungstext = BUC.Text,
  BetragHaben = CASE WHEN (BUC.HabenKtoNr = @KontoNr) THEN BUC.Betrag ELSE $0.00 END,
  BetragSoll =  CASE WHEN (BUC.SollKtoNr = @KontoNr) THEN BUC.Betrag ELSE $0.00 END,
  Kreditor = ZAH.Empfaenger,
  Status   = BUC.KgBuchungStatusCode,
  Saldo = NULL
FROM   dbo.FaLeistung    LEI WITH (READUNCOMMITTED)
  INNER JOIN dbo.KgPeriode PER WITH (READUNCOMMITTED) ON PER.FaLeistungID = LEI.FaLeistungID
  INNER JOIN dbo.KgBuchung BUC WITH (READUNCOMMITTED) ON BUC.KgPeriodeID = PER.KgPeriodeID
    AND (BUC.HabenKtoNr = @KontoNr OR BUC.SollKtoNr = @KontoNr)
  LEFT JOIN dbo.vwBaZahlungsweg ZAH ON ZAH.BaZahlungswegID = BUC.BaZahlungswegID
WHERE LEI.BaPersonID = @BaPersonID --AND BUC.KgBuchungStatusCode &lt;&gt; 8 /*storniert*/
ORDER BY BUC.BuchungsDatum DESC, BUC.KgBuchungID DESC

</value>
  </data>
  <metadata name="qryKgBuchung.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>181, 18</value>
  </metadata>
  <data name="qryKgBuchung.SelectStatement" xml:space="preserve">
    <value>SELECT
 BUC.KgBuchungID,
 BUC.KgPeriodeID,
 BUC.KgBuchungTypCode,
 BUC.KgZahlungseingangID,
 BUC.BuchungsDatum,
 BUC.SollKtoNr,
 BUC.HabenKtoNr,
 BUC.Betrag,
 BUC.Text,
 BUC.ValutaDatum,
 BUC.ErstelltUserID,
 BUC.ErstelltDatum,
 BUC.MutiertUserID,
 BUC.MutiertDatum,
 BUC.KgBuchungTS,
 Konto  = KON.KontoNr + ' ' + KON.KontoName,
 AnzahlDokumente = DOC.Anzahl,
 DocIDsBuchung = DOC.IDs
FROM dbo.KgBuchung BUC
 INNER JOIN dbo.KgKonto KON ON KON.KontoNr = BUC.SollKtoNr AND BUC.KgPeriodeID = KON.KgPeriodeID
 INNER JOIN dbo.KgKonto KON2 ON KON2.KontoNr = BUC.HabenKtoNr AND BUC.KgPeriodeID = KON2.KgPeriodeID
 OUTER APPLY (SELECT Anzahl = Count(1), IDs = dbo.ConcDistinct(KgDokumentID)
                    FROM   dbo.KgDokument WITH (READUNCOMMITTED)
                    WHERE KgBuchungID = BUC.KgBuchungID
                    GROUP BY KgBuchungID) DOC
WHERE KgZahlungseingangID = {0} AND KON2.KgKontoartCode = 1 /*Kontokorrentkonto*/
ORDER BY BUC.Buchungsdatum</value>
  </data>
  <data name="edtBuchungsdatum.Properties.Buttons" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        iVBORw0KGgoAAAANSUhEUgAAAAwAAAAQCAYAAAAiYZ4HAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8
        YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAABRSURBVDhPY2AAAmNj4//EYJBaMAApRqbhErjkiDEdZiiK
        Dcgmo7NxamhoYAA7DwSQ2Vg1gBTAFKHT1NGA7AyibBhuGoiKB5Jimpj0hM9AnHIA7aiPJlUTWpwAAAAA
        SUVORK5CYII=
</value>
  </data>
  <data name="edtDatumBisX.Properties.Buttons" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        iVBORw0KGgoAAAANSUhEUgAAAAwAAAAQCAYAAAAiYZ4HAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8
        YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAABRSURBVDhPY2AAAmNj4//EYJBaMAApRqbhErjkiDEdZiiK
        Dcgmo7NxamhoYAA7DwSQ2Vg1gBTAFKHT1NGA7AyibBhuGoiKB5Jimpj0hM9AnHIA7aiPJlUTWpwAAAAA
        SUVORK5CYII=
</value>
  </data>
  <data name="edtDatumVonX.Properties.Buttons" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        iVBORw0KGgoAAAANSUhEUgAAAAwAAAAQCAYAAAAiYZ4HAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8
        YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAABRSURBVDhPY2AAAmNj4//EYJBaMAApRqbhErjkiDEdZiiK
        Dcgmo7NxamhoYAA7DwSQ2Vg1gBTAFKHT1NGA7AyibBhuGoiKB5Jimpj0hM9AnHIA7aiPJlUTWpwAAAAA
        SUVORK5CYII=
</value>
  </data>
  <metadata name="qryDocument.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>457, 17</value>
  </metadata>
  <data name="qryDocument.SelectStatement" xml:space="preserve">
    <value>SELECT
  XDOC.DocumentID,
  XDOC.DateLastSave,
  XDOC.DateCreation,
  XDOC.XDocumentTS,
  KDOK.KgDokumentTypCode,
  KDOK.Stichwort
FROM
  dbo.KgDokument KDOK
  INNER JOIN dbo.XDocument XDOC ON XDOC.DocumentID = KDOK.DocumentID
WHERE KDOK.KgDokumentID IN (SELECT SplitValue FROM dbo.fnSplitStringToValues({0}, ',', 1))</value>
  </data>
</root>
<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <metadata name="qryKgBuchung.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>17, 17</value>
  </metadata>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="picTitel.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8
        YQUAAAAgY0hSTQAAeiYAAICEAAD6AAAAgOgAAHUwAADqYAAAOpgAABdwnLpRPAAAAIhJREFUOE+tTgkO
        wCAM8un+3IUqk3YaazIS0sOCFEWttZFjlccQKe8gBq7PwI4XCTI0NIAGrfX5VHE7NFjMBB3zqONbg8E3
        wSlRMPAJ0HNmHxkMfk6wmmMNBncJsAfFwP+InrP2pOwMJlITFfBnziok3iNUzGRGDNiRmrDijdyJAXcY
        CeFeXMoDgGnIDRgG11UAAAAASUVORK5CYII=
</value>
  </data>
  <metadata name="qryKgDokumente.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>142, 17</value>
  </metadata>
  <data name="qryKgDokumente.SelectStatement" xml:space="preserve">
    <value>SELECT KDO.*, DOC.*
FROM   dbo.KgPosition POS WITH (READUNCOMMITTED)
       INNER JOIN dbo.KgBudget   BDG WITH (READUNCOMMITTED) ON BDG.KgBudgetID = POS.KgBudgetID
       INNER JOIN dbo.KgDokument KDO WITH (READUNCOMMITTED) ON KDO.KgPositionID = POS.KgPositionID or
                                    KDO.KgBudgetID = POS.KgBudgetID or
                                    KDO.KgBudgetID = BDG.KgMasterbudgetID
       LEFT JOIN dbo.XDocument   DOC WITH (READUNCOMMITTED) ON DOC.DocumentID = KDO.DocumentID
WHERE  POS.KgPositionID = {0}
ORDER BY KDO.KgDokumentTypCode, Stichwort</value>
  </data>
  <data name="edtDocument.Properties.Buttons" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        iVBORw0KGgoAAAANSUhEUgAAAAwAAAAQCAYAAAAiYZ4HAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8
        YQUAAAAJcEhZcwAAEnQAABJ0Ad5mH3gAAABfSURBVDhPrY7RDYAwCESZgkXYqTs5LeYqRFsBNfaS98W9
        cISIiGb0whwcVLcbzNyx2hkXWqMBlF206pGnD2CYlwlXQmGe5KRCxRohmgNSoWKNEM0BqVDxX3iD1b+E
        aAfWfHr9nSYTxgAAAABJRU5ErkJggg==
</value>
  </data>
  <data name="edtErfassungDatum.Properties.Buttons" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        iVBORw0KGgoAAAANSUhEUgAAAAwAAAAQCAYAAAAiYZ4HAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8
        YQUAAAAJcEhZcwAAEnQAABJ0Ad5mH3gAAABMSURBVDhPYwABY2Pj/8RgsGIQgHFQBKEAqxyIQwyGKsdu
        MjrAqaGhgQErG6sGkAKYInSaOhpAYERrAAFkNk4NuACGBmIwVDkpgIEBAO2ojyYwtBe7AAAAAElFTkSu
        QmCC
</value>
  </data>
  <data name="qryKgBuchung.SelectStatement" xml:space="preserve">
    <value>IF OBJECT_ID('tempdb..#tmpZahllauf') IS NOT NULL BEGIN
  DROP TABLE #tmpZahllauf
END

SELECT BUC.KgBuchungID,
       BUC.ValutaDatum,
       BUC.[Text],
       BUC.Betrag,
       BUC.KgBuchungStatusCode,
       BUC.pscdfehlermeldung,
       BUC.BuchungsDatum,
       BUC.KgPositionID,
       BUC.KgBuchungTS,
       Tage             = datediff(d,GetDate(),BUC.ValutaDatum),
       Doc              = CASE WHEN exists (SELECT 1 FROM dbo.KgDokument WITH (READUNCOMMITTED) WHERE KgPositionID = BUC.KgPositionID) THEN 'x' ELSE '' END,
       Konto            = KTOS.KontoNr + ' ' + KTOS.KontoName,
       KontoNr          = KTOS.KontoNr,
       Kreditor         = KRE.Kreditor + CHAR(13) + CHAR(10) +
                          KRE.ZusatzInfo,
       KreditorLinie    = KRE.Kreditor + isnull(KRE.InstitutionAdresse,KRE.PersonAdresse) + KRE.Zahlungsweg,
       Mandant          = PRS.Name + IsNull(', ' + PRS.Vorname, ''),
       BaPersonID       = PRS.BaPersonID,
       Zahlart          = ART.Text,
       Sel              = case when BUC.KgBuchungStatusCode in (2,4) or 
                                   (BUC.KgBuchungStatusCode = 5 and {edtSucheStatus5} = 1)
                               then convert(bit,0)
                          end,
       FallBaPersonID   = FAL.BaPersonID,
       JumpToMBPfad     = 'CtlKgLeistung' + convert(varchar, LEI.FaLeistungID) +
                          '\Masterbudget' + convert(varchar, BDG.KgMasterBudgetID) + 
                          '\Monatsbudget' + convert(varchar, BDG.KgBudgetID),
       ZKBSaldoKiss     = ZKBX.ZKBSaldoKiss,
       ZKBSaldoMT940     = ZKBX.SaldoMT940,
       TotalEinzahlungen = ZKBX.TotalEinzahlungen,
       TotalAuszahlungen = CAST(NULL AS MONEY),
       PendenteBarbelege = ZKBX.PendenteBarbelege,
       Saldovorschau     = CAST(NULL AS MONEY), 
       Achtung           = CAST('' AS VARCHAR(10)),
       ZahlwegDatumVon   = ZAH.DatumVon,
       ZahlwegDatumBis   = ZAH.DatumBis
INTO   #tmpZahllauf
FROM   dbo.KgBuchung BUC WITH (READUNCOMMITTED)
       INNER JOIN dbo.KgKonto       KTOH WITH (READUNCOMMITTED) ON KTOH.KgPeriodeID = BUC.KgPeriodeID and
                                        KTOH.KontoNr = BUC.HabenKtoNr AND
                                        KTOH.KgKontoArtCode = 3 -- Kreditorkonto
       LEFT  JOIN dbo.KgPosition    POS WITH (READUNCOMMITTED)  ON POS.KgPositionID = BUC.KgPositionID
       LEFT  JOIN dbo.KgBudget      BDG WITH (READUNCOMMITTED)  ON BDG.KgBudgetID = POS.KgBudgetID			-- Monatsbudget
       LEFT  JOIN dbo.KgBudget      MBD WITH (READUNCOMMITTED)  ON MBD.KgBudgetID = BDG.KgMasterBudgetID	-- Masterbudget
       LEFT JOIN dbo.KgKonto       KTOS WITH (READUNCOMMITTED) ON KTOS.KgPeriodeID = BUC.KgPeriodeID and
                                        KTOS.KontoNr = BUC.SollKtoNr -- Aufwandkonto
       LEFT JOIN KgKonto           ZKB WITH (READUNCOMMITTED)  ON ZKB.KgPeriodeID = BUC.KgPeriodeID and
                                        ZKB.KgKontoartCode = 1 -- Kontokorrent
       INNER JOIN dbo.KgPeriode     PER WITH (READUNCOMMITTED)  ON PER.KgPeriodeID = BUC.KgPeriodeID
       INNER JOIN dbo.FaLeistung    LEI WITH (READUNCOMMITTED)  ON LEI.FaLeistungID = PER.FaLeistungID
       INNER JOIN dbo.FaFall        FAL WITH (READUNCOMMITTED)  ON FAL.FaFallID = LEI.FaFallID
       INNER JOIN dbo.BaPerson      PRS  on PRS.BaPersonID = LEI.BaPersonID
       LEFT  JOIN dbo.vwKreditor    KRE  on KRE.BaZahlungswegID = BUC.BaZahlungswegID
       LEFT  JOIN dbo.XLOVCode      ART WITH (READUNCOMMITTED)  ON ART.LOVName = 'KgAuszahlungsArt' and
                                        ART.Code = BUC.KgAuszahlungsArtCode
       LEFT  JOIN dbo.BaZahlungsweg ZAH WITH (READUNCOMMITTED)  ON ZAH.BaZahlungswegID = PER.BaZahlungswegID
       INNER JOIN
       (-- Finde die Kontenstände für die Beteiligten Klienten
          SELECT TMP.FaLeistungID,--ZKB3.KgKontoID, ZKB3.Vorsaldo,
            ZKB5.SaldoMT940,
            TotalEinzahlungen = (select isNull(sum(Betrag),0)
                            from   dbo.KgZahlungseingang WITH (READUNCOMMITTED)
                            where  BaPersonID = LEI2.BaPersonID and
                                   Ausgeglichen = 0 and
                                   (KgZahlungseingangArtCode between 300 and 399 or 
                                    KgZahlungseingangArtCode = 100 or 
                                    KgZahlungseingangArtCode is null)),
            /*UngeklaerteAuszahlungen = (SELECT ISNULL(SUM(Betrag),0)
                                       FROM   dbo.KgZahlungseingang WITH (READUNCOMMITTED)
                                       WHERE  BaPersonID = LEI2.BaPersonID
                                          AND Ausgeglichen = 0
                                          AND KgZahlungseingangArtCode BETWEEN 200 AND 298),*/
            ZKBSaldoKiss = isNull(ZKB3.Vorsaldo , $0.00) +
                            ISNULL(
                              (SELECT SUM(CASE WHEN BUC2.SollKtoNr = ZKB4.KontoNr THEN BUC2.Betrag ELSE - BUC2.Betrag END)
                              FROM dbo.KgKonto           ZKB4 WITH (READUNCOMMITTED)
                                INNER JOIN dbo.KgBuchung BUC2 WITH (READUNCOMMITTED) ON (BUC2.KgPeriodeID = ZKB4.KgPeriodeID
                                  AND BUC2.SollKtoNr = ZKB4.KontoNr) OR (BUC2.KgPeriodeID = ZKB4.KgPeriodeID AND BUC2.HabenKtoNr = ZKB4.KontoNr)
                              WHERE ZKB4.KgKontoID = ZKB3.KgKontoID), $0.00),
            PendenteBarbelege = (SELECT ISNULL(SUM(Betrag),0)
                                 FROM dbo.KgBuchung BUC WITH (READUNCOMMITTED)
                                   INNER JOIN dbo.KgPeriode PER WITH (READUNCOMMITTED) ON PER.KgPeriodeID = BUC.KgPeriodeID                                   
                                 WHERE PER.FaLeistungID = LEI2.FaLeistungID
                                   AND KgAuszahlungsArtCode = 103 -- bar 
                                   AND KgBuchungStatusCode = 3 AND TransferDatum IS NOT NULL -- zu PSCD transferiert
                                   AND BarbezugDatum IS NOT NULL)
          FROM (SELECT DISTINCT FaLeistungID
                FROM dbo.KgBuchung       BUC  WITH (READUNCOMMITTED)
                  INNER JOIN dbo.KgKonto KTOH WITH (READUNCOMMITTED) ON KTOH.KgPeriodeID = BUC.KgPeriodeID and
                                                                        KTOH.KontoNr = BUC.HabenKtoNr AND
                                                                        KTOH.KgKontoArtCode = 3 -- Kreditorkonto
                  LEFT JOIN dbo.KgPeriode     PER WITH (READUNCOMMITTED)  ON PER.KgPeriodeID = BUC.KgPeriodeID
                WHERE BUC.KgBuchungStatusCode in (2,4,5) AND -- freigegeben + ausgedruckt +  Zahlauftrag fehlerhaft
                      BUC.ValutaDatum IS NOT NULL
---                      and BUC.ValutaDatum &lt;= {edtSucheValutaBis}
---                      and BUC.KgAuszahlungsArtCode = {edtSucheAuszahlungsArt}
                ) TMP
        LEFT JOIN FaLeistung LEI2 ON LEI2.FaLeistungID = TMP.FaLeistungID
       OUTER APPLY (SELECT TOP 1 ZKB2.KgKontoID, ZKB2.Vorsaldo
                    FROM KgPeriode        PER WITH (READUNCOMMITTED)
                      INNER JOIN KgKonto  ZKB2 WITH (READUNCOMMITTED) ON ZKB2.KgPeriodeID = PER.KgPeriodeID AND ZKB2.KgKontoartCode = 1  -- Kontokorrent
                    WHERE PER.FaLeistungID = TMP.FaLeistungID
                    ORDER BY PeriodeVon DESC) ZKB3
       OUTER APPLY (SELECT TOP 1 ZKB6.SaldoMT940
                    FROM KgPeriode        PER WITH (READUNCOMMITTED)
                      INNER JOIN KgKonto  ZKB6 WITH (READUNCOMMITTED) ON ZKB6.KgPeriodeID = PER.KgPeriodeID AND ZKB6.KgKontoartCode = 1  -- Kontokorrent
                    WHERE PER.FaLeistungID = TMP.FaLeistungID AND ZKB6.SaldoMT940 IS NOT NULL
                    ORDER BY PeriodeVon DESC) ZKB5
       ) ZKBX ON ZKBX.FaLeistungID = PER.FaLeistungID
WHERE  BUC.KgBuchungStatusCode in (2,4,5) AND -- freigegeben + ausgedruckt +  Zahlauftrag fehlerhaft
       BUC.ValutaDatum IS NOT NULL AND
       ISNULL(MBD.KgBewilligungCode,5) &lt;&gt; 9	-- Zahlungen aus gesperrten Budgets werden nicht mehr zugelassen 
--- and BUC.ValutaDatum &lt;= {edtSucheValutaBis}
--- and BUC.KgAuszahlungsArtCode = {edtSucheAuszahlungsArt}
--- and PscdFehlermeldung like '%' + {edtSucheFehlermeldung} + '%'
order by BUC.ValutaDatum, Mandant
OPTION (FORCE ORDER)

UPDATE TMP
SET TotalAuszahlungen = (select sum(Betrag) from #tmpZahllauf where BaPersonID = TMP.BaPersonID)
FROM #tmpZahllauf TMP 

UPDATE #tmpZahllauf
SET Saldovorschau = ISNULL(ZKBSaldoKiss, ZKBSaldoMT940) + 
                    ISNULL(TotalEinzahlungen, 0) - 
                    ISNULL(PendenteBarbelege, 0) - 
                    ISNULL(TotalAuszahlungen, 0)

UPDATE #tmpZahllauf
SET Achtung       = CASE WHEN Saldovorschau &lt; 0 THEN '!' ELSE '' END +
                    CASE WHEN GETDATE() NOT BETWEEN ISNULL(ZahlwegDatumVon, GETDATE()) and 
                              ISNULL(ZahlwegDatumBis, GETDATE()) THEN '?' ELSE '' END


SELECT * FROM #tmpZahllauf
WHERE 1 = 1 
--- AND ({edtSucheOhneWarnungen} = 1 and len(Achtung) = 0) or ({edtSucheMitWarnungen} = 1 and len(Achtung) &gt; 0)

DROP TABLE #tmpZahllauf

</value>
  </data>
  <data name="edtSucheValutaBis.Properties.Buttons" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        iVBORw0KGgoAAAANSUhEUgAAAAwAAAAQCAYAAAAiYZ4HAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8
        YQUAAAAJcEhZcwAAEnQAABJ0Ad5mH3gAAABMSURBVDhPYwABY2Pj/8RgsGIQgHFQBKEAqxyIQwyGKsdu
        MjrAqaGhgQErG6sGkAKYInSaOhpAYERrAAFkNk4NuACGBmIwVDkpgIEBAO2ojyYwtBe7AAAAAElFTkSu
        QmCC
</value>
  </data>
</root>
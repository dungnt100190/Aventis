#region Header

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3053
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#endregion

using System;
using System.Collections;
using System.Windows.Forms;
using Kiss.Infrastructure;
using KiSS4.Common;
using KiSS4.DB;
using KiSS4.Gui;

namespace KiSS4.Main.ZH
{
    public class FrmFall : KiSS4.Gui.KissChildForm
    {
        #region Fields

        private ArrayList alCtlFall = new ArrayList();
        private System.ComponentModel.IContainer components;
        private CtlFall ctlFall;
        private System.Windows.Forms.ImageList imgListFrmFall;
        private bool inConstructor = true;
        private KiSS4.Gui.KissTabControlEx tabFall;
        private SharpLibrary.WinControls.TabPageEx tpgFall;

        #endregion

        #region Constructors

        public FrmFall()
        {
            this.InitializeComponent();

            new Belegleser(this);

            RestoreOnLogin = false;

            tabFall.TabPages.Clear();
            inConstructor = false;
        }

        #endregion

        #region Windows Form Designer generated code

        /// <summary>
        /// Required method for Designer support - do not modify
        /// the contents of this method with the code editor.
        /// </summary>
        private void InitializeComponent()
        {
            this.components = new System.ComponentModel.Container();
            this.tabFall = new KiSS4.Gui.KissTabControlEx();
            this.tpgFall = new SharpLibrary.WinControls.TabPageEx();
            this.imgListFrmFall = new System.Windows.Forms.ImageList(this.components);
            this.tabFall.SuspendLayout();
            this.SuspendLayout();
            //
            // tabFall
            //
            this.tabFall.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(230)))), ((int)(((byte)(216)))), ((int)(((byte)(174)))));
            this.tabFall.Controls.Add(this.tpgFall);
            this.tabFall.Dock = System.Windows.Forms.DockStyle.Fill;
            this.tabFall.FirstTabMargin = 4;
            this.tabFall.FixedWidth = 500;
            this.tabFall.Location = new System.Drawing.Point(0, 0);
            this.tabFall.Name = "tabFall";
            this.tabFall.ShowClose = false;
            this.tabFall.ShowFixedWidthTooltip = true;
            this.tabFall.ShowSelectedTextBold = true;
            this.tabFall.Size = new System.Drawing.Size(936, 531);
            this.tabFall.TabBaseColor = System.Drawing.Color.Transparent;
            this.tabFall.TabControlStyle = KiSS4.Gui.TabControlStyleType.Buttons;
            this.tabFall.TabIndex = 8;
            this.tabFall.TabPages.AddRange(new SharpLibrary.WinControls.TabPageEx[] {
                        this.tpgFall});
            this.tabFall.TabsAreaBackColor = System.Drawing.Color.Transparent;
            this.tabFall.TabsFitting = SharpLibrary.WinControls.TabsFitting.FixedWidth;
            this.tabFall.TabsLineColor = System.Drawing.Color.Black;
            this.tabFall.TabsLocation = SharpLibrary.WinControls.TabsLocation.Top;
            this.tabFall.TabsStyle = SharpLibrary.WinControls.TabsStyle.CustomImages;
            this.tabFall.Text = "kissTabControlEx1";
            this.tabFall.VerticalMargin = 9;
            this.tabFall.MouseUpButtonStyle += new System.Windows.Forms.MouseEventHandler(this.tabFall_MouseUpButtonStyle);
            this.tabFall.TabClosed += new SharpLibrary.WinControls.TabControlExTabChangeEventHandler(this.tabFall_TabClosed);
            //
            // tpgFall
            //
            this.tpgFall.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(247)))), ((int)(((byte)(239)))), ((int)(((byte)(231)))));
            this.tpgFall.ImageIndex = 0;
            this.tpgFall.Location = new System.Drawing.Point(6, 44);
            this.tpgFall.Name = "tpgFall";
            this.tpgFall.SelectedImageIndex = 1;
            this.tpgFall.Size = new System.Drawing.Size(924, 481);
            this.tpgFall.TabIndex = 0;
            this.tpgFall.Title = "tpgFall";
            //
            // imgListFrmFall
            //
            this.imgListFrmFall.ColorDepth = System.Windows.Forms.ColorDepth.Depth8Bit;
            this.imgListFrmFall.ImageSize = new System.Drawing.Size(16, 16);
            this.imgListFrmFall.TransparentColor = System.Drawing.Color.Transparent;
            //
            // FrmFall
            //
            this.ClientSize = new System.Drawing.Size(936, 531);
            this.Controls.Add(this.tabFall);
            this.Name = "FrmFall";
            this.Text = "Fallbearbeitung";
            this.KeyDown += new System.Windows.Forms.KeyEventHandler(this.FrmFall_KeyDown);
            this.tabFall.ResumeLayout(false);
            this.ResumeLayout(false);
        }

        #endregion

        #region Dispose

        /// <summary>
        /// Clean up any resources being used.
        /// </summary>
        protected override void Dispose(bool disposing)
        {
            if (disposing)
            {
                // Cleanup CtlFall
                foreach (object ctlFall in this.alCtlFall)
                {
                    ((CtlFall)((WeakReference)ctlFall).Target).Dispose();
                }
            }

            if (disposing)
            {
                if ((components != null))
                {
                    components.Dispose();
                }
            }
            base.Dispose(disposing);
        }

        #endregion

        #region Public Properties

        public override KissUserControl DetailControl
        {
            get { return this.GetCurrentCtlFall(); }
        }

        #endregion

        #region Public Methods

        public void DisplayModul(ModulID module)
        {
            if (tabFall.IsTabSelected())
            {
                if (tabFall.SelectedTab.Controls.Count > 0)
                {
                    ctlFall = GetCurrentCtlFall();
                    ctlFall.ShowModule((int)module);
                }
            }
        }

        /// <summary>
        /// Handle messages from FormController
        /// </summary>
        /// <param name="param">Containing all necessary parameters as key/value pairs</param>
        /// <returns>True, if successfully handles message or nothing done, false if something went wrong</returns>
        public override bool ReceiveMessage(System.Collections.Specialized.HybridDictionary param)
        {
            // we need at least one parameter to know what to do
            if (param == null || param.Count < 1)
            {
                // by default, nothing to do
                return true;
            }

            KissModulTree modulTree = null;
            CtlFall ctlFall;

            // action depending
            switch (param["Action"] as string)
            {
                case "ShowFall":
                    return this.ShowFall(param);

                case "RefreshControl":

                    // refresh detail control, get modulTree
                    if (param.Contains("Modul"))
                    {
                        ModulID? modul = param["Modul"] as ModulID?;
                        ctlFall = this.GetCurrentCtlFall();
                        if (ctlFall != null && modul.HasValue)
                        {
                            modulTree = ctlFall.GetModulTree(modul.Value);
                        }
                    }
                    else
                    {
                        modulTree = this.GetCurrentModulTree();
                    }

                    // validate
                    if (modulTree == null || modulTree.DetailControl == null || !(modulTree.DetailControl is KissUserControl))
                    {
                        // invalid state
                        return false;
                    }

                    // check if we have a filter for ControlName
                    if (param.Contains("ControlName") && modulTree.DetailControl.GetType().Name != Convert.ToString(param["ControlName"]))
                    {
                        // nothing more to do, control does not match
                        return true;
                    }

                    // get detail control
                    KissUserControl detailControl = (KissUserControl)modulTree.DetailControl;

                    // save pending changes first, to prevent loosing data
                    if (!detailControl.OnSaveData())
                    {
                        // data could not be saved
                        return false;
                    }

                    // refresh detailcontrol-data
                    detailControl.OnRefreshData();

                    // if we are here, everything is ok
                    return true;

                case "RefreshTree":
                    // Refresh tree of current, active Fall
                    modulTree = this.GetCurrentModulTree();
                    if (modulTree == null)
                    {
                        return false;
                    }
                    modulTree.Refresh();

                    ctlFall = this.GetCurrentCtlFall();
                    if (ctlFall != null)
                    {
                        ctlFall.RefreshFallIcons();
                    }
                    return true;

                case "JumpToNodeByFieldValue":
                    if (!param.Contains("FieldName")) param["FieldName"] = "ID";

                    if (this.ShowFall(param))
                    {
                        KissModulTree moduleTree = this.GetCurrentModulTree();
                        if (moduleTree != null)
                        {
                            moduleTree.FocusedNode = moduleTree.KissTree.FindNodeByFieldValue(param["FieldName"] as string, param["FieldValue"]);

                            if (moduleTree.DetailControl != null)
                            {
                                moduleTree.DetailControl.ReceiveMessage(param);
                            }
                            return true;
                        }
                    }
                    return false;

                case "JumpToZahlungsweg":
                    if (!param.Contains("FieldName")) param["FieldName"] = "ID";

                    if (this.ShowFall(param))
                    {
                        KissModulTree moduleTree = this.GetCurrentModulTree();
                        if (moduleTree != null)
                        {
                            moduleTree.FocusedNode = moduleTree.KissTree.FindNodeByFieldValue(param["FieldName"] as string, param["FieldValue"]);
                            moduleTree.DetailControl.ReceiveMessage(param);
                            return true;
                        }
                    }
                    return false;

                case "JumpFromPendenzen":
                    if (!param.Contains("FieldName")) param["FieldName"] = "ID";
                    if (!param.Contains("DokumenteID")) return false;
                    if (!param.Contains("XTaskID")) return false;

                    if (this.ShowFall(param))
                    {
                        KissModulTree moduleTree = this.GetCurrentModulTree();
                        if (moduleTree != null)
                        {
                            moduleTree.FocusedNode = moduleTree.KissTree.FindNodeByFieldValue(param["FieldName"] as string, param["FieldValue"]);
                            moduleTree.DetailControl.ReceiveMessage(param);
                            return true;
                        }
                    }
                    return false;

                case "JumpToPath":
                    if (this.ShowFall(param))
                    {
                        KissModulTree moduleTree = this.GetCurrentModulTree();
                        if (moduleTree != null)
                        {
                            return FormController.SendMessage(moduleTree, param);
                        }
                        return true;
                    }
                    return false;

                case "CloseFrmFall":
                    this.Close();
                    break;
            }

            // did not understand message
            return base.ReceiveMessage(param);
        }

        /// <summary>
        /// Handle messages from FormController
        /// </summary>
        /// <param name="param">Specific messages as key/value pair for current form</param>
        /// <returns>Specified object that has to be returned to sender</returns>
        public override object ReturnMessage(System.Collections.Specialized.HybridDictionary param)
        {
            // we need at least one parameter to know what to do
            if (param.Count < 1)
            {
                // by default, nothing to do
                return null;
            }

            // action depending
            switch (param["Action"] as string)
            {
                case "CurrentModulTree":
                    // get current modul tree
                    return this.GetCurrentModulTree();
            }

            // did not understand message
            return base.ReturnMessage(param);
        }

        /// <summary>
        /// Show fall control with person, name and modulid
        /// </summary>
        /// <param name="baPersonID">The id of the person to show</param>
        /// <param name="faFallID"></param>
        /// <param name="PersonName">The name of the person to show</param>
        /// <param name="modulID">The modulid to select</param>
        /// <returns>True if success, else false</returns>
        public bool ShowFall(int baPersonID, int faFallID, string PersonName, int modulID)
        {
            bool retVal = false;

            // Keine unterscheidung auf FaFallID
            faFallID = -1;

            try
            {
                // do not update form
                this.SuspendLayout();

                // search if we have the desired person already as a tab
                foreach (SharpLibrary.WinControls.TabPageEx page in tabFall.TabPages)
                {
                    if (baPersonID.Equals(page.Tag) && ((CtlFall)page.Controls[0]).FaFallID == faFallID)
                    {
                        // display Fall
                        tabFall.SelectTab(page);

                        // display Modul
                        if (page.Controls.Count > 0)
                        {
                            ctlFall = (CtlFall)page.Controls[0];
                            ctlFall.ShowModule(modulID);
                        }

                        // done
                        this.ResumeLayout();
                        return true;
                    }
                }

                // check if we already have a name
                if (DBUtil.IsEmpty(PersonName))
                {
                    try
                    {
                        PersonName = (string)DBUtil.ExecuteScalarSQL(@"
                            SELECT PRS.Name + ISNull(', ' + PRS.Vorname, '')
                            FROM BaPerson PRS
                            WHERE PRS.BaPersonID = {0}", baPersonID);
                    }
                    catch { }

                    // no person name
                    if (PersonName == null)
                    {
                        PersonName = "???";
                    }
                }

                // define name to show on tab page
                string PName = PersonName;
                if (PName.Length > 28)
                {
                    PName = PName.Substring(0, 25) + "...";
                }

                // create new tab page
                SharpLibrary.WinControls.TabPageEx newTabPage = new SharpLibrary.WinControls.TabPageEx();

                // setup new page
                newTabPage.Title = Convert.ToString(tabFall.TabPages.Count + 1) + ". " + PName;
                newTabPage.Tag = baPersonID;
                newTabPage.Margin = new Padding(0, 0, 4, 32);

                // create UserControl for Fall
                ctlFall = new CtlFall(baPersonID, faFallID);
                ctlFall.Parent = newTabPage;
                ctlFall.Dock = DockStyle.Fill;

                // Display new Fall
                tabFall.TabPages.Add(newTabPage);
                tabFall.SelectTab(newTabPage);

                // add ctlFall to array
                this.alCtlFall.Add(new WeakReference(ctlFall));

                // continue
                this.ResumeLayout(true);
                ApplicationFacade.DoEvents();

                // display modul
                retVal = ctlFall.ShowModule(modulID);

                // check if we have any tabs left. In case the user clicked on Close while the Fall was still building, we end up empty here
                if (tabFall.TabPages.Count == 0)
                {
                    // close form, no more tabs left
                    this.ResetLockCloseForm();  // Ensure that we can actually close the form here
                    this.Close();
                    retVal = false;
                }

                return retVal;
            }
            catch (Exception ex)
            {
                // show exception to user
                KissMsg.ShowError("FrmFall", "ErrorShowingFall", "Es ist ein Fehler beim Anzeigen des Falls aufgetreten.", ex);
            }
            finally
            {
                // ensure layout is resumed anyway
                this.ResumeLayout();
            }

            // If we reach this point, it failed
            return false;
        }

        #endregion

        #region Internal Methods

        /// <summary>
        /// Get current CtlFall from selected tab
        /// </summary>
        /// <returns>CtlFall or null if no tab is selected</returns>
        internal CtlFall GetCurrentCtlFall()
        {
            if (!tabFall.IsTabSelected())
            {
                return null;
            }
            else
            {
                return (CtlFall)tabFall.SelectedTab.Controls[0];
            }
        }

        /// <summary>
        /// Get current modul tree from selected tab
        /// </summary>
        /// <returns>ModulTree or null if no tab is selected</returns>
        internal KissModulTree GetCurrentModulTree()
        {
            // validate if we have a tab
            if (!tabFall.IsTabSelected())
            {
                return null;
            }
            else
            {
                return ((CtlFall)tabFall.SelectedTab.Controls[0]).CurrentModulTree;
            }
        }

        #endregion

        #region Private Methods

        private void FrmFall_KeyDown(object sender, System.Windows.Forms.KeyEventArgs e)
        {
            if (e.Modifiers == Keys.Alt && this.ctlFall != null)
            {
                switch (e.KeyCode)
                {
                    case Keys.B: this.ctlFall.ShowModule((int)ModulID.B); e.Handled = true; break;
                    case Keys.F: this.ctlFall.ShowModule((int)ModulID.F); e.Handled = true; break;
                    case Keys.S: this.ctlFall.ShowModule((int)ModulID.S); e.Handled = true; break;
                    case Keys.I: this.ctlFall.ShowModule((int)ModulID.I); e.Handled = true; break;
                    case Keys.V: this.ctlFall.ShowModule((int)ModulID.V); e.Handled = true; break;
                    case Keys.A: this.ctlFall.ShowModule((int)ModulID.A); e.Handled = true; break;
                }
            }
        }

        /// <summary>
        /// Show fall control with person, name and modulid
        /// </summary>
        /// <param name="param">The param.</param>
        /// <returns></returns>
        private bool ShowFall(System.Collections.Specialized.HybridDictionary param)
        {
            if (!param.Contains("BaPersonID") || param["BaPersonID"] == null) return false;

            if (!param.Contains("FaFallID") || DBUtil.IsEmpty(param["FaFallID"])) param["FaFallID"] = -1;
            if (!param.Contains("ModulID")) param["ModulID"] = ModulID.F;
            return ShowFall((int)param["BaPersonID"], (int)param["FaFallID"], param["PersonName"] as string, (int)param["ModulID"]);
        }

        private void tabFall_MouseUpButtonStyle(object sender, MouseEventArgs e)
        {
            // focus modultree
            if (GetCurrentModulTree() != null)
            {
                GetCurrentModulTree().Focus();
            }
        }

        private void tabFall_TabClosed(SharpLibrary.WinControls.TabPageEx page)
        {
            // check if we are in constructor
            if (inConstructor)
            {
                return;
            }

            // check if we have any tabs left
            if (tabFall.TabPages.Count == 0)
            {
                // close form, no more tabs left
                this.Close();
                return;
            }

            // dispose CtlFall
            if (this.alCtlFall.Count <= this.tabFall.TabPages.Count)
            {
                return;
            }

            // get all CtlFall on tabs
            ArrayList alTab = new ArrayList();
            foreach (SharpLibrary.WinControls.TabPageEx page2 in tabFall.TabPages)
            {
                // get CtlFall
                alTab.Add(page2.Controls[0]);
            }

            // dispose CtlFall that are no longer needed
            foreach (object wref in (ArrayList)this.alCtlFall.Clone())
            {
                if (!((WeakReference)wref).IsAlive)
                {
                    this.alCtlFall.Remove(wref);
                }
                else
                {
                    try
                    {
                        if (!alTab.Contains(((WeakReference)wref).Target))
                        {
                            ((CtlFall)((WeakReference)wref).Target).Dispose();
                            this.alCtlFall.Remove(wref);
                        }
                    }
                    catch { }
                }
            }
        }

        #endregion
    }
}
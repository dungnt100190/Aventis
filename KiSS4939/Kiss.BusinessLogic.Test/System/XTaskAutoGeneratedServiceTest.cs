using System;
using System.Collections.Generic;

using Kiss.BusinessLogic.Sys;
using Kiss.BusinessLogic.Sys.NodeEnumeration;
using Kiss.DataAccess.Fa;
using Kiss.DataAccess.Kes;
using Kiss.DataAccess.Sys;
using Kiss.DbContext;
using Kiss.DbContext.Constant;
using Kiss.DbContext.DTO.Kes;
using Kiss.Infrastructure.IoC;

using Microsoft.VisualStudio.TestTools.UnitTesting;
using Moq;

namespace Kiss.BusinessLogic.Test.System
{
    [TestClass]
    public class XTaskAutoGeneratedServiceTest
    {
        [TestMethod]
        public void InsertKesDokumentVersandPendenzCreatesPendenz()
        {
            // Arrange
            var xtagRepository = new Mock<XTaskAutoGeneratedRepository>();
            xtagRepository.Setup(moq => moq.GetByReferenceTableAndID(It.Is<string>(s => s.Equals(typeof(KesDokument).Name)), It.IsAny<int>()))
                            .Returns((XTaskAutoGenerated)null);

            xtagRepository.Setup(moq => moq.GetByReferenceTableAndID(It.Is<string>(s => s.Equals(typeof(KesAuftrag).Name)), It.IsAny<int>()))
                            .Returns(new XTaskAutoGenerated { XTask = new XTask() });

            var xtaskRepository = new Mock<XTaskRepository>();

            var kesAuftragRepository = new Mock<KesAuftragRepository>();
            kesAuftragRepository.Setup(moq => moq.GetById(It.IsAny<int>()))
                            .Returns(new KesAuftrag { DatumFrist = DateTime.Now });

            var kesDokumentRepository = new Mock<KesDokumentRepository>();
            kesDokumentRepository.Setup(moq => moq.GetByKesAuftragId(It.IsAny<int>(), It.Is<int>(i => i == 1), false))
                            .Returns(new List<KesDokumentDTO>());

            var faLeistungRepository = new Mock<FaLeistungRepository>();
            faLeistungRepository.Setup(moq => moq.GetById(It.IsAny<int>()))
                            .Returns(new FaLeistung { BaPersonID = 12345 });

            var ouwMock = new UnitOfWorkMock();
            ouwMock.RegisterRepository(uow => uow.XTaskAutoGenerated, xtagRepository.Object);
            ouwMock.RegisterRepository(uow => uow.XTask, xtaskRepository.Object);
            ouwMock.RegisterRepository(uow => uow.KesAuftrag, kesAuftragRepository.Object);
            ouwMock.RegisterRepository(uow => uow.KesDokument, kesDokumentRepository.Object);
            ouwMock.RegisterRepository(uow => uow.FaLeistung, faLeistungRepository.Object);
            RegisterConfigAndLovRepositories(ouwMock, true);

            var kesDokument = GetAnyKesDokument();

            // Act
            var service = Container.Resolve<XTaskAutoGeneratedService>();
            service.InsertKesDokumentVersandPendenz(kesDokument);

            // Assert
            xtagRepository.Verify(moq => moq.GetByReferenceTableAndID(It.Is<string>(s => s.Equals(typeof(KesDokument).Name)), It.Is<int>(i => i == 34234)), Times.Once());
            xtagRepository.Verify(moq => moq.InsertOrUpdateEntity(It.IsAny<XTaskAutoGenerated>()), Times.Once());
        }

        [TestMethod]
        public void InsertKesDokumentVersandPendenzNoPendenz()
        {
            // Arrange
            var xtagRepository = new Mock<XTaskAutoGeneratedRepository>();
            xtagRepository.Setup(moq => moq.GetByReferenceTableAndID(It.IsAny<string>(), It.IsAny<int>()))
                            .Returns((XTaskAutoGenerated)null);

            var xtaskRepository = new Mock<XTaskRepository>();

            var kesAuftragRepository = new Mock<KesAuftragRepository>();
            kesAuftragRepository.Setup(moq => moq.GetById(It.IsAny<int>()))
                            .Returns(new KesAuftrag { DatumFrist = DateTime.Now });

            var faLeistungRepository = new Mock<FaLeistungRepository>();
            faLeistungRepository.Setup(moq => moq.GetById(It.IsAny<int>()))
                            .Returns(new FaLeistung { BaPersonID = 12345 });

            var ouwMock = new UnitOfWorkMock();
            ouwMock.RegisterRepository(uow => uow.XTaskAutoGenerated, xtagRepository.Object);
            ouwMock.RegisterRepository(uow => uow.XTask, xtaskRepository.Object);
            ouwMock.RegisterRepository(uow => uow.KesAuftrag, kesAuftragRepository.Object);
            ouwMock.RegisterRepository(uow => uow.FaLeistung, faLeistungRepository.Object);
            RegisterConfigAndLovRepositories(ouwMock, true);

            var kesDokument = GetAnyKesDokument();
            kesDokument.XDocumentID_Versand = null;

            // Act
            var service = Container.Resolve<XTaskAutoGeneratedService>();
            service.InsertKesDokumentVersandPendenz(kesDokument);

            // Assert
            xtagRepository.Verify(moq => moq.GetByReferenceTableAndID(It.Is<string>(s => s.Equals(typeof(KesDokument).Name)), It.Is<int>(i => i == 34234)), Times.Once());
            xtagRepository.Verify(moq => moq.InsertOrUpdateEntity(It.IsAny<XTaskAutoGenerated>()), Times.Never());
            xtaskRepository.Verify(moq => moq.InsertOrUpdateEntity(It.IsAny<XTask>()), Times.Never());
        }

        [TestMethod]
        public void UpdateKesAuftragFristBisPendenzCreatesPendenz()
        {
            // Arrange
            var xtagRepository = new Mock<XTaskAutoGeneratedRepository>();
            xtagRepository.Setup(moq => moq.GetByReferenceTableAndID(It.IsAny<string>(), It.IsAny<int>()))
                            .Returns((XTaskAutoGenerated)null);

            var kesDokumentRepository = new Mock<KesDokumentRepository>();
            kesDokumentRepository.Setup(moq => moq.GetByKesAuftragId(It.IsAny<int>(), It.Is<int>(i => i == 1), false))
                            .Returns(new List<KesDokumentDTO>());

            var xtaskRepository = new Mock<XTaskRepository>();

            var ouwMock = new UnitOfWorkMock();
            ouwMock.RegisterRepository(uow => uow.XTaskAutoGenerated, xtagRepository.Object);
            ouwMock.RegisterRepository(uow => uow.KesDokument, kesDokumentRepository.Object);
            ouwMock.RegisterRepository(uow => uow.XTask, xtaskRepository.Object);
            RegisterConfigAndLovRepositories(ouwMock, true);

            var kesAuftrag = GetAnyKesAuftrag();

            // Act
            var service = Container.Resolve<XTaskAutoGeneratedService>();
            service.UpdateKesAuftragFristBisPendenz(kesAuftrag);

            // Assert
            xtagRepository.Verify(moq => moq.InsertOrUpdateEntity(It.IsAny<XTaskAutoGenerated>()), Times.Once());
            xtagRepository.Verify(moq => moq.GetByReferenceTableAndID(It.Is<string>(s => s.Equals(typeof(KesAuftrag).Name)), It.Is<int>(i => i == 1)), Times.Once());
        }

        [TestMethod]
        public void UpdateKesAuftragFristBisPendenzDeletesPendenz()
        {
            // Arrange
            var newXtag = new XTaskAutoGenerated
            {
                XTask = new XTask
                {
                    DoneDate = null,
                    ExpirationDate = DateTime.Today.AddDays(+9)
                }
            };

            var xtagRepository = new Mock<XTaskAutoGeneratedRepository>();
            xtagRepository.Setup(moq => moq.GetByReferenceTableAndID(It.IsAny<string>(), It.IsAny<int>()))
                            .Returns(newXtag);

            var kesDokumentRepository = new Mock<KesDokumentRepository>();
            kesDokumentRepository.Setup(moq => moq.GetByKesAuftragId(It.IsAny<int>(), It.Is<int>(i => i == 1), false))
                            .Returns(new List<KesDokumentDTO>());

            var xtaskRepository = new Mock<XTaskRepository>();

            var ouwMock = new UnitOfWorkMock();
            ouwMock.RegisterRepository(uow => uow.XTaskAutoGenerated, xtagRepository.Object);
            ouwMock.RegisterRepository(uow => uow.KesDokument, kesDokumentRepository.Object);
            ouwMock.RegisterRepository(uow => uow.XTask, xtaskRepository.Object);
            RegisterConfigAndLovRepositories(ouwMock, true);

            var kesAuftrag = GetAnyKesAuftrag();
            kesAuftrag.DatumFrist = null;

            // Act
            var service = Container.Resolve<XTaskAutoGeneratedService>();
            service.UpdateKesAuftragFristBisPendenz(kesAuftrag);

            // Assert
            xtaskRepository.Verify(moq => moq.Remove(It.IsAny<XTask>()), Times.Once());
            xtagRepository.Verify(moq => moq.Remove(It.IsAny<XTaskAutoGenerated>()), Times.Once());
            xtagRepository.Verify(moq => moq.GetByReferenceTableAndID(It.Is<string>(s => s.Equals(typeof(KesAuftrag).Name)), It.Is<int>(i => i == 1)), Times.Once());
        }

        [TestMethod]
        public void UpdateKesAuftragFristBisPendenzUpdatesPendenz()
        {
            // Arrange
            var newXtag = new XTaskAutoGenerated
            {
                XTask = new XTask
                {
                    DoneDate = null,
                    ExpirationDate = DateTime.Today.AddDays(+9)
                }
            };

            var xtagRepository = new Mock<XTaskAutoGeneratedRepository>();
            xtagRepository.Setup(moq => moq.GetByReferenceTableAndID(It.IsAny<string>(), It.IsAny<int>()))
                            .Returns(newXtag);

            var kesDokumentRepository = new Mock<KesDokumentRepository>();
            kesDokumentRepository.Setup(moq => moq.GetByKesAuftragId(It.IsAny<int>(), It.Is<int>(i => i == 1), false))
                            .Returns(new List<KesDokumentDTO>());

            var xtaskRepository = new Mock<XTaskRepository>();

            var ouwMock = new UnitOfWorkMock();
            ouwMock.RegisterRepository(uow => uow.XTaskAutoGenerated, xtagRepository.Object);
            ouwMock.RegisterRepository(uow => uow.KesDokument, kesDokumentRepository.Object);
            ouwMock.RegisterRepository(uow => uow.XTask, xtaskRepository.Object);
            RegisterConfigAndLovRepositories(ouwMock, true);

            var kesAuftrag = GetAnyKesAuftrag();

            // Act
            var service = Container.Resolve<XTaskAutoGeneratedService>();
            service.UpdateKesAuftragFristBisPendenz(kesAuftrag);

            // Assert
            xtaskRepository.Verify(moq => moq.InsertOrUpdateEntity(It.IsAny<XTask>()), Times.Once());
            xtagRepository.Verify(moq => moq.InsertOrUpdateEntity(It.IsAny<XTaskAutoGenerated>()), Times.Never());
            xtagRepository.Verify(moq => moq.GetByReferenceTableAndID(It.Is<string>(s => s.Equals(typeof(KesAuftrag).Name)), It.Is<int>(i => i == 1)), Times.Once());
        }

        [TestMethod]
        public void UpdateKesMassnahmeAuftragVersandPendenzCreatesPendenz()
        {
            // Arrange
            var kesMassnahmeRepository = new Mock<KesMassnahmeRepository>();
            kesMassnahmeRepository.Setup(moq => moq.GetById(It.IsAny<int>()))
                            .Returns(new KesMassnahme { FaLeistungID = 123 });

            var faLeistungRepository = new Mock<FaLeistungRepository>();
            faLeistungRepository.Setup(moq => moq.GetById(It.IsAny<int>()))
                            .Returns(new FaLeistung { BaPersonID = 456, UserID = 789 });

            var xtagRepository = new Mock<XTaskAutoGeneratedRepository>();
            var xtaskRepository = new Mock<XTaskRepository>();

            var ouwMock = new UnitOfWorkMock();
            RegisterConfigAndLovRepositories(ouwMock, true);
            ouwMock.RegisterRepository(uow => uow.KesMassnahme, kesMassnahmeRepository.Object);
            ouwMock.RegisterRepository(uow => uow.FaLeistung, faLeistungRepository.Object);
            ouwMock.RegisterRepository(uow => uow.XTaskAutoGenerated, xtagRepository.Object);
            ouwMock.RegisterRepository(uow => uow.XTask, xtaskRepository.Object);

            var kesMassnahmeAuftrag = GetAnyKesMassnahmeAuftrag();
            kesMassnahmeAuftrag.DocumentID_Versand = 123;

            // Act
            var service = Container.Resolve<XTaskAutoGeneratedService>();
            service.UpdateKesMassnahmeAuftragVersandPendenz(kesMassnahmeAuftrag);

            // Assert
            xtagRepository.Verify(moq => moq.InsertOrUpdateEntity(It.Is<XTaskAutoGenerated>(tsk => ((DateTime)tsk.XTask.ExpirationDate).AddDays(-20).Equals(DateTime.Today))), Times.Once());
            xtagRepository.Verify(moq => moq.GetByReferenceTableAndID(It.Is<string>(s => s.Equals(typeof(KesMassnahmeAuftrag).Name)), It.Is<int>(i => i == 1234567890)), Times.Once());
        }

        [TestMethod]
        public void UpdateKesMassnahmeAuftragVersandPendenzDeletesPendenz()
        {
            // Arrange
            var newXtag = new XTaskAutoGenerated
            {
                XTask = new XTask
                {
                    DoneDate = null,
                    ExpirationDate = DateTime.Today.AddDays(+9)
                }
            };
            var xtagRepository = new Mock<XTaskAutoGeneratedRepository>();
            xtagRepository.Setup(moq => moq.GetByReferenceTableAndID(It.IsAny<string>(), It.IsAny<int>()))
                            .Returns(newXtag);

            var kesMassnahmeRepository = new Mock<KesMassnahmeRepository>();
            kesMassnahmeRepository.Setup(moq => moq.GetById(It.IsAny<int>()))
                            .Returns(new KesMassnahme { FaLeistungID = 123 });

            var faLeistungRepository = new Mock<FaLeistungRepository>();
            faLeistungRepository.Setup(moq => moq.GetById(It.IsAny<int>()))
                            .Returns(new FaLeistung { BaPersonID = 456, UserID = 789 });

            var xtaskRepository = new Mock<XTaskRepository>();

            var ouwMock = new UnitOfWorkMock();
            RegisterConfigAndLovRepositories(ouwMock, true);
            ouwMock.RegisterRepository(uow => uow.KesMassnahme, kesMassnahmeRepository.Object);
            ouwMock.RegisterRepository(uow => uow.FaLeistung, faLeistungRepository.Object);
            ouwMock.RegisterRepository(uow => uow.XTaskAutoGenerated, xtagRepository.Object);
            ouwMock.RegisterRepository(uow => uow.XTask, xtaskRepository.Object);

            var kesMassnahmeAuftrag = GetAnyKesMassnahmeAuftrag();
            kesMassnahmeAuftrag.DocumentID_Versand = null;
            kesMassnahmeAuftrag.DatumVersand = DateTime.Now.AddDays(-2);

            // Act
            var service = Container.Resolve<XTaskAutoGeneratedService>();
            service.UpdateKesMassnahmeAuftragVersandPendenz(kesMassnahmeAuftrag);

            // Assert
            xtagRepository.Verify(moq => moq.InsertOrUpdateEntity(It.IsAny<XTaskAutoGenerated>()), Times.Never());
            xtagRepository.Verify(moq => moq.GetByReferenceTableAndID(It.Is<string>(s => s.Equals(typeof(KesMassnahmeAuftrag).Name)), It.Is<int>(i => i == 1234567890)), Times.Once());
        }

        [TestMethod]
        public void UpdateKesMassnahmePeriodeBisPendenzCreatesPendenz()
        {
            // Arrange
            var kesMassnahmeRepository = new Mock<KesMassnahmeRepository>();
            kesMassnahmeRepository.Setup(moq => moq.GetById(It.IsAny<int>()))
                            .Returns(new KesMassnahme { FaLeistungID = 123 });

            var faLeistungRepository = new Mock<FaLeistungRepository>();
            faLeistungRepository.Setup(moq => moq.GetById(It.IsAny<int>()))
                            .Returns(new FaLeistung { BaPersonID = 456, UserID = 789 });

            var xtagRepository = new Mock<XTaskAutoGeneratedRepository>();
            var xtaskRepository = new Mock<XTaskRepository>();

            var ouwMock = new UnitOfWorkMock();
            RegisterConfigAndLovRepositories(ouwMock, true);
            ouwMock.RegisterRepository(uow => uow.KesMassnahme, kesMassnahmeRepository.Object);
            ouwMock.RegisterRepository(uow => uow.FaLeistung, faLeistungRepository.Object);
            ouwMock.RegisterRepository(uow => uow.XTaskAutoGenerated, xtagRepository.Object);
            ouwMock.RegisterRepository(uow => uow.XTask, xtaskRepository.Object);

            var kesMassnahmeBericht = GetAnyKesMassnahmeBericht();

            // Act
            var service = Container.Resolve<XTaskAutoGeneratedService>();
            service.UpdateKesMassnahmePeriodeBisPendenz(kesMassnahmeBericht);

            // Assert
            xtagRepository.Verify(moq => moq.GetByReferenceTableAndID(It.Is<string>(s => s.Equals(typeof(KesMassnahmeBericht).Name)), It.Is<int>(i => i == 123456789)), Times.Once());
            xtagRepository.Verify(moq => moq.InsertOrUpdateEntity(It.IsAny<XTaskAutoGenerated>()), Times.Once());
        }

        [TestMethod]
        public void UpdateKesMassnahmePeriodeBisPendenzDeletesPendenz()
        {
            // Arrange
            var kesMassnahmeRepository = new Mock<KesMassnahmeRepository>();
            kesMassnahmeRepository.Setup(moq => moq.GetById(It.IsAny<int>()))
                            .Returns(new KesMassnahme { FaLeistungID = 123 });

            var faLeistungRepository = new Mock<FaLeistungRepository>();
            faLeistungRepository.Setup(moq => moq.GetById(It.IsAny<int>()))
                            .Returns(new FaLeistung { BaPersonID = 456, UserID = 789 });

            var xtagRepository = new Mock<XTaskAutoGeneratedRepository>();
            var xtaskRepository = new Mock<XTaskRepository>();

            var ouwMock = new UnitOfWorkMock();
            RegisterConfigAndLovRepositories(ouwMock, true);
            ouwMock.RegisterRepository(uow => uow.KesMassnahme, kesMassnahmeRepository.Object);
            ouwMock.RegisterRepository(uow => uow.FaLeistung, faLeistungRepository.Object);
            ouwMock.RegisterRepository(uow => uow.XTaskAutoGenerated, xtagRepository.Object);
            ouwMock.RegisterRepository(uow => uow.XTask, xtaskRepository.Object);

            var kesMassnahmeBericht = GetAnyKesMassnahmeBericht();
            kesMassnahmeBericht.DatumBis = null;

            // Act
            var service = Container.Resolve<XTaskAutoGeneratedService>();
            service.UpdateKesMassnahmePeriodeBisPendenz(kesMassnahmeBericht);

            // Assert
            xtagRepository.Verify(moq => moq.GetByReferenceTableAndID(It.Is<string>(s => s.Equals(typeof(KesMassnahmeBericht).Name)), It.Is<int>(i => i == 123456789)), Times.Once());
            xtagRepository.Verify(moq => moq.InsertOrUpdateEntity(It.IsAny<XTaskAutoGenerated>()), Times.Never());
            xtaskRepository.Verify(moq => moq.InsertOrUpdateEntity(It.IsAny<XTask>()), Times.Never());
        }

        [TestMethod]
        public void UpdateKesMassnahmePeriodeBisPendenzUpdatesPendenz()
        {
            // Arrange
            var kesMassnahmeRepository = new Mock<KesMassnahmeRepository>();
            kesMassnahmeRepository.Setup(moq => moq.GetById(It.IsAny<int>()))
                            .Returns(new KesMassnahme { FaLeistungID = 123 });

            var faLeistungRepository = new Mock<FaLeistungRepository>();
            faLeistungRepository.Setup(moq => moq.GetById(It.IsAny<int>()))
                            .Returns(new FaLeistung { BaPersonID = 456, UserID = 789 });

            var newXtag = new XTaskAutoGenerated
            {
                XTask = new XTask
                {
                    DoneDate = null,
                    ExpirationDate = DateTime.Today.AddDays(+9)
                }
            };

            var xtagRepository = new Mock<XTaskAutoGeneratedRepository>();
            xtagRepository.Setup(moq => moq.GetByReferenceTableAndID(It.Is<string>(s => s.Equals(typeof(KesMassnahmeBericht).Name)), It.Is<int>(i => i == 123456789)))
                            .Returns(newXtag);

            var xtaskRepository = new Mock<XTaskRepository>();

            var ouwMock = new UnitOfWorkMock();
            RegisterConfigAndLovRepositories(ouwMock, true);
            ouwMock.RegisterRepository(uow => uow.KesMassnahme, kesMassnahmeRepository.Object);
            ouwMock.RegisterRepository(uow => uow.FaLeistung, faLeistungRepository.Object);
            ouwMock.RegisterRepository(uow => uow.XTaskAutoGenerated, xtagRepository.Object);
            ouwMock.RegisterRepository(uow => uow.XTask, xtaskRepository.Object);

            var kesMassnahmeBericht = GetAnyKesMassnahmeBericht();

            // Act
            var service = Container.Resolve<XTaskAutoGeneratedService>();
            service.UpdateKesMassnahmePeriodeBisPendenz(kesMassnahmeBericht);

            // Assert
            xtagRepository.Verify(moq => moq.GetByReferenceTableAndID(It.Is<string>(s => s.Equals(typeof(KesMassnahmeBericht).Name)), It.Is<int>(i => i == 123456789)), Times.Once());
            xtaskRepository.Verify(moq => moq.InsertOrUpdateEntity(It.IsAny<XTask>()), Times.Once());
        }

        [TestMethod]
        public void UpdateKesMassnahmeVersandPendenzCreatesPendenz()
        {
            // Arrange
            var kesMassnahmeRepository = new Mock<KesMassnahmeRepository>();
            kesMassnahmeRepository.Setup(moq => moq.GetById(It.IsAny<int>()))
                            .Returns(new KesMassnahme { FaLeistungID = 123 });

            var faLeistungRepository = new Mock<FaLeistungRepository>();
            faLeistungRepository.Setup(moq => moq.GetById(It.IsAny<int>()))
                            .Returns(new FaLeistung { BaPersonID = 456, UserID = 789 });

            var xtagRepository = new Mock<XTaskAutoGeneratedRepository>();
            var xtaskRepository = new Mock<XTaskRepository>();

            var ouwMock = new UnitOfWorkMock();
            RegisterConfigAndLovRepositories(ouwMock, true);
            ouwMock.RegisterRepository(uow => uow.KesMassnahme, kesMassnahmeRepository.Object);
            ouwMock.RegisterRepository(uow => uow.FaLeistung, faLeistungRepository.Object);
            ouwMock.RegisterRepository(uow => uow.XTaskAutoGenerated, xtagRepository.Object);
            ouwMock.RegisterRepository(uow => uow.XTask, xtaskRepository.Object);

            var kesMassnahmeBericht = GetAnyKesMassnahmeBericht();
            kesMassnahmeBericht.DocumentID_Versand = 123;

            // Act
            var service = Container.Resolve<XTaskAutoGeneratedService>();
            service.UpdateKesMassnahmeVersandPendenz(kesMassnahmeBericht);

            // Assert
            xtagRepository.Verify(moq => moq.InsertOrUpdateEntity(It.Is<XTaskAutoGenerated>(tsk => ((DateTime)tsk.XTask.ExpirationDate).AddDays(-20).Equals(DateTime.Today))), Times.Once());
            xtagRepository.Verify(moq => moq.GetByReferenceTableAndID(It.Is<string>(s => s.Equals(typeof(KesMassnahmeBericht).Name + "_Versand")), It.Is<int>(i => i == 123456789)), Times.Once());
        }

        [TestMethod]
        public void UpdateKesMassnahmeVersandPendenzDeletesPendenz()
        {
            // Arrange
            var newXtag = new XTaskAutoGenerated
            {
                XTask = new XTask
                {
                    DoneDate = null,
                    ExpirationDate = DateTime.Today.AddDays(+9)
                }
            };
            var xtagRepository = new Mock<XTaskAutoGeneratedRepository>();
            xtagRepository.Setup(moq => moq.GetByReferenceTableAndID(It.IsAny<string>(), It.IsAny<int>()))
                            .Returns(newXtag);

            var kesMassnahmeRepository = new Mock<KesMassnahmeRepository>();
            kesMassnahmeRepository.Setup(moq => moq.GetById(It.IsAny<int>()))
                            .Returns(new KesMassnahme { FaLeistungID = 123 });

            var faLeistungRepository = new Mock<FaLeistungRepository>();
            faLeistungRepository.Setup(moq => moq.GetById(It.IsAny<int>()))
                            .Returns(new FaLeistung { BaPersonID = 456, UserID = 789 });

            var xtaskRepository = new Mock<XTaskRepository>();

            var ouwMock = new UnitOfWorkMock();
            RegisterConfigAndLovRepositories(ouwMock, true);
            ouwMock.RegisterRepository(uow => uow.KesMassnahme, kesMassnahmeRepository.Object);
            ouwMock.RegisterRepository(uow => uow.FaLeistung, faLeistungRepository.Object);
            ouwMock.RegisterRepository(uow => uow.XTaskAutoGenerated, xtagRepository.Object);
            ouwMock.RegisterRepository(uow => uow.XTask, xtaskRepository.Object);

            var kesMassnahmeBericht = GetAnyKesMassnahmeBericht();
            kesMassnahmeBericht.DocumentID_Versand = null;
            kesMassnahmeBericht.DatumVersand = DateTime.Now.AddDays(-2);

            // Act
            var service = Container.Resolve<XTaskAutoGeneratedService>();
            service.UpdateKesMassnahmeVersandPendenz(kesMassnahmeBericht);

            // Assert
            xtagRepository.Verify(moq => moq.InsertOrUpdateEntity(It.IsAny<XTaskAutoGenerated>()), Times.Never());
            xtagRepository.Verify(moq => moq.GetByReferenceTableAndID(It.Is<string>(s => s.Equals(typeof(KesMassnahmeBericht).Name + "_Versand")), It.Is<int>(i => i == 123456789)), Times.Once());
        }

        private static KesAuftrag GetAnyKesAuftrag()
        {
            return new KesAuftrag
            {
                KesAuftragID = 1,
                AbschlussDatum = null,
                Anlass = "",
                Auftrag = "",
                BetroffenePersonenIds = null,
                Created = DateTime.Today,
                Creator = "du",
                DatumAuftrag = DateTime.Today,
                DatumFrist = DateTime.Today,
                DocumentID_Auftrag = null,
                DocumentID_BeschlussRueckmeldung = null,
                FaLeistungID = 9456,
                UserID = 987,
                FaLeistung = new FaLeistung
                {
                    FaLeistungID = 9456,
                    BaPersonID = 222
                }
            };
        }

        private static KesDokument GetAnyKesDokument()
        {
            return new KesDokument
            {
                KesDokumentID = 34234,
                XDocumentID_Versand = 2222,
                XDocumentVersand = new XDocument
                {
                    DocumentID = 2222,
                    DateCreation = DateTime.Now
                },
                KesAuftrag = GetAnyKesAuftrag(),
                KesAuftragID = GetAnyKesAuftrag().KesAuftragID,
                FaLeistungID = 12323,
                FaLeistung = new FaLeistung
                {
                    FaLeistungID = 12323,
                    BaPersonID = 222
                },
                UserID = 7575
            };
        }

        private static KesMassnahmeAuftrag GetAnyKesMassnahmeAuftrag()
        {
            return new KesMassnahmeAuftrag
            {
                KesMassnahmeAuftragID = 1234567890,
                KesMassnahmeID = 2
            };
        }

        private static KesMassnahmeBericht GetAnyKesMassnahmeBericht()
        {
            return new KesMassnahmeBericht
            {
                KesMassnahmeBerichtID = 123456789,
                DatumBis = DateTime.Now,
                KesMassnahmeID = 2,
                DocumentID_Versand = null
            };
        }

        private static void RegisterConfigAndLovRepositories(UnitOfWorkMock ouwMock, bool isConfigActive)
        {
            var lovNameTaskType = typeof(LOVsGenerated.TaskType).Name;
            var xlovCodeRepository = new Mock<XLovCodeRepository>();
            xlovCodeRepository.Setup(moq => moq.GetLovCodeByLovName(It.Is<string>(s => s.Equals(lovNameTaskType)), It.IsAny<int>()))
                            .Returns(new List<XLOVCode>{
                                            new XLOVCode
                                                     {
                                                         LOVName = lovNameTaskType,
                                                         Code = 41,
                                                         Value1 = "Titel",
                                                         Value2 = "Beschreibung",
                                                         IsActive = true
                                                     },
                                            new XLOVCode
                                                     {
                                                         LOVName = lovNameTaskType,
                                                         Code = 42,
                                                         Value1 = "Titel",
                                                         Value2 = "Beschreibung",
                                                         IsActive = true
                                                     },
                                            new XLOVCode
                                                     {
                                                         LOVName = lovNameTaskType,
                                                         Code = 43,
                                                         Value1 = "Titel",
                                                         Value2 = "Beschreibung",
                                                         IsActive = true
                                                     },
                                            new XLOVCode
                                                     {
                                                         LOVName = lovNameTaskType,
                                                         Code = 44,
                                                         Value1 = "Titel",
                                                         Value2 = "Beschreibung",
                                                         IsActive = true
                                                     },
                                            new XLOVCode
                                                     {
                                                         LOVName = lovNameTaskType,
                                                         Code = 45,
                                                         Value1 = "Titel",
                                                         Value2 = "Beschreibung",
                                                         IsActive = true
                                                     }});

            var configRepository = new Mock<XConfigRepository>();
            configRepository.Setup(moq => moq.GetAllEntities())
                            .Returns(new[] { new XConfig
                                                         {
                                                             KeyPath = ConfigNodes.System_Pendenzen_KesFrist_ErledigungSD_Aktiv.ToString(),
                                                             ValueBit = isConfigActive,
                                                             OriginalValueBit = isConfigActive,
                                                             ValueCode = 5
                                                         },
                                             new XConfig
                                                         {
                                                             KeyPath = ConfigNodes.System_Pendenzen_KesFrist_AuftragsAbklaerungsErledigung_AnzahlTage.ToString(),
                                                             ValueInt = 20,
                                                             OriginalValueInt = 20,
                                                             ValueCode = 2
                                                         },
                                             new XConfig
                                                         {
                                                             KeyPath = ConfigNodes.System_Pendenzen_KesFrist_AuftragsAbklaerungsErledigung_Aktiv.ToString(),
                                                             ValueBit = isConfigActive,
                                                             OriginalValueBit = isConfigActive,
                                                             ValueCode = 5
                                                         },
                                             new XConfig
                                                         {
                                                             KeyPath = ConfigNodes.System_Pendenzen_KesFrist_MassnahmePeriode_Aktiv.ToString(),
                                                             ValueBit = isConfigActive,
                                                             OriginalValueBit = isConfigActive,
                                                             ValueCode = 5
                                                         },
                                             new XConfig
                                                         {
                                                             KeyPath = ConfigNodes.System_Pendenzen_KesFrist_MassnahmeVersandBericht_AnzahlTage.ToString(),
                                                             ValueInt = 20,
                                                             OriginalValueInt = 20,
                                                             ValueCode = 2
                                                         },
                                             new XConfig
                                                         {
                                                             KeyPath = ConfigNodes.System_Pendenzen_KesFrist_MassnahmeVersandBericht_Aktiv.ToString(),
                                                             ValueBit = isConfigActive,
                                                             OriginalValueBit = isConfigActive,
                                                             ValueCode = 5
                                                         },
                                             new XConfig
                                                         {
                                                             KeyPath = ConfigNodes.System_Pendenzen_KesFrist_MassnahmeAuftragVersandBericht_AnzahlTage.ToString(),
                                                             ValueInt = 20,
                                                             OriginalValueInt = 20,
                                                             ValueCode = 2
                                                         },
                                             new XConfig
                                                         {
                                                             KeyPath = ConfigNodes.System_Pendenzen_KesFrist_MassnahmeAuftragVersandBericht_Aktiv.ToString(),
                                                             ValueBit = isConfigActive,
                                                             OriginalValueBit = isConfigActive,
                                                             ValueCode = 5
                                                         }
                                    });

            ouwMock.RegisterRepository(uow => uow.XLovCode, xlovCodeRepository.Object);
            ouwMock.RegisterRepository(uow => uow.XConfig, configRepository.Object);

            var xConfigService = Container.Resolve<XConfigService>();
            xConfigService.ReloadCache();
        }
    }
}
<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <metadata name="qryPerson.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>168, 17</value>
  </metadata>
  <metadata name="qryDependentRows.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>17, 17</value>
  </metadata>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="edtGeburtsdatum.Properties.Buttons" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        iVBORw0KGgoAAAANSUhEUgAAAAwAAAAQCAYAAAAiYZ4HAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8
        YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAABMSURBVDhPYwABY2Pj/8RgsGIQgHFQBKEAqxyIQwyGKsdu
        MjrAqaGhgQErG6sGkAKYInSaOhpAYERrAAFkNk4NuACGBmIwVDkpgIEBAO2ojyYwtBe7AAAAAElFTkSu
        QmCC
</value>
  </data>
  <data name="qryPerson.SelectStatement" xml:space="preserve">
    <value>DECLARE @OrgUnit_ParenID  int

---SELECT @OrgUnit_ParenID = CONVERT(int, Value1)  FROM XLOVCode --{edtSucheSozialzentrum}
--- WHERE LOVName = 'FaSozialzentrum' --{edtSucheSozialzentrum}
--- AND Code = {edtSucheSozialzentrum}

SELECT TMP.*,
       BaPersonID = isNull(KLS.BaPersonID,TMP.PersonID),
       [KlientensystemVon] = KLS.Name + isNull(', ' + KLS.Vorname,'')
FROM (
  SELECT top 2000
         PRS.Name, 
         PRS.Vorname,
         PRS.Geburtsdatum,
         PRS.ZIPNr,
         PRS.AHVNummer,
         PersonID = PRS.BaPersonID,
         PRS.WohnsitzAdressZusatz,
         PRS.WohnsitzStrasseHausNr,
         PRS.WohnsitzPostfach,
         PRS.WohnsitzPLZ,
         PRS.WohnsitzOrt,
         PRS.WohnsitzLand,
         PRS.Aufenthalt,
         PRS.NationalitaetCode,
         PRS.GeschlechtCode,
         PRS.EinwohnerregisterAktiv,
         FT = convert(bit, case when FAL.FaFallID is not null then 1 else 0 end),
         LT = convert(bit, case when LEI.FaLeistungID is not null then 1 else 0 end),
         [Alter] = convert(int, ((datediff(dd,Geburtsdatum,getDate())+.5)/365.25)), 
         Geschlecht = case PRS.GeschlechtCode 
                      when 1 then 'm' 
                      when 2 then 'w' 
                      else '' end, 
         Heimatort  = dbo.fnLOVText('Gemeinde', PRS.HeimatgemeindeCode),
         OrgUnit    = (select top 1 USR.OrgEinheitName 
                       from   FaFall FAL
                              left join vwUser USR on USR.UserID = FAL.UserID
                       where BaPersonID = PRS.BaPersonID
                       order by FAL.DatumVon desc),
         FallNr     = dbo.fnGetFallNrOfPerson(PRS.BaPersonID),
         ResoNr     = (select top 1 convert(varchar(30),ResoNrAlt) from BaAlteFallNr where BaPersonID = PRS.BaPersonID) +
                      case when (select count(*) from BaAlteFallNr where BaPersonID = PRS.BaPersonID and ResoNrAlt is not null) &gt; 1 then '+' else '' end,
         AltePNr    = (select top 1 convert(varchar(30),PersonNrAlt) from BaAlteFallNr where BaPersonID = PRS.BaPersonID) +
                      case when (select count(*) from BaAlteFallNr where BaPersonID = PRS.BaPersonID and PersonNrAlt is not null) &gt; 1 then '+' else '' end,
         AlteFallNr = (select top 1 convert(varchar(30),FallNrAlt)   from BaAlteFallNr where BaPersonID = PRS.BaPersonID) +
                      case when (select count(*) from BaAlteFallNr where BaPersonID = PRS.BaPersonID and FallNrAlt is not null) &gt; 1 then '+' else '' end,
         KlientensystemID$ = dbo.[fnGetHauptpersonFuerMitglied](PRS.BaPersonID)
  FROM   vwPerson              PRS
         left join FaFall     FAL on FAL.BaPersonID = PRS.BaPersonID and
                                     FAL.FaFallID = (select top 1 FaFallID from FaFall where BaPersonID = PRS.BaPersonID order by DatumVon desc)
         left join FaLeistung LEI on LEI.BaPersonID = PRS.BaPersonID and
                                     LEI.FaLeistungID = (select top 1 FaLeistungID from FaLeistung where BaPersonID = PRS.BaPersonID order by DatumVon desc)
WHERE ((@OrgUnit_ParenID IS NULL 
--- AND {edtSucheOrgUnit} IS NULL
       ) OR
     (EXISTS (SELECT *
              FROM FaFall                FAL
                INNER JOIN XOrgUnit_User OUU ON OUU.UserID = FAL.UserID AND OUU.OrgUnitMemberCode = 2
                INNER JOIN XOrgUnit      ORG ON ORG.OrgUnitID = OUU.OrgUnitID
              WHERE FAL.BaPersonID = PRS.BaPersonID
                AND ORG.ParentID = isNull(@OrgUnit_ParenID, ORG.ParentID)
---             AND ORG.OrgUnitID = {edtSucheOrgUnit}
              )
  OR  EXISTS (SELECT *
              FROM FaLeistung            FLE
                INNER JOIN XOrgUnit_User OUU ON OUU.UserID = FLE.UserID AND OUU.OrgUnitMemberCode = 2
                INNER JOIN XOrgUnit      ORG ON ORG.OrgUnitID = OUU.OrgUnitID
              WHERE FLE.BaPersonID = PRS.BaPersonID
                AND ORG.ParentID = isNull(@OrgUnit_ParenID, ORG.ParentID)
---             AND ORG.OrgUnitID = {edtSucheOrgUnit}
              )
  OR  EXISTS (SELECT *
              FROM FaFallPerson          FAP
                INNER JOIN FaFall        FAL ON FAL.FaFallID = FAP.FaFallID
                INNER JOIN XOrgUnit_User OUU ON OUU.UserID = FAL.UserID AND OUU.OrgUnitMemberCode = 2
                INNER JOIN XOrgUnit      ORG ON ORG.OrgUnitID = OUU.OrgUnitID
              WHERE FAP.BaPersonID = PRS.BaPersonID
                AND ORG.ParentID = isNull(@OrgUnit_ParenID, ORG.ParentID)
---             AND ORG.OrgUnitID = {edtSucheOrgUnit}
              )
  ))
--- AND PRS.Name LIKE CONVERT(varchar(100), {edtSucheName}) + '%' 
--- AND PRS.Vorname LIKE {edtSucheVorname} + '%' 
--- AND PRS.AHVNummer LIKE {edtSucheAHV} + '%'
--- AND PRS.WohnsitzStrasseHausNr LIKE {edtSucheStrasse} + '%'
--- AND PRS.WohnsitzPLZ LIKE {edtSuchePLZ} + '%'
--- AND PRS.WohnsitzOrt LIKE {edtSucheOrt} + '%'
--- AND ({edtSucheFalltraeger} = 0 or FAL.FaFallID is not null)
--- AND ({edtSucheLeistungstraeger} = 0 or LEI.FaLeistungID is not null) 
--- AND PRS.Geburtsdatum = {edtSucheGeburt}
--- AND PRS.BaPersonID = {edtSucheBaPersonID}
--- AND PRS.ZIPNr = {edtSucheZIPNr}
--- AND PRS.BaPersonID = (select BaPersonID from FaFall where FaFallID = {edtSucheFaFallID})
--- AND PRS.BaPersonID in (select distinct BaPersonID from BaAlteFallNr where ResoNrAlt = convert(varchar(50),{edtSucheResoNr}))  
--- AND PRS.BaPersonID in (select distinct BaPersonID from BaAlteFallNr where FallNrAlt = convert(varchar(50),{edtSucheAlteFallNr}))
--- AND PRS.BaPersonID in (select distinct BaPersonID from BaAlteFallNr where PersonNrAlt = convert(varchar(50),{edtSucheAltePNr}))
)                     TMP
  LEFT  JOIN BaPerson KLS on KLS.BaPersonID = TMP.KlientensystemID$
ORDER BY TMP.Name, TMP.Vorname</value>
  </data>
  <data name="edtSucheGeburt.Properties.Buttons" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        iVBORw0KGgoAAAANSUhEUgAAAAwAAAAQCAYAAAAiYZ4HAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8
        YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAABMSURBVDhPYwABY2Pj/8RgsGIQgHFQBKEAqxyIQwyGKsdu
        MjrAqaGhgQErG6sGkAKYInSaOhpAYERrAAFkNk4NuACGBmIwVDkpgIEBAO2ojyYwtBe7AAAAAElFTkSu
        QmCC
</value>
  </data>
</root>
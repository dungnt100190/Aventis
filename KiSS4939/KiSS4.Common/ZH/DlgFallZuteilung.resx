<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <metadata name="qryFallzugriff.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>115, 17</value>
  </metadata>
  <metadata name="qryArchiv.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>17, 17</value>
  </metadata>
  <data name="qryArchiv.SelectStatement" xml:space="preserve">
    <value>select LEA.*,
       CheckInUser = USR1.NameVorname,
       CheckOutUser = USR2.NameVorname,
       Typ = TYP.ShortText
from   FaLeistungArchiv LEA
       inner join vwUser   USR1 on USR1.UserID = LEA.CheckInUserID
       inner join vwUser   USR2 on USR2.UserID = LEA.CheckOutUserID
       inner join XArchive ARC  on ARC.ArchiveID = LEA.ArchiveID
       inner join XLOVCode TYP  on TYP.LOVName = 'XArchiveType' and TYP.Code = ARC.XArchiveTypeCode
where  FaLeistungID = {0}
order by LEA.CheckIn</value>
  </data>
  <metadata name="qryGastzugriff.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>231, 17</value>
  </metadata>
  <metadata name="qryUser.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>359, 17</value>
  </metadata>
  <data name="qryFallzugriff.SelectStatement" xml:space="preserve">
    <value>/*
16.12.2007: Fälle haben keine eigene Zeile mehr
-- FaFall ...
*/
-- FaLeistung
SELECT [Key]            = CONVERT(varchar,FAL.FaFallID) + CONVERT(varchar,LEI.FaLeistungID),
       Fall             = 'Fall ' + convert(varchar,FAL.FaFallID) + ', ' +
                          CASE WHEN FAL.DatumBis IS NULL THEN 'aktiv' ELSE 'geschlossen' END + 
                          ' - FT: ' + FT.NameVorname + ' - FV: ' + FV.NameVorname,
       DatumVon         = LEI.DatumVon,
       DatumBis         = LEI.DatumBis,
       Archiviert       = CASE WHEN ARC.FaLeistungID IS NULL THEN '' ELSE 'x' END,
       IconID           = 100 * LEI.ModulID + 1000 +
                          CASE
                            WHEN LEI.FaProzessCode = 201 THEN 29 -- Fallführung Alim
                            WHEN LEI.FaProzessCode = 210 THEN 40 -- Fallführung Alim
                            ELSE 0
                          END +
                          CASE
                            WHEN ARC.FaLeistungID IS NOT NULL THEN 3
                            WHEN LEI.DatumBis IS NOT NULL  THEN 2
                            ELSE 1
                          END,
       Leistung         = CASE 
                            WHEN LEI.FaProzessCode = 210 AND MAS.ZGB IS NOT NULL THEN PRS.Name + isnull(', ' + PRS.Vorname,'') + IsNull(' - ' + MAS.ZGB, '')
                            ELSE PRO.Text
                          END,
       FAL.FaFallID,
       LEI.FaLeistungID,
       LEI.ModulID,
       LEI.FaProzessCode,  
       Typ              = 1,
       FaFallDatum      = FAL.DatumVon,
       PRS.BaPersonID,
       BaPersonIDOrig   = PRS.BaPersonID,
       Klient           = PRS.NameVorname, 
       KlientWohnsitz   = PRS.Wohnsitz,
       KlientAufenthalt = PRS.Aufenthalt,
       KlientTelP       = PRS.Telefon_P,
       KlientTelG       = PRS.Telefon_G,
       KlientTelM1      = PRS.MobilTel1,
       KlientTelM2      = PRS.MobilTel2,
       KlientEMail      = PRS.EMail,
       MA               = USR.NameVorname, 
       MAInfo           = USR.LogonNameVornameOrgUnit,
       MAUserID         = USR.UserID,
       MALogon          = USR.LogonName,
       MAOrgUnit        = USR.OrgUnit,
       MATel            = USR.Phone,
       MAEMail          = USR.EMail,
       SB               = SB.NameVorname, 
       SBInfo           = SB.LogonNameVornameOrgUnit,
       SBUserID         = SB.UserID,
       SBLogon          = SB.LogonName,
       SBOrgUnit        = SB.OrgUnit,
       SBTel            = SB.Phone,
       SBEMail          = SB.EMail,
       AnzGaeste        = (SELECT CONVERT(VARCHAR, COUNT(*)) FROM FaLeistungZugriff WHERE FaLeistungID = LEI.FaLeistungID),
       FTBaPersonID     = FT.BaPersonID
FROM FaFallPerson             FFP
  INNER JOIN FaFall           FAL  ON FAL.FaFallID = FFP.FaFAllID 
  INNER JOIN FaLeistung       LEI  ON LEI.FaFallID = FAL.FaFallID
  LEFT  JOIN VmMassnahme      MAS  ON MAS.FaLeistungID = LEI.FaLeistungID
  INNER JOIN vwUser           USR  ON USR.UserID = LEI.UserID
  LEFT  JOIN vwUser           SB   ON SB.UserID = LEI.SachbearbeiterID
  INNER JOIN vwPerson         PRS  ON PRS.BaPersonID = LEI.BaPersonID
  LEFT  JOIN XLOVCode         PRO  ON PRO.LOVName = 'FaProzess' AND PRO.Code = LEI.FaProzessCode
  LEFT  JOIN FaLeistungArchiv ARC  ON ARC.FaLeistungID = LEI.FaLeistungID AND 
			                          ARC.CheckOut IS NULL
  INNER JOIN vwUser           FV   ON FV.UserID = FAL.UserID
  INNER JOIN vwPerson         FT   ON FT.BaPersonID = FAL.BaPersonID
WHERE FFP.BaPersonID = {0}
  AND LEI.FaProzessCode &lt;&gt; 201 AND LEI.ModulID &lt;&gt; 4
ORDER BY FaFallDatum DESC, Typ, DatumVon</value>
  </data>
</root>
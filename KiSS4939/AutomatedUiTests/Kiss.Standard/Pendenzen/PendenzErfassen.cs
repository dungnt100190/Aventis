///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// DO NOT MODIFY THIS FILE! It is regenerated by the designer.
// All your modifications will be lost!
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;
using Ranorex.Core.Repository;

namespace AutomatedUiTests.Pendenzen
{
    /// <summary>
    /// The PendenzErfassen recording.
    /// </summary>
    [TestModule("26eae395-bbdf-4096-917a-ecfcdb6ff088", ModuleType.Recording, 1)]
    public partial class PendenzErfassen : ITestModule
    {
        /// <summary>
        /// Holds an instance of the AutomatedUiTests.AutomatedUiTestsRepository repository.
        /// </summary>
        public static AutomatedUiTests.AutomatedUiTestsRepository repo = AutomatedUiTests.AutomatedUiTestsRepository.Instance;

        static PendenzErfassen instance = new PendenzErfassen();

        /// <summary>
        /// Constructs a new instance.
        /// </summary>
        public PendenzErfassen()
        {
            varSubject = "Test";
            varDescription = "Beschreibung...";
            varReceiver = "biag_admin";
        }

        /// <summary>
        /// Gets a static instance of this recording.
        /// </summary>
        public static PendenzErfassen Instance
        {
            get { return instance; }
        }

#region Variables

        string _varSubject;

        /// <summary>
        /// Gets or sets the value of variable varSubject.
        /// </summary>
        [TestVariable("0e7dd566-1d26-4b84-b78f-72130e64f8a0")]
        public string varSubject
        {
            get { return _varSubject; }
            set { _varSubject = value; }
        }

        string _varDescription;

        /// <summary>
        /// Gets or sets the value of variable varDescription.
        /// </summary>
        [TestVariable("441c7e8c-5740-4303-951d-fa78930250f5")]
        public string varDescription
        {
            get { return _varDescription; }
            set { _varDescription = value; }
        }

        string _varReceiver;

        /// <summary>
        /// Gets or sets the value of variable varReceiver.
        /// </summary>
        [TestVariable("63503ecf-3b7a-4b86-8cd0-e902ffaf623a")]
        public string varReceiver
        {
            get { return _varReceiver; }
            set { _varReceiver = value; }
        }

#endregion

        /// <summary>
        /// Starts the replay of the static recording <see cref="Instance"/>.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", "4.1.4")]
        public static void Start()
        {
            TestModuleRunner.Run(Instance);
        }

        /// <summary>
        /// Performs the playback of actions in this recording.
        /// </summary>
        /// <remarks>You should not call this method directly, instead pass the module
        /// instance to the <see cref="TestModuleRunner.Run(ITestModule)"/> method
        /// that will in turn invoke this method.</remarks>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", "4.1.4")]
        void ITestModule.Run()
        {
            Mouse.DefaultMoveTime = 300;
            Keyboard.DefaultKeyPressTime = 100;
            Delay.SpeedFactor = 1.0;

            Init();

            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'KiSS.Toolbar.PendenzErfassen' at Center.", repo.KiSS.Toolbar.PendenzErfassenInfo, new RecordItemIndex(0));
            repo.KiSS.Toolbar.PendenzErfassen.Click(100);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating Exists on item 'PendenzErfassen'.", repo.PendenzErfassen.SelfInfo, new RecordItemIndex(1));
            Validate.Exists(repo.PendenzErfassen.SelfInfo);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'PendenzErfassen.edtSubject' at Center.", repo.PendenzErfassen.edtSubjectInfo, new RecordItemIndex(2));
            repo.PendenzErfassen.edtSubject.Click(100);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable $varSubject with focus on 'PendenzErfassen.edtSubject'.", repo.PendenzErfassen.edtSubjectInfo, new RecordItemIndex(3));
            repo.PendenzErfassen.edtSubject.PressKeys(varSubject);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'PendenzErfassen.edtTaskDescription' at Center.", repo.PendenzErfassen.edtTaskDescriptionInfo, new RecordItemIndex(4));
            repo.PendenzErfassen.edtTaskDescription.Click(100);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable $varDescription with focus on 'PendenzErfassen.edtTaskDescription'.", repo.PendenzErfassen.edtTaskDescriptionInfo, new RecordItemIndex(5));
            repo.PendenzErfassen.edtTaskDescription.PressKeys(varDescription);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'PendenzErfassen.edtReceiverID' at Center.", repo.PendenzErfassen.edtReceiverIDInfo, new RecordItemIndex(6));
            repo.PendenzErfassen.edtReceiverID.Click(100);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable $varReceiver with focus on 'PendenzErfassen.edtReceiverID'.", repo.PendenzErfassen.edtReceiverIDInfo, new RecordItemIndex(7));
            repo.PendenzErfassen.edtReceiverID.PressKeys(varReceiver);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'PendenzErfassen.btnErfassen' at Center.", repo.PendenzErfassen.btnErfassenInfo, new RecordItemIndex(8));
            repo.PendenzErfassen.btnErfassen.Click(100);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Wait", "Waiting 1000ms for item 'PendenzErfassen' to not exist.", repo.PendenzErfassen.SelfInfo, new RecordItemIndex(9));
            repo.PendenzErfassen.SelfInfo.WaitForNotExists(1000);
            
        }

#region Image Feature Data
#endregion
    }
}

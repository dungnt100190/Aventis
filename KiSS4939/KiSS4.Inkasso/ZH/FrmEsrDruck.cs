#region Header

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3053
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#endregion

using System;
using System.Collections.Specialized;
using System.IO;
using System.Text.RegularExpressions;
using KiSS4.Common.Report;
using KiSS4.DB;
using KiSS4.Gui;

namespace KiSS4.Inkasso.ZH
{
    public class FrmEsrDruck : KiSS4.Gui.KissChildForm
    {
        #region Fields

        private readonly string _tempFilePath = Path.Combine(Path.GetTempPath(), @"KiSSInkassoESR\");
        private KiSS4.Gui.KissButton btnEsrDruck;
        private KiSS4.Gui.KissCheckEdit chkBelegMaster;
        private KiSS4.Gui.KissCheckEdit chkLeistungMaster;
        private KiSS4.Gui.KissCheckEdit chkSchuldnerMaster;
        private System.ComponentModel.IContainer components;
        private KiSS4.Gui.KissTextEdit edtAnzahl;
        private KiSS4.Gui.KissButtonEdit edtBeleg;
        private KiSS4.Gui.KissTextEdit edtBetrag;
        private KiSS4.Gui.KissLookUpEdit edtEinzahlkonto;
        private KiSS4.Gui.KissButtonEdit edtLeistung;
        private KiSS4.Gui.KissMemoEdit edtLeistungBeschreibung;
        private KiSS4.Gui.KissMemoEdit edtMemotext;
        private KiSS4.Gui.KissButtonEdit edtSchuldner;
        private KiSS4.Gui.KissMemoEdit edtSchuldnerAdresse;
        private KiSS4.Gui.KissTextEdit edtSchuldnerInfo;
        private KiSS4.Gui.KissLabel lblAnzahl;
        private KiSS4.Gui.KissLabel lblBeleg;
        private KiSS4.Gui.KissLabel lblBetrag;
        private KiSS4.Gui.KissLabel lblBetragNote;
        private KiSS4.Gui.KissLabel lblEinzahlerAnschrift;
        private KiSS4.Gui.KissLabel lblEinzahlkonto;
        private KiSS4.Gui.KissLabel lblLeistung;
        private KiSS4.Gui.KissLabel lblLeistungBeschreibung;
        private KiSS4.Gui.KissLabel lblMemotext;
        private KiSS4.Gui.KissLabel lblSchuldner;
        private KiSS4.Gui.KissLabel lblSchuldnerInfo;
        private KiSS4.DB.SqlQuery qryEsrToPrint;

        #endregion

        #region Constructors

        public FrmEsrDruck()
        {
            this.InitializeComponent();

            edtAnzahl.EditMode = Kiss.Interfaces.UI.EditModeType.ReadOnly;
            edtBeleg.EditMode = Kiss.Interfaces.UI.EditModeType.ReadOnly;
            chkBelegMaster.EditMode = Kiss.Interfaces.UI.EditModeType.ReadOnly;

            chkSchuldnerMaster.Checked = false;
            chkLeistungMaster.Checked = false;
            chkBelegMaster.Checked = false;

            //Laden der Zahlungsverbindung (temporaer bis Zahlwege in KiSS hinterlegt sind)
            SqlQuery qry = DBUtil.OpenSQL(@"
                    --select Code = 1, Text = 'Inkasso A', Konto = '01-69759-1', Adresse = 'Soziale Dienste Zürich'+char(10)+char(13)+'8036 Zürich'
                    --union
                    select Code = 2, Text = 'Einzahlungen UB', Konto = '01-69760-9', Adresse = 'Soziale Dienste Zürich'+char(10)+char(13)+'8036 Zürich'
                    union
                    select Code = 3, Text = 'Inkasso W', Konto = '01-69761-7', Adresse = 'Soziale Dienste Zürich'+char(10)+char(13)+'8036 Zürich'
                    union
                    select Code = 4, Text = 'Einzahlungen W', Konto = '01-69758-0', Adresse = 'Soziale Dienste Zürich'+char(10)+char(13)+'8036 Zürich'
                ");
            edtEinzahlkonto.LoadQuery(qry);

            qryEsrToPrint.Fill(@"SELECT
                    [EinzahlkontoID] = 2,
                    [SchuldnerID] = null,
                    [SchuldnerName] = '',
                    [SchuldnerInfo] = '',
                    [SchuldnerAdresse] = '',
                    [LeistungID] = null,
                    [LeistungText] = '',
                    [LeistungInfo] = '',
                    [LeistungPscdID] = null,
                    [BelegID] = null,
                    [BelegText] = '',
                    [BelegPscdID] = null,
                    [Betrag] = '',
                    [AnzahlKopien] = 1,
                    [Bemerkung] = '',
                    [GlaeubigerID] = null
                    ");

            DeleteTempFiles();
        }

        #endregion

        #region Windows Form Designer generated code

        /// <summary>
        /// Required method for Designer support - do not modify
        /// the contents of this method with the code editor.
        /// </summary>
        private void InitializeComponent()
        {
            this.components = new System.ComponentModel.Container();
            DevExpress.Utils.SerializableAppearanceObject serializableAppearanceObject4 = new DevExpress.Utils.SerializableAppearanceObject();
            DevExpress.Utils.SerializableAppearanceObject serializableAppearanceObject3 = new DevExpress.Utils.SerializableAppearanceObject();
            DevExpress.Utils.SerializableAppearanceObject serializableAppearanceObject2 = new DevExpress.Utils.SerializableAppearanceObject();
            DevExpress.Utils.SerializableAppearanceObject serializableAppearanceObject1 = new DevExpress.Utils.SerializableAppearanceObject();
            this.edtEinzahlkonto = new KiSS4.Gui.KissLookUpEdit();
            this.qryEsrToPrint = new KiSS4.DB.SqlQuery(this.components);
            this.chkSchuldnerMaster = new KiSS4.Gui.KissCheckEdit();
            this.lblSchuldner = new KiSS4.Gui.KissLabel();
            this.edtSchuldner = new KiSS4.Gui.KissButtonEdit();
            this.edtSchuldnerAdresse = new KiSS4.Gui.KissMemoEdit();
            this.chkLeistungMaster = new KiSS4.Gui.KissCheckEdit();
            this.edtLeistung = new KiSS4.Gui.KissButtonEdit();
            this.chkBelegMaster = new KiSS4.Gui.KissCheckEdit();
            this.lblLeistung = new KiSS4.Gui.KissLabel();
            this.edtBeleg = new KiSS4.Gui.KissButtonEdit();
            this.lblBeleg = new KiSS4.Gui.KissLabel();
            this.edtBetrag = new KiSS4.Gui.KissTextEdit();
            this.lblBetrag = new KiSS4.Gui.KissLabel();
            this.edtAnzahl = new KiSS4.Gui.KissTextEdit();
            this.lblAnzahl = new KiSS4.Gui.KissLabel();
            this.edtMemotext = new KiSS4.Gui.KissMemoEdit();
            this.lblBetragNote = new KiSS4.Gui.KissLabel();
            this.btnEsrDruck = new KiSS4.Gui.KissButton();
            this.lblEinzahlerAnschrift = new KiSS4.Gui.KissLabel();
            this.lblEinzahlkonto = new KiSS4.Gui.KissLabel();
            this.edtLeistungBeschreibung = new KiSS4.Gui.KissMemoEdit();
            this.lblMemotext = new KiSS4.Gui.KissLabel();
            this.edtSchuldnerInfo = new KiSS4.Gui.KissTextEdit();
            this.lblSchuldnerInfo = new KiSS4.Gui.KissLabel();
            this.lblLeistungBeschreibung = new KiSS4.Gui.KissLabel();
            ((System.ComponentModel.ISupportInitialize)(this.edtEinzahlkonto)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(this.edtEinzahlkonto.Properties)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(this.qryEsrToPrint)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(this.chkSchuldnerMaster.Properties)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(this.lblSchuldner)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(this.edtSchuldner.Properties)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(this.edtSchuldnerAdresse.Properties)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(this.chkLeistungMaster.Properties)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(this.edtLeistung.Properties)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(this.chkBelegMaster.Properties)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(this.lblLeistung)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(this.edtBeleg.Properties)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(this.lblBeleg)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(this.edtBetrag.Properties)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(this.lblBetrag)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(this.edtAnzahl.Properties)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(this.lblAnzahl)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(this.edtMemotext.Properties)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(this.lblBetragNote)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(this.lblEinzahlerAnschrift)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(this.lblEinzahlkonto)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(this.edtLeistungBeschreibung.Properties)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(this.lblMemotext)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(this.edtSchuldnerInfo.Properties)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(this.lblSchuldnerInfo)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(this.lblLeistungBeschreibung)).BeginInit();
            this.SuspendLayout();
            //
            // edtEinzahlkonto
            //
            this.edtEinzahlkonto.AllowNull = false;
            this.edtEinzahlkonto.DataMember = "EinzahlkontoID";
            this.edtEinzahlkonto.DataSource = this.qryEsrToPrint;
            this.edtEinzahlkonto.Location = new System.Drawing.Point(116, 9);
            this.edtEinzahlkonto.Name = "edtEinzahlkonto";
            this.edtEinzahlkonto.Properties.Appearance.BackColor = System.Drawing.Color.AliceBlue;
            this.edtEinzahlkonto.Properties.Appearance.BorderColor = System.Drawing.Color.Linen;
            this.edtEinzahlkonto.Properties.Appearance.Font = new System.Drawing.Font("Arial", 13F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Pixel);
            this.edtEinzahlkonto.Properties.Appearance.Options.UseBackColor = true;
            this.edtEinzahlkonto.Properties.Appearance.Options.UseBorderColor = true;
            this.edtEinzahlkonto.Properties.Appearance.Options.UseFont = true;
            this.edtEinzahlkonto.Properties.AppearanceDropDown.BackColor = System.Drawing.Color.BlanchedAlmond;
            this.edtEinzahlkonto.Properties.AppearanceDropDown.Font = new System.Drawing.Font("Arial", 12F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Pixel);
            this.edtEinzahlkonto.Properties.AppearanceDropDown.Options.UseBackColor = true;
            this.edtEinzahlkonto.Properties.AppearanceDropDown.Options.UseFont = true;
            this.edtEinzahlkonto.Properties.BorderStyle = DevExpress.XtraEditors.Controls.BorderStyles.HotFlat;
            serializableAppearanceObject4.BackColor = System.Drawing.Color.Bisque;
            serializableAppearanceObject4.Options.UseBackColor = true;
            this.edtEinzahlkonto.Properties.Buttons.AddRange(new DevExpress.XtraEditors.Controls.EditorButton[] {
            new DevExpress.XtraEditors.Controls.EditorButton(DevExpress.XtraEditors.Controls.ButtonPredefines.Combo, "", -1, true, true, false, DevExpress.Utils.HorzAlignment.Center, null, new DevExpress.Utils.KeyShortcut(System.Windows.Forms.Keys.None), serializableAppearanceObject4)});
            this.edtEinzahlkonto.Properties.ButtonsStyle = DevExpress.XtraEditors.Controls.BorderStyles.UltraFlat;
            this.edtEinzahlkonto.Properties.NullText = "";
            this.edtEinzahlkonto.Properties.ShowFooter = false;
            this.edtEinzahlkonto.Properties.ShowHeader = false;
            this.edtEinzahlkonto.Size = new System.Drawing.Size(163, 24);
            this.edtEinzahlkonto.TabIndex = 0;
            this.edtEinzahlkonto.EditValueChanged += new System.EventHandler(this.edtEinzahlkonto_EditValueChanged);
            //
            // qryEsrToPrint
            //
            this.qryEsrToPrint.BatchUpdate = true;
            this.qryEsrToPrint.CanDelete = true;
            this.qryEsrToPrint.CanInsert = true;
            this.qryEsrToPrint.CanUpdate = true;
            this.qryEsrToPrint.HostControl = this;
            //
            // chkSchuldnerMaster
            //
            this.chkSchuldnerMaster.EditValue = false;
            this.chkSchuldnerMaster.Location = new System.Drawing.Point(91, 51);
            this.chkSchuldnerMaster.Name = "chkSchuldnerMaster";
            this.chkSchuldnerMaster.Properties.Appearance.BackColor = System.Drawing.Color.Transparent;
            this.chkSchuldnerMaster.Properties.Appearance.Options.UseBackColor = true;
            this.chkSchuldnerMaster.Properties.Caption = "";
            this.chkSchuldnerMaster.Size = new System.Drawing.Size(19, 19);
            this.chkSchuldnerMaster.TabIndex = 1;
            this.chkSchuldnerMaster.Click += new System.EventHandler(this.chkSchuldnerMaster_Click);
            //
            // lblSchuldner
            //
            this.lblSchuldner.Location = new System.Drawing.Point(12, 47);
            this.lblSchuldner.Name = "lblSchuldner";
            this.lblSchuldner.Size = new System.Drawing.Size(72, 24);
            this.lblSchuldner.TabIndex = 1;
            this.lblSchuldner.Text = "EinzahlerIn";
            this.lblSchuldner.UseCompatibleTextRendering = true;
            //
            // edtSchuldner
            //
            this.edtSchuldner.DataMember = "SchuldnerName";
            this.edtSchuldner.DataSource = this.qryEsrToPrint;
            this.edtSchuldner.Location = new System.Drawing.Point(116, 47);
            this.edtSchuldner.Name = "edtSchuldner";
            this.edtSchuldner.Properties.Appearance.BackColor = System.Drawing.Color.AliceBlue;
            this.edtSchuldner.Properties.Appearance.BorderColor = System.Drawing.Color.Linen;
            this.edtSchuldner.Properties.Appearance.Font = new System.Drawing.Font("Arial", 13F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Pixel);
            this.edtSchuldner.Properties.Appearance.Options.UseBackColor = true;
            this.edtSchuldner.Properties.Appearance.Options.UseBorderColor = true;
            this.edtSchuldner.Properties.Appearance.Options.UseFont = true;
            this.edtSchuldner.Properties.BorderStyle = DevExpress.XtraEditors.Controls.BorderStyles.HotFlat;
            serializableAppearanceObject3.BackColor = System.Drawing.Color.Bisque;
            serializableAppearanceObject3.Options.UseBackColor = true;
            this.edtSchuldner.Properties.Buttons.AddRange(new DevExpress.XtraEditors.Controls.EditorButton[] {
            new DevExpress.XtraEditors.Controls.EditorButton(DevExpress.XtraEditors.Controls.ButtonPredefines.Ellipsis, "", -1, true, true, false, DevExpress.Utils.HorzAlignment.Center, null, new DevExpress.Utils.KeyShortcut(System.Windows.Forms.Keys.None), serializableAppearanceObject3)});
            this.edtSchuldner.Properties.ButtonsStyle = DevExpress.XtraEditors.Controls.BorderStyles.UltraFlat;
            this.edtSchuldner.Size = new System.Drawing.Size(532, 24);
            this.edtSchuldner.TabIndex = 2;
            this.edtSchuldner.Tag = "";
            this.edtSchuldner.UserModifiedFld += new KiSS4.Gui.UserModifiedFldEventHandler(this.edtSchuldner_UserModifiedFld);
            //
            // edtSchuldnerAdresse
            //
            this.edtSchuldnerAdresse.DataMember = "SchuldnerAdresse";
            this.edtSchuldnerAdresse.DataSource = this.qryEsrToPrint;
            this.edtSchuldnerAdresse.Location = new System.Drawing.Point(116, 93);
            this.edtSchuldnerAdresse.Name = "edtSchuldnerAdresse";
            this.edtSchuldnerAdresse.Properties.Appearance.BackColor = System.Drawing.Color.AliceBlue;
            this.edtSchuldnerAdresse.Properties.Appearance.BorderColor = System.Drawing.Color.Linen;
            this.edtSchuldnerAdresse.Properties.Appearance.Font = new System.Drawing.Font("Arial", 13F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Pixel);
            this.edtSchuldnerAdresse.Properties.Appearance.Options.UseBackColor = true;
            this.edtSchuldnerAdresse.Properties.Appearance.Options.UseBorderColor = true;
            this.edtSchuldnerAdresse.Properties.Appearance.Options.UseFont = true;
            this.edtSchuldnerAdresse.Properties.BorderStyle = DevExpress.XtraEditors.Controls.BorderStyles.HotFlat;
            this.edtSchuldnerAdresse.Size = new System.Drawing.Size(532, 77);
            this.edtSchuldnerAdresse.TabIndex = 3;
            //
            // chkLeistungMaster
            //
            this.chkLeistungMaster.EditValue = false;
            this.chkLeistungMaster.Location = new System.Drawing.Point(91, 183);
            this.chkLeistungMaster.Name = "chkLeistungMaster";
            this.chkLeistungMaster.Properties.Appearance.BackColor = System.Drawing.Color.Transparent;
            this.chkLeistungMaster.Properties.Appearance.Options.UseBackColor = true;
            this.chkLeistungMaster.Properties.Caption = "";
            this.chkLeistungMaster.Size = new System.Drawing.Size(19, 19);
            this.chkLeistungMaster.TabIndex = 4;
            this.chkLeistungMaster.Click += new System.EventHandler(this.chkLeistungMaster_Click);
            //
            // edtLeistung
            //
            this.edtLeistung.DataMember = "LeistungText";
            this.edtLeistung.DataSource = this.qryEsrToPrint;
            this.edtLeistung.Location = new System.Drawing.Point(116, 179);
            this.edtLeistung.Name = "edtLeistung";
            this.edtLeistung.Properties.Appearance.BackColor = System.Drawing.Color.AliceBlue;
            this.edtLeistung.Properties.Appearance.BorderColor = System.Drawing.Color.Linen;
            this.edtLeistung.Properties.Appearance.Font = new System.Drawing.Font("Arial", 13F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Pixel);
            this.edtLeistung.Properties.Appearance.Options.UseBackColor = true;
            this.edtLeistung.Properties.Appearance.Options.UseBorderColor = true;
            this.edtLeistung.Properties.Appearance.Options.UseFont = true;
            this.edtLeistung.Properties.BorderStyle = DevExpress.XtraEditors.Controls.BorderStyles.HotFlat;
            serializableAppearanceObject2.BackColor = System.Drawing.Color.Bisque;
            serializableAppearanceObject2.Options.UseBackColor = true;
            this.edtLeistung.Properties.Buttons.AddRange(new DevExpress.XtraEditors.Controls.EditorButton[] {
            new DevExpress.XtraEditors.Controls.EditorButton(DevExpress.XtraEditors.Controls.ButtonPredefines.Ellipsis, "", -1, true, true, false, DevExpress.Utils.HorzAlignment.Center, null, new DevExpress.Utils.KeyShortcut(System.Windows.Forms.Keys.None), serializableAppearanceObject2)});
            this.edtLeistung.Properties.ButtonsStyle = DevExpress.XtraEditors.Controls.BorderStyles.UltraFlat;
            this.edtLeistung.Size = new System.Drawing.Size(532, 24);
            this.edtLeistung.TabIndex = 5;
            this.edtLeistung.UserModifiedFld += new KiSS4.Gui.UserModifiedFldEventHandler(this.edtLeistung_UserModifiedFld);
            //
            // chkBelegMaster
            //
            this.chkBelegMaster.EditValue = false;
            this.chkBelegMaster.Location = new System.Drawing.Point(91, 333);
            this.chkBelegMaster.Name = "chkBelegMaster";
            this.chkBelegMaster.Properties.Appearance.BackColor = System.Drawing.Color.Transparent;
            this.chkBelegMaster.Properties.Appearance.Options.UseBackColor = true;
            this.chkBelegMaster.Properties.Caption = "";
            this.chkBelegMaster.Size = new System.Drawing.Size(19, 19);
            this.chkBelegMaster.TabIndex = 6;
            this.chkBelegMaster.Click += new System.EventHandler(this.chkBelegMaster_Click);
            //
            // lblLeistung
            //
            this.lblLeistung.Location = new System.Drawing.Point(12, 179);
            this.lblLeistung.Name = "lblLeistung";
            this.lblLeistung.Size = new System.Drawing.Size(72, 24);
            this.lblLeistung.TabIndex = 6;
            this.lblLeistung.Text = "Leistung";
            this.lblLeistung.UseCompatibleTextRendering = true;
            //
            // edtBeleg
            //
            this.edtBeleg.DataMember = "BelegText";
            this.edtBeleg.DataSource = this.qryEsrToPrint;
            this.edtBeleg.Location = new System.Drawing.Point(116, 329);
            this.edtBeleg.Name = "edtBeleg";
            this.edtBeleg.Properties.Appearance.BackColor = System.Drawing.Color.AliceBlue;
            this.edtBeleg.Properties.Appearance.BorderColor = System.Drawing.Color.Linen;
            this.edtBeleg.Properties.Appearance.Font = new System.Drawing.Font("Arial", 13F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Pixel);
            this.edtBeleg.Properties.Appearance.Options.UseBackColor = true;
            this.edtBeleg.Properties.Appearance.Options.UseBorderColor = true;
            this.edtBeleg.Properties.Appearance.Options.UseFont = true;
            this.edtBeleg.Properties.BorderStyle = DevExpress.XtraEditors.Controls.BorderStyles.HotFlat;
            serializableAppearanceObject1.BackColor = System.Drawing.Color.Bisque;
            serializableAppearanceObject1.Options.UseBackColor = true;
            this.edtBeleg.Properties.Buttons.AddRange(new DevExpress.XtraEditors.Controls.EditorButton[] {
            new DevExpress.XtraEditors.Controls.EditorButton(DevExpress.XtraEditors.Controls.ButtonPredefines.Ellipsis, "", -1, true, true, false, DevExpress.Utils.HorzAlignment.Center, null, new DevExpress.Utils.KeyShortcut(System.Windows.Forms.Keys.None), serializableAppearanceObject1)});
            this.edtBeleg.Properties.ButtonsStyle = DevExpress.XtraEditors.Controls.BorderStyles.UltraFlat;
            this.edtBeleg.Size = new System.Drawing.Size(163, 24);
            this.edtBeleg.TabIndex = 7;
            //
            // lblBeleg
            //
            this.lblBeleg.Location = new System.Drawing.Point(12, 330);
            this.lblBeleg.Name = "lblBeleg";
            this.lblBeleg.Size = new System.Drawing.Size(72, 24);
            this.lblBeleg.TabIndex = 7;
            this.lblBeleg.Text = "Beleg Nr.";
            this.lblBeleg.UseCompatibleTextRendering = true;
            //
            // edtBetrag
            //
            this.edtBetrag.DataMember = "Betrag";
            this.edtBetrag.DataSource = this.qryEsrToPrint;
            this.edtBetrag.Location = new System.Drawing.Point(116, 360);
            this.edtBetrag.Name = "edtBetrag";
            this.edtBetrag.Properties.Appearance.BackColor = System.Drawing.Color.AliceBlue;
            this.edtBetrag.Properties.Appearance.BorderColor = System.Drawing.Color.Linen;
            this.edtBetrag.Properties.Appearance.Font = new System.Drawing.Font("Arial", 13F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Pixel);
            this.edtBetrag.Properties.Appearance.Options.UseBackColor = true;
            this.edtBetrag.Properties.Appearance.Options.UseBorderColor = true;
            this.edtBetrag.Properties.Appearance.Options.UseFont = true;
            this.edtBetrag.Properties.BorderStyle = DevExpress.XtraEditors.Controls.BorderStyles.HotFlat;
            this.edtBetrag.Properties.DisplayFormat.FormatType = DevExpress.Utils.FormatType.Numeric;
            this.edtBetrag.Properties.EditFormat.FormatType = DevExpress.Utils.FormatType.Numeric;
            this.edtBetrag.Properties.ValidateOnEnterKey = true;
            this.edtBetrag.Size = new System.Drawing.Size(163, 24);
            this.edtBetrag.TabIndex = 8;
            //
            // lblBetrag
            //
            this.lblBetrag.Location = new System.Drawing.Point(12, 360);
            this.lblBetrag.Name = "lblBetrag";
            this.lblBetrag.Size = new System.Drawing.Size(72, 24);
            this.lblBetrag.TabIndex = 8;
            this.lblBetrag.Text = "Betrag";
            this.lblBetrag.UseCompatibleTextRendering = true;
            //
            // edtAnzahl
            //
            this.edtAnzahl.DataMember = "AnzahlKopien";
            this.edtAnzahl.DataSource = this.qryEsrToPrint;
            this.edtAnzahl.Location = new System.Drawing.Point(116, 390);
            this.edtAnzahl.Name = "edtAnzahl";
            this.edtAnzahl.Properties.Appearance.BackColor = System.Drawing.Color.AliceBlue;
            this.edtAnzahl.Properties.Appearance.BorderColor = System.Drawing.Color.Linen;
            this.edtAnzahl.Properties.Appearance.Font = new System.Drawing.Font("Arial", 13F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Pixel);
            this.edtAnzahl.Properties.Appearance.Options.UseBackColor = true;
            this.edtAnzahl.Properties.Appearance.Options.UseBorderColor = true;
            this.edtAnzahl.Properties.Appearance.Options.UseFont = true;
            this.edtAnzahl.Properties.BorderStyle = DevExpress.XtraEditors.Controls.BorderStyles.HotFlat;
            this.edtAnzahl.Size = new System.Drawing.Size(163, 24);
            this.edtAnzahl.TabIndex = 9;
            //
            // lblAnzahl
            //
            this.lblAnzahl.Location = new System.Drawing.Point(12, 390);
            this.lblAnzahl.Name = "lblAnzahl";
            this.lblAnzahl.Size = new System.Drawing.Size(72, 24);
            this.lblAnzahl.TabIndex = 9;
            this.lblAnzahl.Text = "Anzahl";
            this.lblAnzahl.UseCompatibleTextRendering = true;
            //
            // edtMemotext
            //
            this.edtMemotext.DataMember = "Bemerkung";
            this.edtMemotext.DataSource = this.qryEsrToPrint;
            this.edtMemotext.Location = new System.Drawing.Point(116, 420);
            this.edtMemotext.Name = "edtMemotext";
            this.edtMemotext.Properties.Appearance.BackColor = System.Drawing.Color.AliceBlue;
            this.edtMemotext.Properties.Appearance.BorderColor = System.Drawing.Color.Linen;
            this.edtMemotext.Properties.Appearance.Font = new System.Drawing.Font("Arial", 13F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Pixel);
            this.edtMemotext.Properties.Appearance.Options.UseBackColor = true;
            this.edtMemotext.Properties.Appearance.Options.UseBorderColor = true;
            this.edtMemotext.Properties.Appearance.Options.UseFont = true;
            this.edtMemotext.Properties.BorderStyle = DevExpress.XtraEditors.Controls.BorderStyles.HotFlat;
            this.edtMemotext.Size = new System.Drawing.Size(532, 141);
            this.edtMemotext.TabIndex = 10;
            //
            // lblBetragNote
            //
            this.lblBetragNote.Location = new System.Drawing.Point(285, 360);
            this.lblBetragNote.Name = "lblBetragNote";
            this.lblBetragNote.Size = new System.Drawing.Size(109, 24);
            this.lblBetragNote.TabIndex = 10;
            this.lblBetragNote.Text = "Leer oder 0 = ESR+";
            this.lblBetragNote.UseCompatibleTextRendering = true;
            //
            // btnEsrDruck
            //
            this.btnEsrDruck.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
            this.btnEsrDruck.Location = new System.Drawing.Point(116, 567);
            this.btnEsrDruck.Name = "btnEsrDruck";
            this.btnEsrDruck.Size = new System.Drawing.Size(99, 24);
            this.btnEsrDruck.TabIndex = 11;
            this.btnEsrDruck.Text = "Drucken";
            this.btnEsrDruck.UseCompatibleTextRendering = true;
            this.btnEsrDruck.UseVisualStyleBackColor = false;
            this.btnEsrDruck.Click += new System.EventHandler(this.btnEsrDruck_Click);
            //
            // lblEinzahlerAnschrift
            //
            this.lblEinzahlerAnschrift.Location = new System.Drawing.Point(12, 93);
            this.lblEinzahlerAnschrift.Name = "lblEinzahlerAnschrift";
            this.lblEinzahlerAnschrift.Size = new System.Drawing.Size(72, 24);
            this.lblEinzahlerAnschrift.TabIndex = 13;
            this.lblEinzahlerAnschrift.Text = "Adresse";
            this.lblEinzahlerAnschrift.UseCompatibleTextRendering = true;
            //
            // lblEinzahlkonto
            //
            this.lblEinzahlkonto.Location = new System.Drawing.Point(12, 10);
            this.lblEinzahlkonto.Name = "lblEinzahlkonto";
            this.lblEinzahlkonto.Size = new System.Drawing.Size(72, 24);
            this.lblEinzahlkonto.TabIndex = 16;
            this.lblEinzahlkonto.Text = "Einzahlkonto";
            this.lblEinzahlkonto.UseCompatibleTextRendering = true;
            //
            // edtLeistungBeschreibung
            //
            this.edtLeistungBeschreibung.DataMember = "LeistungInfo";
            this.edtLeistungBeschreibung.DataSource = this.qryEsrToPrint;
            this.edtLeistungBeschreibung.EditMode = Kiss.Interfaces.UI.EditModeType.ReadOnly;
            this.edtLeistungBeschreibung.Location = new System.Drawing.Point(116, 202);
            this.edtLeistungBeschreibung.Name = "edtLeistungBeschreibung";
            this.edtLeistungBeschreibung.Properties.Appearance.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(247)))), ((int)(((byte)(239)))), ((int)(((byte)(231)))));
            this.edtLeistungBeschreibung.Properties.Appearance.BorderColor = System.Drawing.Color.Linen;
            this.edtLeistungBeschreibung.Properties.Appearance.Font = new System.Drawing.Font("Arial", 13F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Pixel);
            this.edtLeistungBeschreibung.Properties.Appearance.Options.UseBackColor = true;
            this.edtLeistungBeschreibung.Properties.Appearance.Options.UseBorderColor = true;
            this.edtLeistungBeschreibung.Properties.Appearance.Options.UseFont = true;
            this.edtLeistungBeschreibung.Properties.BorderStyle = DevExpress.XtraEditors.Controls.BorderStyles.HotFlat;
            this.edtLeistungBeschreibung.Properties.ReadOnly = true;
            this.edtLeistungBeschreibung.Size = new System.Drawing.Size(532, 115);
            this.edtLeistungBeschreibung.TabIndex = 17;
            //
            // lblMemotext
            //
            this.lblMemotext.Location = new System.Drawing.Point(12, 420);
            this.lblMemotext.Name = "lblMemotext";
            this.lblMemotext.Size = new System.Drawing.Size(72, 24);
            this.lblMemotext.TabIndex = 18;
            this.lblMemotext.Text = "Bemerkung";
            this.lblMemotext.UseCompatibleTextRendering = true;
            //
            // edtSchuldnerInfo
            //
            this.edtSchuldnerInfo.DataMember = "SchuldnerInfo";
            this.edtSchuldnerInfo.DataSource = this.qryEsrToPrint;
            this.edtSchuldnerInfo.EditMode = Kiss.Interfaces.UI.EditModeType.ReadOnly;
            this.edtSchuldnerInfo.Location = new System.Drawing.Point(116, 70);
            this.edtSchuldnerInfo.Name = "edtSchuldnerInfo";
            this.edtSchuldnerInfo.Properties.Appearance.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(247)))), ((int)(((byte)(239)))), ((int)(((byte)(231)))));
            this.edtSchuldnerInfo.Properties.Appearance.BorderColor = System.Drawing.Color.Linen;
            this.edtSchuldnerInfo.Properties.Appearance.Font = new System.Drawing.Font("Arial", 13F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Pixel);
            this.edtSchuldnerInfo.Properties.Appearance.Options.UseBackColor = true;
            this.edtSchuldnerInfo.Properties.Appearance.Options.UseBorderColor = true;
            this.edtSchuldnerInfo.Properties.Appearance.Options.UseFont = true;
            this.edtSchuldnerInfo.Properties.BorderStyle = DevExpress.XtraEditors.Controls.BorderStyles.HotFlat;
            this.edtSchuldnerInfo.Properties.ReadOnly = true;
            this.edtSchuldnerInfo.Size = new System.Drawing.Size(532, 24);
            this.edtSchuldnerInfo.TabIndex = 23;
            //
            // lblSchuldnerInfo
            //
            this.lblSchuldnerInfo.Location = new System.Drawing.Point(12, 70);
            this.lblSchuldnerInfo.Name = "lblSchuldnerInfo";
            this.lblSchuldnerInfo.Size = new System.Drawing.Size(100, 23);
            this.lblSchuldnerInfo.TabIndex = 24;
            this.lblSchuldnerInfo.Text = "Info";
            this.lblSchuldnerInfo.UseCompatibleTextRendering = true;
            //
            // lblLeistungBeschreibung
            //
            this.lblLeistungBeschreibung.Location = new System.Drawing.Point(13, 202);
            this.lblLeistungBeschreibung.Name = "lblLeistungBeschreibung";
            this.lblLeistungBeschreibung.Size = new System.Drawing.Size(100, 23);
            this.lblLeistungBeschreibung.TabIndex = 25;
            this.lblLeistungBeschreibung.Text = "Info";
            this.lblLeistungBeschreibung.UseCompatibleTextRendering = true;
            //
            // FrmEsrDruck
            //
            this.ClientSize = new System.Drawing.Size(660, 603);
            this.Controls.Add(this.lblLeistungBeschreibung);
            this.Controls.Add(this.lblSchuldnerInfo);
            this.Controls.Add(this.edtSchuldnerInfo);
            this.Controls.Add(this.lblMemotext);
            this.Controls.Add(this.edtLeistungBeschreibung);
            this.Controls.Add(this.lblEinzahlkonto);
            this.Controls.Add(this.lblEinzahlerAnschrift);
            this.Controls.Add(this.btnEsrDruck);
            this.Controls.Add(this.lblBetragNote);
            this.Controls.Add(this.edtMemotext);
            this.Controls.Add(this.lblAnzahl);
            this.Controls.Add(this.edtAnzahl);
            this.Controls.Add(this.lblBetrag);
            this.Controls.Add(this.edtBetrag);
            this.Controls.Add(this.lblBeleg);
            this.Controls.Add(this.edtBeleg);
            this.Controls.Add(this.lblLeistung);
            this.Controls.Add(this.chkBelegMaster);
            this.Controls.Add(this.edtLeistung);
            this.Controls.Add(this.chkLeistungMaster);
            this.Controls.Add(this.edtSchuldnerAdresse);
            this.Controls.Add(this.edtSchuldner);
            this.Controls.Add(this.lblSchuldner);
            this.Controls.Add(this.chkSchuldnerMaster);
            this.Controls.Add(this.edtEinzahlkonto);
            this.Name = "FrmEsrDruck";
            this.Text = "ESR Druck Maske";
            ((System.ComponentModel.ISupportInitialize)(this.edtEinzahlkonto.Properties)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(this.edtEinzahlkonto)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(this.qryEsrToPrint)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(this.chkSchuldnerMaster.Properties)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(this.lblSchuldner)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(this.edtSchuldner.Properties)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(this.edtSchuldnerAdresse.Properties)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(this.chkLeistungMaster.Properties)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(this.edtLeistung.Properties)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(this.chkBelegMaster.Properties)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(this.lblLeistung)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(this.edtBeleg.Properties)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(this.lblBeleg)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(this.edtBetrag.Properties)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(this.lblBetrag)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(this.edtAnzahl.Properties)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(this.lblAnzahl)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(this.edtMemotext.Properties)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(this.lblBetragNote)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(this.lblEinzahlerAnschrift)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(this.lblEinzahlkonto)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(this.edtLeistungBeschreibung.Properties)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(this.lblMemotext)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(this.edtSchuldnerInfo.Properties)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(this.lblSchuldnerInfo)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(this.lblLeistungBeschreibung)).EndInit();
            this.ResumeLayout(false);
        }

        #endregion

        #region Dispose

        /// <summary>
        /// Clean up any resources being used.
        /// </summary>
        protected override void Dispose(bool disposing)
        {
            DeleteTempFiles();
            if (disposing)
            {
                if ((components != null))
                {
                    components.Dispose();
                }
            }
            base.Dispose(disposing);
        }

        #endregion

        #region Public Methods

        public string Modulo10Generieren(string inCode)
        {
            int[] tab = new int[] { 0, 9, 4, 6, 8, 2, 7, 1, 3, 5 };
            int n = 0;
            int l = inCode.Length;
            int r = 0; // start with remainder 0;
            for (int i = 0; i < l; i++)
            {
                int c = (int)inCode[i];
                if ((c >= 0x30) && (c <= 0x39))
                {
                    int v = c & 0x0f;
                    r = tab[(r + v) % 10];
                    n++;
                }
                else if (c == 0x20) // allow any space
                    continue;
                else
                    throw new ArgumentException("invalid ESR");
            }
            int p = (10 - r) % 10;
            char pc = (char)(p + 0x30); // = Pruefzeichen

            return inCode + pc;
        }

        public override bool ReceiveMessage(HybridDictionary parameters)
        {
            // we need at least one parameter to know what to do
            if (parameters == null || parameters.Count < 1)
            {
                // by default, nothing to do
                return true;
            }

            decimal? betrag = parameters["Betrag"] as decimal?;
            int? leistungID = parameters["LeistungID"] as int?;
            int? schuldnerID = parameters["EinzahlerIn"] as int?;
            string einzahlKonto = parameters["Einzahlkonto"] as string;
            edtBetrag.EditValue = betrag.ToString();
            qryEsrToPrint["Betrag"] = betrag;

            ((SqlQuery)(edtEinzahlkonto.Properties.DataSource)).Find(string.Format("Text='{0}'", einzahlKonto));
            edtEinzahlkonto.ItemIndex = ((SqlQuery)(edtEinzahlkonto.Properties.DataSource)).Position;

            //edtSchuldner.EditValue = schuldnerID;

            edtSchuldner_UserModifiedFld(new KiSS4.Gui.UserModifiedFldEventArgs(false), schuldnerID);
            edtLeistung_UserModifiedFld(new KiSS4.Gui.UserModifiedFldEventArgs(false), leistungID);

            //if (leistungID != null)
            //{
            //    qryEsrToPrint["LeistungID"] = leistungID;
            //    DBUtil.ExecuteScalarSQL("SELECT ");
            //    qryEsrToPrint["LeistungText"] = Convert.ToString(dlg[7]);
            //    qryEsrToPrint["LeistungPscdID"] = Convert.ToString(dlg[8]);
            //}

            //            edtLeistung.EditValue = leistungID;
            return true;
        }

        public string TextForReport(string inText)
        {
            return inText.Replace(" ", "\x00a0");	// Space shows precent, replace space with noBreakSpace
        }

        public string TextForReportFliesstext(string inText)
        {
            /*
             * In SQL folgendes anwenden:
             * set @Memo = REPLACE({Memo}, '%', ' ') -- remove serarch escape
             * set @Memo = REPLACE(@Memo, ';;', ';') -- escaped escape
             * set @Memo = REPLACE(@Memo, ';))', '*') -- escaped *
             * set @Memo = REPLACE(@Memo, ';)', '%') -- escaped %
             */
            string outText = inText.Replace(";", ";;");
            outText = outText.Replace("*", ";))");
            outText = outText.Replace("%", ";)");
            return outText;	// Spezielles Escape-Gebilde, um normalen Text unbeschadet durch den Suchtext Algorithmus von NamedPrm() zu bringen
        }

        public string TextSperren(string inText)
        {
            string outText = "";
            int l = inText.Length;
            for (int i = 0; i < l; i++)
            {
                outText += inText[i] + "  ";
            }
            return outText.Trim();
        }

        #endregion

        #region Private Methods

        private void btnEsrDruck_Click(object sender, System.EventArgs e)
        {
            string VertragsID = Convert.ToString(qryEsrToPrint["LeistungPscdID"]); // Zur Ermittlung der PscdVertragsgegenstandNummer
            string Betrag = Convert.ToString(qryEsrToPrint["Betrag"]);	// Frankenbertrag, 0 oder leer oder null
            string GeschaeftspartnerNr = Convert.ToString(qryEsrToPrint["SchuldnerID"]); // PersonID oder InstitutionID
            int EinzahlkontoID = (int)qryEsrToPrint["EinzahlkontoID"];	// Workaround ID, bis korrektes Konto vorhanden ist
            string EinzahlerAdresse = Convert.ToString(qryEsrToPrint["SchuldnerAdresse"]);	// die mehrzeilige Adresse des Einzahlers

            string BelegNr = Convert.ToString(qryEsrToPrint["BelegPscdID"]);	// Belegnummer, die bereits generiert wurde (sehr selten, da PSCD Übertragung spät stattindet)
            string Memo = Convert.ToString(qryEsrToPrint["Bemerkung"]);
            int AnzahlKopien = (int)qryEsrToPrint["AnzahlKopien"];
            string LeistungID = Convert.ToString(qryEsrToPrint["LeistungID"]);

            string Reserve = "0";

            // Verifikation der Muss-Felder
            if (string.IsNullOrEmpty(GeschaeftspartnerNr))
            {
                KissMsg.ShowInfo("Damit Sie einen ESR drucken können, muss ein/eine EinzahlerIn angegeben werden.");
                return;
            }
            if (!string.IsNullOrEmpty(Betrag) && (decimal.Parse(Betrag) < 0))
            {
                KissMsg.ShowInfo("Der Betrag darf nicht negativ sein.");
                return;
            }

            // ab hier Definitionen fuer internen Gebrauch
            string EsrEmpfaenger = "";
            string VertragsgegenstandNr = "";
            string KundenNr = "";
            string Einzahler = "";

            // Vertragsgegenstand ermitteln (PSCD-Nummer) aus Leistung
            if (!string.IsNullOrEmpty(VertragsID))
            {
                VertragsgegenstandNr = VertragsID;
            }

            // Ermitteln der KundenNr und der Zahlempfänger Adresse
            // Das ist ein Workaround, bis diese Zahlwege in KiSS verfügbar sind
            switch ((int)EinzahlkontoID)
            {
                case 4:
                    {
                        KundenNr = "01-69758-0";
                        EsrEmpfaenger = "Soziale Dienste Einzahlungen W\r\n8036 Zürich";
                    }
                    break;

                case 2:
                    {
                        KundenNr = "01-69760-9";
                        EsrEmpfaenger = "Soziale Dienste Einzahlungen UB\r\n8036 Zürich";
                    }
                    break;

                case 1:
                    {
                        KundenNr = "01-69759-1";
                        EsrEmpfaenger = "Soziale Dienste Inkasso A\r\n8036 Zürich";
                    }
                    break;

                case 3:
                    {
                        KundenNr = "01-69761-7";
                        EsrEmpfaenger = "Soziale Dienste Inkasso W\r\n8036 Zürich";
                    }
                    break;
            }
            EsrEmpfaenger = TextForReport(EsrEmpfaenger);

            string EsrFranken = "";
            string EsrRappen = "";
            string EsrTypWert = "";

            // Generieren des Typ Wert Teiles der Codierzeile und des Franken- und Rappenbetrages
            if (string.IsNullOrEmpty(Betrag) || decimal.Parse(Betrag) == decimal.Zero)
            {
                // ESR+
                EsrTypWert = "04";
            }
            else
            {
                // ESR

                // Generieren Franken und Rappenbetrag
                decimal BetragWert = decimal.Parse(Betrag);

                EsrFranken = Convert.ToString((int)BetragWert);
                EsrRappen = Convert.ToString((int)((BetragWert % 1.0m) * 100)).PadLeft(2, '0');

                EsrTypWert = "01" + EsrFranken.PadLeft(8, '0') + EsrRappen.PadLeft(2, '0');
                EsrFranken = TextForReport(TextSperren(EsrFranken));
                EsrRappen = TextForReport(TextSperren(EsrRappen));
            }
            EsrTypWert = Modulo10Generieren(EsrTypWert);

            // Generieren der Kundennummer für die Codierzeile
            Regex dash = new Regex(@"-");
            string[] teile = dash.Split(KundenNr);
            string CodeKundenNr = teile[0] + teile[1].PadLeft(6, '0') + teile[2];

            // Generieren der Referenznummer
            string EsrReferenz = GeschaeftspartnerNr.PadLeft(6, '0') +
                        VertragsgegenstandNr.PadLeft(7, '0') +
                        BelegNr.PadLeft(12, '0') +
                        Reserve;
            EsrReferenz = Modulo10Generieren(EsrReferenz);

            //Aufbereiten Einzahler
            string EsrEinzahler = TextForReport(EinzahlerAdresse);
            Einzahler = TextForReport(EinzahlerAdresse);

            Memo = TextForReportFliesstext(Memo);

            //KissMsg.ShowInfo(Memo );

            NamedPrm[] prms = new NamedPrm[14];
            prms[0] = new NamedPrm("EsrFranken", EsrFranken);
            prms[1] = new NamedPrm("EsrRappen", EsrRappen);
            prms[2] = new NamedPrm("EsrReferenz", EsrReferenz);
            prms[3] = new NamedPrm("EsrTeilnehmerNr", CodeKundenNr);
            prms[4] = new NamedPrm("EsrTypWert", EsrTypWert);
            prms[5] = new NamedPrm("EsrKontoNr", KundenNr);
            prms[6] = new NamedPrm("EsrEmpfaenger", EsrEmpfaenger);
            prms[7] = new NamedPrm("EsrEinzahler", EsrEinzahler);
            prms[8] = new NamedPrm("Einzahler", Einzahler);
            prms[9] = new NamedPrm("Memo", Memo);
            if (string.IsNullOrEmpty(LeistungID))
            {
                prms[10] = new NamedPrm("KopfUserID", (int)Session.User.UserID);
                prms[11] = new NamedPrm("FallNummer", "-");
                prms[12] = new NamedPrm("LeistungID", -1);
            }
            else
            {
                prms[10] = new NamedPrm("KopfUserID", (int)DBUtil.ExecuteScalarSQL(@"
                    SELECT UserID FROM dbo.vwLeistungen	WHERE FaLeistungID = {0}", LeistungID));
                prms[11] = new NamedPrm("FallNummer", Convert.ToString(DBUtil.ExecuteScalarSQL(@"
                    SELECT FaFallID FROM dbo.vwLeistungen	WHERE FaLeistungID = {0}", LeistungID)));
                prms[12] = new NamedPrm("LeistungID", LeistungID);
            }
            prms[13] = new NamedPrm("Datum", DateTime.Today.ToShortDateString());

            RepUtil.ExecuteReport("KgEsrEinzel", KissReportDestination.OpenFile, prms);
        }

        private void chkBelegMaster_Click(object sender, System.EventArgs e)
        {
            chkSchuldnerMaster.Checked = false;
            edtSchuldner.EditMode = Kiss.Interfaces.UI.EditModeType.ReadOnly;
            qryEsrToPrint["SchuldnerID"] = DBNull.Value;
            qryEsrToPrint["SchuldnerName"] = DBNull.Value;
            qryEsrToPrint["SchuldnerInfo"] = DBNull.Value;
            qryEsrToPrint["SchuldnerAdresse"] = DBNull.Value;

            chkLeistungMaster.Checked = false;
            edtLeistung.EditMode = Kiss.Interfaces.UI.EditModeType.ReadOnly;
            qryEsrToPrint["LeistungID"] = DBNull.Value;
            qryEsrToPrint["LeistungText"] = DBNull.Value;
            qryEsrToPrint["LeistungInfo"] = DBNull.Value;
            qryEsrToPrint["LeistungPscdID"] = DBNull.Value;
            qryEsrToPrint["GlaeubigerID"] = DBNull.Value;

            edtBeleg.EditMode = Kiss.Interfaces.UI.EditModeType.Normal;

            //qryEsrToPrint.RowModified = true;
            qryEsrToPrint.RefreshDisplay();
        }

        private void chkLeistungMaster_Click(object sender, System.EventArgs e)
        {
            edtLeistung.EditMode = Kiss.Interfaces.UI.EditModeType.Normal;

            chkSchuldnerMaster.Checked = false;
            edtSchuldner.EditMode = Kiss.Interfaces.UI.EditModeType.ReadOnly;
            qryEsrToPrint["SchuldnerID"] = DBNull.Value;
            qryEsrToPrint["SchuldnerName"] = DBNull.Value;
            qryEsrToPrint["SchuldnerInfo"] = DBNull.Value;
            qryEsrToPrint["SchuldnerAdresse"] = DBNull.Value;

            qryEsrToPrint["LeistungID"] = DBNull.Value;
            qryEsrToPrint["LeistungText"] = DBNull.Value;
            qryEsrToPrint["LeistungInfo"] = DBNull.Value;
            qryEsrToPrint["LeistungPscdID"] = DBNull.Value;
            qryEsrToPrint["GlaeubigerID"] = DBNull.Value;

            chkBelegMaster.Checked = false;
            qryEsrToPrint["BelegID"] = DBNull.Value;
            qryEsrToPrint["BelegText"] = DBNull.Value;
            qryEsrToPrint["BelegPscdID"] = DBNull.Value;

            //qryEsrToPrint.RowModified = true;
            qryEsrToPrint.RefreshDisplay();
        }

        private void chkSchuldnerMaster_Click(object sender, System.EventArgs e)
        {
            edtSchuldner.EditMode = Kiss.Interfaces.UI.EditModeType.Normal;

            chkLeistungMaster.Checked = false;
            edtLeistung.EditMode = Kiss.Interfaces.UI.EditModeType.Normal;
            qryEsrToPrint["LeistungID"] = DBNull.Value;
            qryEsrToPrint["LeistungText"] = DBNull.Value;
            qryEsrToPrint["LeistungInfo"] = DBNull.Value;
            qryEsrToPrint["LeistungPscdID"] = DBNull.Value;
            qryEsrToPrint["GlaeubigerID"] = DBNull.Value;

            chkBelegMaster.Checked = false;
            qryEsrToPrint["BelegID"] = DBNull.Value;
            qryEsrToPrint["BelegText"] = DBNull.Value;
            qryEsrToPrint["BelegPscdID"] = DBNull.Value;

            //qryEsrToPrint.RowModified = true;
            qryEsrToPrint.RefreshDisplay();
        }

        private void DeleteTempFiles()
        {
            DirectoryInfo di = new DirectoryInfo(_tempFilePath);

            if (!di.Exists)
            {
                return;
            }

            foreach (FileInfo fi in di.GetFiles())
            {
                try
                {
                    fi.Delete();
                }
                catch (Exception)
                {
                    //nichts zu tun, Datei wird noch verwendet
                }
            }
        }

        private void edtEinzahlkonto_EditValueChanged(object sender, System.EventArgs e)
        {
            qryEsrToPrint["EinzahlkontoID"] = edtEinzahlkonto.EditValue;
            //KissMsg.ShowInfo(Convert.ToString(edtEinzahlkonto.EditValue));
            switch ((int)edtEinzahlkonto.EditValue)
            {
                case 4:
                    { // Soziale Dienste Einzahlungen W
                        qryEsrToPrint["Bemerkung"] = "";
                    }
                    break;

                case 2:
                    { // Soziale Dienste Einzahlungen UB
                        qryEsrToPrint["Bemerkung"] = "";
                    }
                    break;

                case 1:
                    { // Soziale Dienste Inkasso A
                        qryEsrToPrint["Bemerkung"] = "Bitte überweisen Sie ab sofort Ihre Alimentenverpflichtung mit den beiliegenden Einzahlungsscheinen. " +
                                  "Die bisherigen Einzahlungsscheine haben ab sofort keine Gültigkeit mehr. " +
                                  "Bitte denken Sie auch daran, allenfalls ihren Dauerauftrag bei Ihrer Bank/Post anzupassen. " +
                                  "Vielen Dank\r\n" +
                                  "\r\n" +
                                  "Soziale Dienste\r\n" +
                                  "Alimentenstelle";
                    }
                    break;

                case 3:
                    { // Soziale Dienste Inkasso W
                        // wird erst nach befüllen des Einzahlers gesetzt
                        qryEsrToPrint["Bemerkung"] = "";
                    }
                    break;
            }
            qryEsrToPrint.DataTable.AcceptChanges();
            qryEsrToPrint.RowModified = false;
        }

        private void edtLeistung_UserModifiedFld(object sender, KiSS4.Gui.UserModifiedFldEventArgs e)
        {
            edtLeistung_UserModifiedFld(e, null);
        }

        private void edtLeistung_UserModifiedFld(KiSS4.Gui.UserModifiedFldEventArgs e, int? faLeistungID)
        {
            if (!(chkSchuldnerMaster.Checked || chkLeistungMaster.Checked || chkBelegMaster.Checked))
            {
                chkLeistungMaster.Checked = true;
                edtSchuldner.EditMode = Kiss.Interfaces.UI.EditModeType.ReadOnly;
            }

            string SearchString = "";
            string UserID = null;
            string Schuldner = null;
            if (faLeistungID == null)
            {
                SearchString = edtLeistung.Text.Replace("*", "%").Replace("?", "_").Replace(" ", "%");

                if (!chkLeistungMaster.Checked)
                    Schuldner = Convert.ToString(qryEsrToPrint["SchuldnerID"]);

                if (DBUtil.IsEmpty(SearchString) && faLeistungID == null)
                {
                    // Wenn der Suchstring leer ist:
                    if (e.ButtonClicked)
                        // und auf den Button geklickt wurde, dann soll nach allen gesucht werden:
                        SearchString = "%";
                    else
                    {
                        // sonst soll der Eintrag gelöscht werden:
                        qryEsrToPrint["LeistungID"] = DBNull.Value;
                        qryEsrToPrint["LeistungText"] = DBNull.Value;
                        qryEsrToPrint["LeistungInfo"] = DBNull.Value;
                        qryEsrToPrint["LeistungPscdID"] = DBNull.Value;
                        //--		qryEsrToPrint["GlaeubigerID"] = DBNull.Value;

                        if (chkLeistungMaster.Checked)
                        {
                            qryEsrToPrint["SchuldnerID"] = DBNull.Value;
                            qryEsrToPrint["SchuldnerName"] = DBNull.Value;
                            qryEsrToPrint["SchuldnerInfo"] = DBNull.Value;
                            qryEsrToPrint["SchuldnerAdresse"] = DBNull.Value;
                        }

                        return;
                    }
                }

                if (SearchString == ".")
                {
                    SearchString = "%";
                    UserID = Convert.ToString(Session.User.UserID);
                }
            }
            string sql = @"
              SELECT ID$ = LEI.FaLeistungID,
                [Typ] = isnull(LOV.ShortText,LEI.FaProzessCode),
                [in PSCD] = CASE WHEN LEI.PscdVertragsgegenstandID IS NULL THEN '' ELSE 'X' END,
                [Fall Nr] = LEI.FaFallID,
                [Datum von] = convert(varchar, LEI.DatumVon,104),
                [Gläubiger] = (
                  SELECT count(distinct GLE.baPersonID) FROM dbo.ikglaeubiger GLE
                  LEFT JOIN dbo.ikRechtstitel IRT on GLE.ikRechtstitelID = IRT.ikRechtstitelID
                  WHERE IRT.FaLeistungID = LEI.FaLeistungID),
                [Schuldner] = PRS.NameVorname + ' (' + isNull(CONVERT(varchar,PRS.[Alter]),'-') + '), ' + PRS.Wohnsitz,
                [Leistungsträger] = PRL.NameVorname + ' (' + isNull(CONVERT(varchar,PRL.[Alter]),'-') + '), ' + PRL.Wohnsitz,
                PscdVertragsgegenstandID$ = LEI.PscdVertragsgegenstandID,
                TypLang$ = isnull(LOV.Value3,LEI.FaProzessCode),
                Schuldner$ = PRS.NameVorname + ' (' + isNull(CONVERT(varchar,PRS.[Alter]),'-') + '), ' + PRS.Wohnsitz,
                SchuldnerID$ = LEI.SchuldnerBaPersonID,
                SchuldnerAdresse$ = PRS.VornameName + char(13) + char(10) + PRS.WohnsitzMehrzeilig  --,
              FROM dbo.FaLeistung LEI with(readuncommitted)
              INNER JOIN dbo.vwPerson PRS on PRS.BaPersonID = LEI.SchuldnerBaPersonID
              INNER JOIN dbo.vwPerson PRL on PRL.BaPersonID = LEI.BaPersonID
              LEFT  JOIN dbo.XLOVCode LOV with(readuncommitted) ON LOV.Code = LEI.FaProzessCode AND LOV.LOVName = 'FaProzess'
              WHERE  ({0} IS NOT NULL OR {1} IS NOT NULL OR {2} IS NOT NULL OR {3} IS NOT NULL)
                AND ({0} IS NULL OR PRL.NameVorname + ' (' + isNull(CONVERT(varchar,PRL.[Alter]),'-') + '), ' + PRL.Wohnsitz + ' ' +
                    CONVERT(varchar,LEI.FaFallID) LIKE '%' + {0} + '%')
                AND LEI.DatumBis is null
                AND ({1} IS NULL OR (LEI.SchuldnerBaPersonID = {1}))
                AND ({2} IS NULL OR (LEI.UserID = {2} OR LEI.SachbearbeiterID = {2}))
                AND ({3} IS NULL OR (LEI.FaLeistungID = {3}))
              ORDER by Typ,[Gläubiger]";

            // Dialog öffnen:
            KissLookupDialog dlg = new KissLookupDialog();
            e.Cancel = !dlg.SearchData(sql, SearchString, e.ButtonClicked, Schuldner, UserID, faLeistungID);
            if (!e.Cancel)
            {
                qryEsrToPrint["LeistungID"] = dlg[0];
                qryEsrToPrint["LeistungText"] = Convert.ToString(dlg[7]);
                qryEsrToPrint["LeistungPscdID"] = Convert.ToString(dlg[8]);
                //	qryEsrToPrint["GlaeubigerID"] = dlg[13];

                string pscdInfo = "";
                if (Convert.ToString(dlg[2]) == "X")
                {
                    pscdInfo = "PSCD Vertragsgegenstand = " + Convert.ToString(dlg[8]);
                }
                else
                {
                    pscdInfo = "PSCD Vertragsgegenstand nicht vorhanden";
                }

                // Holen der GläubigerInnen
                string GlaeubigerInnen = Convert.ToString(DBUtil.ExecuteScalarSQL(@"
                            DECLARE @Zeilenumbruch int
                            DECLARE @Result VARCHAR(5000)
                            DECLARE @Value VARCHAR(200)
                            DECLARE @PAlter INT

                            SET @Result = ''
                            SET @Zeilenumbruch = 1

                            DECLARE csrGlaeubiger CURSOR FOR
                                SELECT distinct P.[Alter], P.NameVorname + isNull(' ('+CONVERT(varchar,P.[Alter])+')','')
                                FROM dbo.ikrechtstitel IRT with(readuncommitted)
                                  INNER JOIN dbo.ikglaeubiger GLE with(readuncommitted) on GLE.ikRechtstitelID = IRT.ikRechtstitelID
                                  left join dbo.vwPerson P ON P.BaPersonID = GLE.BaPersonID
                                WHERE IRT.FaLeistungID = {0}
                                ORDER BY P.[Alter] DESC

                            OPEN csrGlaeubiger
                            WHILE 1 = 1 BEGIN
                                FETCH NEXT FROM csrGlaeubiger INTO @PAlter, @Value
                                IF NOT @@FETCH_STATUS = 0 BREAK
                                IF NOT @Result = '' BEGIN
                                    IF @Zeilenumbruch = 1 BEGIN
                                        SET @Result = @Result + CHAR(13) + CHAR(10)
                                    END ELSE BEGIN
                                        SET @Result = @Result + '; '
                                    END
                                END
                                SET @Result = @Result + ISNULL(@Value, '')
                            END
                            CLOSE csrGlaeubiger
                            DEALLOCATE csrGlaeubiger
                            SELECT @Result", dlg[0]));
                //KissMsg.ShowInfo(GlaeubigerInnen );
                qryEsrToPrint["LeistungInfo"] = "Fall-Nr./LeistungID: " + Convert.ToString(dlg[3]) + " / " + Convert.ToString(dlg[0]) + "\r\n" +
                    "Leistungstyp: " + Convert.ToString(dlg[9]) + "\r\n" +
                    "Aktiv von: " + Convert.ToString(dlg[4]) + "\r\n" +
                    pscdInfo + "\r\n" +
                    "Anzahl Gläubiger: " + Convert.ToString(dlg[5]) + "\r\n" + GlaeubigerInnen;

                // wenn kein Schuldner, dann eintragen
                if (DBUtil.IsEmpty(edtSchuldner.Text) || chkLeistungMaster.Checked)
                {
                    qryEsrToPrint["SchuldnerID"] = dlg[11];
                    qryEsrToPrint["SchuldnerName"] = Convert.ToString(dlg[10]);
                    qryEsrToPrint["SchuldnerInfo"] = "Geschäftspartner ID = " + Convert.ToString(dlg[11]);
                    qryEsrToPrint["SchuldnerAdresse"] = Convert.ToString(dlg[12]);
                }
            }
        }

        private void edtSchuldner_UserModifiedFld(object sender, KiSS4.Gui.UserModifiedFldEventArgs e)
        {
            edtSchuldner_UserModifiedFld(e, null);
        }

        private void edtSchuldner_UserModifiedFld(KiSS4.Gui.UserModifiedFldEventArgs e, int? schuldnerID)
        {
            if (!(chkSchuldnerMaster.Checked || chkLeistungMaster.Checked || chkBelegMaster.Checked))
            {
                chkSchuldnerMaster.Checked = true;
            }

            string SearchString = "";
            string UserID = null;
            if (schuldnerID == null)
            {
                SearchString = edtSchuldner.Text.Replace("*", "%").Replace("?", "_").Replace(" ", "%");
                if (DBUtil.IsEmpty(SearchString))
                {
                    // Wenn der Suchstring leer ist:
                    if (e.ButtonClicked)
                        // und auf den Button geklickt wurde, dann soll nach allen gesucht werden:
                        SearchString = "%";
                    else
                    {
                        // sonst soll der Eintrag gelöscht werden:
                        qryEsrToPrint["SchuldnerID"] = DBNull.Value;
                        qryEsrToPrint["SchuldnerName"] = DBNull.Value;
                        qryEsrToPrint["SchuldnerInfo"] = DBNull.Value;
                        qryEsrToPrint["SchuldnerAdresse"] = DBNull.Value;
                        return;
                    }
                }
                if (SearchString == ".")
                {
                    SearchString = "%";
                    UserID = Convert.ToString(Session.User.UserID);
                }
            }

            string sql = @"
                SELECT ID$ = PRS.BaPersonID,
                    Typ = 'Person',
                    Name = PRS.VornameName,
                    Strasse = PRS.WohnsitzStrasseHausNr,
                    Ort = PRS.WohnsitzPLZOrt,
                    Anzeige$ = PRS.NameVorname + ' (' + CONVERT(varchar,PRS.[Alter]) + '), ' + PRS.Wohnsitz,
                    Wohnsitz$ = PRS.VornameName + char(13) + char(10) + PRS.WohnsitzMehrzeilig,
                    GeschlechtCode = PRS.GeschlechtCode,
                    UserName = SUBSTRING(FirstName, 1, 1) + '. ' + LastName,
                    UserPhone = ISNULL(USR.Phone, '')
                FROM dbo.vwPerson PRS
                    INNER JOIN dbo.faleistung   LEI WITH(READUNCOMMITTED) ON LEI.SchuldnerBaPersonID = PRS.BaPersonID
                    INNER JOIN dbo.XUser        USR WITH(READUNCOMMITTED) ON USR.UserID = LEI.UserID
                WHERE ({0} IS NOT NULL OR {1} IS NOT NULL OR {2} IS NOT NULL)
                    AND ({0} IS NULL OR PRS.NameVorname + ' (' + CONVERT(varchar,PRS.[Alter]) + '), ' + PRS.Wohnsitz LIKE '%' + {0} + '%')
                    AND LEI.DatumBis is null
                    AND ({1} IS NULL OR (LEI.UserID = {1} OR LEI.SachbearbeiterID = {1}))
                    AND ({2} IS NULL OR (PRS.BaPersonID = {2}))

                /* momentan noch keine Institutionen
                UNION
                SELECT ID$ = INS.BaInstitutionID, 'Institution', Name = INS.Name, Strasse = INS.StrasseHausNr, Ort = INS.PLZOrt,
                Anzeige$ = INS.Name,
                Wohnsitz$ = INS.Name + char(13) + char(10) + INS.StrasseHausNr + char(13) + char(10) + INS.PLZOrt
                FROM dbo.vwInstitution INS
                WHERE INS.Name LIKE '%' + {0} + '%' AND
                    INS.Debitor = '1'
                */

                ORDER BY Typ,Name";

            // Dialog öfnen:
            KissLookupDialog dlg = new KissLookupDialog();
            e.Cancel = !dlg.SearchData(sql, SearchString, e.ButtonClicked, UserID, schuldnerID);
            if (!e.Cancel)
            {
                qryEsrToPrint["SchuldnerID"] = dlg[0];
                qryEsrToPrint["SchuldnerName"] = Convert.ToString(dlg[5]);
                qryEsrToPrint["SchuldnerInfo"] = "Geschäftspartner ID = " + Convert.ToString(dlg[0]);
                qryEsrToPrint["SchuldnerAdresse"] = Convert.ToString(dlg[6]);

                if (edtEinzahlkonto.EditValue as int? == 3) // nur W-Inkasso
                {
                    //string userNamePhone = DBUtil.ExecuteScalarSQL("Select SUBSTRING(FirstName, 1, 1) + '. ' + LastName + '\r\n' + ISNULL(Phone, '') From XUser WHERE UserID = {0}", Session.User.UserID) as string;
                    int? geschlechtCode = dlg[7] as int?;
                    string bemerkung = DBUtil.GetConfigString(@"System\Inkasso\ESRDruckMaske_Bemerkungstext", "");
                    string anrede = "Sehr geehrte" + (geschlechtCode == 1 ? "r Herr " : geschlechtCode == 2 ? " Frau " : "(r) Herr/Frau ") + Convert.ToString(dlg[2]) + "\r\n";
                    string benutzer = dlg[8] + "\r\n" + dlg[9];
                    qryEsrToPrint["Bemerkung"] = string.Format(bemerkung, anrede, benutzer);
                }
            }
        }

        #endregion
    }
}
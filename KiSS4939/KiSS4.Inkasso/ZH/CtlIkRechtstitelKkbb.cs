#region Header

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3053
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#endregion

using System;
using System.ComponentModel;
using Kiss.Interfaces.UI;
using KiSS4.Common;
using KiSS4.DB;
using KiSS4.Gui;

namespace KiSS4.Inkasso.ZH
{
    public class CtlIkRechtstitelKkbb : KiSS4.Gui.KissUserControl
    {
        #region Fields

        private int FaFallID = 0;

        // Letzte Bearbeitung
        // 03.02.2008 : sozheo : neu
        // 26.02.2009 : sozheo : Anpassungen für neue Tabelle IkInterneVerrechnung
        // ------------------------------------------------------------------------
        private int FaLeistungID = 0;
        private int FaProzessCode;
        private int GlaeubigerID;
        private bool HatMonatsDaten;
        private bool HatSollstellungen;
        private int IkRechtstitelID = 0;
        private bool LeistungIstGeschlossen = true;
        private bool RechtstitelIstKorrigiert = false;
        private System.ComponentModel.IContainer components;
        private KiSS4.Inkasso.ZH.CtlIkGlaeubiger ctlIkGlaeubiger;
        private KiSS4.Gui.KissLookUpEdit edtBaPersonID;
        private KiSS4.Gui.KissDateEdit edtBeantragtAm;
        private KiSS4.Gui.KissTextEdit edtBezeichnung;
        private KiSS4.Gui.KissMemoEdit edtElterlicheSorgeBemerkung;
        private KiSS4.Gui.KissCheckEdit edtGanzesKlientensystem;
        private KiSS4.Gui.KissDateEdit edtIkRechtstitelGueltigBis;
        private KiSS4.Gui.KissDateEdit edtIkRechtstitelGueltigVon;
        private KiSS4.Gui.KissTextEdit edtStatusAntrag;
        private KiSS4.Gui.KissTextEdit edtStatusWohnhaft;
        private KiSS4.Gui.KissDateEdit edtWohnhaftImKantonSeit;
        private KiSS4.Gui.KissLabel kissLabel3;
        private KiSS4.Gui.KissLabel kissLabel6;
        private KiSS4.Gui.KissLabel kissLabel7;
        private KiSS4.Gui.KissLabel lbl;
        private KiSS4.Gui.KissLabel lblBaPersonID;
        private KiSS4.Gui.KissLabel lblBeantragtAm;
        private KiSS4.Gui.KissLabel lblBezeichnung;
        private KiSS4.Gui.KissLabel lblIkRechtstitelGueltigBis;
        private KiSS4.Gui.KissLabel lblTitel;
        private KiSS4.Gui.KissLabel lblWohnhaftImKantonSeit;
        private System.Windows.Forms.Panel panel1;
        private System.Windows.Forms.PictureBox picTitle;
        private KiSS4.DB.SqlQuery qryCheck;
        private KiSS4.DB.SqlQuery qryIkRechtstitel;
        private KiSS4.DB.SqlQuery qryPerson;
        private KiSS4.DB.SqlQuery qryPosition;

        #endregion

        #region Constructors

        public CtlIkRechtstitelKkbb(int LeistungID, int FallID, System.Drawing.Image icon, 
            bool Gesperrt, int RechtstitelID, int ProzessCode, bool LeistgGeschlossen)
            : this()
        {
            picTitle.Image = icon;
              FaLeistungID = LeistungID;
              FaFallID = FallID;
              IkRechtstitelID = RechtstitelID;

              // TODO: kann nach Tests wieder gelöscht werden
              if (IkRechtstitelID == 0) KissMsg.ShowInfo("IkRechtstitelID ist 0.");

              FaProzessCode = ProzessCode;
              LeistungIstGeschlossen = LeistgGeschlossen;
              if (LeistungIstGeschlossen)
              {
            qryIkRechtstitel.CanUpdate = false;
            //qryIkRechtstitel.CanInsert = false;
            //qryIkRechtstitel.CanDelete = false;
              }

              // Register "Glauebiger" aktualiseren:
              bool StatusIstOk = (
            !DBUtil.IsEmpty(qryIkRechtstitel["IkRechtstitelGueltigVon"]) &&
            !DBUtil.IsEmpty(qryIkRechtstitel["IkRechtstitelGueltigBis"])
              );
              ctlIkGlaeubiger.Init(
            IkRechtstitelID, FaFallID, qryIkRechtstitel.CanUpdate && StatusIstOk, true,
            FaLeistungID, FaProzessCode, 0, LeistungIstGeschlossen
              );
              ctlIkGlaeubiger.AddData += new System.EventHandler(this.CtlIkRechtstitelKkbb_AddData);
              ctlIkGlaeubiger.DeleteData += new System.EventHandler(this.CtlIkRechtstitelKkbb_DeleteData);
              ctlIkGlaeubiger.MoveFirst += new System.EventHandler(this.CtlIkRechtstitelKkbb_MoveFirst);
              ctlIkGlaeubiger.MoveNext += new System.EventHandler(this.CtlIkRechtstitelKkbb_MoveNext);
              ctlIkGlaeubiger.MovePrevious += new System.EventHandler(this.CtlIkRechtstitelKkbb_MovePrevious);
              ctlIkGlaeubiger.MoveLast += new System.EventHandler(this.CtlIkRechtstitelKkbb_MoveLast);
              ctlIkGlaeubiger.RefreshData += new System.EventHandler(this.CtlIkRechtstitelKkbb_RefreshData);
              ctlIkGlaeubiger.SaveData += new System.EventHandler(this.CtlIkRechtstitelKkbb_SaveData);
              ctlIkGlaeubiger.UndoDataChanges += new System.EventHandler(this.CtlIkRechtstitelKkbb_UndoDataChanges);

              // Personen aus FaFallPerson:
              qryPerson.Fill(FaFallID, IkRechtstitelID, FaLeistungID);

              if (qryPerson.Count == 0)
            KissMsg.ShowInfo(
              "Es konnte kein Kind unter 2 Jahren gefunden werden.\r\n"+
              "Es werden nur Kinder mit erfasstem Geburtsdatum angezeigt.");

              // Daten zeigen:
              qryIkRechtstitel.Fill(RechtstitelID);
        }

        public CtlIkRechtstitelKkbb()
        {
            this.InitializeComponent();
        }

        #endregion

        #region Windows Form Designer generated code

        /// <summary>
        /// Required method for Designer support - do not modify
        /// the contents of this method with the code editor.
        /// </summary>
        private void InitializeComponent()
        {
            this.components = new System.ComponentModel.Container();
            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(CtlIkRechtstitelKkbb));
            this.edtBezeichnung = new KiSS4.Gui.KissTextEdit();
            this.edtIkRechtstitelGueltigVon = new KiSS4.Gui.KissDateEdit();
            this.edtStatusAntrag = new KiSS4.Gui.KissTextEdit();
            this.edtStatusWohnhaft = new KiSS4.Gui.KissTextEdit();
            this.edtBaPersonID = new KiSS4.Gui.KissLookUpEdit();
            this.edtBeantragtAm = new KiSS4.Gui.KissDateEdit();
            this.edtWohnhaftImKantonSeit = new KiSS4.Gui.KissDateEdit();
            this.edtIkRechtstitelGueltigBis = new KiSS4.Gui.KissDateEdit();
            this.edtElterlicheSorgeBemerkung = new KiSS4.Gui.KissMemoEdit();
            this.edtGanzesKlientensystem = new KiSS4.Gui.KissCheckEdit();
            this.ctlIkGlaeubiger = new KiSS4.Inkasso.ZH.CtlIkGlaeubiger();
            this.panel1 = new System.Windows.Forms.Panel();
            this.lblTitel = new KiSS4.Gui.KissLabel();
            this.picTitle = new System.Windows.Forms.PictureBox();
            this.lblWohnhaftImKantonSeit = new KiSS4.Gui.KissLabel();
            this.lblBeantragtAm = new KiSS4.Gui.KissLabel();
            this.kissLabel3 = new KiSS4.Gui.KissLabel();
            this.lblBaPersonID = new KiSS4.Gui.KissLabel();
            this.lbl = new KiSS4.Gui.KissLabel();
            this.lblIkRechtstitelGueltigBis = new KiSS4.Gui.KissLabel();
            this.kissLabel6 = new KiSS4.Gui.KissLabel();
            this.kissLabel7 = new KiSS4.Gui.KissLabel();
            this.lblBezeichnung = new KiSS4.Gui.KissLabel();
            this.qryCheck = new KiSS4.DB.SqlQuery(this.components);
            this.qryIkRechtstitel = new KiSS4.DB.SqlQuery(this.components);
            this.qryPerson = new KiSS4.DB.SqlQuery(this.components);
            this.qryPosition = new KiSS4.DB.SqlQuery(this.components);
            ((System.ComponentModel.ISupportInitialize)(this.edtBezeichnung.Properties)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(this.edtIkRechtstitelGueltigVon.Properties)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(this.edtStatusAntrag.Properties)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(this.edtStatusWohnhaft.Properties)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(this.edtBaPersonID)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(this.edtBaPersonID.Properties)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(this.edtBeantragtAm.Properties)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(this.edtWohnhaftImKantonSeit.Properties)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(this.edtIkRechtstitelGueltigBis.Properties)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(this.edtElterlicheSorgeBemerkung.Properties)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(this.edtGanzesKlientensystem.Properties)).BeginInit();
            this.panel1.SuspendLayout();
            ((System.ComponentModel.ISupportInitialize)(this.lblTitel)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(this.picTitle)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(this.lblWohnhaftImKantonSeit)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(this.lblBeantragtAm)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(this.kissLabel3)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(this.lblBaPersonID)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(this.lbl)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(this.lblIkRechtstitelGueltigBis)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(this.kissLabel6)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(this.kissLabel7)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(this.lblBezeichnung)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(this.qryCheck)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(this.qryIkRechtstitel)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(this.qryPerson)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(this.qryPosition)).BeginInit();
            this.SuspendLayout();
            //
            // edtBezeichnung
            //
            this.edtBezeichnung.DataMember = "Bezeichnung";
            this.edtBezeichnung.DataSource = this.qryIkRechtstitel;
            this.edtBezeichnung.Location = new System.Drawing.Point(139, 51);
            this.edtBezeichnung.Name = "edtBezeichnung";
            this.edtBezeichnung.Properties.Appearance.BackColor = System.Drawing.Color.AliceBlue;
            this.edtBezeichnung.Properties.Appearance.BorderColor = System.Drawing.Color.Linen;
            this.edtBezeichnung.Properties.Appearance.Font = new System.Drawing.Font("Arial", 13F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Pixel);
            this.edtBezeichnung.Properties.Appearance.Options.UseBackColor = true;
            this.edtBezeichnung.Properties.Appearance.Options.UseBorderColor = true;
            this.edtBezeichnung.Properties.Appearance.Options.UseFont = true;
            this.edtBezeichnung.Properties.BorderStyle = DevExpress.XtraEditors.Controls.BorderStyles.HotFlat;
            this.edtBezeichnung.Size = new System.Drawing.Size(333, 24);
            this.edtBezeichnung.TabIndex = 0;
            //
            // edtIkRechtstitelGueltigVon
            //
            this.edtIkRechtstitelGueltigVon.DataMember = "IkRechtstitelGueltigVon";
            this.edtIkRechtstitelGueltigVon.DataSource = this.qryIkRechtstitel;
            this.edtIkRechtstitelGueltigVon.EditMode = Kiss.Interfaces.UI.EditModeType.ReadOnly;
            this.edtIkRechtstitelGueltigVon.EditValue = null;
            this.edtIkRechtstitelGueltigVon.Location = new System.Drawing.Point(140, 203);
            this.edtIkRechtstitelGueltigVon.Name = "edtIkRechtstitelGueltigVon";
            this.edtIkRechtstitelGueltigVon.Properties.AllowNullInput = DevExpress.Utils.DefaultBoolean.False;
            this.edtIkRechtstitelGueltigVon.Properties.Appearance.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(247)))), ((int)(((byte)(239)))), ((int)(((byte)(231)))));
            this.edtIkRechtstitelGueltigVon.Properties.Appearance.BorderColor = System.Drawing.Color.Linen;
            this.edtIkRechtstitelGueltigVon.Properties.Appearance.Font = new System.Drawing.Font("Arial", 13F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Pixel);
            this.edtIkRechtstitelGueltigVon.Properties.Appearance.Options.UseBackColor = true;
            this.edtIkRechtstitelGueltigVon.Properties.Appearance.Options.UseBorderColor = true;
            this.edtIkRechtstitelGueltigVon.Properties.Appearance.Options.UseFont = true;
            this.edtIkRechtstitelGueltigVon.Properties.BorderStyle = DevExpress.XtraEditors.Controls.BorderStyles.HotFlat;
            this.edtIkRechtstitelGueltigVon.Properties.Buttons.AddRange(new DevExpress.XtraEditors.Controls.EditorButton[] {
                        new DevExpress.XtraEditors.Controls.EditorButton(DevExpress.XtraEditors.Controls.ButtonPredefines.Combo)});
            this.edtIkRechtstitelGueltigVon.Properties.ButtonsStyle = DevExpress.XtraEditors.Controls.BorderStyles.UltraFlat;
            this.edtIkRechtstitelGueltigVon.Properties.ReadOnly = true;
            this.edtIkRechtstitelGueltigVon.Properties.ShowToday = false;
            this.edtIkRechtstitelGueltigVon.Size = new System.Drawing.Size(101, 24);
            this.edtIkRechtstitelGueltigVon.TabIndex = 0;
            this.edtIkRechtstitelGueltigVon.TabStop = false;
            //
            // edtStatusAntrag
            //
            this.edtStatusAntrag.EditMode = Kiss.Interfaces.UI.EditModeType.ReadOnly;
            this.edtStatusAntrag.Location = new System.Drawing.Point(305, 127);
            this.edtStatusAntrag.Name = "edtStatusAntrag";
            this.edtStatusAntrag.Properties.Appearance.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(247)))), ((int)(((byte)(239)))), ((int)(((byte)(231)))));
            this.edtStatusAntrag.Properties.Appearance.BorderColor = System.Drawing.Color.Linen;
            this.edtStatusAntrag.Properties.Appearance.Font = new System.Drawing.Font("Arial", 13F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Pixel);
            this.edtStatusAntrag.Properties.Appearance.Options.UseBackColor = true;
            this.edtStatusAntrag.Properties.Appearance.Options.UseBorderColor = true;
            this.edtStatusAntrag.Properties.Appearance.Options.UseFont = true;
            this.edtStatusAntrag.Properties.BorderStyle = DevExpress.XtraEditors.Controls.BorderStyles.HotFlat;
            this.edtStatusAntrag.Properties.ReadOnly = true;
            this.edtStatusAntrag.Size = new System.Drawing.Size(168, 24);
            this.edtStatusAntrag.TabIndex = 0;
            this.edtStatusAntrag.TabStop = false;
            //
            // edtStatusWohnhaft
            //
            this.edtStatusWohnhaft.EditMode = Kiss.Interfaces.UI.EditModeType.ReadOnly;
            this.edtStatusWohnhaft.Location = new System.Drawing.Point(305, 157);
            this.edtStatusWohnhaft.Name = "edtStatusWohnhaft";
            this.edtStatusWohnhaft.Properties.Appearance.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(247)))), ((int)(((byte)(239)))), ((int)(((byte)(231)))));
            this.edtStatusWohnhaft.Properties.Appearance.BorderColor = System.Drawing.Color.Linen;
            this.edtStatusWohnhaft.Properties.Appearance.Font = new System.Drawing.Font("Arial", 13F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Pixel);
            this.edtStatusWohnhaft.Properties.Appearance.Options.UseBackColor = true;
            this.edtStatusWohnhaft.Properties.Appearance.Options.UseBorderColor = true;
            this.edtStatusWohnhaft.Properties.Appearance.Options.UseFont = true;
            this.edtStatusWohnhaft.Properties.BorderStyle = DevExpress.XtraEditors.Controls.BorderStyles.HotFlat;
            this.edtStatusWohnhaft.Properties.ReadOnly = true;
            this.edtStatusWohnhaft.Size = new System.Drawing.Size(167, 24);
            this.edtStatusWohnhaft.TabIndex = 0;
            this.edtStatusWohnhaft.TabStop = false;
            //
            // edtBaPersonID
            //
            this.edtBaPersonID.DataMember = "BaPersonID";
            this.edtBaPersonID.DataSource = this.qryIkRechtstitel;
            this.edtBaPersonID.Location = new System.Drawing.Point(139, 86);
            this.edtBaPersonID.Name = "edtBaPersonID";
            this.edtBaPersonID.Properties.Appearance.BackColor = System.Drawing.Color.AliceBlue;
            this.edtBaPersonID.Properties.Appearance.BorderColor = System.Drawing.Color.Linen;
            this.edtBaPersonID.Properties.Appearance.Font = new System.Drawing.Font("Arial", 13F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Pixel);
            this.edtBaPersonID.Properties.Appearance.Options.UseBackColor = true;
            this.edtBaPersonID.Properties.Appearance.Options.UseBorderColor = true;
            this.edtBaPersonID.Properties.Appearance.Options.UseFont = true;
            this.edtBaPersonID.Properties.BorderStyle = DevExpress.XtraEditors.Controls.BorderStyles.HotFlat;
            this.edtBaPersonID.Properties.Buttons.AddRange(new DevExpress.XtraEditors.Controls.EditorButton[] {
                        new DevExpress.XtraEditors.Controls.EditorButton(DevExpress.XtraEditors.Controls.ButtonPredefines.Combo)});
            this.edtBaPersonID.Properties.ButtonsStyle = DevExpress.XtraEditors.Controls.BorderStyles.UltraFlat;
            this.edtBaPersonID.Properties.Columns.AddRange(new DevExpress.XtraEditors.Controls.LookUpColumnInfo[] {
                        new DevExpress.XtraEditors.Controls.LookUpColumnInfo("Text", "Name", 20, DevExpress.Utils.FormatType.None, "", true, DevExpress.Utils.HorzAlignment.Default, DevExpress.Data.ColumnSortOrder.None)});
            this.edtBaPersonID.Properties.DataSource = this.qryPerson;
            this.edtBaPersonID.Properties.DisplayMember = "Text";
            this.edtBaPersonID.Properties.NullText = "";
            this.edtBaPersonID.Properties.ShowFooter = false;
            this.edtBaPersonID.Properties.ShowHeader = false;
            this.edtBaPersonID.Properties.ValueMember = "BaPersonID";
            this.edtBaPersonID.Size = new System.Drawing.Size(333, 24);
            this.edtBaPersonID.TabIndex = 1;
            this.edtBaPersonID.EditValueChanged += new System.EventHandler(this.edtBaPersonID_EditValueChanged);
            //
            // edtBeantragtAm
            //
            this.edtBeantragtAm.DataMember = "BeantragtAm";
            this.edtBeantragtAm.DataSource = this.qryIkRechtstitel;
            this.edtBeantragtAm.EditValue = null;
            this.edtBeantragtAm.Location = new System.Drawing.Point(141, 127);
            this.edtBeantragtAm.Name = "edtBeantragtAm";
            this.edtBeantragtAm.Properties.AllowNullInput = DevExpress.Utils.DefaultBoolean.False;
            this.edtBeantragtAm.Properties.Appearance.BackColor = System.Drawing.Color.AliceBlue;
            this.edtBeantragtAm.Properties.Appearance.BorderColor = System.Drawing.Color.Linen;
            this.edtBeantragtAm.Properties.Appearance.Font = new System.Drawing.Font("Arial", 13F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Pixel);
            this.edtBeantragtAm.Properties.Appearance.Options.UseBackColor = true;
            this.edtBeantragtAm.Properties.Appearance.Options.UseBorderColor = true;
            this.edtBeantragtAm.Properties.Appearance.Options.UseFont = true;
            this.edtBeantragtAm.Properties.BorderStyle = DevExpress.XtraEditors.Controls.BorderStyles.HotFlat;
            this.edtBeantragtAm.Properties.Buttons.AddRange(new DevExpress.XtraEditors.Controls.EditorButton[] {
                        new DevExpress.XtraEditors.Controls.EditorButton(DevExpress.XtraEditors.Controls.ButtonPredefines.Combo)});
            this.edtBeantragtAm.Properties.ButtonsStyle = DevExpress.XtraEditors.Controls.BorderStyles.UltraFlat;
            this.edtBeantragtAm.Properties.ShowToday = false;
            this.edtBeantragtAm.Size = new System.Drawing.Size(101, 24);
            this.edtBeantragtAm.TabIndex = 2;
            this.edtBeantragtAm.EditValueChanged += new System.EventHandler(this.edtBeantragtAm_EditValueChanged);
            //
            // edtWohnhaftImKantonSeit
            //
            this.edtWohnhaftImKantonSeit.DataMember = "WohnhaftImKantonSeit";
            this.edtWohnhaftImKantonSeit.DataSource = this.qryIkRechtstitel;
            this.edtWohnhaftImKantonSeit.EditValue = null;
            this.edtWohnhaftImKantonSeit.Location = new System.Drawing.Point(140, 157);
            this.edtWohnhaftImKantonSeit.Name = "edtWohnhaftImKantonSeit";
            this.edtWohnhaftImKantonSeit.Properties.AllowNullInput = DevExpress.Utils.DefaultBoolean.False;
            this.edtWohnhaftImKantonSeit.Properties.Appearance.BackColor = System.Drawing.Color.AliceBlue;
            this.edtWohnhaftImKantonSeit.Properties.Appearance.BorderColor = System.Drawing.Color.Linen;
            this.edtWohnhaftImKantonSeit.Properties.Appearance.Font = new System.Drawing.Font("Arial", 13F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Pixel);
            this.edtWohnhaftImKantonSeit.Properties.Appearance.Options.UseBackColor = true;
            this.edtWohnhaftImKantonSeit.Properties.Appearance.Options.UseBorderColor = true;
            this.edtWohnhaftImKantonSeit.Properties.Appearance.Options.UseFont = true;
            this.edtWohnhaftImKantonSeit.Properties.BorderStyle = DevExpress.XtraEditors.Controls.BorderStyles.HotFlat;
            this.edtWohnhaftImKantonSeit.Properties.Buttons.AddRange(new DevExpress.XtraEditors.Controls.EditorButton[] {
                        new DevExpress.XtraEditors.Controls.EditorButton(DevExpress.XtraEditors.Controls.ButtonPredefines.Combo)});
            this.edtWohnhaftImKantonSeit.Properties.ButtonsStyle = DevExpress.XtraEditors.Controls.BorderStyles.UltraFlat;
            this.edtWohnhaftImKantonSeit.Properties.ShowToday = false;
            this.edtWohnhaftImKantonSeit.Size = new System.Drawing.Size(101, 24);
            this.edtWohnhaftImKantonSeit.TabIndex = 3;
            this.edtWohnhaftImKantonSeit.EditValueChanged += new System.EventHandler(this.edtWohnhaftImKantonSeit_EditValueChanged);
            //
            // edtIkRechtstitelGueltigBis
            //
            this.edtIkRechtstitelGueltigBis.DataMember = "IkRechtstitelGueltigBis";
            this.edtIkRechtstitelGueltigBis.DataSource = this.qryIkRechtstitel;
            this.edtIkRechtstitelGueltigBis.EditMode = Kiss.Interfaces.UI.EditModeType.ReadOnly;
            this.edtIkRechtstitelGueltigBis.EditValue = null;
            this.edtIkRechtstitelGueltigBis.Location = new System.Drawing.Point(304, 203);
            this.edtIkRechtstitelGueltigBis.Name = "edtIkRechtstitelGueltigBis";
            this.edtIkRechtstitelGueltigBis.Properties.AllowNullInput = DevExpress.Utils.DefaultBoolean.False;
            this.edtIkRechtstitelGueltigBis.Properties.Appearance.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(247)))), ((int)(((byte)(239)))), ((int)(((byte)(231)))));
            this.edtIkRechtstitelGueltigBis.Properties.Appearance.BorderColor = System.Drawing.Color.Linen;
            this.edtIkRechtstitelGueltigBis.Properties.Appearance.Font = new System.Drawing.Font("Arial", 13F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Pixel);
            this.edtIkRechtstitelGueltigBis.Properties.Appearance.Options.UseBackColor = true;
            this.edtIkRechtstitelGueltigBis.Properties.Appearance.Options.UseBorderColor = true;
            this.edtIkRechtstitelGueltigBis.Properties.Appearance.Options.UseFont = true;
            this.edtIkRechtstitelGueltigBis.Properties.BorderStyle = DevExpress.XtraEditors.Controls.BorderStyles.HotFlat;
            this.edtIkRechtstitelGueltigBis.Properties.Buttons.AddRange(new DevExpress.XtraEditors.Controls.EditorButton[] {
                        new DevExpress.XtraEditors.Controls.EditorButton(DevExpress.XtraEditors.Controls.ButtonPredefines.Combo)});
            this.edtIkRechtstitelGueltigBis.Properties.ButtonsStyle = DevExpress.XtraEditors.Controls.BorderStyles.UltraFlat;
            this.edtIkRechtstitelGueltigBis.Properties.ReadOnly = true;
            this.edtIkRechtstitelGueltigBis.Properties.ShowToday = false;
            this.edtIkRechtstitelGueltigBis.Size = new System.Drawing.Size(99, 24);
            this.edtIkRechtstitelGueltigBis.TabIndex = 4;
            this.edtIkRechtstitelGueltigBis.TabStop = false;
            //
            // edtElterlicheSorgeBemerkung
            //
            this.edtElterlicheSorgeBemerkung.DataMember = "Bemerkung";
            this.edtElterlicheSorgeBemerkung.DataSource = this.qryIkRechtstitel;
            this.edtElterlicheSorgeBemerkung.Location = new System.Drawing.Point(138, 236);
            this.edtElterlicheSorgeBemerkung.Name = "edtElterlicheSorgeBemerkung";
            this.edtElterlicheSorgeBemerkung.Properties.Appearance.BackColor = System.Drawing.Color.AliceBlue;
            this.edtElterlicheSorgeBemerkung.Properties.Appearance.BorderColor = System.Drawing.Color.Linen;
            this.edtElterlicheSorgeBemerkung.Properties.Appearance.Font = new System.Drawing.Font("Arial", 13F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Pixel);
            this.edtElterlicheSorgeBemerkung.Properties.Appearance.Options.UseBackColor = true;
            this.edtElterlicheSorgeBemerkung.Properties.Appearance.Options.UseBorderColor = true;
            this.edtElterlicheSorgeBemerkung.Properties.Appearance.Options.UseFont = true;
            this.edtElterlicheSorgeBemerkung.Properties.BorderStyle = DevExpress.XtraEditors.Controls.BorderStyles.HotFlat;
            this.edtElterlicheSorgeBemerkung.Size = new System.Drawing.Size(333, 98);
            this.edtElterlicheSorgeBemerkung.TabIndex = 5;
            //
            // edtGanzesKlientensystem
            //
            this.edtGanzesKlientensystem.EditValue = true;
            this.edtGanzesKlientensystem.Location = new System.Drawing.Point(10, 367);
            this.edtGanzesKlientensystem.Name = "edtGanzesKlientensystem";
            this.edtGanzesKlientensystem.Properties.Appearance.BackColor = System.Drawing.Color.Transparent;
            this.edtGanzesKlientensystem.Properties.Appearance.Options.UseBackColor = true;
            this.edtGanzesKlientensystem.Properties.Caption = "Ganzes Klientensystem anzeigen";
            this.edtGanzesKlientensystem.Size = new System.Drawing.Size(229, 19);
            this.edtGanzesKlientensystem.TabIndex = 6;
            this.edtGanzesKlientensystem.EditValueChanged += new System.EventHandler(this.edtGanzesKlientensystem_EditValueChanged);
            this.edtGanzesKlientensystem.EditValueChanging += new DevExpress.XtraEditors.Controls.ChangingEventHandler(this.edtGanzesKlientensystem_EditValueChanging);
            //
            // ctlIkGlaeubiger
            //
            this.ctlIkGlaeubiger.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom)
                        | System.Windows.Forms.AnchorStyles.Left)
                        | System.Windows.Forms.AnchorStyles.Right)));
            this.ctlIkGlaeubiger.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(247)))), ((int)(((byte)(239)))), ((int)(((byte)(231)))));
            this.ctlIkGlaeubiger.Location = new System.Drawing.Point(3, 392);
            this.ctlIkGlaeubiger.Name = "ctlIkGlaeubiger";
            this.ctlIkGlaeubiger.Size = new System.Drawing.Size(704, 185);
            this.ctlIkGlaeubiger.TabIndex = 7;
            //
            // panel1
            //
            this.panel1.Controls.Add(this.picTitle);
            this.panel1.Controls.Add(this.lblTitel);
            this.panel1.Dock = System.Windows.Forms.DockStyle.Top;
            this.panel1.Location = new System.Drawing.Point(0, 0);
            this.panel1.Name = "panel1";
            this.panel1.Size = new System.Drawing.Size(710, 35);
            this.panel1.TabIndex = 30;
            //
            // lblTitel
            //
            this.lblTitel.LabelStyle = KiSS4.Gui.LabelStyleType.TitleLabel;
            this.lblTitel.Location = new System.Drawing.Point(32, 5);
            this.lblTitel.Name = "lblTitel";
            this.lblTitel.Size = new System.Drawing.Size(542, 27);
            this.lblTitel.TabIndex = 0;
            this.lblTitel.Text = "Bedingungen für KKBB Anspruch";
            this.lblTitel.UseCompatibleTextRendering = true;
            //
            // picTitle
            //
            this.picTitle.Location = new System.Drawing.Point(5, 5);
            this.picTitle.Name = "picTitle";
            this.picTitle.Size = new System.Drawing.Size(16, 16);
            this.picTitle.TabIndex = 293;
            this.picTitle.TabStop = false;
            //
            // lblWohnhaftImKantonSeit
            //
            this.lblWohnhaftImKantonSeit.Font = new System.Drawing.Font("Arial", 11F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Pixel);
            this.lblWohnhaftImKantonSeit.LabelStyle = KiSS4.Gui.LabelStyleType.Custom;
            this.lblWohnhaftImKantonSeit.Location = new System.Drawing.Point(11, 157);
            this.lblWohnhaftImKantonSeit.Name = "lblWohnhaftImKantonSeit";
            this.lblWohnhaftImKantonSeit.Size = new System.Drawing.Size(121, 24);
            this.lblWohnhaftImKantonSeit.TabIndex = 34;
            this.lblWohnhaftImKantonSeit.Text = "Wohnhaft in Zürich\r\nseit wann";
            this.lblWohnhaftImKantonSeit.UseCompatibleTextRendering = true;
            //
            // lblBeantragtAm
            //
            this.lblBeantragtAm.Location = new System.Drawing.Point(12, 127);
            this.lblBeantragtAm.Name = "lblBeantragtAm";
            this.lblBeantragtAm.Size = new System.Drawing.Size(97, 24);
            this.lblBeantragtAm.TabIndex = 46;
            this.lblBeantragtAm.Text = "Antrag am";
            this.lblBeantragtAm.UseCompatibleTextRendering = true;
            //
            // kissLabel3
            //
            this.kissLabel3.Location = new System.Drawing.Point(12, 236);
            this.kissLabel3.Name = "kissLabel3";
            this.kissLabel3.Size = new System.Drawing.Size(97, 24);
            this.kissLabel3.TabIndex = 47;
            this.kissLabel3.Text = "Bemerkung";
            this.kissLabel3.UseCompatibleTextRendering = true;
            //
            // lblBaPersonID
            //
            this.lblBaPersonID.Location = new System.Drawing.Point(10, 86);
            this.lblBaPersonID.Name = "lblBaPersonID";
            this.lblBaPersonID.Size = new System.Drawing.Size(88, 24);
            this.lblBaPersonID.TabIndex = 49;
            this.lblBaPersonID.Text = "KKBB für Kind";
            this.lblBaPersonID.UseCompatibleTextRendering = true;
            //
            // lbl
            //
            this.lbl.Font = new System.Drawing.Font("Arial", 11F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Pixel);
            this.lbl.LabelStyle = KiSS4.Gui.LabelStyleType.Custom;
            this.lbl.Location = new System.Drawing.Point(12, 201);
            this.lbl.Name = "lbl";
            this.lbl.Size = new System.Drawing.Size(111, 24);
            this.lbl.TabIndex = 54;
            this.lbl.Text = "Theoretischer Anspruch ab";
            this.lbl.UseCompatibleTextRendering = true;
            //
            // lblIkRechtstitelGueltigBis
            //
            this.lblIkRechtstitelGueltigBis.Location = new System.Drawing.Point(261, 201);
            this.lblIkRechtstitelGueltigBis.Name = "lblIkRechtstitelGueltigBis";
            this.lblIkRechtstitelGueltigBis.Size = new System.Drawing.Size(20, 24);
            this.lblIkRechtstitelGueltigBis.TabIndex = 55;
            this.lblIkRechtstitelGueltigBis.Text = "bis";
            this.lblIkRechtstitelGueltigBis.UseCompatibleTextRendering = true;
            //
            // kissLabel6
            //
            this.kissLabel6.Location = new System.Drawing.Point(262, 128);
            this.kissLabel6.Name = "kissLabel6";
            this.kissLabel6.Size = new System.Drawing.Size(37, 24);
            this.kissLabel6.TabIndex = 56;
            this.kissLabel6.Text = "Status";
            this.kissLabel6.UseCompatibleTextRendering = true;
            //
            // kissLabel7
            //
            this.kissLabel7.Location = new System.Drawing.Point(261, 157);
            this.kissLabel7.Name = "kissLabel7";
            this.kissLabel7.Size = new System.Drawing.Size(38, 24);
            this.kissLabel7.TabIndex = 57;
            this.kissLabel7.Text = "Status";
            this.kissLabel7.UseCompatibleTextRendering = true;
            //
            // lblBezeichnung
            //
            this.lblBezeichnung.Location = new System.Drawing.Point(10, 51);
            this.lblBezeichnung.Name = "lblBezeichnung";
            this.lblBezeichnung.Size = new System.Drawing.Size(111, 24);
            this.lblBezeichnung.TabIndex = 58;
            this.lblBezeichnung.Text = "Bezeichnung";
            this.lblBezeichnung.UseCompatibleTextRendering = true;
            //
            // qryCheck
            //
            this.qryCheck.HostControl = this;
            this.qryCheck.SelectStatement = resources.GetString("qryCheck.SelectStatement");
            //
            // qryIkRechtstitel
            //
            this.qryIkRechtstitel.BatchUpdate = true;
            this.qryIkRechtstitel.CanUpdate = true;
            this.qryIkRechtstitel.HostControl = this;
            this.qryIkRechtstitel.SelectStatement = resources.GetString("qryIkRechtstitel.SelectStatement");
            this.qryIkRechtstitel.TableName = "IkRechtstitel";
            this.qryIkRechtstitel.AfterFill += new System.EventHandler(this.qryIkRechtstitel_AfterFill);
            this.qryIkRechtstitel.PositionChanged += new System.EventHandler(this.qryIkRechtstitel_PositionChanged);
            this.qryIkRechtstitel.BeforePost += new System.EventHandler(this.qryIkRechtstitel_BeforePost);
            //
            // qryPerson
            //
            this.qryPerson.HostControl = this;
            this.qryPerson.SelectStatement = resources.GetString("qryPerson.SelectStatement");
            //
            // qryPosition
            //
            this.qryPosition.HostControl = this;
            this.qryPosition.SelectStatement = resources.GetString("qryPosition.SelectStatement");
            //
            // CtlIkRechtstitelKkbb
            //
            this.Controls.Add(this.lblBezeichnung);
            this.Controls.Add(this.kissLabel7);
            this.Controls.Add(this.kissLabel6);
            this.Controls.Add(this.lblIkRechtstitelGueltigBis);
            this.Controls.Add(this.lbl);
            this.Controls.Add(this.lblBaPersonID);
            this.Controls.Add(this.kissLabel3);
            this.Controls.Add(this.lblBeantragtAm);
            this.Controls.Add(this.lblWohnhaftImKantonSeit);
            this.Controls.Add(this.panel1);
            this.Controls.Add(this.ctlIkGlaeubiger);
            this.Controls.Add(this.edtGanzesKlientensystem);
            this.Controls.Add(this.edtElterlicheSorgeBemerkung);
            this.Controls.Add(this.edtIkRechtstitelGueltigBis);
            this.Controls.Add(this.edtWohnhaftImKantonSeit);
            this.Controls.Add(this.edtBeantragtAm);
            this.Controls.Add(this.edtBaPersonID);
            this.Controls.Add(this.edtStatusWohnhaft);
            this.Controls.Add(this.edtStatusAntrag);
            this.Controls.Add(this.edtIkRechtstitelGueltigVon);
            this.Controls.Add(this.edtBezeichnung);
            this.Name = "CtlIkRechtstitelKkbb";
            this.Size = new System.Drawing.Size(710, 580);
            this.AddData += new System.EventHandler(this.CtlIkRechtstitelKkbb_AddData);
            this.DeleteData += new System.EventHandler(this.CtlIkRechtstitelKkbb_DeleteData);
            this.MoveFirst += new System.EventHandler(this.CtlIkRechtstitelKkbb_MoveFirst);
            this.MoveNext += new System.EventHandler(this.CtlIkRechtstitelKkbb_MoveNext);
            this.SaveData += new System.EventHandler(this.CtlIkRechtstitelKkbb_SaveData);
            this.MovePrevious += new System.EventHandler(this.CtlIkRechtstitelKkbb_MovePrevious);
            this.RefreshData += new System.EventHandler(this.CtlIkRechtstitelKkbb_RefreshData);
            this.UndoDataChanges += new System.EventHandler(this.CtlIkRechtstitelKkbb_UndoDataChanges);
            this.MoveLast += new System.EventHandler(this.CtlIkRechtstitelKkbb_MoveLast);
            ((System.ComponentModel.ISupportInitialize)(this.edtBezeichnung.Properties)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(this.edtIkRechtstitelGueltigVon.Properties)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(this.edtStatusAntrag.Properties)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(this.edtStatusWohnhaft.Properties)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(this.edtBaPersonID.Properties)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(this.edtBaPersonID)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(this.edtBeantragtAm.Properties)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(this.edtWohnhaftImKantonSeit.Properties)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(this.edtIkRechtstitelGueltigBis.Properties)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(this.edtElterlicheSorgeBemerkung.Properties)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(this.edtGanzesKlientensystem.Properties)).EndInit();
            this.panel1.ResumeLayout(false);
            ((System.ComponentModel.ISupportInitialize)(this.lblTitel)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(this.picTitle)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(this.lblWohnhaftImKantonSeit)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(this.lblBeantragtAm)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(this.kissLabel3)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(this.lblBaPersonID)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(this.lbl)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(this.lblIkRechtstitelGueltigBis)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(this.kissLabel6)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(this.kissLabel7)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(this.lblBezeichnung)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(this.qryCheck)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(this.qryIkRechtstitel)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(this.qryPerson)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(this.qryPosition)).EndInit();
            this.ResumeLayout(false);
        }

        #endregion

        #region Dispose

        /// <summary>
        /// Clean up any resources being used.
        /// </summary>
        protected override void Dispose(bool disposing)
        {
            if (disposing)
            {
                if ((components != null))
                {
                    components.Dispose();
                }
            }
            base.Dispose(disposing);
        }

        #endregion

        #region Private Properties

        // Letzte Bearbeitung
        // 02.04.2008 : sozheo : neu
        // ------------------------------------------------------------------------
        private bool CanEdit
        {
            get
              {
            return (
              qryIkRechtstitel.CanUpdate &&
              qryIkRechtstitel.Count > 0 &&
              !HatSollstellungen &&
              !LeistungIstGeschlossen
            );
              }
        }

        #endregion

        #region Private Methods

        private bool AllesSpeichern()
        {
            // Speichern der Haupttabelle
              qryIkRechtstitel.EndCurrentEdit();
              ctlIkGlaeubiger.qryIkGlaeubiger.EndCurrentEdit();

              // Zuerst aktuelle Bearbeitungen speichern, wenn notwendig
              // Check eines Datensatzes wird damit ausgeführt
              if (!qryIkRechtstitel.Post()) return false;

              if (!ctlIkGlaeubiger.qryIkGlaeubiger.Post()) return false;
              // Dann Gesamtcheck der Dtailtabelle ausführen
              if (ctlIkGlaeubiger.DatenGlaeubigerWurdenKorrigiert)
            if (!ctlIkGlaeubiger.CheckData()) return false;

              // Nicht geändert, also nichts machen
              if (!RechtstitelIstKorrigiert
            && !ctlIkGlaeubiger.DatenGlaeubigerWurdenKorrigiert) return true;

              Session.BeginTransaction();
              try
              {
            // Alles speichern:
            // Zuerst Haupt-Tabelle: IkRechtstitel
            if (RechtstitelIstKorrigiert)
            {
              RechtstitelSpeichern();
            }

            // Gläubiger einfügen oder löschen, je nach Status
            bool Status = StatusAnzeigen();
            ctlIkGlaeubiger.KKBBGlaeubigerSetzen(Utils.ConvertToInt(qryIkRechtstitel["BaPersonID"]), Status);

            // Dann Detail-Tabelle: IkGlaeubiger
            if (ctlIkGlaeubiger.DatenGlaeubigerWurdenKorrigiert)
            {
              ctlIkGlaeubiger.AllesSpeichern_OhneTransaktion();
            }
            Session.Commit();
              }
              catch (Exception ex)
              {
            Session.Rollback();
            KissMsg.ShowInfo(ex.Message);
            return false;
              }

              qryIkRechtstitel.Refresh();

              // Navigator Trees aktualisieren:
              FormController.SendMessage("FrmFall", "Action", "RefreshTree");

              return true;
        }

        // Letzte Bearbeitung
        // 27.02.2009 : sozheo : Umbau für neue Tabelle IkInterneVerrechnung
        // ------------------------------------------------------------------------
        private void CtlIkRechtstitelKkbb_AddData(object sender, EventArgs e)
        {
            KissMsg.ShowInfo("Das Einfügen von Daten ist nicht möglich.");
        }

        private void CtlIkRechtstitelKkbb_DeleteData(object sender, EventArgs e)
        {
            KissMsg.ShowInfo("Das Löschen von Daten ist nicht möglich.");
        }

        private void CtlIkRechtstitelKkbb_MoveFirst(object sender, EventArgs e)
        {
            ctlIkGlaeubiger.qryIkGlaeubiger.First();
        }

        private void CtlIkRechtstitelKkbb_MoveLast(object sender, EventArgs e)
        {
            ctlIkGlaeubiger.qryIkGlaeubiger.Last();
        }

        private void CtlIkRechtstitelKkbb_MoveNext(object sender, EventArgs e)
        {
            ctlIkGlaeubiger.qryIkGlaeubiger.Next();
        }

        private void CtlIkRechtstitelKkbb_MovePrevious(object sender, EventArgs e)
        {
            ctlIkGlaeubiger.qryIkGlaeubiger.Previous();
        }

        private void CtlIkRechtstitelKkbb_RefreshData(object sender, EventArgs e)
        {
            if (!AllesSpeichern()) return;
              qryIkRechtstitel.Fill(IkRechtstitelID);
        }

        private void CtlIkRechtstitelKkbb_SaveData(object sender, EventArgs e)
        {
            if (!AllesSpeichern()) throw new KissCancelException();
        }

        private void CtlIkRechtstitelKkbb_UndoDataChanges(object sender, EventArgs e)
        {
            // Alles rückgängig
              qryIkRechtstitel.Cancel();
              ctlIkGlaeubiger.qryIkGlaeubiger.Cancel();

              // Alles neu laden
              RechtstitelIstKorrigiert = false;
              qryIkRechtstitel.Fill(IkRechtstitelID);
        }

        // Letzte Bearbeitung
        // 03.02.2008 : sozheo : neu
        // ------------------------------------------------------------------------
        private void DatumVonBisSetzen(bool StatusOk)
        {
            if (StatusOk)
              {
            DateTime GebDatum = GetGebDatum(Utils.ConvertToInt(qryIkRechtstitel["BaPersonID"]));

            // Theoretischer Anspruch von bis
            // - Wenn Antrag < Geburtsdatum + 3 Monate ist von Datum = Geburtsdatum
            // - bis Datum immer Geburtsdatum + 2 Jahre - 1 Tag
            if (edtBeantragtAm.DateTime < GebDatum.AddMonths(3))
              qryIkRechtstitel["IkRechtstitelGueltigVon"] = GebDatum;
            else
              qryIkRechtstitel["IkRechtstitelGueltigVon"] = edtBeantragtAm.DateTime;
            qryIkRechtstitel["IkRechtstitelGueltigVon"] = Utils.firstDayOfMonth((DateTime)qryIkRechtstitel["IkRechtstitelGueltigVon"]);
            if ((DateTime)qryIkRechtstitel["IkRechtstitelGueltigVon"] < GebDatum)
              qryIkRechtstitel["IkRechtstitelGueltigVon"] = GebDatum;
            qryIkRechtstitel["IkRechtstitelGueltigBis"] = GebDatum.AddYears(2).AddDays(-1);
              }
              else
              {
            qryIkRechtstitel["IkRechtstitelGueltigVon"] = DBNull.Value;
            qryIkRechtstitel["IkRechtstitelGueltigBis"] = DBNull.Value;
              }
              qryIkRechtstitel.RefreshDisplay();
        }

        private DateTime GetGebDatum(int PersonID)
        {
            if ( qryPerson.Find("BaPersonID=" + PersonID.ToString()) )
            return (DateTime)qryPerson["Geburtsdatum"];
              return Convert.ToDateTime("01.01.1950");
        }

        // Letzte Bearbeitung
        // 02.04.2008 : sozheo : neu
        // ------------------------------------------------------------------------
        private void RechtstitelSpeichern()
        {
            if (!RechtstitelIstKorrigiert) return;

              DBUtil.ExecSQL(@"
            UPDATE dbo.IkRechtstitel SET
              Bezeichnung = {0},
              BaPersonID = {1},
              Bemerkung = {2},
              IkRechtstitelGueltigVon = {3},
              IkRechtstitelGueltigBis = {4},
              BeantragtAm = {5},
              WohnhaftImKantonSeit = {6}
            WHERE IkRechtstitelID = {7}",
            qryIkRechtstitel["Bezeichnung"],
            qryIkRechtstitel["BaPersonID"],
            qryIkRechtstitel["Bemerkung"],
            qryIkRechtstitel["IkRechtstitelGueltigVon"],
            qryIkRechtstitel["IkRechtstitelGueltigBis"],
            qryIkRechtstitel["BeantragtAm"],
            qryIkRechtstitel["WohnhaftImKantonSeit"],
            qryIkRechtstitel["IkRechtstitelID"]
              );
              RechtstitelIstKorrigiert = false;
        }

        // Letzte Bearbeitung
        // 03.02.2008 : sozheo : neu
        // ------------------------------------------------------------------------
        private bool StatusAnzeigen()
        {
            bool StatusAntrag = false;
              bool StatusWohnhaft = false;
              DateTime GebDatum = GetGebDatum(Utils.ConvertToInt(qryIkRechtstitel["BaPersonID"]));

              edtStatusAntrag.Text = "kein Anspruch";
              if (!DBUtil.IsEmpty(qryIkRechtstitel["BeantragtAm"])) {
            // Antrag am ->> Datum muss < Geburtsdatum + 2 Jahre sein
            if ( (DateTime)qryIkRechtstitel["BeantragtAm"] < GebDatum.AddYears(2)) {
              edtStatusAntrag.Text = "Anspruch OK";
              StatusAntrag = true;
            }
              }

              edtStatusWohnhaft.Text = "kein Anspruch";
              if (!DBUtil.IsEmpty(qryIkRechtstitel["WohnhaftImKantonSeit"])) {
            DateTime tmpdat = (DateTime)qryIkRechtstitel["WohnhaftImKantonSeit"];
            // Wohnhaft im Kanton Zürich seit wann ->> Datum muss < Heute 1 Jahr sein
            if (tmpdat.AddYears(1) < DateTime.Today) {
              edtStatusWohnhaft.Text = "Anspruch OK";
              StatusWohnhaft = true;
            }
              }
              return StatusAntrag && StatusWohnhaft;
        }

        private void edtBaPersonID_EditValueChanged(object sender, System.EventArgs e)
        {
            // Letzte Bearbeitung
            // 03.02.2008 : sozheo : neu
            // ------------------------------------------------------------------------

            if (!edtBaPersonID.UserModified) return;
            if (DBUtil.IsEmpty(edtBaPersonID.EditValue)) return;

            qryIkRechtstitel["BaPersonID"] = Utils.ConvertToInt(edtBaPersonID.EditValue);
            bool Status = StatusAnzeigen();
            DatumVonBisSetzen(Status);

            // Editieren Gläubiger einstellen
            ctlIkGlaeubiger.KKBBGlaeubigerSetzen(Utils.ConvertToInt(qryIkRechtstitel["BaPersonID"]), Status);
        }

        private void edtBeantragtAm_EditValueChanged(object sender, System.EventArgs e)
        {
            // Letzte Bearbeitung
            // 03.02.2008 : sozheo : neu
            // ------------------------------------------------------------------------

            if (!edtBeantragtAm.UserModified) return;
            if (DBUtil.IsEmpty(edtBeantragtAm.EditValue)) return;

            qryIkRechtstitel["BeantragtAm"] = (DateTime)edtBeantragtAm.EditValue;
            bool Status = StatusAnzeigen();
            DatumVonBisSetzen(Status);

            // Editieren Gläubiger einstellen
            ctlIkGlaeubiger.KKBBGlaeubigerSetzen(Utils.ConvertToInt(qryIkRechtstitel["BaPersonID"]), Status);
        }

        private void edtGanzesKlientensystem_EditValueChanged(object sender, EventArgs e)
        {
            ctlIkGlaeubiger.GlaeubigerOeffnen(edtGanzesKlientensystem.Checked);
        }

        // Letzte Bearbeitung
        // 27.02.2009 : sozheo : Neu für neue Tabelle IkInterneVerrechnung
        // ------------------------------------------------------------------------
        private void edtGanzesKlientensystem_EditValueChanging(object sender, CancelEventArgs e)
        {
            e.Cancel = true;
              if (!AllesSpeichern()) return;
              e.Cancel = false;
        }

        private void edtWohnhaftImKantonSeit_EditValueChanged(object sender, System.EventArgs e)
        {
            // Letzte Bearbeitung
            // 03.02.2008 : sozheo : neu
            // ------------------------------------------------------------------------

            if (!edtWohnhaftImKantonSeit.UserModified) return;
            if (DBUtil.IsEmpty(edtWohnhaftImKantonSeit.EditValue)) return;

            qryIkRechtstitel["WohnhaftImKantonSeit"] = (DateTime)edtWohnhaftImKantonSeit.EditValue;
            bool Status = StatusAnzeigen();
            DatumVonBisSetzen(Status);

            // Editieren Gläubiger einstellen
            ctlIkGlaeubiger.KKBBGlaeubigerSetzen(Utils.ConvertToInt(qryIkRechtstitel["BaPersonID"]), Status);
        }

        private void qryIkRechtstitel_AfterFill(object sender, System.EventArgs e)
        {
            // Letzte Bearbeitung
            // 03.02.2008 : sozheo : neu
            // ------------------------------------------------------------------------

            if (qryIkRechtstitel.CanUpdate && qryIkRechtstitel.Count == 0)
            {
              qryIkRechtstitel.Insert(qryIkRechtstitel.TableName);
              qryIkRechtstitel.RowModified = true;
            }

            qryPosition.Fill(IkRechtstitelID);
            HatMonatsDaten = (Utils.ConvertToInt(qryPosition["AnzahlDaten"]) > 0);
            HatSollstellungen = (Utils.ConvertToInt(qryPosition["AnzahlSollst"]) > 0);
            GlaeubigerID = Utils.ConvertToInt(qryPosition["BaPersonID"]);

            // Daten Gläubiger anzeigen
            ctlIkGlaeubiger.GlaeubigerOeffnen(edtGanzesKlientensystem.Checked);

            if (qryIkRechtstitel.Count==0) qryIkRechtstitel_PositionChanged(sender, e);
        }

        private void qryIkRechtstitel_BeforePost(object sender, System.EventArgs e)
        {
            // Letzte Bearbeitung
            // 03.02.2008 : sozheo : neu
            // 06.02.2008 : sozheo : Checks ausgeklammert
            // 26.02.2009 : sozheo : Anpassungen für neue Tabelle IkInterneVerrechnung
            // 27.02.2009 : sozheo : Transaktion eingefügt
            // ------------------------------------------------------------------------

            // Mussfelder checken: Codes:
            DBUtil.CheckNotNullField(edtBezeichnung, lblBezeichnung.Text);
            DBUtil.CheckNotNullField(edtBeantragtAm, lblBeantragtAm.Text);
            DBUtil.CheckNotNullField(edtWohnhaftImKantonSeit, lblWohnhaftImKantonSeit.Text);
            DBUtil.CheckNotNullField(edtBaPersonID, lblBaPersonID.Text);

            // Kontrolle, dass ein Kind nur ein KKBB Inkasso haben kann:
            qryCheck.Fill(FaFallID,
              Utils.ConvertToInt(qryIkRechtstitel["BaPersonID"]),
              Utils.ConvertToInt(qryIkRechtstitel["IkRechtstitelID"]));
            if (Utils.ConvertToInt(qryCheck["Anzahl"]) > 0)
            {
              KissMsg.ShowInfo(
                "Dieses Kind ist bereits in einem anderen KKBB-Inkasso.\r\n"+
                "Jedes Kind kann nur ein KKBB-Inkasso haben."
              );
              throw new KissCancelException();
            }

            // Antrag am ->> Datum muss < Geburtsdatum + 2 Jahre sein
            /*
            if (edtBeantragtAm.DateTime >= GebDatum.AddYears(2))
            {
              KissMsg.ShowInfo("Das Antragdatum muss vor dem 2. Geburtstag des Kindes liegen.");
              throw new KissCancelException();
            }
            */

            /*
            // Wohnhaft im Kanton Zürich seit wann ->> Datum muss < Heute 1 Jahr sein
            if (edtWohnhaftImKantonSeit.DateTime >= DateTime.Today.AddYears(-1))
            {
              KissMsg.ShowInfo("Das Kind muss mindestens seit 1 Jahr im Kanton wohnhaft gewesen sein.");
              throw new KissCancelException();
            }
            */

            // Der Status entscheidet, ob ine Kind KKBB erhält
            // Bei Status OK wird also der Gläubiger automtisch hinzugefügt.
            // Bei Status NOK wird der Gläubiger automtisch entfernt (siehe AfterPost).
            bool Status = StatusAnzeigen();
            DatumVonBisSetzen(Status);

            // Wenn Status nicht ok ist, es aber bereits Monatszahlen in IkPosition gibt, kann nicht gespeichert werden,
            // da die Glaeubiger Zeile sont gelöscht würde
            if (DBUtil.IsEmpty(qryIkRechtstitel["IkRechtstitelGueltigVon"]))
            {
              // Status ist nicht ok, also muss die Gläubiger-Zeile gelöscht werden
              // Deshalb prüfen wir hier, ob bereits Daten existieren
              qryPosition.Fill(IkRechtstitelID);
              if (Utils.ConvertToInt(qryPosition["AnzahlDaten"]) > 0)
              {
                KissMsg.ShowInfo(
                  "Es existieren bereits Daten im Monatsbudget.\r\n"+
                  "Ein ungültiger Status kann deshalb nicht gespeichert werden.");
                throw new KissCancelException();
              }
            }

            RechtstitelIstKorrigiert = true;
        }

        private void qryIkRechtstitel_PositionChanged(object sender, System.EventArgs e)
        {
            // Letzte Bearbeitung
            // 03.02.2008 : sozheo : neu
            // ------------------------------------------------------------------------

            qryIkRechtstitel.EnableBoundFields(CanEdit);

            //if (HatMonatsDaten || GlaeubigerID>0 || !CanEdit)
            if (HatMonatsDaten || !CanEdit)
              edtBaPersonID.EditMode = EditModeType.ReadOnly;
            else
              edtBaPersonID.EditMode = EditModeType.Normal;

            StatusAnzeigen();

            //KissMsg.ShowInfo("posChanged");
        }

        #endregion
    }
}
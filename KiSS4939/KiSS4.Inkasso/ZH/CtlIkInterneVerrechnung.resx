<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="qryZahlungsweg.TrayLocation" type="System.Drawing.Point, System.Drawing">
    <value>303, 17</value>
  </data>
  <data name="qryPerson.SelectStatement" xml:space="preserve">
    <value>select distinct
  Code = P.BaPersonID, 
  Text = P.NameVorname 
from dbo.IkGlaeubiger G 
left join dbo.IkRechtstitel R with(readuncommitted) ON R.IkRechtstitelID = G.IkRechtstitelID 
left join dbo.FaLeistung L with(readuncommitted) ON L.FaLeistungID = R.FaLeistungID 
left join dbo.vwPerson P with(readuncommitted) on P.BaPersonID = G.BaPersonID
where L.FaLeistungID = {0}
and G.BaPersonID != L.SchuldnerBaPersonID -- Schuldner nicht zur Auswahl stellen
order by P.NameVorname</value>
  </data>
  <data name="qryInterneVerrechnung.SelectStatement" xml:space="preserve">
    <value>select
  Sort = case when I.IkInterneVerrechnungID = (
    select top 1 X.IkInterneVerrechnungID from dbo.IkInterneVerrechnung X
    where X.FaLeistungID = I.FaLeistungID
    and X.BaPersonID = I.BaPersonID
    order by X.DatumVon DESC
  ) then 0 else 1 end,
  I.IkInterneVerrechnungID, I.FaLeistungID, I.BaPersonID, I.DatumVon, 
  I.HatALBV, I.HatKiZu,
  I.IntVerrechnung_ALBV, I.IntVerrechnung_ALV, I.IntVerrechnung_KiZu, 
  I.BaZahlungswegID_ALBV, I.BaZahlungswegID_ALBVZusatz, 
  I.BaZahlungswegID_ALV, I.BaZahlungswegID_KiZu, 
  I.Betrag, I.BetragZusatz, I.IkInterneVerrechnungTS,
  PersonName = P.NameVorname
from dbo.IkInterneVerrechnung I
left join dbo.vwPerson P on P.BaPersonID = I.BaPersonID 
where I.FaLeistungID = {0}
order by Sort ASC, I.DatumVon DESC</value>
  </data>
  <data name="qryInterneVerrechnung.TrayLocation" type="System.Drawing.Point, System.Drawing">
    <value>17, 17</value>
  </data>
  <data name="qryZahlungsweg.SelectStatement" xml:space="preserve">
    <value>SELECT 
  Code = NULL,
  NameVorname = NULL,
  DatumVon = NULL,
  DatumBis = NULL,
  Konto = NULL,
  Bank = NULL,
  Text = NULL,
  DatumVonKontrolle = NULL,
  DatumBisKontrolle = NULL,
  MemoName = NULL,
  MemoKonto = NULL
UNION ALL
SELECT 
  Code = ZLW.BaZahlungswegID, 
  NameVorname = case when ZLW.WMAVerwenden = 1 then PRS.NameVorname else ZLW.AdresseName end,
  DatumVon = Convert(VARCHAR, ZLW.DatumVon, 104),
  DatumBis = Convert(VARCHAR, ZLW.DatumBis, 104),
  Konto = coalesce(ZLW.BankKontoNummer, dbo.fnTnToPc(ZLW.PostkontoNummer), ZLW.IBANNummer),
  Bank = IsNull(B.Name, 'Post'),
  Text = case when ZLW.WMAVerwenden = 1 then PRS.NameVorname else ZLW.AdresseName end + 
    IsNull(', ' + B.Name, ', Post') + 
    IsNull(', Kto. ' + coalesce(ZLW.BankKontoNummer, dbo.fnTnToPc(ZLW.PostkontoNummer), ZLW.IBANNummer), '') + 
    IsNull(' (' + Convert(varchar, ZLW.DatumVon, 104) + ')', ''),
  DatumVonKontrolle = IsNull(ZLW.DatumVon, GetDate()),
  DatumBisKontrolle = IsNull(ZLW.DatumBis, GetDate()),
  -- Für Anzeige in der Maske
  MemoName = case
    when ZLW.WMAVerwenden = 1 then PRS.NameVorname + char(13) + char(10) + PRS.WohnsitzMehrzeilig
    else ZLW.AdresseName 
      + IsNull(char(13) + char(10) + ZLW.AdresseName2, '') + 
      + IsNull(char(13) + char(10) + ZLW.AdresseStrasse, '') + 
      + IsNull(char(13) + char(10) + ZLW.AdressePLZ + ' ' + ZLW.AdresseOrt, '')  
  end,
  MemoKonto = case
    when ZLW.EinzahlungsscheinCode = 2 then 'Post'
    else IsNull(B.Name, '[kein Bankname]') + 
         IsNull(char(13) + char(10) + 'PC ' + dbo.fnTnToPc(B.PCKontoNr),'') + 
         IsNull(char(13) + char(10) + 'BCN ' + B.ClearingNr,'')
  end + char(13) + char(10) + case 
    when ZLW.EinzahlungsscheinCode = 2 then 'Postkonto '
    else 'Konto '
  end + case
    when ZLW.EinzahlungsscheinCode = 2 then dbo.fnTnToPc(ZLW.PostKontoNummer)
    else coalesce(ZLW.Bankkontonummer, ZLW.IBANNummer) 
  end
FROM dbo.FaFallPerson FFP
  LEFT JOIN dbo.BaZahlungsweg ZLW WITH(READUNCOMMITTED) ON ZLW.BaPersonID = FFP.BaPersonID
  LEFT JOIN dbo.vwPerson      PRS ON PRS.BaPersonID = FFP.BaPersonID
  LEFT JOIN dbo.BaBank B WITH(READUNCOMMITTED) ON B.BaBankID = ZLW.BaBankID
WHERE FFP.FaFallID = {0}
  --AND (ZLW.DatumBis IS NULL OR ZLW.DatumBis &gt;= GETDATE()) 
  AND ZLW.EinzahlungsscheinCode != 1
  AND FFP.BaPersonID NOT IN (
    SELECT F.SchuldnerBaPersonID FROM dbo.FaLeistung F WITH(READUNCOMMITTED)
    WHERE F.FaProzessCode in (405)
      AND F.SchuldnerBaPersonID IS NOT NULL
      AND F.FaLeistungID = {1} ) -- Person nicht Schuldner
  AND ZLW.BaZahlungswegID IS NOT NULL

UNION ALL  -- Alle Institutionen
SELECT DISTINCT
  Code = ZWI.BaZahlungswegID, 
  NameVorname = case 
    when ZWI.AdresseName IS NULL AND ZWI.AdressePLZ IS NULL and ZWI.AdresseOrt IS NULL then INS.Name
    else ZWI.AdresseName
  end,
  DatumVon = Convert(VARCHAR, ZWI.DatumVon, 104),
  DatumBis = Convert(VARCHAR, ZWI.DatumBis, 104),
  Konto = coalesce(ZWI.BankKontoNummer, dbo.fnTnToPc(ZWI.PostkontoNummer), ZWI.IBANNummer),
  Bank = IsNull(B.Name, 'Post'),
  Text = INS.Name + 
    IsNull(', ' + B.Name, ', Post') + 
    IsNull(', Kto. ' + coalesce(ZWI.BankKontoNummer, dbo.fnTnToPc(ZWI.PostkontoNummer), ZWI.IBANNummer), '') + 
    IsNull(' (' + Convert(varchar, ZWI.DatumVon, 104) + ')', ''),
  DatumVonKontrolle = IsNull(ZWI.DatumVon, GetDate()),
  DatumBisKontrolle = IsNull(ZWI.DatumBis, GetDate()),
  -- Für Anzeige in der Maske
  MemoName = 
    INS.Name + char(13) + char(10) + INS.AdresseMehrzeilig,
  MemoKonto = case
    when ZWI.EinzahlungsscheinCode = 2 then 'Post'
    else IsNull(B.Name, '[kein Bankname]') + 
         IsNull(char(13) + char(10) + 'PC ' + dbo.fnTnToPc(B.PCKontoNr),'') + 
         IsNull(char(13) + char(10) + 'BCN ' + B.ClearingNr,'')
  end + char(13) + char(10) + case 
    when ZWI.EinzahlungsscheinCode = 2 then 'Postkonto '
    else 'Konto '
  end + case
    when ZWI.EinzahlungsscheinCode = 2 then dbo.fnTnToPc(ZWI.PostKontoNummer)
    else coalesce(ZWI.Bankkontonummer, ZWI.IBANNummer) 
  end
FROM dbo.FaInvolvierteInstitution INI WITH(READUNCOMMITTED)
  LEFT JOIN dbo.vwInstitution INS WITH(READUNCOMMITTED) ON INS.BaInstitutionID = INI.BaInstitutionID
  LEFT JOIN dbo.BaZahlungsweg ZWI WITH(READUNCOMMITTED) ON ZWI.BaInstitutionID = INS.BaInstitutionID
  LEFT JOIN dbo.BaBank B WITH(READUNCOMMITTED) ON B.BaBankID = ZWI.BaBankID
WHERE INI.FaFallID = {0}
  --AND (ZWI.DatumBis IS NULL OR ZWI.DatumBis &gt;= GETDATE()) 
  AND ZWI.EinzahlungsscheinCode != 1
ORDER BY 2 desc, 1 ASC</value>
  </data>
  <data name="qryPerson.TrayLocation" type="System.Drawing.Point, System.Drawing">
    <value>195, 17</value>
  </data>
</root>
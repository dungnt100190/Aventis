#region Header

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3053
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#endregion

using System;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using KiSS4.Common;
using KiSS4.DB;
using KiSS4.Gui;

namespace KiSS4.Inkasso.ZH
{
    public class CtlIkGlaeubiger : KiSS4.Gui.KissUserControl
    {
        #region Fields

        private int FaFallID = 0;
        private int FaLeistungID;
        private int FaProzessCode;

        // Letzte Bearbeitung
        // 29.08.2007 : sozheo : neu
        // 11.11.2007 : sozheo : neue Regel für Zahlungsweg und Gläubiger
        // 07.01.2008 : sozksc : auswahl im grid; Felder weggenommen
        // 16.01.2008 : sozheo : Schuldner nicht anzeigen
        // 30.01.2008 : sozheo : alle Schuldner nicht anzeigen
        // 09.02.2008 : sozheo : Korrekturen für KKBB
        // 05.05.2008 : sozheo : Korrekturen für neues Feld "IkGlaeubigerStatusCode"
        // 26.02.2009 : sozheo : Korrekturen für neue Tabelle IkInterneVerrechnung
        // ------------------------------------------------------------------------
        private int IkRechtstitelID = 0;
        private bool LeistungIstGeschlossen;
        private bool RtIstKKBB;
        private int SchuldnerBaPersonID1 = 0;
        private DevExpress.XtraGrid.Columns.GridColumn colAnzahlRT;
        private DevExpress.XtraGrid.Columns.GridColumn colGlaeubiger;
        private DevExpress.XtraGrid.Columns.GridColumn colHatDaten;
        private DevExpress.XtraGrid.Columns.GridColumn colHatDatenEltern;
        private DevExpress.XtraGrid.Columns.GridColumn colIkGlaeubigerStatusCodeEdt;
        private DevExpress.XtraGrid.Columns.GridColumn colIstElternteil;
        private DevExpress.XtraGrid.Columns.GridColumn colPersonundGeb;
        private DevExpress.XtraGrid.Columns.GridColumn colStatusCode;
        private System.ComponentModel.IContainer components;
        private KiSS4.Gui.KissGrid grdGlaeubiger;
        private DevExpress.XtraGrid.Views.Grid.GridView grvGlaeubiger;
        private KiSS4.DB.SqlQuery qryStatus;
        private DevExpress.XtraEditors.Repository.RepositoryItemImageComboBox repedtImages;
        private DevExpress.XtraEditors.Repository.RepositoryItemLookUpEdit repedtStatus;
        private DevExpress.XtraEditors.Repository.RepositoryItemCheckEdit repedtchkIstElternteil;
        private DevExpress.XtraEditors.Repository.RepositoryItemCheckEdit repedtchkIstGlaeubiger;

        public bool DatenGlaeubigerWurdenKorrigiert = false;
        public KiSS4.DB.SqlQuery qryIkGlaeubiger;

        #endregion

        #region Constructors

        public CtlIkGlaeubiger()
        {
            this.InitializeComponent();
        }

        #endregion

        #region Windows Form Designer generated code

        /// <summary>
        /// Required method for Designer support - do not modify
        /// the contents of this method with the code editor.
        /// </summary>
        private void InitializeComponent()
        {
            this.components = new System.ComponentModel.Container();
            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(CtlIkGlaeubiger));
            this.grdGlaeubiger = new KiSS4.Gui.KissGrid();
            this.qryIkGlaeubiger = new KiSS4.DB.SqlQuery(this.components);
            this.grvGlaeubiger = new DevExpress.XtraGrid.Views.Grid.GridView();
            this.colGlaeubiger = new DevExpress.XtraGrid.Columns.GridColumn();
            this.repedtchkIstGlaeubiger = new DevExpress.XtraEditors.Repository.RepositoryItemCheckEdit();
            this.colIstElternteil = new DevExpress.XtraGrid.Columns.GridColumn();
            this.repedtchkIstElternteil = new DevExpress.XtraEditors.Repository.RepositoryItemCheckEdit();
            this.colIkGlaeubigerStatusCodeEdt = new DevExpress.XtraGrid.Columns.GridColumn();
            this.repedtStatus = new DevExpress.XtraEditors.Repository.RepositoryItemLookUpEdit();
            this.qryStatus = new KiSS4.DB.SqlQuery(this.components);
            this.colStatusCode = new DevExpress.XtraGrid.Columns.GridColumn();
            this.repedtImages = new DevExpress.XtraEditors.Repository.RepositoryItemImageComboBox();
            this.colAnzahlRT = new DevExpress.XtraGrid.Columns.GridColumn();
            this.colPersonundGeb = new DevExpress.XtraGrid.Columns.GridColumn();
            this.colHatDaten = new DevExpress.XtraGrid.Columns.GridColumn();
            this.colHatDatenEltern = new DevExpress.XtraGrid.Columns.GridColumn();
            ((System.ComponentModel.ISupportInitialize)(this.grdGlaeubiger)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(this.qryIkGlaeubiger)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(this.grvGlaeubiger)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(this.repedtchkIstGlaeubiger)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(this.repedtchkIstElternteil)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(this.repedtStatus)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(this.qryStatus)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(this.repedtImages)).BeginInit();
            this.SuspendLayout();
            // 
            // grdGlaeubiger
            // 
            this.grdGlaeubiger.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom)
                        | System.Windows.Forms.AnchorStyles.Left)
                        | System.Windows.Forms.AnchorStyles.Right)));
            this.grdGlaeubiger.DataSource = this.qryIkGlaeubiger;
            this.grdGlaeubiger.EmbeddedNavigator.Name = "";
            this.grdGlaeubiger.Location = new System.Drawing.Point(6, 3);
            this.grdGlaeubiger.MainView = this.grvGlaeubiger;
            this.grdGlaeubiger.Name = "grdGlaeubiger";
            this.grdGlaeubiger.RepositoryItems.AddRange(new DevExpress.XtraEditors.Repository.RepositoryItem[] {
            this.repedtchkIstGlaeubiger,
            this.repedtchkIstElternteil,
            this.repedtImages,
            this.repedtStatus});
            this.grdGlaeubiger.Size = new System.Drawing.Size(686, 224);
            this.grdGlaeubiger.TabIndex = 0;
            this.grdGlaeubiger.ViewCollection.AddRange(new DevExpress.XtraGrid.Views.Base.BaseView[] {
            this.grvGlaeubiger});
            // 
            // qryIkGlaeubiger
            // 
            this.qryIkGlaeubiger.BatchUpdate = true;
            this.qryIkGlaeubiger.CanUpdate = true;
            this.qryIkGlaeubiger.HostControl = this;
            this.qryIkGlaeubiger.SelectStatement = resources.GetString("qryIkGlaeubiger.SelectStatement");
            this.qryIkGlaeubiger.TableName = "IkGlaeubiger";
            this.qryIkGlaeubiger.BeforePost += new System.EventHandler(this.qryIkGlaeubiger_BeforePost);
            this.qryIkGlaeubiger.AfterFill += new System.EventHandler(this.qryIkGlaeubiger_AfterFill);
            this.qryIkGlaeubiger.PositionChanging += new System.EventHandler(this.qryIkGlaeubiger_PositionChanging);
            // 
            // grvGlaeubiger
            // 
            this.grvGlaeubiger.Appearance.Empty.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(247)))), ((int)(((byte)(239)))), ((int)(((byte)(231)))));
            this.grvGlaeubiger.Appearance.Empty.Font = new System.Drawing.Font("Arial", 12F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Pixel);
            this.grvGlaeubiger.Appearance.Empty.Options.UseBackColor = true;
            this.grvGlaeubiger.Appearance.Empty.Options.UseFont = true;
            this.grvGlaeubiger.Appearance.EvenRow.BackColor = System.Drawing.Color.AliceBlue;
            this.grvGlaeubiger.Appearance.EvenRow.Font = new System.Drawing.Font("Arial", 12F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Pixel);
            this.grvGlaeubiger.Appearance.EvenRow.ForeColor = System.Drawing.Color.Black;
            this.grvGlaeubiger.Appearance.EvenRow.Options.UseBackColor = true;
            this.grvGlaeubiger.Appearance.EvenRow.Options.UseFont = true;
            this.grvGlaeubiger.Appearance.EvenRow.Options.UseForeColor = true;
            this.grvGlaeubiger.Appearance.FocusedCell.BackColor = System.Drawing.SystemColors.Highlight;
            this.grvGlaeubiger.Appearance.FocusedCell.Font = new System.Drawing.Font("Arial", 12F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Pixel);
            this.grvGlaeubiger.Appearance.FocusedCell.ForeColor = System.Drawing.SystemColors.HighlightText;
            this.grvGlaeubiger.Appearance.FocusedCell.Options.UseBackColor = true;
            this.grvGlaeubiger.Appearance.FocusedCell.Options.UseFont = true;
            this.grvGlaeubiger.Appearance.FocusedCell.Options.UseForeColor = true;
            this.grvGlaeubiger.Appearance.FocusedRow.BackColor = System.Drawing.SystemColors.Highlight;
            this.grvGlaeubiger.Appearance.FocusedRow.Font = new System.Drawing.Font("Arial", 12F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Pixel);
            this.grvGlaeubiger.Appearance.FocusedRow.ForeColor = System.Drawing.SystemColors.HighlightText;
            this.grvGlaeubiger.Appearance.FocusedRow.Options.UseBackColor = true;
            this.grvGlaeubiger.Appearance.FocusedRow.Options.UseFont = true;
            this.grvGlaeubiger.Appearance.FocusedRow.Options.UseForeColor = true;
            this.grvGlaeubiger.Appearance.GroupPanel.BackColor = System.Drawing.Color.PeachPuff;
            this.grvGlaeubiger.Appearance.GroupPanel.Options.UseBackColor = true;
            this.grvGlaeubiger.Appearance.GroupRow.BackColor = System.Drawing.Color.PeachPuff;
            this.grvGlaeubiger.Appearance.GroupRow.Font = new System.Drawing.Font("Arial", 12F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Pixel);
            this.grvGlaeubiger.Appearance.GroupRow.ForeColor = System.Drawing.SystemColors.WindowText;
            this.grvGlaeubiger.Appearance.GroupRow.Options.UseBackColor = true;
            this.grvGlaeubiger.Appearance.GroupRow.Options.UseFont = true;
            this.grvGlaeubiger.Appearance.GroupRow.Options.UseForeColor = true;
            this.grvGlaeubiger.Appearance.HeaderPanel.BackColor = System.Drawing.Color.Tan;
            this.grvGlaeubiger.Appearance.HeaderPanel.BorderColor = System.Drawing.Color.Tan;
            this.grvGlaeubiger.Appearance.HeaderPanel.Font = new System.Drawing.Font("Arial", 11F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Pixel);
            this.grvGlaeubiger.Appearance.HeaderPanel.Options.UseBackColor = true;
            this.grvGlaeubiger.Appearance.HeaderPanel.Options.UseBorderColor = true;
            this.grvGlaeubiger.Appearance.HeaderPanel.Options.UseFont = true;
            this.grvGlaeubiger.Appearance.HideSelectionRow.BackColor = System.Drawing.Color.PowderBlue;
            this.grvGlaeubiger.Appearance.HideSelectionRow.Font = new System.Drawing.Font("Arial", 12F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Pixel);
            this.grvGlaeubiger.Appearance.HideSelectionRow.ForeColor = System.Drawing.SystemColors.WindowText;
            this.grvGlaeubiger.Appearance.HideSelectionRow.Options.UseBackColor = true;
            this.grvGlaeubiger.Appearance.HideSelectionRow.Options.UseFont = true;
            this.grvGlaeubiger.Appearance.HideSelectionRow.Options.UseForeColor = true;
            this.grvGlaeubiger.Appearance.HorzLine.BackColor = System.Drawing.Color.LightGray;
            this.grvGlaeubiger.Appearance.HorzLine.Options.UseBackColor = true;
            this.grvGlaeubiger.Appearance.OddRow.BackColor = System.Drawing.Color.AliceBlue;
            this.grvGlaeubiger.Appearance.OddRow.Font = new System.Drawing.Font("Arial", 12F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Pixel);
            this.grvGlaeubiger.Appearance.OddRow.ForeColor = System.Drawing.Color.Black;
            this.grvGlaeubiger.Appearance.OddRow.Options.UseBackColor = true;
            this.grvGlaeubiger.Appearance.OddRow.Options.UseFont = true;
            this.grvGlaeubiger.Appearance.OddRow.Options.UseForeColor = true;
            this.grvGlaeubiger.Appearance.Row.BackColor = System.Drawing.Color.AliceBlue;
            this.grvGlaeubiger.Appearance.Row.Font = new System.Drawing.Font("Arial", 12F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Pixel);
            this.grvGlaeubiger.Appearance.Row.ForeColor = System.Drawing.Color.Black;
            this.grvGlaeubiger.Appearance.Row.Options.UseBackColor = true;
            this.grvGlaeubiger.Appearance.Row.Options.UseFont = true;
            this.grvGlaeubiger.Appearance.Row.Options.UseForeColor = true;
            this.grvGlaeubiger.Appearance.SelectedRow.BackColor = System.Drawing.Color.BlanchedAlmond;
            this.grvGlaeubiger.Appearance.SelectedRow.Font = new System.Drawing.Font("Arial", 12F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Pixel);
            this.grvGlaeubiger.Appearance.SelectedRow.ForeColor = System.Drawing.Color.Black;
            this.grvGlaeubiger.Appearance.SelectedRow.Options.UseBackColor = true;
            this.grvGlaeubiger.Appearance.SelectedRow.Options.UseFont = true;
            this.grvGlaeubiger.Appearance.SelectedRow.Options.UseForeColor = true;
            this.grvGlaeubiger.Appearance.VertLine.BackColor = System.Drawing.Color.LightGray;
            this.grvGlaeubiger.Appearance.VertLine.Options.UseBackColor = true;
            this.grvGlaeubiger.BorderStyle = DevExpress.XtraEditors.Controls.BorderStyles.UltraFlat;
            this.grvGlaeubiger.Columns.AddRange(new DevExpress.XtraGrid.Columns.GridColumn[] {
            this.colGlaeubiger,
            this.colIstElternteil,
            this.colIkGlaeubigerStatusCodeEdt,
            this.colStatusCode,
            this.colAnzahlRT,
            this.colPersonundGeb,
            this.colHatDaten,
            this.colHatDatenEltern});
            this.grvGlaeubiger.GridControl = this.grdGlaeubiger;
            this.grvGlaeubiger.Name = "grvGlaeubiger";
            this.grvGlaeubiger.OptionsCustomization.AllowFilter = false;
            this.grvGlaeubiger.OptionsFilter.UseNewCustomFilterDialog = true;
            this.grvGlaeubiger.OptionsNavigation.AutoFocusNewRow = true;
            this.grvGlaeubiger.OptionsView.ColumnAutoWidth = false;
            this.grvGlaeubiger.OptionsView.ShowFilterPanelMode = DevExpress.XtraGrid.Views.Base.ShowFilterPanelMode.Never;
            this.grvGlaeubiger.OptionsView.ShowGroupPanel = false;
            this.grvGlaeubiger.CustomDrawCell += new DevExpress.XtraGrid.Views.Base.RowCellCustomDrawEventHandler(this.grvGlaeubiger_CustomDrawCell);
            this.grvGlaeubiger.ShowingEditor += new System.ComponentModel.CancelEventHandler(this.grvGlaeubiger_ShowingEditor);
            // 
            // colGlaeubiger
            // 
            this.colGlaeubiger.AppearanceCell.BackColor = System.Drawing.Color.AliceBlue;
            this.colGlaeubiger.AppearanceCell.Options.UseBackColor = true;
            this.colGlaeubiger.Caption = "Gläubiger";
            this.colGlaeubiger.ColumnEdit = this.repedtchkIstGlaeubiger;
            this.colGlaeubiger.FieldName = "IstGlaeubiger";
            this.colGlaeubiger.Name = "colGlaeubiger";
            this.colGlaeubiger.Visible = true;
            this.colGlaeubiger.VisibleIndex = 0;
            this.colGlaeubiger.Width = 64;
            // 
            // repedtchkIstGlaeubiger
            // 
            this.repedtchkIstGlaeubiger.AutoHeight = false;
            this.repedtchkIstGlaeubiger.Name = "repedtchkIstGlaeubiger";
            this.repedtchkIstGlaeubiger.CheckedChanged += new System.EventHandler(this.repedtchkIstGlaeubiger_CheckedChanged);
            // 
            // colIstElternteil
            // 
            this.colIstElternteil.AppearanceCell.BackColor = System.Drawing.Color.AliceBlue;
            this.colIstElternteil.AppearanceCell.Options.UseBackColor = true;
            this.colIstElternteil.Caption = "Erw.Alim";
            this.colIstElternteil.ColumnEdit = this.repedtchkIstElternteil;
            this.colIstElternteil.FieldName = "IstElternteil";
            this.colIstElternteil.Name = "colIstElternteil";
            this.colIstElternteil.Visible = true;
            this.colIstElternteil.VisibleIndex = 1;
            this.colIstElternteil.Width = 60;
            // 
            // repedtchkIstElternteil
            // 
            this.repedtchkIstElternteil.AutoHeight = false;
            this.repedtchkIstElternteil.Name = "repedtchkIstElternteil";
            this.repedtchkIstElternteil.NullStyle = DevExpress.XtraEditors.Controls.StyleIndeterminate.Inactive;
            this.repedtchkIstElternteil.CheckedChanged += new System.EventHandler(this.repedtchkIstElternteil_CheckedChanged);
            // 
            // colIkGlaeubigerStatusCodeEdt
            // 
            this.colIkGlaeubigerStatusCodeEdt.AppearanceCell.ForeColor = System.Drawing.Color.Black;
            this.colIkGlaeubigerStatusCodeEdt.AppearanceCell.Options.UseForeColor = true;
            this.colIkGlaeubigerStatusCodeEdt.Caption = "Status";
            this.colIkGlaeubigerStatusCodeEdt.ColumnEdit = this.repedtStatus;
            this.colIkGlaeubigerStatusCodeEdt.FieldName = "IkGlaeubigerStatusCode";
            this.colIkGlaeubigerStatusCodeEdt.Name = "colIkGlaeubigerStatusCodeEdt";
            this.colIkGlaeubigerStatusCodeEdt.Visible = true;
            this.colIkGlaeubigerStatusCodeEdt.VisibleIndex = 2;
            this.colIkGlaeubigerStatusCodeEdt.Width = 122;
            // 
            // repedtStatus
            // 
            this.repedtStatus.AutoHeight = false;
            this.repedtStatus.Buttons.AddRange(new DevExpress.XtraEditors.Controls.EditorButton[] {
            new DevExpress.XtraEditors.Controls.EditorButton(DevExpress.XtraEditors.Controls.ButtonPredefines.Combo)});
            this.repedtStatus.Columns.AddRange(new DevExpress.XtraEditors.Controls.LookUpColumnInfo[] {
            new DevExpress.XtraEditors.Controls.LookUpColumnInfo("Text", "", 50, DevExpress.Utils.FormatType.None, "", true, DevExpress.Utils.HorzAlignment.Default, DevExpress.Data.ColumnSortOrder.None),
            new DevExpress.XtraEditors.Controls.LookUpColumnInfo("Code", "", 20, DevExpress.Utils.FormatType.None, "", false, DevExpress.Utils.HorzAlignment.Default, DevExpress.Data.ColumnSortOrder.None)});
            this.repedtStatus.DataSource = this.qryStatus;
            this.repedtStatus.DisplayMember = "Text";
            this.repedtStatus.DropDownRows = 4;
            this.repedtStatus.Name = "repedtStatus";
            this.repedtStatus.NullText = "";
            this.repedtStatus.ShowFooter = false;
            this.repedtStatus.ShowHeader = false;
            this.repedtStatus.ValueMember = "Code";
            this.repedtStatus.CloseUp += new DevExpress.XtraEditors.Controls.CloseUpEventHandler(this.repedtStatus_CloseUp);
            // 
            // qryStatus
            // 
            this.qryStatus.HostControl = this;
            this.qryStatus.SelectStatement = "select Code, Text from dbo.XLOVCode WITH(READUNCOMMITTED)\r\nwhere LOVName = \'IkGla" +
                "eubigerStatus\'\r\norder by SortKey";
            // 
            // colStatusCode
            // 
            this.colStatusCode.AppearanceCell.BackColor = System.Drawing.Color.BlanchedAlmond;
            this.colStatusCode.AppearanceCell.ForeColor = System.Drawing.Color.Black;
            this.colStatusCode.AppearanceCell.Options.UseBackColor = true;
            this.colStatusCode.AppearanceCell.Options.UseForeColor = true;
            this.colStatusCode.AppearanceCell.Options.UseTextOptions = true;
            this.colStatusCode.AppearanceCell.TextOptions.HAlignment = DevExpress.Utils.HorzAlignment.Center;
            this.colStatusCode.AppearanceHeader.Options.UseTextOptions = true;
            this.colStatusCode.AppearanceHeader.TextOptions.HAlignment = DevExpress.Utils.HorzAlignment.Center;
            this.colStatusCode.Caption = "Stat.";
            this.colStatusCode.ColumnEdit = this.repedtImages;
            this.colStatusCode.FieldName = "IkGlaeubigerStatusCode";
            this.colStatusCode.Name = "colStatusCode";
            this.colStatusCode.OptionsColumn.AllowEdit = false;
            this.colStatusCode.Visible = true;
            this.colStatusCode.VisibleIndex = 3;
            this.colStatusCode.Width = 50;
            // 
            // repedtImages
            // 
            this.repedtImages.AutoHeight = false;
            this.repedtImages.Buttons.AddRange(new DevExpress.XtraEditors.Controls.EditorButton[] {
            new DevExpress.XtraEditors.Controls.EditorButton(DevExpress.XtraEditors.Controls.ButtonPredefines.Combo)});
            this.repedtImages.GlyphAlignment = DevExpress.Utils.HorzAlignment.Center;
            this.repedtImages.Name = "repedtImages";
            // 
            // colAnzahlRT
            // 
            this.colAnzahlRT.AppearanceCell.BackColor = System.Drawing.Color.BlanchedAlmond;
            this.colAnzahlRT.AppearanceCell.Options.UseBackColor = true;
            this.colAnzahlRT.AppearanceCell.Options.UseTextOptions = true;
            this.colAnzahlRT.AppearanceCell.TextOptions.HAlignment = DevExpress.Utils.HorzAlignment.Center;
            this.colAnzahlRT.Caption = "Rechtstitel";
            this.colAnzahlRT.FieldName = "AnzahlRT";
            this.colAnzahlRT.Name = "colAnzahlRT";
            this.colAnzahlRT.OptionsColumn.AllowEdit = false;
            this.colAnzahlRT.Visible = true;
            this.colAnzahlRT.VisibleIndex = 4;
            this.colAnzahlRT.Width = 70;
            // 
            // colPersonundGeb
            // 
            this.colPersonundGeb.AppearanceCell.BackColor = System.Drawing.Color.BlanchedAlmond;
            this.colPersonundGeb.AppearanceCell.Options.UseBackColor = true;
            this.colPersonundGeb.Caption = "Person / Geburtsdatum";
            this.colPersonundGeb.FieldName = "PersonName";
            this.colPersonundGeb.Name = "colPersonundGeb";
            this.colPersonundGeb.OptionsColumn.AllowEdit = false;
            this.colPersonundGeb.OptionsColumn.ReadOnly = true;
            this.colPersonundGeb.Visible = true;
            this.colPersonundGeb.VisibleIndex = 5;
            this.colPersonundGeb.Width = 284;
            // 
            // colHatDaten
            // 
            this.colHatDaten.Caption = "HatDaten";
            this.colHatDaten.FieldName = "HatDaten";
            this.colHatDaten.Name = "colHatDaten";
            // 
            // colHatDatenEltern
            // 
            this.colHatDatenEltern.Caption = "HatDatenEltern";
            this.colHatDatenEltern.FieldName = "HatDatenEltern";
            this.colHatDatenEltern.Name = "colHatDatenEltern";
            // 
            // CtlIkGlaeubiger
            // 
            this.Controls.Add(this.grdGlaeubiger);
            this.Name = "CtlIkGlaeubiger";
            this.Size = new System.Drawing.Size(695, 230);
            ((System.ComponentModel.ISupportInitialize)(this.grdGlaeubiger)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(this.qryIkGlaeubiger)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(this.grvGlaeubiger)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(this.repedtchkIstGlaeubiger)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(this.repedtchkIstElternteil)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(this.repedtStatus)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(this.qryStatus)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(this.repedtImages)).EndInit();
            this.ResumeLayout(false);

        }

        #endregion

        #region Dispose

        /// <summary>
        /// Clean up any resources being used.
        /// </summary>
        protected override void Dispose(bool disposing)
        {
            if (disposing)
            {
                if ((components != null))
                {
                    components.Dispose();
                }
            }
            base.Dispose(disposing);
        }

        #endregion

        #region Private Properties

        /*
        public bool AllesSpeichern(bool GanzesKlientensystem)
        {
          if (LeistungIstGeschlossen) return true;
          if (!qryIkGlaeubiger.Post()) return false;
          if (!CheckData()) return false;

          //IBANNummernChecken();

          Session.BeginTransaction();
          try
          {
            AllesSpeichern_OhneTransaktion();
            Session.Commit();
          }
          catch (Exception ex)
          {
            Session.Rollback();
            KissMsg.ShowInfo(ex.Message);
            return false;
          }
          RefreshData(GanzesKlientensystem);
          return true;
        }

        // Daten neu holen, damit IDs in qryIkGlaeubiger aktualisiert werden
        public void RefreshData(bool GanzesKlientensystem)
        {
          DatenGlaeubigerWurdenKorrigiert = false;
          int gID = Utils.ConvertToInt(qryIkGlaeubiger["BaPersonID"]);
          GlaeubigerOeffnen(GanzesKlientensystem);
          qryIkGlaeubiger.Find("BaPersonID="+gID.ToString());
          MonatszahlenNeuRechnen();
          // Navigator Trees aktualisieren:
          FormController.SendMessage("FrmFall", "Action", "RefreshTree");
        }
        */
        // Letzte Bearbeitung
        // 02.04.2008 : sozheo : neu
        // ------------------------------------------------------------------------
        private bool CanEdit
        {
            get
              {
            return (
              qryIkGlaeubiger.CanUpdate &&
              qryIkGlaeubiger.Count > 0 &&
              !LeistungIstGeschlossen
            );
              }
        }

        #endregion

        #region Public Methods

        public void AllesSpeichern_OhneTransaktion()
        {
            // 05.05.2008 : sozheo : Korrekturen für neues Feld "IkGlaeubigerStatusCode"
            // 26.06.2008 : sozheo : Vorsaldo eingebaut
            // 27.02.2009 : sozheo : Korrekturen für neue Tabelle IkInterneVerrechnung

            string sql = "";
            foreach (System.Data.DataRow row in qryIkGlaeubiger.DataTable.Rows)
            if (!(bool)row["IstGlaeubiger"] && Utils.ConvertToInt(row["IkGlaeubigerID"])>0)
            {
                // Löschen:
                sql = "DELETE dbo.IkGlaeubiger  ";
                sql += string.Format("WHERE IkGlaeubigerID = {0} ", Utils.ConvertToInt(row["IkGlaeubigerID"]));
                DBUtil.ExecSQL(sql);
            }
            else if ((bool)row["IstGlaeubiger"] && Utils.ConvertToInt(row["IkGlaeubigerID"]) == 0)
            {
                // Einfügen:
                DBUtil.ExecSQL(@"
                  IF NOT EXISTS(select IkGlaeubigerID from dbo.IkGlaeubiger where IKRechtstitelID = {0} and BaPersonID = {2})
                  INSERT INTO dbo.IkGlaeubiger (
                    IKRechtstitelID, BaPersonID,
                    IstElternteil,
                    IkGlaeubigerStatusCode)
                  VALUES
                    ({0},{1},{2},{3}) ",
                  IkRechtstitelID,
                  Utils.ConvertToInt(row["BaPersonID"]),
                  row["IstElternteil"],
                  DBUtil.IsEmpty(row["IkGlaeubigerStatusCode"]) ? 1 : row["IkGlaeubigerStatusCode"]
                );
            }
            else
            if ((bool)row["IstGlaeubiger"] && Utils.ConvertToInt(row["IkGlaeubigerID"])>0 && row.RowState != System.Data.DataRowState.Unchanged)
            {
                DBUtil.ExecSQL(@"
                  UPDATE dbo.IkGlaeubiger SET
                    IkRechtstitelID = {0},
                    BaPersonID = {1},
                    IstElternteil = {2},
                    IkGlaeubigerStatusCode = {3}
                  WHERE IkGlaeubigerID = {4}",
                  IkRechtstitelID,
                  Utils.ConvertToInt(row["BaPersonID"]),
                  row["IstElternteil"],
                  DBUtil.IsEmpty(row["IkGlaeubigerStatusCode"]) ? 1 : row["IkGlaeubigerStatusCode"],
                  Utils.ConvertToInt(row["IkGlaeubigerID"])
                );
            }
        }

        public bool CheckData()
        {
            if (LeistungIstGeschlossen) return true;
            // Checks über alle Daten in IkGlaeubiger machen:
            if (!qryIkGlaeubiger.Post()) return false;
            if (!GlaeubigerNeuEinfuegenChecken()) return false;
            if (!GlaeubigerAnzahlChecken()) return false;
            if (!GlaeubigerElternKindChecken()) return false;
            return true;
        }

        public void GlaeubigerOeffnen(bool GanzesKlientensystem)
        {
            //int Filter = (chkGanzesKlientensystem.Checked) ? 1 : 0;
            int Filter = (GanzesKlientensystem) ? 1 : 0;
            qryIkGlaeubiger.Fill(IkRechtstitelID, FaFallID, Filter, FaProzessCode);
        }

        public void Init(
            int RechtstitelID, int FallID, bool CanEdit, bool IstKKBB, int LeistungID, int ProzessCode,
            int SchuldnerID, bool LeistgGeschlossen
        )
        {
            IkRechtstitelID = RechtstitelID;
            FaFallID = FallID;
            RtIstKKBB = IstKKBB;
            FaLeistungID = LeistungID;
            FaProzessCode = ProzessCode;
            SchuldnerBaPersonID1 = SchuldnerID;
            LeistungIstGeschlossen = LeistgGeschlossen;
            if (LeistungIstGeschlossen)
            {
                qryIkGlaeubiger.CanUpdate = false;
                qryIkGlaeubiger.CanInsert = false;
                qryIkGlaeubiger.CanDelete = false;
            }

            if (!RtIstKKBB) qryIkGlaeubiger.CanUpdate = true;

            // Gläubiger-Status
            qryStatus.Fill();

            //Buchungsstati laden
            repedtImages.SmallImages = KissImageList.SmallImageList;
            SqlQuery qryStati = DBUtil.OpenSQL(
                "select Code, Text, Value1 from dbo.XLOVCode WITH(READUNCOMMITTED) where LOVName = 'IkGlaeubigerStatus' order by SortKey"
            );
            foreach (DataRow row in qryStati.DataTable.Rows)
            {
                repedtImages.Items.Add(new DevExpress.XtraEditors.Controls.ImageComboBoxItem(
                    row["Text"].ToString(),
                    (int) row["Code"],
                    KissImageList.GetImageIndex(Convert.ToInt32(row["Value1"]))
                ));
            }

            if (FaProzessCode != 405)
            {
                // Diese Spalten sind nur bei ALBV sichtbar:
                colIstElternteil.Visible = false;
            }
        }

        public void KKBBGlaeubigerSetzen(int BaPersonID, bool StatusIstOK)
        {
            // 12.03.2009 : sozheo : Status editieren im Gitter

            // Hier werden die Vorgabewerte des KKBB-Rechtstitels gesetzt:
            // den Gläubiger neu erstellen, wenn er fehlt
            // den Glaubiger wechseln
            if (qryIkGlaeubiger.Find("IstGlaeubiger=1"))
            {
                // Es gibt bereits einen Gläubiger, also entfernen, wenn notwendig:
                if (Utils.ConvertToInt(qryIkGlaeubiger["BaPersonID"]) != BaPersonID || !StatusIstOK) 
                {
                    // alten Gläubiger löschen:
                    qryIkGlaeubiger["IstGlaeubiger"] = false;
                    qryIkGlaeubiger["IkGlaeubigerStatusCode"] = DBNull.Value;
                    DatenGlaeubigerWurdenKorrigiert = true;
                }
                else return;
            }

            // Wenn der Status nicht ok ist, dann soll kein Gläubiger gewählt sein:
            if (!StatusIstOK) return;

            // Wenn der Status ok ist, kontrollieren, ob Gläubiger richtig gesetzt ist:
            if (!qryIkGlaeubiger.Find("BaPersonID="+BaPersonID.ToString()))
            {
                throw new KissInfoException("Programmfehler: Die Personen-ID konnte nicht gefunden werden.");
            }

            if (!(bool)qryIkGlaeubiger["IstGlaeubiger"])
            {
                // ist noch nicht gewählt, also setzen;
                qryIkGlaeubiger["IstGlaeubiger"] = true;
                if (DBUtil.IsEmpty(qryIkGlaeubiger["IkGlaeubigerStatusCode"]))
                    qryIkGlaeubiger["IkGlaeubigerStatusCode"] = qryIkGlaeubiger["OLD_IkGlaeubigerStatusCode"];
                //grvGlaeubiger.RefreshEditor(true);
                DatenGlaeubigerWurdenKorrigiert = true;
            }
        }

        public override bool ReceiveMessage( System.Collections.Specialized.HybridDictionary param )
        {
            // we need at least one parameter to know what to do
            if( param == null || param.Count < 1 ) return true;

            // action depending
            switch( param["Action"] as string )
            {
                case "Refresh": qryIkGlaeubiger.Refresh(); return true;
            }

            // did not understand message
            return false;
        }

        #endregion

        #region Private Methods

        private bool GlaeubigerNeuEinfuegenChecken()
        {
            // Letzte Bearbeitung
            // 23.06.2009 : sozheo : neu
            // ------------------------------------------------------------------------
            // Spezifikation:
            // Wenn die aktiven Gläubiger vom alten RT und neuen RT sich unterscheiden (Anzahl, Selektion),
            // muss durch KiSS eine Info-Meldung erfolgen, mit sinngemässem Inhalt: 
            // ob nicht ein oder mehrere Gläubiger vergessen gegangen sind. 
            // Falls User OK klickt, fährt KiSS normal weiter.
            // Falls User Abbruch klickt, bleibt KiSS auf dem Reiter Rechtstitel.
            // Die Info-Meldung soll nur einmal erscheinen, wenn in der Maske RT nicht alle 
            // bisherigen vorhandenen Gläubiger mittels Checkbox aktiviert werden. 
            // Wird durch User Meldung mit ok bestätigt, dann wird Meldung nicht mehr wiederholt.
            
            foreach (System.Data.DataRow row in qryIkGlaeubiger.DataTable.Rows)
            if (!DBUtil.IsEmpty(row["IkGlaeubigerID"])) 
                // ein Gläubiger existiert, also keine Meldung machen
                return true;

            SqlQuery qryRTAlt = DBUtil.OpenSQL(@"
                select G.BaPersonID, NameGlb = P.NameVorname
                from dbo.IkGlaeubiger G
                left join dbo.IkRechtstitel R on R.IkRechtstitelID = (
                  select top 1 Q.IkRechtstitelID from IkRechtstitel Q
                  where Q.FaLeistungID = {0}
                    and Q.IkRechtstitelID != {1}
                  order by Q.IkRechtstitelGueltigVon desc
                )
                left join dbo.vwPerson P on P.BaPersonID = G.BaPersonID
                order by NameGlb",
                FaLeistungID,
                IkRechtstitelID
            );

            // wenn es keinen alten Rechtstitel gibt, keine Meldung machen:
            if (qryRTAlt.Count == 0) return true;

            // es existieren noch keine Gläubiger, also kontrollieren, 
            // ob alle Gläubiger im neuen Rechtstitel aktiviert sind
            string strNames = "";
            foreach (System.Data.DataRow row in qryIkGlaeubiger.DataTable.Rows)
            {
                if (!Utils.ConvertToBool(row["IstGlaeubiger"], false) &&
                    qryRTAlt.Find("BaPersonID=" + Utils.ConvertToInt("BaPersonID").ToString()))
                {
                    strNames = strNames + Utils.ConvertToString(qryRTAlt["NameGlb"]) + "\r\n";
                }
            }

            if (strNames == "")
            {
                // alle alten Gläubiger sind vorhanden, also keine Meldung machen:
                return true;
            }

            if (!KissMsg.ShowQuestion(
                "Die folgenden Gläubiger waren im alten Rechtstitel vorhanden,\r\n" +
                "sind im neuen Rechtstitel aber nicht gewählt:\r\n" + strNames + "\r\n" +
                "Wollen Sie die Gläubiger trotzdem speichern?"))
            {
                // User möchte nicht fortsetzen, also nicht speichern
                return false;
            }

            // sonst normales Speichern zulassen
            return true;
        }

        private bool GlaeubigerAnzahlChecken()
        {
            // 14.02.2008 : sozheo : Kontrolle Gläubiger korrigiert

            // TODO : geht nicht, wenn vom alten RT nur ein Gläubiger übernommen wird,
            // der alte RT damit offen bleibt und deshalb für den Gläubiger im neuen RT beide RT offen sind
            // -> Es muss also möglich sein, mehrere Gläubiger im mehreren offenen RT zu haben
            return true;

            /*
            string msg = "";
            SqlQuery qry;

            // Kontrolle, dass ein Gläubiger nur in einem aktiven Rechsttitel vorhanden ist
            foreach (System.Data.DataRow row in qryIkGlaeubiger.DataTable.Rows)
            if ( (bool)row["IstGlaeubiger"] && DBUtil.IsEmpty(row["IkGlaeubigerID"]))
            {
                // #4937 : SQL korrigiert, damit Gläubiger bei verschiedenen Rechtstitel eingefügt werden können 
                qry = DBUtil.OpenSQL(@"
                    select Count(*) as Anzahl from dbo.IkGlaeubiger GLB
                    left join dbo.IkRechtstitel RTL WITH(READUNCOMMITTED) on RTL.IkRechtstitelID = GLB.IkRechtstitelID
                    left join dbo.FaLeistung LTG WITH(READUNCOMMITTED) on LTG.FaLeistungID = RTL.FaLeistungID
                    where GLB.BaPersonID = {0}
                    and LTG.FaFallID = {1}
                    and (
                        -- Bei KKBB sollen nur Rechtstitel KKBB angezeigt werden
                        ({3} = 407 and LTG.FaProzessCode = 407) OR
                        -- Bei ALBV und UeBH sollen nur Rechtstitel ALBV und UeBH angezeigt werden
                        ({3} IN (405, 406) and LTG.FaProzessCode IN (405, 406) and RTL.IkRechtstitelGueltigBis is NULL)
                    )
                    and not GLB.IkRechtstitelID = {2}",
                    row["BaPersonID"],
                    FaFallID,
                    IkRechtstitelID,
                    FaProzessCode
                );

                if (Utils.ConvertToInt(qry["Anzahl"]) > 0)
                {
                    if (msg != "") msg += "\r\n";
                    msg += Utils.ConvertToString(row["PersonName"]) + " (" + Utils.ConvertToInt(qry["Anzahl"]).ToString() + ")";
                }
            }
        
            if (msg != "")
            {
                KissMsg.ShowInfo(string.Format(
                    "Folgende Personen sind bereits in einem anderen Rechstitel als Gläubiger erfasst:\r\n\r\n" +
                    "{0}\r\n\r\n" +
                    "Diese Personen können nicht einem 2. Rechtstitel hinzugefügt werden.",
                    msg
                ));
            }

            return (msg == "");
             * */
        }

        private bool GlaeubigerElternKindChecken()
        {
            // 14.02.2008 : sozheo : Kontrolle Gläubiger korrigiert

            int AnzEltern = 0;

            // Kontrolle, dass ein Elternteil nur einmal gewählt sein darf
            foreach (System.Data.DataRow row in qryIkGlaeubiger.DataTable.Rows)
            if ( (bool)row["IstGlaeubiger"] )
            {
                if ((bool)row["IstElternteil"]) AnzEltern += 1;
            }

            if (AnzEltern>1)
            {
                KissMsg.ShowInfo("Sie können nur einen Erwachsenen auswählen.");
                return false;
            }
            return true;
        }

        private void grvGlaeubiger_CustomDrawCell(object sender, DevExpress.XtraGrid.Views.Base.RowCellCustomDrawEventArgs e)
        {
            // 05.05.2008 : sozheo : Korrekturen für neues Feld "IkGlaeubigerStatusCode"
            // 27.02.2009 : sozheo : Korrekturen für neue Tabelle IkInterneVerrechnung
            // 12.03.2009 : sozheo : Status editieren im Gitter

            if (e.RowHandle == grvGlaeubiger.FocusedRowHandle) return;
            e.Handled = false;

            if (e.Column.FieldName == "IstGlaeubiger")
            {
                // Wenn bereits Forderungen erfasst wurden, dann kann der Gläubiger nicht mehr entfernt werden
                if (
                    !CanEdit ||
                    Utils.ConvertToBool(grvGlaeubiger.GetRowCellValue(e.RowHandle, colHatDaten), false) ||
                    RtIstKKBB
                )
                    e.Appearance.BackColor = Color.BlanchedAlmond;
                else
                    e.Appearance.BackColor = Color.AliceBlue;
            }
            else if (e.Column.FieldName == "IstElternteil")
            {
                // Wenn als Gläubiger erfasst und nicht gesperrt, dann kann IstElternteil editiert werden
                if (
                    !qryIkGlaeubiger.CanUpdate ||
                    (!(bool)grvGlaeubiger.GetRowCellValue(e.RowHandle, colGlaeubiger)) ||
                      (bool)grvGlaeubiger.GetRowCellValue(e.RowHandle, colHatDatenEltern) ||
                    !CanEdit
                )
                    e.Appearance.BackColor = Color.BlanchedAlmond;
                else
                    e.Appearance.BackColor = Color.AliceBlue;
            }
            // Status editieren im Gitter
            else if (e.Column.FieldName == "IkGlaeubigerStatusCode" && e.Column == colIkGlaeubigerStatusCodeEdt)
            {
                if (
                    (!(bool)grvGlaeubiger.GetRowCellValue(e.RowHandle, colGlaeubiger)) ||
                    !CanEdit
                )
                    e.Appearance.BackColor = Color.BlanchedAlmond;
                else
                    e.Appearance.BackColor = Color.AliceBlue;
            }
        }

        private void grvGlaeubiger_ShowingEditor(object sender, CancelEventArgs e)
        {
            // Editor freigeben:
            if (grvGlaeubiger.FocusedColumn.FieldName == "IstGlaeubiger")
                e.Cancel = (
                    Utils.ConvertToBool(qryIkGlaeubiger["HatDaten"], true) ||
                    !CanEdit || RtIstKKBB
                );
            else if (grvGlaeubiger.FocusedColumn.FieldName == "IstElternteil")
                e.Cancel = (
                    !Utils.ConvertToBool(qryIkGlaeubiger["IstGlaeubiger"], false) ||
                    Utils.ConvertToBool(qryIkGlaeubiger["HatDatenEltern"], true) ||
                    !CanEdit || RtIstKKBB
                );
            else if (grvGlaeubiger.FocusedColumn.FieldName == "IkGlaeubigerStatusCode")
                e.Cancel = (
                    !Utils.ConvertToBool(qryIkGlaeubiger["IstGlaeubiger"], true) ||
                    !CanEdit
                );
            else
                e.Cancel = true;
        }

        private void qryIkGlaeubiger_AfterFill(object sender, System.EventArgs e)
        {
            DatenGlaeubigerWurdenKorrigiert = false;
        }

        private void qryIkGlaeubiger_BeforePost(object sender, System.EventArgs e)
        {
            // 17.01.2008 : sozheo : angepasst für neues Datenmodell
            // 27.01.2008 : sozheo : neu können nur gültige Zahlungswege ausgewählt werden
            // 27.02.2009 : sozheo : Korrekturen für neue Tabelle IkInterneVerrechnung

            if (!(bool)qryIkGlaeubiger["IstGlaeubiger"]) return;

            if (DBUtil.IsEmpty(qryIkGlaeubiger["IstElternteil"]))
            {
                KissMsg.ShowInfo("Die Spalte 'Eltern' (Elt.) darf nicht leer bleiben.");
                throw new KissCancelException();
            }

            if (Utils.ConvertToInt(qryIkGlaeubiger["IkGlaeubigerStatusCode"]) != 9)
            {
                // kontrollieren das der Elternteil überall gelich erfasst ist
                // nur wenn der Status nicht "ungültig, falsch erfast" ist
                SqlQuery qryEltern = DBUtil.OpenSQL(@"
                    select Anzahl = count(*) from dbo.IkGlaeubiger G with(readuncommitted)
                    left join dbo.IkRechtstitel R with(readuncommitted) on R.IkRechtstitelID = G.IkRechtstitelID
                    where R.FaLeistungID = {0}
                      and G.BaPersonID = {1}
                      and G.IkGlaeubigerID != {2}
                      and G.IkGlaeubigerStatusCode != 9
                      and G.IstElternteil != {3}", 
                    FaLeistungID, 
                    Utils.ConvertToInt(qryIkGlaeubiger["BaPersonID"]),
                    Utils.ConvertToInt(qryIkGlaeubiger["IkGlaeubigerID"]),
                    Utils.ConvertToBool(qryIkGlaeubiger["IstElternteil"], true)
                );

                if (Utils.ConvertToInt(qryEltern["Anzahl"]) > 0)
                {
                    string strEltern = Utils.ConvertToBool(qryIkGlaeubiger["IstElternteil"], true) ?
                        "Kind" : "Elternteil";
                    string strElternNeu = Utils.ConvertToBool(qryIkGlaeubiger["IstElternteil"], true) ?
                        "Elternteil" : "Kind";
                    KissMsg.ShowInfo(
                        string.Format("In anderen Rechtsiteln wurde diese Person als {0} erfasst.", strEltern) + "\r\n" +
                        string.Format("Sie kann deshalb nicht als {0} gespeichert werden.", strElternNeu)
                    );
                    throw new KissCancelException();
                }
            }

            qryIkGlaeubiger["OLD_IkGlaeubigerStatusCode"] = qryIkGlaeubiger["IkGlaeubigerStatusCode"];
            DatenGlaeubigerWurdenKorrigiert = true;
        }

        private void repedtStatus_CloseUp(object sender, DevExpress.XtraEditors.Controls.CloseUpEventArgs e)
        {
            // 06.03.2008 : sozheo : neues CheckEdit
            // 05.05.2008 : sozheo : Korrekturen für neues Feld "IkGlaeubigerStatusCode"
            // 27.02.2009 : sozheo : Korrekturen für neue Tabelle IkInterneVerrechnung
            // 12.03.2009 : sozheo : Status editieren im Gitter

            e.AcceptValue = true;
            if (!e.CloseMode.Equals(DevExpress.XtraEditors.PopupCloseMode.Normal)) return;

            int NewValue = Utils.ConvertToInt(e.Value);
            qryIkGlaeubiger["IkGlaeubigerStatusCode"] = NewValue;
            qryIkGlaeubiger.RowModified = true;
            DatenGlaeubigerWurdenKorrigiert = true;
        }

        private void repedtchkIstElternteil_CheckedChanged(object sender, EventArgs e)
        {
            if (RtIstKKBB) return;

            // Damit wir später wissen, dass im Gitter wurde:
            DatenGlaeubigerWurdenKorrigiert = true;

            bool NewValue = !(bool)qryIkGlaeubiger["IstElternteil"];
            qryIkGlaeubiger["IstElternteil"] = NewValue;
            qryIkGlaeubiger.RowModified = true;
        }

        private void repedtchkIstGlaeubiger_CheckedChanged(object sender, EventArgs e)
        {
            if (RtIstKKBB) return;
              
            // Damit wir später wissen, dass im Gitter editiert wurde:
            DatenGlaeubigerWurdenKorrigiert = true;

            bool NewValue = !(bool)qryIkGlaeubiger["IstGlaeubiger"];
            qryIkGlaeubiger["IstGlaeubiger"] = NewValue;
            if (NewValue)
            {
                // Der Gläubiger wird hinzugefügt:
                qryIkGlaeubiger["IkGlaeubigerStatusCode"] = 1;
                grvGlaeubiger.RefreshEditor(true);
            }
            else
            {
                // Der Gläubiger wird entfernt:
                qryIkGlaeubiger["IkGlaeubigerStatusCode"] = DBNull.Value;
            }
            qryIkGlaeubiger.RowModified = true;
        }

        #endregion

        private void qryIkGlaeubiger_PositionChanging(object sender, EventArgs e)
        {
            if (qryIkGlaeubiger.Row != null && qryIkGlaeubiger.Row.RowState != DataRowState.Unchanged)
            {
                if (!qryIkGlaeubiger.Post()) throw new KissCancelException();
            }
        }

    }
}
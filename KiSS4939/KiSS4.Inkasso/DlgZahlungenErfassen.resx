<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <metadata name="qryKbZahlungseingang.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>314, 17</value>
  </metadata>
  <metadata name="qryIkAusgleich.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>17, 17</value>
  </metadata>
  <metadata name="qryOpAusgleich.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>493, 17</value>
  </metadata>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="dateVerbuchung.Properties.Buttons" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        iVBORw0KGgoAAAANSUhEUgAAAAwAAAAQCAYAAAAiYZ4HAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8
        YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAABMSURBVDhPYwABY2Pj/8RgsGIQgHFQBKEAqxyIQwyGKsdu
        MjrAqaGhgQErG6sGkAKYInSaOhpAYERrAAFkNk4NuACGBmIwVDkpgIEBAO2ojyYwtBe7AAAAAElFTkSu
        QmCC
</value>
  </data>
  <data name="qryKbZahlungseingang.SelectStatement" xml:space="preserve">
    <value>;WITH ZahlungseingangCte AS
(
  SELECT  
    ZEI.KbZahlungseingangID,
    ZEI.Datum,
    ZEI.BaInstitutionID,
    ZEI.BaPersonID,
    ZEI.Debitor,
    ZEI.KontoNr,
    ZEI.Betrag,
    ZEI.Ausgeglichen,
    ZEI.ZugeteiltUserID,
    BUC.BelegNr,
    BUC.KbPeriodeID,
    BUC.[Text]
  FROM dbo.KbZahlungseingang ZEI
    LEFT JOIN dbo.KbBuchung  BUC ON BUC.KbZahlungseingangID = ZEI.KbZahlungseingangID
  WHERE {2} = 0 -- noch nicht definitiv verbuchte Zahlungseingänge auflisten
    AND ZEI.Ausgeglichen = 0
    AND ZEI.KontoNr IN (SELECT KontoNr FROM dbo.KbKonto WHERE ',' + KbKontoArtCodes + ',' LIKE '%,50,%') -- Zahlungseingang Inkasso
    AND ISNULL(ZEI.BaPersonID, {0}) IN ({0}, {1})      -- nicht zugewiesene oder der Person zugewiesene Eingänge

  UNION ALL
  SELECT  
    ZEI.KbZahlungseingangID,
    ZEI.Datum,
    ZEI.BaInstitutionID,
    ZEI.BaPersonID,
    ZEI.Debitor,
    ZEI.KontoNr,
    ZEI.Betrag,
    ZEI.Ausgeglichen,
    ZEI.ZugeteiltUserID,
    BUC.BelegNr,
    BUC.KbPeriodeID,
    BUC.[Text]
  FROM dbo.KbZahlungseingang     ZEI
    INNER JOIN dbo.KbBuchung     BUC ON BUC.KbZahlungseingangID = ZEI.KbZahlungseingangID
    INNER JOIN dbo.KbOpAusgleich OPA ON OPA.AusgleichBuchungID = BUC.KbBuchungID 
                                    AND OPA.KbOpAusgleichID = {2}
  WHERE {2} &lt;&gt; 0  -- definitiv verbuchte Zahlungseingänge auflisten
)

SELECT
  CTE.KbZahlungseingangID,
  CTE.Datum,
  CTE.BaInstitutionID,
  CTE.BaPersonID,
  CTE.Debitor,
  CTE.KontoNr,
  CTE.Betrag,
  CTE.Ausgeglichen,
  CTE.ZugeteiltUserID,
  Institution         = INS.Name,
  Klient              = PRS.NameVorname,
  EingangAusgeglichen = CONVERT(BIT, CASE WHEN CTE.Betrag = (SELECT SUM(B.Betrag) 
                                                             FROM dbo.KbBuchung B 
                                                             WHERE B.KbZahlungseingangID = CTE.KbZahlungseingangID)
                                       THEN 1 
                                       ELSE 0 
                                     END),
  SAR                 = USR.NameVorname,
  CTE.BelegNr,
  CTE.KbPeriodeID,
  CTE.[Text]
FROM ZahlungseingangCte CTE
  LEFT  JOIN dbo.vwUser         USR ON USR.UserID = ZugeteiltUserID
  LEFT  JOIN dbo.vwPersonSimple PRS ON PRS.BaPersonID = CTE.BaPersonID
  LEFT  JOIN dbo.BaInstitution  INS ON INS.BaInstitutionID = CTE.BaInstitutionID
ORDER BY Datum;
</value>
  </data>
  <data name="edtEingang.Properties.Buttons" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        iVBORw0KGgoAAAANSUhEUgAAAAwAAAAQCAYAAAAiYZ4HAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8
        YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAABMSURBVDhPYwABY2Pj/8RgsGIQgHFQBKEAqxyIQwyGKsdu
        MjrAqaGhgQErG6sGkAKYInSaOhpAYERrAAFkNk4NuACGBmIwVDkpgIEBAO2ojyYwtBe7AAAAAElFTkSu
        QmCC
</value>
  </data>
  <metadata name="qryIkForderungBetrag.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>142, 17</value>
  </metadata>
  <data name="qryIkForderungBetrag.SelectStatement" xml:space="preserve">
    <value>/*
OBSOLETE?

-- zugewiesene Posten
SELECT IkPositionID          = IPO.IkPositionID,
       Datum                 = IPO.Datum,
       BaPersonID            = IPO.BaPersonID,
       BaZahlungswegID       = IGL.BaZahlungswegID,
       KbKostenstelleID      = KKS.KbKostenstelleID,
       Glaeubiger            = PRS.NameVorname,
       Betrag                = COALESCE(TotalAliment, BetragALBV, BetragKiZulage, BetragALBVVerrechnung, BetragEinmalig),
       TeilBetrag            = isNull(AUS.Betrag, $0),
       ForderungsBezeichnung = 'TODO', --IFG.ForderungsBezeichnung,
       BetragOffen           = COALESCE(TotalAliment, BetragALBV, BetragKiZulage, BetragALBVVerrechnung, BetragEinmalig) --isNull(KOA.Betrag, $0)
                            - (SELECT SUM(KOA.Betrag)
                               FROM KbOpAusgleich     KOA
                                 INNER JOIN KbBuchung KBU ON KBU.KbBuchungID = KOA.OpBuchungID
                               WHERE KBU.IkPositionID = IPO.IkPositionID)
INTO #tmp
FROM KbZahlungseingang      ZEI
  INNER JOIN KbBuchung      BUC  ON BUC.IkPositionID = ZEI.KbZahlungseingangID
  INNER JOIN KbOpAusgleich  AUS  ON AUS.AusgleichBuchungID = BUC.KbBuchungID
  INNER JOIN KbBuchung      BUC2 ON BUC2.KbBuchungID = AUS.OpBuchungID
  INNER JOIN IkPosition     IPO  ON IPO.IkPositionID = BUC.IkPositionID
  INNER JOIN IkRechtstitel  IRT  ON IRT.IkRechtstitelID = IPO.IkRechtstitelID
  INNER JOIN IkGlaeubiger   IGL  ON IGL.IkRechtstitelID = IRT.IkRechtstitelID 
                                AND IGL.BaPersonID = IPO.BaPersonID
  LEFT  JOIN vwPerson       PRS  ON PRS.BaPersonID = IGL.BaPersonID
  LEFT  JOIN KbKostenstelle_BaPerson KKS  ON KKS.BaPersonID = PRS.BaPersonID
                          AND (KKS.DatumBis IS NULL OR GetDate() BETWEEN KKS.DatumVon AND KKS.DatumBis)
WHERE IRT.FaLeistungID = {0}--64986
  AND PRS.BaPersonID = {1}  --56957
  AND isNull(ZEI.KbZahlungseingangID, {2})  = {2}


-- offene Posten
INSERT INTO #tmp
SELECT IkPositionID          = IPO.IkPositionID,
       Datum                 = IPO.Datum,
       BaPersonID            = IPO.BaPersonID,
       BaZahlungswegID       = IGL.BaZahlungswegID,
       KbKostenstelleID      = KKS.KbKostenstelleID,
       Glaeubiger            = PRS.NameVorname,
       Betrag                = COALESCE(TotalAliment, BetragALBV, BetragKiZulage, BetragALBVVerrechnung, BetragEinmalig),
       TeilBetrag            = $0, --KOA.Betrag,
       ForderungsBezeichnung = 'TODO', --IFG.ForderungsBezeichnung,
       BetragOffen           = COALESCE(TotalAliment, BetragALBV, BetragKiZulage, BetragALBVVerrechnung, BetragEinmalig) --isNull(KOA.Betrag, $0)
                             -(SELECT SUM(KOA.Betrag)
                               FROM KbOpAusgleich     KOA
                                 INNER JOIN KbBuchung KBU ON KBU.KbBuchungID = KOA.OpBuchungID
                               WHERE KBU.IkPositionID = IPO.IkPositionID)
FROM IkPosition             IPO
  INNER JOIN IkRechtstitel  IRT ON IRT.IkRechtstitelID = IPO.IkRechtstitelID
  INNER JOIN IkGlaeubiger   IGL ON IGL.IkRechtstitelID = IRT.IkRechtstitelID
                               AND IGL.BaPersonID = IPO.BaPersonID
  LEFT  JOIN vwPerson       PRS ON PRS.BaPersonID = IGL.BaPersonID
  LEFT  JOIN KbKostenstelle_BaPerson KKS ON KKS.BaPersonID = PRS.BaPersonID
                            AND (KKS.DatumBis IS NULL OR GetDate() BETWEEN KKS.DatumVon AND KKS.DatumBis)
WHERE IRT.FaLeistungID = {0}--64986
  AND PRS.BaPersonID = {1}  --56957
  AND NOT EXISTS (SELECT * FROM #tmp WHERE IkPositionID = IPO.IkPositionID)

SELECT IkPositionID,
       Datum,
       BaPersonID,
       BaZahlungswegID,
       KbKostenstelleID,
       Glaeubiger,
       Betrag,
       TeilBetrag,
       ForderungsBezeichnung,
       BetragOffen
 FROM #tmp

DROP TABLE #tmp
*/</value>
  </data>
</root>
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;

using Kiss.BL.KissSystem;
using Kiss.DataAccess.Fa;
using Kiss.Infrastructure.IoC;
using Kiss.Interfaces;
using Kiss.Interfaces.BL;
using Kiss.Model;
using Kiss.Model.DTO.Fa;

namespace Kiss.BL.Fa
{
    /// <summary>
    /// Service to manage a FaKategorisierungDTO.
    /// </summary>
    public class FaKategorisierungDTOService : ServiceBase, IServiceCRUD<FaKategorisierungDTO>
    {
        #region Fields

        #region Private Constant/Read-Only Fields

        private readonly FaKategorisierungEksProduktService _faKategorisierungEksProduktService;
        private readonly FaKategorisierungService _faKategorisierungService;
        private readonly XOrgUnitService _xOrgUnitService;
        private readonly XTaskAutoGeneratedService _xTaskAutoGeneratedService;
        private readonly XUserService _xUserService;

        #endregion

        #endregion

        #region Constructors

        private FaKategorisierungDTOService()
        {
            _faKategorisierungService = Container.Resolve<FaKategorisierungService>();
            _faKategorisierungEksProduktService = Container.Resolve<FaKategorisierungEksProduktService>();
            _xUserService = Container.Resolve<XUserService>();
            _xOrgUnitService = Container.Resolve<XOrgUnitService>();
            _xTaskAutoGeneratedService = Container.Resolve<XTaskAutoGeneratedService>();
        }

        #endregion

        #region Methods

        #region Public Methods

        public KissServiceResult DeleteData(IUnitOfWork unitOfWork, FaKategorisierungDTO dataToDelete, bool saveChanges = true)
        {
            if (dataToDelete != null)
            {
                // Pendenz löschen wenn Kategorisierung gelöscht wird
                UpdatePendenzenOfKategorisierung(unitOfWork, dataToDelete.FaKategorisierung.FaKategorisierungID, null, null);
                return _faKategorisierungService.DeleteData(unitOfWork, dataToDelete.FaKategorisierung, saveChanges);
            }
            return KissServiceResult.Ok();
        }

        public ObservableCollection<FaKategorisierungDTO> GetByBaPersonId(IUnitOfWork unitOfWork, int baPersonId)
        {
            var list = _faKategorisierungService.GetByBaPersonId(unitOfWork, baPersonId);

            var result = (from faKategorisierung in list
                          orderby faKategorisierung.Datum
                          select new FaKategorisierungDTO
                          {
                              FaKategorisierung = faKategorisierung
                          }).ToList();

            result.ForEach(SetProperties);

            return new ObservableCollection<FaKategorisierungDTO>(result);
        }

        public ObservableCollection<FaKategorisierungDTO> GetData(IUnitOfWork unitOfWork)
        {
            throw new NotImplementedException();
        }

        public KissServiceResult NewData(out FaKategorisierungDTO newData)
        {
            FaKategorisierung kategorisierung;
            var result = _faKategorisierungService.NewData(out kategorisierung);

            newData = new FaKategorisierungDTO { FaKategorisierung = kategorisierung };
            SetProperties(newData);

            return result;
        }

        public KissServiceResult SaveData(IUnitOfWork unitOfWork, FaKategorisierungDTO dataToSave)
        {
            if (dataToSave != null)
            {
                var result = _faKategorisierungService.SaveData(unitOfWork, dataToSave.FaKategorisierung);

                if (result)
                {
                    SetProperties(dataToSave);
                }

                return result;
            }

            return KissServiceResult.Ok();
        }

        public KissServiceResult SaveData(IUnitOfWork unitOfWork, List<FaKategorisierungDTO> dataToSave)
        {
            var result = KissServiceResult.Ok();

            foreach (var faKategorisierungDTO in dataToSave)
            {
                result += _faKategorisierungService.SaveData(unitOfWork, faKategorisierungDTO.FaKategorisierung);
            }

            return result;
        }

        public KissServiceResult SaveData(IUnitOfWork unitOfWork, FaKategorisierungDTO dataToSave, Dictionary<string, QuestionAnswerOption> questionsAndAnswers)
        {
            throw new NotImplementedException();
        }

        /// <summary>
        /// Updates the properties based on dto.FaKategorisierung.
        /// </summary>
        /// <param name="dto"></param>
        public void SetProperties(FaKategorisierungDTO dto)
        {
            if (dto != null && dto.FaKategorisierung != null)
            {
                // SAR
                var user = _xUserService.GetById(null, dto.FaKategorisierung.UserID);
                dto.SAR = user != null ? user.LastNameFirstName : null;

                // Team
                var orgUnit = _xOrgUnitService.GetOrgUnitOfUser(null, dto.FaKategorisierung.UserID);
                dto.Team = orgUnit != null ? orgUnit.ItemName : null;

                // Kategorie
                string kategorie = null;
                var xLovService = Container.Resolve<XLovService>();

                if (dto.FaKategorisierung.FaKategorisierungEksProduktID != null)
                {
                    var produkt = dto.FaKategorisierung.FaKategorisierungEksProdukt ??
                                  _faKategorisierungEksProduktService.GetById(null, dto.FaKategorisierung.FaKategorisierungEksProduktID.Value);
                    kategorie = produkt.ShortText;
                }
                else if (dto.FaKategorisierung.FaKategorieCode != null)
                {
                    var faKategorie = xLovService.GetLovCode(null, dto.FaKategorisierung.FaKategorieCode.Value, "FaKategorie");
                    kategorie = faKategorie.Text;
                }
                dto.Kategorie = kategorie;

                // Frist
                DateTime? frist = null;

                if (dto.FaKategorisierung.FaKategorisierungEksProduktID != null)
                {
                    var produkt = dto.FaKategorisierung.FaKategorisierungEksProdukt ??
                                  _faKategorisierungEksProduktService.GetById(null, dto.FaKategorisierung.FaKategorisierungEksProduktID.Value);

                    var fristNum = produkt.Frist;

                    if (fristNum != null)
                    {
                        frist = BerechneKategorisierungFrist(dto.FaKategorisierung.Datum, produkt.FaKategorisierungEksProduktFristTypCode, fristNum.Value);
                    }
                }
                dto.Frist = frist;
            }
        }

        /// <summary>
        /// Pendenz löschen wenn Kategorisierung gelöscht wird oder
        /// wenn die Frist ändert und die Pendenz noch nicht nötig ist.
        /// </summary>
        /// <param name="unitOfWork">UnitOfWork</param>
        /// <param name="faKategorisierungsID">FaKategorisierungsID der zu überprüfenden Pendenz</param>
        /// <param name="datum">Datum, welches auf die Gültigkeit überprüft wird. Wenn null übergeben wird, wurde der Eintrag gelöscht und die Pendenz kann auch gelöscht werden.</param>
        /// <param name="faKategorisierungEksProduktId">FaKategorisierungEksProduktId</param>
        public void UpdatePendenzenOfKategorisierung(IUnitOfWork unitOfWork, int faKategorisierungsID, DateTime? datum, int? faKategorisierungEksProduktId)
        {
            DateTime? fristDatum = null;
            if (datum != null && faKategorisierungEksProduktId != null)
            {
                var eksProdukt = _faKategorisierungEksProduktService.GetById(unitOfWork, (int)faKategorisierungEksProduktId);
                var code = eksProdukt.FaKategorisierungEksProduktFristTypCode;
                var frist = eksProdukt.Frist;

                if (frist != null)
                {
                    fristDatum = BerechneKategorisierungFrist((DateTime)datum, code, (int)frist);
                }
            }
            _xTaskAutoGeneratedService.UpdateXTasksOfFaKategorisierung(unitOfWork, faKategorisierungsID, fristDatum);
        }

        #endregion

        #region Private Methods

        private DateTime BerechneKategorisierungFrist(DateTime datum, int code, int frist)
        {
            var fristDatum = datum;
            switch (code)
            {
                case 1:
                    return fristDatum.AddDays(frist);
                case 2:
                    return fristDatum.AddMonths(frist);
                case 3:
                    return fristDatum.AddYears(frist);
            }
            return fristDatum;
        }

        #endregion

        #endregion
    }
}
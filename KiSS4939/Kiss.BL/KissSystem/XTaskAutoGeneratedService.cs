using System;
using System.Linq;

using Kiss.Interfaces.BL;
using Kiss.Model;

namespace Kiss.BL.KissSystem
{
    public class XTaskAutoGeneratedService : ServiceCRUDBase<XTaskAutoGenerated>
    {
        #region Constructors

        private XTaskAutoGeneratedService()
        {
        }

        #endregion

        #region Methods

        #region Public Methods

        /// <summary>
        /// Get XTaskAutoGenerated item by XTaskAutoGeneratedID
        /// </summary>
        /// <param name="unitOfWork">IUnitOfWork</param>
        /// <param name="xTaskAutoGeneratedId">Key of XTaskAutoGenerated</param>
        /// <returns>XTaskAutoGenerated entity</returns>
        public override XTaskAutoGenerated GetById(IUnitOfWork unitOfWork, int xTaskAutoGeneratedId)
        {
            unitOfWork = UnitOfWork.GetNewOrParent(unitOfWork);
            var repository = UnitOfWork.GetRepository<XTaskAutoGenerated>(unitOfWork);
            var returnValue = repository.SingleOrDefault(xTask => xTask.XTaskAutoGeneratedID == xTaskAutoGeneratedId);
            if (returnValue == null)
            {
                return null;
            }

            SetEntityValidator(returnValue);
            unitOfWork.StartTrackingAndMarkAsUnchangedAll();
            return returnValue;
        }

        /// <summary>
        /// Pendenz löschen wenn Kategorisierung gelöscht wird oder
        /// wenn die Frist ändert und die Pendenz noch nicht nötig ist.
        /// </summary>
        /// <param name="unitOfWork">UnitOfWork</param>
        /// <param name="faKategorisierungsID">FaKategorisierungsID der zu überprüfenden Pendenz</param>
        /// <param name="fristDatum">Datum der neuen Frist</param>
        public void UpdateXTasksOfFaKategorisierung(IUnitOfWork unitOfWork, int faKategorisierungsID, DateTime? fristDatum)
        {
            unitOfWork = UnitOfWork.GetNewOrParent(unitOfWork);
            var repositoryXTaskAutoGenerated = UnitOfWork.GetRepository<XTaskAutoGenerated>(unitOfWork);

            var xTaskAutoGenerated = repositoryXTaskAutoGenerated
                       .FirstOrDefault(tag => tag.ReferenceTable.Equals(typeof(FaKategorisierung).Name) && tag.ReferenceID == faKategorisierungsID);

            if (xTaskAutoGenerated == null)
            {
                return;
            }

            var repositoryXTask = UnitOfWork.GetRepository<XTask>(unitOfWork);
            var xTask = repositoryXTask.FirstOrDefault(tsk => tsk.XTaskID == xTaskAutoGenerated.XTaskID);

            // Kategorisierung oder das Datum wurde gelöscht
            if (fristDatum == null)
            {
                DeleteData(unitOfWork, xTaskAutoGenerated);
                xTask.MarkAsDeleted();
                repositoryXTask.ApplyChanges(xTask);
            }
            else if (xTask != null && xTask.ExpirationDate != fristDatum)
            {
                // Frist wurde geändert und die Pendenz ist noch nicht nötig
                // Prüfen, ob die Frist noch im Zeitraum +-30 Tage liegt
                if (xTask.CreateDate < fristDatum && fristDatum <= xTask.CreateDate.AddDays(30))
                {
                    // wenn ja, dann die Frist neu setzen
                    xTask.ExpirationDate = fristDatum;
                    xTask.CreateDate = fristDatum.Value.AddDays(-30);
                    repositoryXTask.ApplyChanges(xTask);
                }
                else
                {
                    // sonst Task löschen
                    DeleteData(unitOfWork, xTaskAutoGenerated);
                    xTask.MarkAsDeleted();
                    repositoryXTask.ApplyChanges(xTask);
                }
            }

            unitOfWork.SaveChanges();
            unitOfWork.StartTrackingAndMarkAsUnchangedAll();
        }

        #endregion

        #endregion
    }
}
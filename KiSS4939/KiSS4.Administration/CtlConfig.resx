<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="btnCollapseAll.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8
        YQUAAAAgY0hSTQAAeiYAAICEAAD6AAAAgOgAAHUwAADqYAAAOpgAABdwnLpRPAAAAFxJREFUOE9jYGD4
        /58wZsAHQAZQIg92weAwAFtYgFyG6UJQoCG5mTQvIIc41BDiDcAWXVidiBqkRHmBUFpAMxI1DPBHIjZZ
        tEBEUQIKXVwYrhCfAUQ5Z9QFqMEEAB19gIAtzZlXAAAAAElFTkSuQmCC
</value>
  </data>
  <data name="btnExpandAll.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8
        YQUAAAAgY0hSTQAAeiYAAICEAAD6AAAAgOgAAHUwAADqYAAAOpgAABdwnLpRPAAAAGpJREFUOE+9U0EO
        ACAI8v+fttmhqZlYrdw8NAuIiIiYcVNWAnAz7wp0ofVEhg4ghUNB5IWwzQBimtKxr+A1gDepdAWUBfdO
        1oM8BdHUeWBDILYvemzMAEpyjhVEn6bEaIKuft7Cnw8eaOYGjjaIeEBi2hsAAAAASUVORK5CYII=
</value>
  </data>
  <metadata name="qryValue.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>148, 10</value>
  </metadata>
  <metadata name="$this.TrayHeight" type="System.Int32, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
    <value>46</value>
  </metadata>
  <data name="edtKeyPath.Properties.Buttons" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        iVBORw0KGgoAAAANSUhEUgAAAAwAAAAKCAYAAACALL/6AAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8
        YQUAAAAgY0hSTQAAeiYAAICEAAD6AAAAgOgAAHUwAADqYAAAOpgAABdwnLpRPAAAADdJREFUKFNjYEAC
        U6ZM+R8QEICC9fT0/iOrQWH7+Pj8V1BQQMHs7Oy4NeA0iWoSo36Axgd6PAAA05o9WmORMlsAAAAASUVO
        RK5CYII=
</value>
  </data>
  <data name="edtDatumVon.Properties.Buttons" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        iVBORw0KGgoAAAANSUhEUgAAAAwAAAAQCAYAAAAiYZ4HAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8
        YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAABRSURBVDhPY2AAAmNj4//EYJBaMAApRqbhErjkiDEdZiiK
        Dcgmo7NxamhoYAA7DwSQ2Vg1gBTAFKHT1NGA7AyibBhuGoiKB5Jimpj0hM9AnHIA7aiPJlUTWpwAAAAA
        SUVORK5CYII=
</value>
  </data>
  <data name="edtValueDateEdit.Properties.Buttons" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        iVBORw0KGgoAAAANSUhEUgAAAAwAAAAQCAYAAAAiYZ4HAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8
        YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAABRSURBVDhPY2AAAmNj4//EYJBaMAApRqbhErjkiDEdZiiK
        Dcgmo7NxamhoYAA7DwSQ2Vg1gBTAFKHT1NGA7AyibBhuGoiKB5Jimpj0hM9AnHIA7aiPJlUTWpwAAAAA
        SUVORK5CYII=
</value>
  </data>
  <data name="qryValue.SelectStatement" xml:space="preserve">
    <value>DECLARE @KeyPath VARCHAR(500);
DECLARE @LanguageCode INT;

SELECT @KeyPath = {0};
SET @LanguageCode = {1};

SELECT CNF.XConfigID,
       CNF.XNamespaceExtensionID,
       CNF.KeyPath,
       CNF.KeyPathTID,
       CNF.System,
       CNF.DatumVon,
       CNF.ValueCode,
       CNF.Description,
       CNF.DescriptionTID,
       CNF.LOVName,
       CNF.ValueVarchar,
       CNF.OriginalValueVarchar,
       CNF.ValueInt,
       CNF.OriginalValueInt,
       CNF.ValueDecimal,
       CNF.OriginalValueDecimal,
       CNF.ValueMoney,
       CNF.OriginalValueMoney,
       CNF.ValueBit,
       CNF.OriginalValueBit,
       CNF.ValueDateTime,
       CNF.OriginalValueDateTime,
       CNF.Creator,
       CNF.Created,
       CNF.Modifier,
       CNF.Modified,
       CNF.XConfigTS,
       --
       ValueType     = dbo.fnLOVMLText('ConfigValue', CNF.ValueCode, @LanguageCode),
       Value         = CASE
                         WHEN CNF.ValueCode = 2 THEN CONVERT(VARCHAR, CNF.ValueInt)
                         WHEN CNF.ValueCode = 3 THEN CONVERT(VARCHAR, CNF.ValueDecimal)
                         WHEN CNF.ValueCode = 4 THEN CONVERT(VARCHAR, CNF.ValueMoney)
                         WHEN CNF.ValueCode = 5 THEN CASE CNF.ValueBit
                                                       WHEN 1 THEN {2}
                                                       ELSE {3}
                                                     END
                         WHEN CNF.ValueCode = 6 THEN CONVERT(VARCHAR, CNF.ValueDateTime, 104)
                         ELSE CNF.ValueVarchar
                       END,
       OriginalValue = CASE
                         WHEN CNF.ValueCode = 2 THEN CONVERT(VARCHAR, CNF.OriginalValueInt)
                         WHEN CNF.ValueCode = 3 THEN CONVERT(VARCHAR, CNF.OriginalValueDecimal)
                         WHEN CNF.ValueCode = 4 THEN CONVERT(VARCHAR, CNF.OriginalValueMoney)
                         WHEN CNF.ValueCode = 5 THEN CASE CNF.OriginalValueBit
                                                       WHEN 1 THEN {2}
                                                       ELSE {3}
                                                     END
                         WHEN CNF.ValueCode = 6 THEN CONVERT(VARCHAR, CNF.OriginalValueDateTime, 104)
                         ELSE CNF.OriginalValueVarchar
                       END,
       Active        = CONVERT(BIT, CASE
                                      WHEN CNF.XConfigID = (SELECT TOP 1
                                                              SCNF.XConfigID
                                                            FROM dbo.XConfig SCNF WITH (READUNCOMMITTED)
                                                            WHERE SCNF.KeyPath = CNF.KeyPath
                                                              AND SCNF.DatumVon &lt;= GETDATE()
                                                            ORDER BY SCNF.DatumVon DESC) THEN 1
                                      ELSE 0
                                    END)
FROM dbo.XConfig CNF WITH (READUNCOMMITTED)
WHERE CNF.KeyPath = @KeyPath
   OR dbo.fnGetMLText(CNF.KeyPathTID, @LanguageCode) = @KeyPath
ORDER BY CNF.DatumVon ASC;</value>
  </data>
  <metadata name="qryConfigTree.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>16, 10</value>
  </metadata>
  <data name="qryConfigTree.SelectStatement" xml:space="preserve">
    <value>WITH ConfigCTE AS (
  SELECT
    KeyPath     = CNF.KeyPath,
    DisplayPath = dbo.fnGetMLTextByDefault(CNF.KeyPathTID, {1}, CNF.KeyPath),
    FilterNSEID = ISNULL(CNF.XNamespaceExtensionID, -1)
  FROM dbo.XConfig CNF WITH (READUNCOMMITTED)
  WHERE (CNF.System = 0 OR {0} = 1) -- BIAGAdmin can see all entries, others only non-system entries
)
SELECT DISTINCT
  DisplayPath = CTE.DisplayPath,
  KeyPath     = CTE.KeyPath,
  FilterNSEID = CTE.FilterNSEID,
  Amount      = (SELECT COUNT(1)
                 FROM ConfigCTE SUB WITH (READUNCOMMITTED)
                 WHERE SUB.DisplayPath = CTE.DisplayPath)
FROM ConfigCTE CTE
ORDER BY CTE.DisplayPath;</value>
  </data>
</root>
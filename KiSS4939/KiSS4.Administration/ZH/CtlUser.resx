<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <metadata name="qryUser.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>242, 17</value>
  </metadata>
  <metadata name="$this.TrayHeight" type="System.Int32, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
    <value>48</value>
  </metadata>
  <metadata name="qrySubUser.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>131, 17</value>
  </metadata>
  <data name="qrySubUser.SelectStatement" xml:space="preserve">
    <value>SELECT *,
  Abteilung = ORG.ItemName
FROM dbo.XUser                USR WITH(READUNCOMMITTED)
  LEFT JOIN dbo.XOrgUnit_User OUU ON OUU.UserID = USR.UserID
                                 AND OUU.OrgUnitMemberCode = 2
                                 AND OUU.OrgUnitID = (SELECT MAX(OrgUnitID) 
                                                      FROM XOrgUnit_User WITH(READUNCOMMITTED)
                                                      WHERE UserID = USR.UserID
                                                        AND OrgUnitMemberCode = 2)
  LEFT JOIN XOrgUnit          ORG ON ORG.OrgUnitID = OUU.OrgUnitID
WHERE  PrimaryUserID = {0};</value>
  </data>
  <metadata name="qryAbteilung.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>17, 17</value>
  </metadata>
  <data name="qryAbteilung.SelectStatement" xml:space="preserve">
    <value>SELECT OUU.*,
  Abteilung = ORG.ItemName,
  Funktion  = FKT.Text
FROM dbo.XOrgUnit_User    OUU WITH(READUNCOMMITTED)
  INNER JOIN dbo.XOrgUnit ORG WITH(READUNCOMMITTED) ON ORG.OrgUnitID = OUU.OrgUnitID
  INNER JOIN dbo.XLOVCode FKT WITH(READUNCOMMITTED) ON FKT.LOVName = 'OrgUnitMember'
                                                   AND FKT.Code = OUU.OrgUnitMemberCode
WHERE OUU.UserID = {0}
ORDER BY OUU.OrgUnitMemberCode, Abteilung;</value>
  </data>
  <metadata name="qryUserRight.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>333, 17</value>
  </metadata>
  <data name="qryUserRight.SelectStatement" xml:space="preserve">
    <value>SELECT
  RGT.UserText,
  MayInsert = CONVERT(BIT, max(CONVERT(INT, UGR.mayInsert))), 
  MayUpdate = CONVERT(BIT, max(CONVERT(INT, UGR.mayUpdate))),
  MayDelete = CONVERT(BIT, max(CONVERT(INT, UGR.mayDelete))) 
FROM dbo.XUserGroup_Right UGR WITH(READUNCOMMITTED)
  INNER JOIN dbo.XRight   RGT WITH(READUNCOMMITTED) ON RGT.RightID = UGR.RightID
WHERE	UserGroupID IN (SELECT UserGroupID
                      FROM dbo.XUser_UserGroup WITH(READUNCOMMITTED)
                      WHERE UserID = {0})
GROUP BY RGT.UserText

UNION ALL

SELECT UserText = 'EM ' +  
         CASE MSK.ModulCode 
           WHEN 2 THEN
             CASE MSK.FaPhaseCode
               WHEN 1 THEN 'FF-INT-'
               WHEN 2 THEN 'FF-BER-'
               ELSE 'FF-DOK-'
             END
           WHEN 5 THEN
             CASE  MSK.VmProzessCode
               WHEN 1  THEN 'VM-MAS-'
               WHEN 2  THEN 'VM-VAT-'
               WHEN 3  THEN 'VM-EA-'
               WHEN 31 THEN 'VM-EA-SIE-'
               WHEN 32 THEN 'VM-EA-TES-'
               WHEN 33 THEN 'VM-EA-ERB-'
               WHEN 4  THEN 'VM-PFL-'
               ELSE 'VM-'
             END
           ELSE ''
         END + MSK.DisplayText,
       MayInsert = CONVERT(BIT, max(CONVERT(INT, UGR.mayInsert))), 
       MayUpdate = CONVERT(BIT, max(CONVERT(INT, UGR.mayUpdate))),
       MayDelete = CONVERT(BIT, max(CONVERT(INT, UGR.mayDelete))) 
FROM dbo.XUserGroup_Right UGR WITH(READUNCOMMITTED)
  INNER JOIN dbo.DynaMask MSK WITH(READUNCOMMITTED) ON MSK.Maskname = UGR.Maskname
WHERE	UserGroupID IN (SELECT UserGroupID
                      FROM dbo.XUser_UserGroup WITH(READUNCOMMITTED)
                      WHERE UserID = {0})
GROUP BY 'EM ' +
  CASE MSK.ModulCode 
    WHEN 2 THEN
      CASE MSK.FaPhaseCode
        WHEN 1 THEN 'FF-INT-'
        WHEN 2 THEN 'FF-BER-'
        ELSE 'FF-DOK-'
      END
    WHEN 5 THEN
      CASE  MSK.VmProzessCode
        WHEN 1  THEN 'VM-MAS-'
        WHEN 2  THEN 'VM-VAT-'
        WHEN 3  THEN 'VM-EA-'
        WHEN 31 THEN 'VM-EA-SIE-'
        WHEN 32 THEN 'VM-EA-TES-'
        WHEN 33 THEN 'VM-EA-ERB-'
        WHEN 4  THEN 'VM-PFL-'
        ELSE 'VM-'
      END
    ELSE ''
  END + MSK.DisplayText
ORDER BY 1;</value>
  </data>
  <metadata name="qryZugeteilt.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>579, 17</value>
  </metadata>
  <metadata name="qryVerfuegbar.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>450, 17</value>
  </metadata>
  <data name="qryVerfuegbar.SelectStatement" xml:space="preserve">
    <value>SELECT UGR.UserGroupID, UGR.UserGroupName
FROM dbo.XUserGroup             UGR WITH(READUNCOMMITTED)
  LEFT JOIN dbo.XUser_UserGroup UUG WITH(READUNCOMMITTED) ON UUG.UserGroupID = UGR.UserGroupID
                                                         AND UUG.UserID = {0}
WHERE UUG.UserGroupID IS NULL
ORDER BY UserGroupName;</value>
  </data>
</root>
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace Kiss.Model
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(BaPerson))]
    [KnownType(typeof(BaInstitution))]
    [KnownType(typeof(BaLand))]
    [KnownType(typeof(XUser))]
    public partial class BaAdresse: EntityBase<BaAdresse>, IObjectWithChangeTracker
    {
        #region Primitive Properties
    
        [DataMember]
        public int BaAdresseID
        {
            get { return _baAdresseID; }
            set
            {
                if (_baAdresseID != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'BaAdresseID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _baAdresseID = value;
                    OnPropertyChanged("BaAdresseID");
                }
            }
        }
        private int _baAdresseID;
    
        [DataMember]
        public Nullable<int> BaPersonID
        {
            get { return _baPersonID; }
            set
            {
                if (_baPersonID != value)
                {
                    ChangeTracker.RecordOriginalValue("BaPersonID", _baPersonID);
                    if (!IsDeserializing)
                    {
                        if (BaPerson != null && BaPerson.BaPersonID != value)
                        {
                            BaPerson = null;
                        }
                    }
                    _baPersonID = value;
                    OnPropertyChanged("BaPersonID");
                }
            }
        }
        private Nullable<int> _baPersonID;
    
        [DataMember]
        public Nullable<int> BaInstitutionID
        {
            get { return _baInstitutionID; }
            set
            {
                if (_baInstitutionID != value)
                {
                    ChangeTracker.RecordOriginalValue("BaInstitutionID", _baInstitutionID);
                    if (!IsDeserializing)
                    {
                        if (BaInstitution != null && BaInstitution.BaInstitutionID != value)
                        {
                            BaInstitution = null;
                        }
                    }
                    _baInstitutionID = value;
                    OnPropertyChanged("BaInstitutionID");
                }
            }
        }
        private Nullable<int> _baInstitutionID;
    
        [DataMember]
        public Nullable<int> PlatzierungInstID
        {
            get { return _platzierungInstID; }
            set
            {
                if (_platzierungInstID != value)
                {
                    ChangeTracker.RecordOriginalValue("PlatzierungInstID", _platzierungInstID);
                    if (!IsDeserializing)
                    {
                        if (BaInstitution1 != null && BaInstitution1.BaInstitutionID != value)
                        {
                            BaInstitution1 = null;
                        }
                    }
                    _platzierungInstID = value;
                    OnPropertyChanged("PlatzierungInstID");
                }
            }
        }
        private Nullable<int> _platzierungInstID;
    
        [DataMember]
        public Nullable<int> VmMandantID
        {
            get { return _vmMandantID; }
            set
            {
                if (_vmMandantID != value)
                {
                    _vmMandantID = value;
                    OnPropertyChanged("VmMandantID");
                }
            }
        }
        private Nullable<int> _vmMandantID;
    
        [DataMember]
        public Nullable<int> VmPriMaID
        {
            get { return _vmPriMaID; }
            set
            {
                if (_vmPriMaID != value)
                {
                    _vmPriMaID = value;
                    OnPropertyChanged("VmPriMaID");
                }
            }
        }
        private Nullable<int> _vmPriMaID;
    
        [DataMember]
        public Nullable<int> KaBetriebID
        {
            get { return _kaBetriebID; }
            set
            {
                if (_kaBetriebID != value)
                {
                    _kaBetriebID = value;
                    OnPropertyChanged("KaBetriebID");
                }
            }
        }
        private Nullable<int> _kaBetriebID;
    
        [DataMember]
        public Nullable<int> KaBetriebKontaktID
        {
            get { return _kaBetriebKontaktID; }
            set
            {
                if (_kaBetriebKontaktID != value)
                {
                    _kaBetriebKontaktID = value;
                    OnPropertyChanged("KaBetriebKontaktID");
                }
            }
        }
        private Nullable<int> _kaBetriebKontaktID;
    
        [DataMember]
        public Nullable<int> BaLandID
        {
            get { return _baLandID; }
            set
            {
                if (_baLandID != value)
                {
                    ChangeTracker.RecordOriginalValue("BaLandID", _baLandID);
                    if (!IsDeserializing)
                    {
                        if (BaLand != null && BaLand.BaLandID != value)
                        {
                            BaLand = null;
                        }
                    }
                    _baLandID = value;
                    OnPropertyChanged("BaLandID");
                }
            }
        }
        private Nullable<int> _baLandID;
    
        [DataMember]
        public Nullable<System.DateTime> DatumVon
        {
            get { return _datumVon; }
            set
            {
                if (_datumVon != value)
                {
                    _datumVon = value;
                    OnPropertyChanged("DatumVon");
                }
            }
        }
        private Nullable<System.DateTime> _datumVon;
    
        [DataMember]
        public Nullable<System.DateTime> DatumBis
        {
            get { return _datumBis; }
            set
            {
                if (_datumBis != value)
                {
                    _datumBis = value;
                    OnPropertyChanged("DatumBis");
                }
            }
        }
        private Nullable<System.DateTime> _datumBis;
    
        [DataMember]
        public bool Gesperrt
        {
            get { return _gesperrt; }
            set
            {
                if (_gesperrt != value)
                {
                    _gesperrt = value;
                    OnPropertyChanged("Gesperrt");
                }
            }
        }
        private bool _gesperrt;
    
        [DataMember]
        public Nullable<int> AdresseCode
        {
            get { return _adresseCode; }
            set
            {
                if (_adresseCode != value)
                {
                    _adresseCode = value;
                    OnPropertyChanged("AdresseCode");
                }
            }
        }
        private Nullable<int> _adresseCode;
    
        [DataMember]
        public string CareOf
        {
            get { return _careOf; }
            set
            {
                if (_careOf != value)
                {
                    _careOf = value;
                    OnPropertyChanged("CareOf");
                }
            }
        }
        private string _careOf;
    
        [DataMember]
        public string Zusatz
        {
            get { return _zusatz; }
            set
            {
                if (_zusatz != value)
                {
                    _zusatz = value;
                    OnPropertyChanged("Zusatz");
                }
            }
        }
        private string _zusatz;
    
        [DataMember]
        public string ZuhandenVon
        {
            get { return _zuhandenVon; }
            set
            {
                if (_zuhandenVon != value)
                {
                    _zuhandenVon = value;
                    OnPropertyChanged("ZuhandenVon");
                }
            }
        }
        private string _zuhandenVon;
    
        [DataMember]
        public string Strasse
        {
            get { return _strasse; }
            set
            {
                if (_strasse != value)
                {
                    _strasse = value;
                    OnPropertyChanged("Strasse");
                }
            }
        }
        private string _strasse;
    
        [DataMember]
        public string HausNr
        {
            get { return _hausNr; }
            set
            {
                if (_hausNr != value)
                {
                    _hausNr = value;
                    OnPropertyChanged("HausNr");
                }
            }
        }
        private string _hausNr;
    
        [DataMember]
        public string Postfach
        {
            get { return _postfach; }
            set
            {
                if (_postfach != value)
                {
                    _postfach = value;
                    OnPropertyChanged("Postfach");
                }
            }
        }
        private string _postfach;
    
        [DataMember]
        public bool PostfachOhneNr
        {
            get { return _postfachOhneNr; }
            set
            {
                if (_postfachOhneNr != value)
                {
                    _postfachOhneNr = value;
                    OnPropertyChanged("PostfachOhneNr");
                }
            }
        }
        private bool _postfachOhneNr;
    
        [DataMember]
        public string PLZ
        {
            get { return _pLZ; }
            set
            {
                if (_pLZ != value)
                {
                    _pLZ = value;
                    OnPropertyChanged("PLZ");
                }
            }
        }
        private string _pLZ;
    
        [DataMember]
        public string Ort
        {
            get { return _ort; }
            set
            {
                if (_ort != value)
                {
                    _ort = value;
                    OnPropertyChanged("Ort");
                }
            }
        }
        private string _ort;
    
        [DataMember]
        public Nullable<int> OrtschaftCode
        {
            get { return _ortschaftCode; }
            set
            {
                if (_ortschaftCode != value)
                {
                    _ortschaftCode = value;
                    OnPropertyChanged("OrtschaftCode");
                }
            }
        }
        private Nullable<int> _ortschaftCode;
    
        [DataMember]
        public string Kanton
        {
            get { return _kanton; }
            set
            {
                if (_kanton != value)
                {
                    _kanton = value;
                    OnPropertyChanged("Kanton");
                }
            }
        }
        private string _kanton;
    
        [DataMember]
        public string Bezirk
        {
            get { return _bezirk; }
            set
            {
                if (_bezirk != value)
                {
                    _bezirk = value;
                    OnPropertyChanged("Bezirk");
                }
            }
        }
        private string _bezirk;
    
        [DataMember]
        public string Bemerkung
        {
            get { return _bemerkung; }
            set
            {
                if (_bemerkung != value)
                {
                    _bemerkung = value;
                    OnPropertyChanged("Bemerkung");
                }
            }
        }
        private string _bemerkung;
    
        [DataMember]
        public Nullable<int> PlatzierungsartCode
        {
            get { return _platzierungsartCode; }
            set
            {
                if (_platzierungsartCode != value)
                {
                    _platzierungsartCode = value;
                    OnPropertyChanged("PlatzierungsartCode");
                }
            }
        }
        private Nullable<int> _platzierungsartCode;
    
        [DataMember]
        public Nullable<int> WohnStatusCode
        {
            get { return _wohnStatusCode; }
            set
            {
                if (_wohnStatusCode != value)
                {
                    _wohnStatusCode = value;
                    OnPropertyChanged("WohnStatusCode");
                }
            }
        }
        private Nullable<int> _wohnStatusCode;
    
        [DataMember]
        public Nullable<int> WohnungsgroesseCode
        {
            get { return _wohnungsgroesseCode; }
            set
            {
                if (_wohnungsgroesseCode != value)
                {
                    _wohnungsgroesseCode = value;
                    OnPropertyChanged("WohnungsgroesseCode");
                }
            }
        }
        private Nullable<int> _wohnungsgroesseCode;
    
        [DataMember]
        public Nullable<int> MigrationKA
        {
            get { return _migrationKA; }
            set
            {
                if (_migrationKA != value)
                {
                    _migrationKA = value;
                    OnPropertyChanged("MigrationKA");
                }
            }
        }
        private Nullable<int> _migrationKA;
    
        [DataMember]
        public Nullable<int> VerID
        {
            get { return _verID; }
            set
            {
                if (_verID != value)
                {
                    _verID = value;
                    OnPropertyChanged("VerID");
                }
            }
        }
        private Nullable<int> _verID;
    
        [DataMember]
        public string Creator
        {
            get { return _creator; }
            set
            {
                if (_creator != value)
                {
                    _creator = value;
                    OnPropertyChanged("Creator");
                }
            }
        }
        private string _creator;
    
        [DataMember]
        public System.DateTime Created
        {
            get { return _created; }
            set
            {
                if (_created != value)
                {
                    _created = value;
                    OnPropertyChanged("Created");
                }
            }
        }
        private System.DateTime _created;
    
        [DataMember]
        public string Modifier
        {
            get { return _modifier; }
            set
            {
                if (_modifier != value)
                {
                    _modifier = value;
                    OnPropertyChanged("Modifier");
                }
            }
        }
        private string _modifier;
    
        [DataMember]
        public System.DateTime Modified
        {
            get { return _modified; }
            set
            {
                if (_modified != value)
                {
                    _modified = value;
                    OnPropertyChanged("Modified");
                }
            }
        }
        private System.DateTime _modified;
    
        [DataMember]
        public byte[] BaAdresseTS
        {
            get { return _baAdresseTS; }
            set
            {
                if (_baAdresseTS != value)
                {
                    _baAdresseTS = value;
                    OnPropertyChanged("BaAdresseTS");
                }
            }
        }
        private byte[] _baAdresseTS;
    
        [DataMember]
        public Nullable<int> UserID
        {
            get { return _userID; }
            set
            {
                if (_userID != value)
                {
                    ChangeTracker.RecordOriginalValue("UserID", _userID);
                    if (!IsDeserializing)
                    {
                        if (XUser != null && XUser.UserID != value)
                        {
                            XUser = null;
                        }
                    }
                    _userID = value;
                    OnPropertyChanged("UserID");
                }
            }
        }
        private Nullable<int> _userID;
    
        [DataMember]
        public bool AusEinwohnerregister
        {
            get { return _ausEinwohnerregister; }
            set
            {
                if (_ausEinwohnerregister != value)
                {
                    _ausEinwohnerregister = value;
                    OnPropertyChanged("AusEinwohnerregister");
                }
            }
        }
        private bool _ausEinwohnerregister;
    
        [DataMember]
        public Nullable<int> StrasseCode
        {
            get { return _strasseCode; }
            set
            {
                if (_strasseCode != value)
                {
                    _strasseCode = value;
                    OnPropertyChanged("StrasseCode");
                }
            }
        }
        private Nullable<int> _strasseCode;
    
        [DataMember]
        public string InstitutionName
        {
            get { return _institutionName; }
            set
            {
                if (_institutionName != value)
                {
                    _institutionName = value;
                    OnPropertyChanged("InstitutionName");
                }
            }
        }
        private string _institutionName;
    
        [DataMember]
        public Nullable<int> QuartierCode
        {
            get { return _quartierCode; }
            set
            {
                if (_quartierCode != value)
                {
                    _quartierCode = value;
                    OnPropertyChanged("QuartierCode");
                }
            }
        }
        private Nullable<int> _quartierCode;

        #endregion

        #region Navigation Properties
    
        [DataMember]
        public BaPerson BaPerson
        {
            get { return _baPerson; }
            set
            {
                if (!ReferenceEquals(_baPerson, value))
                {
                    var previousValue = _baPerson;
                    _baPerson = value;
                    FixupBaPerson(previousValue);
                    OnNavigationPropertyChanged("BaPerson");
                }
            }
        }
        private BaPerson _baPerson;
    
        [DataMember]
        public BaInstitution BaInstitution
        {
            get { return _baInstitution; }
            set
            {
                if (!ReferenceEquals(_baInstitution, value))
                {
                    var previousValue = _baInstitution;
                    _baInstitution = value;
                    FixupBaInstitution(previousValue);
                    OnNavigationPropertyChanged("BaInstitution");
                }
            }
        }
        private BaInstitution _baInstitution;
    
        [DataMember]
        public BaInstitution BaInstitution1
        {
            get { return _baInstitution1; }
            set
            {
                if (!ReferenceEquals(_baInstitution1, value))
                {
                    var previousValue = _baInstitution1;
                    _baInstitution1 = value;
                    FixupBaInstitution1(previousValue);
                    OnNavigationPropertyChanged("BaInstitution1");
                }
            }
        }
        private BaInstitution _baInstitution1;
    
        [DataMember]
        public BaLand BaLand
        {
            get { return _baLand; }
            set
            {
                if (!ReferenceEquals(_baLand, value))
                {
                    var previousValue = _baLand;
                    _baLand = value;
                    FixupBaLand(previousValue);
                    OnNavigationPropertyChanged("BaLand");
                }
            }
        }
        private BaLand _baLand;
    
        [DataMember]
        public XUser XUser
        {
            get { return _xUser; }
            set
            {
                if (!ReferenceEquals(_xUser, value))
                {
                    var previousValue = _xUser;
                    _xUser = value;
                    FixupXUser(previousValue);
                    OnNavigationPropertyChanged("XUser");
                }
            }
        }
        private XUser _xUser;

        #endregion

        #region ChangeTracking
    
        // This entity type is the dependent end in at least one association that performs cascade deletes.
        // This event handler will process notifications that occur when the principal end is deleted.
        internal void HandleCascadeDelete(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                this.MarkAsDeleted();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected override void ClearNavigationProperties()
        {
            BaPerson = null;
            BaInstitution = null;
            BaInstitution1 = null;
            BaLand = null;
            XUser = null;
        }

        #endregion

        #region Association Fixup
    
        private void FixupBaPerson(BaPerson previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.BaAdresse.Contains(this))
            {
                previousValue.BaAdresse.Remove(this);
            }
    
            if (BaPerson != null)
            {
                if (!BaPerson.BaAdresse.Contains(this))
                {
                    BaPerson.BaAdresse.Add(this);
                }
    
                BaPersonID = BaPerson.BaPersonID;
            }
            else if (!skipKeys)
            {
                BaPersonID = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("BaPerson")
                    && (ChangeTracker.OriginalValues["BaPerson"] == BaPerson))
                {
                    ChangeTracker.OriginalValues.Remove("BaPerson");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("BaPerson", previousValue);
                }
                if (BaPerson != null && !BaPerson.ChangeTracker.ChangeTrackingEnabled)
                {
                    BaPerson.StartTracking();
                }
            }
        }
    
        private void FixupBaInstitution(BaInstitution previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.BaAdresse.Contains(this))
            {
                previousValue.BaAdresse.Remove(this);
            }
    
            if (BaInstitution != null)
            {
                if (!BaInstitution.BaAdresse.Contains(this))
                {
                    BaInstitution.BaAdresse.Add(this);
                }
    
                BaInstitutionID = BaInstitution.BaInstitutionID;
            }
            else if (!skipKeys)
            {
                BaInstitutionID = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("BaInstitution")
                    && (ChangeTracker.OriginalValues["BaInstitution"] == BaInstitution))
                {
                    ChangeTracker.OriginalValues.Remove("BaInstitution");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("BaInstitution", previousValue);
                }
                if (BaInstitution != null && !BaInstitution.ChangeTracker.ChangeTrackingEnabled)
                {
                    BaInstitution.StartTracking();
                }
            }
        }
    
        private void FixupBaInstitution1(BaInstitution previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.BaAdresse1.Contains(this))
            {
                previousValue.BaAdresse1.Remove(this);
            }
    
            if (BaInstitution1 != null)
            {
                if (!BaInstitution1.BaAdresse1.Contains(this))
                {
                    BaInstitution1.BaAdresse1.Add(this);
                }
    
                PlatzierungInstID = BaInstitution1.BaInstitutionID;
            }
            else if (!skipKeys)
            {
                PlatzierungInstID = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("BaInstitution1")
                    && (ChangeTracker.OriginalValues["BaInstitution1"] == BaInstitution1))
                {
                    ChangeTracker.OriginalValues.Remove("BaInstitution1");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("BaInstitution1", previousValue);
                }
                if (BaInstitution1 != null && !BaInstitution1.ChangeTracker.ChangeTrackingEnabled)
                {
                    BaInstitution1.StartTracking();
                }
            }
        }
    
        private void FixupBaLand(BaLand previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.BaAdresse.Contains(this))
            {
                previousValue.BaAdresse.Remove(this);
            }
    
            if (BaLand != null)
            {
                if (!BaLand.BaAdresse.Contains(this))
                {
                    BaLand.BaAdresse.Add(this);
                }
    
                BaLandID = BaLand.BaLandID;
            }
            else if (!skipKeys)
            {
                BaLandID = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("BaLand")
                    && (ChangeTracker.OriginalValues["BaLand"] == BaLand))
                {
                    ChangeTracker.OriginalValues.Remove("BaLand");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("BaLand", previousValue);
                }
                if (BaLand != null && !BaLand.ChangeTracker.ChangeTrackingEnabled)
                {
                    BaLand.StartTracking();
                }
            }
        }
    
        private void FixupXUser(XUser previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.BaAdresse.Contains(this))
            {
                previousValue.BaAdresse.Remove(this);
            }
    
            if (XUser != null)
            {
                if (!XUser.BaAdresse.Contains(this))
                {
                    XUser.BaAdresse.Add(this);
                }
    
                UserID = XUser.UserID;
            }
            else if (!skipKeys)
            {
                UserID = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("XUser")
                    && (ChangeTracker.OriginalValues["XUser"] == XUser))
                {
                    ChangeTracker.OriginalValues.Remove("XUser");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("XUser", previousValue);
                }
                if (XUser != null && !XUser.ChangeTracker.ChangeTrackingEnabled)
                {
                    XUser.StartTracking();
                }
            }
        }

        #endregion

        #region Methods
    
    	public override bool Equals(object obj)
    	{
    		if (obj == null)
    		{
    			return false;
    		}
    		
    		if (ReferenceEquals(this, obj))
    		{
    			return true;
    		}
    
    		if (GetType() != obj.GetType())
    		{
    			return false;
    		}
    
    		var entity = (BaAdresse)obj;
    		if (!_baAdresseID.Equals(entity.BaAdresseID) || _baAdresseID == 0)
    		{
    			return false;
    		}
    		
    		return true;
    	}
    	
    	public override int GetHashCode()
        {
            return _baAdresseID.GetHashCode();
        }

        #endregion

    }
}

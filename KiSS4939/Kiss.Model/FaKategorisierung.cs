//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace Kiss.Model
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(BaPerson))]
    [KnownType(typeof(FaKategorisierungEksProdukt))]
    [KnownType(typeof(XUser))]
    public partial class FaKategorisierung: EntityBase<FaKategorisierung>, IObjectWithChangeTracker
    {
        #region Primitive Properties
    
        [DataMember]
        public int FaKategorisierungID
        {
            get { return _faKategorisierungID; }
            set
            {
                if (_faKategorisierungID != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'FaKategorisierungID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _faKategorisierungID = value;
                    OnPropertyChanged("FaKategorisierungID");
                }
            }
        }
        private int _faKategorisierungID;
    
        [DataMember]
        public int BaPersonID
        {
            get { return _baPersonID; }
            set
            {
                if (_baPersonID != value)
                {
                    ChangeTracker.RecordOriginalValue("BaPersonID", _baPersonID);
                    if (!IsDeserializing)
                    {
                        if (BaPerson != null && BaPerson.BaPersonID != value)
                        {
                            BaPerson = null;
                        }
                    }
                    _baPersonID = value;
                    OnPropertyChanged("BaPersonID");
                }
            }
        }
        private int _baPersonID;
    
        [DataMember]
        public int UserID
        {
            get { return _userID; }
            set
            {
                if (_userID != value)
                {
                    ChangeTracker.RecordOriginalValue("UserID", _userID);
                    if (!IsDeserializing)
                    {
                        if (XUser != null && XUser.UserID != value)
                        {
                            XUser = null;
                        }
                    }
                    _userID = value;
                    OnPropertyChanged("UserID");
                }
            }
        }
        private int _userID;
    
        [DataMember]
        public System.DateTime Datum
        {
            get { return _datum; }
            set
            {
                if (_datum != value)
                {
                    _datum = value;
                    OnPropertyChanged("Datum");
                }
            }
        }
        private System.DateTime _datum;
    
        [DataMember]
        public Nullable<int> FaKategorisierungEksProduktID
        {
            get { return _faKategorisierungEksProduktID; }
            set
            {
                if (_faKategorisierungEksProduktID != value)
                {
                    ChangeTracker.RecordOriginalValue("FaKategorisierungEksProduktID", _faKategorisierungEksProduktID);
                    if (!IsDeserializing)
                    {
                        if (FaKategorisierungEksProdukt != null && FaKategorisierungEksProdukt.FaKategorisierungEksProduktID != value)
                        {
                            FaKategorisierungEksProdukt = null;
                        }
                    }
                    _faKategorisierungEksProduktID = value;
                    OnPropertyChanged("FaKategorisierungEksProduktID");
                }
            }
        }
        private Nullable<int> _faKategorisierungEksProduktID;
    
        [DataMember]
        public Nullable<int> FaKategorisierungEksOptionCode
        {
            get { return _faKategorisierungEksOptionCode; }
            set
            {
                if (_faKategorisierungEksOptionCode != value)
                {
                    _faKategorisierungEksOptionCode = value;
                    OnPropertyChanged("FaKategorisierungEksOptionCode");
                }
            }
        }
        private Nullable<int> _faKategorisierungEksOptionCode;
    
        [DataMember]
        public Nullable<int> FaKategorisierungKiStatusCode
        {
            get { return _faKategorisierungKiStatusCode; }
            set
            {
                if (_faKategorisierungKiStatusCode != value)
                {
                    _faKategorisierungKiStatusCode = value;
                    OnPropertyChanged("FaKategorisierungKiStatusCode");
                }
            }
        }
        private Nullable<int> _faKategorisierungKiStatusCode;
    
        [DataMember]
        public Nullable<int> FaKategorisierungIntakeCode
        {
            get { return _faKategorisierungIntakeCode; }
            set
            {
                if (_faKategorisierungIntakeCode != value)
                {
                    _faKategorisierungIntakeCode = value;
                    OnPropertyChanged("FaKategorisierungIntakeCode");
                }
            }
        }
        private Nullable<int> _faKategorisierungIntakeCode;
    
        [DataMember]
        public Nullable<int> FaKategorisierungKooperationCode
        {
            get { return _faKategorisierungKooperationCode; }
            set
            {
                if (_faKategorisierungKooperationCode != value)
                {
                    _faKategorisierungKooperationCode = value;
                    OnPropertyChanged("FaKategorisierungKooperationCode");
                }
            }
        }
        private Nullable<int> _faKategorisierungKooperationCode;
    
        [DataMember]
        public Nullable<int> FaKategorisierungRessourcenCode
        {
            get { return _faKategorisierungRessourcenCode; }
            set
            {
                if (_faKategorisierungRessourcenCode != value)
                {
                    _faKategorisierungRessourcenCode = value;
                    OnPropertyChanged("FaKategorisierungRessourcenCode");
                }
            }
        }
        private Nullable<int> _faKategorisierungRessourcenCode;
    
        [DataMember]
        public Nullable<int> FaKategorisierungAbschlussgrundCode
        {
            get { return _faKategorisierungAbschlussgrundCode; }
            set
            {
                if (_faKategorisierungAbschlussgrundCode != value)
                {
                    _faKategorisierungAbschlussgrundCode = value;
                    OnPropertyChanged("FaKategorisierungAbschlussgrundCode");
                }
            }
        }
        private Nullable<int> _faKategorisierungAbschlussgrundCode;
    
        [DataMember]
        public Nullable<System.DateTime> Abschlussdatum
        {
            get { return _abschlussdatum; }
            set
            {
                if (_abschlussdatum != value)
                {
                    _abschlussdatum = value;
                    OnPropertyChanged("Abschlussdatum");
                }
            }
        }
        private Nullable<System.DateTime> _abschlussdatum;
    
        [DataMember]
        public string Begruendung
        {
            get { return _begruendung; }
            set
            {
                if (_begruendung != value)
                {
                    _begruendung = value;
                    OnPropertyChanged("Begruendung");
                }
            }
        }
        private string _begruendung;
    
        [DataMember]
        public string Creator
        {
            get { return _creator; }
            set
            {
                if (_creator != value)
                {
                    _creator = value;
                    OnPropertyChanged("Creator");
                }
            }
        }
        private string _creator;
    
        [DataMember]
        public System.DateTime Created
        {
            get { return _created; }
            set
            {
                if (_created != value)
                {
                    _created = value;
                    OnPropertyChanged("Created");
                }
            }
        }
        private System.DateTime _created;
    
        [DataMember]
        public string Modifier
        {
            get { return _modifier; }
            set
            {
                if (_modifier != value)
                {
                    _modifier = value;
                    OnPropertyChanged("Modifier");
                }
            }
        }
        private string _modifier;
    
        [DataMember]
        public System.DateTime Modified
        {
            get { return _modified; }
            set
            {
                if (_modified != value)
                {
                    _modified = value;
                    OnPropertyChanged("Modified");
                }
            }
        }
        private System.DateTime _modified;
    
        [DataMember]
        public byte[] FaKategorisierungTS
        {
            get { return _faKategorisierungTS; }
            set
            {
                if (_faKategorisierungTS != value)
                {
                    _faKategorisierungTS = value;
                    OnPropertyChanged("FaKategorisierungTS");
                }
            }
        }
        private byte[] _faKategorisierungTS;
    
        [DataMember]
        public Nullable<int> FaKategorieCode
        {
            get { return _faKategorieCode; }
            set
            {
                if (_faKategorieCode != value)
                {
                    _faKategorieCode = value;
                    OnPropertyChanged("FaKategorieCode");
                }
            }
        }
        private Nullable<int> _faKategorieCode;

        #endregion

        #region Navigation Properties
    
        [DataMember]
        public BaPerson BaPerson
        {
            get { return _baPerson; }
            set
            {
                if (!ReferenceEquals(_baPerson, value))
                {
                    var previousValue = _baPerson;
                    _baPerson = value;
                    FixupBaPerson(previousValue);
                    OnNavigationPropertyChanged("BaPerson");
                }
            }
        }
        private BaPerson _baPerson;
    
        [DataMember]
        public FaKategorisierungEksProdukt FaKategorisierungEksProdukt
        {
            get { return _faKategorisierungEksProdukt; }
            set
            {
                if (!ReferenceEquals(_faKategorisierungEksProdukt, value))
                {
                    var previousValue = _faKategorisierungEksProdukt;
                    _faKategorisierungEksProdukt = value;
                    FixupFaKategorisierungEksProdukt(previousValue);
                    OnNavigationPropertyChanged("FaKategorisierungEksProdukt");
                }
            }
        }
        private FaKategorisierungEksProdukt _faKategorisierungEksProdukt;
    
        [DataMember]
        public XUser XUser
        {
            get { return _xUser; }
            set
            {
                if (!ReferenceEquals(_xUser, value))
                {
                    var previousValue = _xUser;
                    _xUser = value;
                    FixupXUser(previousValue);
                    OnNavigationPropertyChanged("XUser");
                }
            }
        }
        private XUser _xUser;

        #endregion

        #region ChangeTracking
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected override void ClearNavigationProperties()
        {
            BaPerson = null;
            FaKategorisierungEksProdukt = null;
            XUser = null;
        }

        #endregion

        #region Association Fixup
    
        private void FixupBaPerson(BaPerson previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.FaKategorisierung.Contains(this))
            {
                previousValue.FaKategorisierung.Remove(this);
            }
    
            if (BaPerson != null)
            {
                if (!BaPerson.FaKategorisierung.Contains(this))
                {
                    BaPerson.FaKategorisierung.Add(this);
                }
    
                BaPersonID = BaPerson.BaPersonID;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("BaPerson")
                    && (ChangeTracker.OriginalValues["BaPerson"] == BaPerson))
                {
                    ChangeTracker.OriginalValues.Remove("BaPerson");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("BaPerson", previousValue);
                }
                if (BaPerson != null && !BaPerson.ChangeTracker.ChangeTrackingEnabled)
                {
                    BaPerson.StartTracking();
                }
            }
        }
    
        private void FixupFaKategorisierungEksProdukt(FaKategorisierungEksProdukt previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.FaKategorisierung.Contains(this))
            {
                previousValue.FaKategorisierung.Remove(this);
            }
    
            if (FaKategorisierungEksProdukt != null)
            {
                if (!FaKategorisierungEksProdukt.FaKategorisierung.Contains(this))
                {
                    FaKategorisierungEksProdukt.FaKategorisierung.Add(this);
                }
    
                FaKategorisierungEksProduktID = FaKategorisierungEksProdukt.FaKategorisierungEksProduktID;
            }
            else if (!skipKeys)
            {
                FaKategorisierungEksProduktID = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("FaKategorisierungEksProdukt")
                    && (ChangeTracker.OriginalValues["FaKategorisierungEksProdukt"] == FaKategorisierungEksProdukt))
                {
                    ChangeTracker.OriginalValues.Remove("FaKategorisierungEksProdukt");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("FaKategorisierungEksProdukt", previousValue);
                }
                if (FaKategorisierungEksProdukt != null && !FaKategorisierungEksProdukt.ChangeTracker.ChangeTrackingEnabled)
                {
                    FaKategorisierungEksProdukt.StartTracking();
                }
            }
        }
    
        private void FixupXUser(XUser previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.FaKategorisierung.Contains(this))
            {
                previousValue.FaKategorisierung.Remove(this);
            }
    
            if (XUser != null)
            {
                if (!XUser.FaKategorisierung.Contains(this))
                {
                    XUser.FaKategorisierung.Add(this);
                }
    
                UserID = XUser.UserID;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("XUser")
                    && (ChangeTracker.OriginalValues["XUser"] == XUser))
                {
                    ChangeTracker.OriginalValues.Remove("XUser");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("XUser", previousValue);
                }
                if (XUser != null && !XUser.ChangeTracker.ChangeTrackingEnabled)
                {
                    XUser.StartTracking();
                }
            }
        }

        #endregion

        #region Methods
    
    	public override bool Equals(object obj)
    	{
    		if (obj == null)
    		{
    			return false;
    		}
    		
    		if (ReferenceEquals(this, obj))
    		{
    			return true;
    		}
    
    		if (GetType() != obj.GetType())
    		{
    			return false;
    		}
    
    		var entity = (FaKategorisierung)obj;
    		if (!_faKategorisierungID.Equals(entity.FaKategorisierungID) || _faKategorisierungID == 0)
    		{
    			return false;
    		}
    		
    		return true;
    	}
    	
    	public override int GetHashCode()
        {
            return _faKategorisierungID.GetHashCode();
        }

        #endregion

    }
}

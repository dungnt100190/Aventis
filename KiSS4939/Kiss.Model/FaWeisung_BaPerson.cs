//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace Kiss.Model
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(BaPerson))]
    [KnownType(typeof(FaWeisung))]
    public partial class FaWeisung_BaPerson: EntityBase<FaWeisung_BaPerson>, IObjectWithChangeTracker
    {
        #region Primitive Properties
    
        [DataMember]
        public int FaWeisung_BaPersonID
        {
            get { return _faWeisung_BaPersonID; }
            set
            {
                if (_faWeisung_BaPersonID != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'FaWeisung_BaPersonID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _faWeisung_BaPersonID = value;
                    OnPropertyChanged("FaWeisung_BaPersonID");
                }
            }
        }
        private int _faWeisung_BaPersonID;
    
        [DataMember]
        public int FaWeisungID
        {
            get { return _faWeisungID; }
            set
            {
                if (_faWeisungID != value)
                {
                    ChangeTracker.RecordOriginalValue("FaWeisungID", _faWeisungID);
                    if (!IsDeserializing)
                    {
                        if (FaWeisung != null && FaWeisung.FaWeisungID != value)
                        {
                            FaWeisung = null;
                        }
                    }
                    _faWeisungID = value;
                    OnPropertyChanged("FaWeisungID");
                }
            }
        }
        private int _faWeisungID;
    
        [DataMember]
        public int BaPersonID
        {
            get { return _baPersonID; }
            set
            {
                if (_baPersonID != value)
                {
                    ChangeTracker.RecordOriginalValue("BaPersonID", _baPersonID);
                    if (!IsDeserializing)
                    {
                        if (BaPerson != null && BaPerson.BaPersonID != value)
                        {
                            BaPerson = null;
                        }
                    }
                    _baPersonID = value;
                    OnPropertyChanged("BaPersonID");
                }
            }
        }
        private int _baPersonID;
    
        [DataMember]
        public byte[] FaWeisung_BaPersonTS
        {
            get { return _faWeisung_BaPersonTS; }
            set
            {
                if (_faWeisung_BaPersonTS != value)
                {
                    _faWeisung_BaPersonTS = value;
                    OnPropertyChanged("FaWeisung_BaPersonTS");
                }
            }
        }
        private byte[] _faWeisung_BaPersonTS;

        #endregion

        #region Navigation Properties
    
        [DataMember]
        public BaPerson BaPerson
        {
            get { return _baPerson; }
            set
            {
                if (!ReferenceEquals(_baPerson, value))
                {
                    var previousValue = _baPerson;
                    _baPerson = value;
                    FixupBaPerson(previousValue);
                    OnNavigationPropertyChanged("BaPerson");
                }
            }
        }
        private BaPerson _baPerson;
    
        [DataMember]
        public FaWeisung FaWeisung
        {
            get { return _faWeisung; }
            set
            {
                if (!ReferenceEquals(_faWeisung, value))
                {
                    var previousValue = _faWeisung;
                    _faWeisung = value;
                    FixupFaWeisung(previousValue);
                    OnNavigationPropertyChanged("FaWeisung");
                }
            }
        }
        private FaWeisung _faWeisung;

        #endregion

        #region ChangeTracking
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected override void ClearNavigationProperties()
        {
            BaPerson = null;
            FaWeisung = null;
        }

        #endregion

        #region Association Fixup
    
        private void FixupBaPerson(BaPerson previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.FaWeisung_BaPerson.Contains(this))
            {
                previousValue.FaWeisung_BaPerson.Remove(this);
            }
    
            if (BaPerson != null)
            {
                if (!BaPerson.FaWeisung_BaPerson.Contains(this))
                {
                    BaPerson.FaWeisung_BaPerson.Add(this);
                }
    
                BaPersonID = BaPerson.BaPersonID;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("BaPerson")
                    && (ChangeTracker.OriginalValues["BaPerson"] == BaPerson))
                {
                    ChangeTracker.OriginalValues.Remove("BaPerson");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("BaPerson", previousValue);
                }
                if (BaPerson != null && !BaPerson.ChangeTracker.ChangeTrackingEnabled)
                {
                    BaPerson.StartTracking();
                }
            }
        }
    
        private void FixupFaWeisung(FaWeisung previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.FaWeisung_BaPerson.Contains(this))
            {
                previousValue.FaWeisung_BaPerson.Remove(this);
            }
    
            if (FaWeisung != null)
            {
                if (!FaWeisung.FaWeisung_BaPerson.Contains(this))
                {
                    FaWeisung.FaWeisung_BaPerson.Add(this);
                }
    
                FaWeisungID = FaWeisung.FaWeisungID;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("FaWeisung")
                    && (ChangeTracker.OriginalValues["FaWeisung"] == FaWeisung))
                {
                    ChangeTracker.OriginalValues.Remove("FaWeisung");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("FaWeisung", previousValue);
                }
                if (FaWeisung != null && !FaWeisung.ChangeTracker.ChangeTrackingEnabled)
                {
                    FaWeisung.StartTracking();
                }
            }
        }

        #endregion

        #region Methods
    
    	public override bool Equals(object obj)
    	{
    		if (obj == null)
    		{
    			return false;
    		}
    		
    		if (ReferenceEquals(this, obj))
    		{
    			return true;
    		}
    
    		if (GetType() != obj.GetType())
    		{
    			return false;
    		}
    
    		var entity = (FaWeisung_BaPerson)obj;
    		if (!_faWeisung_BaPersonID.Equals(entity.FaWeisung_BaPersonID) || _faWeisung_BaPersonID == 0)
    		{
    			return false;
    		}
    		
    		return true;
    	}
    	
    	public override int GetHashCode()
        {
            return _faWeisung_BaPersonID.GetHashCode();
        }

        #endregion

    }
}

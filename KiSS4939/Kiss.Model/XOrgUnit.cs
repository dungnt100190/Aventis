//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace Kiss.Model
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(BaInstitution))]
    [KnownType(typeof(FaKategorisierungEksProdukt))]
    [KnownType(typeof(XOrgUnit_User))]
    [KnownType(typeof(XOrgUnit))]
    [KnownType(typeof(XUser))]
    [KnownType(typeof(XModul))]
    public partial class XOrgUnit: EntityBase<XOrgUnit>, IObjectWithChangeTracker
    {
        #region Primitive Properties
    
        [DataMember]
        public int OrgUnitID
        {
            get { return _orgUnitID; }
            set
            {
                if (_orgUnitID != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'OrgUnitID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _orgUnitID = value;
                    OnPropertyChanged("OrgUnitID");
                }
            }
        }
        private int _orgUnitID;
    
        [DataMember]
        public Nullable<int> ParentID
        {
            get { return _parentID; }
            set
            {
                if (_parentID != value)
                {
                    ChangeTracker.RecordOriginalValue("ParentID", _parentID);
                    if (!IsDeserializing)
                    {
                        if (XOrgUnit_Parent != null && XOrgUnit_Parent.OrgUnitID != value)
                        {
                            XOrgUnit_Parent = null;
                        }
                    }
                    _parentID = value;
                    OnPropertyChanged("ParentID");
                }
            }
        }
        private Nullable<int> _parentID;
    
        [DataMember]
        public Nullable<int> ModulID
        {
            get { return _modulID; }
            set
            {
                if (_modulID != value)
                {
                    ChangeTracker.RecordOriginalValue("ModulID", _modulID);
                    if (!IsDeserializing)
                    {
                        if (XModul != null && XModul.ModulID != value)
                        {
                            XModul = null;
                        }
                    }
                    _modulID = value;
                    OnPropertyChanged("ModulID");
                }
            }
        }
        private Nullable<int> _modulID;
    
        [DataMember]
        public Nullable<int> ChiefID
        {
            get { return _chiefID; }
            set
            {
                if (_chiefID != value)
                {
                    ChangeTracker.RecordOriginalValue("ChiefID", _chiefID);
                    if (!IsDeserializing)
                    {
                        if (XUser_Chief != null && XUser_Chief.UserID != value)
                        {
                            XUser_Chief = null;
                        }
                    }
                    _chiefID = value;
                    OnPropertyChanged("ChiefID");
                }
            }
        }
        private Nullable<int> _chiefID;
    
        [DataMember]
        public Nullable<int> RechtsdienstUserID
        {
            get { return _rechtsdienstUserID; }
            set
            {
                if (_rechtsdienstUserID != value)
                {
                    ChangeTracker.RecordOriginalValue("RechtsdienstUserID", _rechtsdienstUserID);
                    if (!IsDeserializing)
                    {
                        if (XUser_Rechtsdienst != null && XUser_Rechtsdienst.UserID != value)
                        {
                            XUser_Rechtsdienst = null;
                        }
                    }
                    _rechtsdienstUserID = value;
                    OnPropertyChanged("RechtsdienstUserID");
                }
            }
        }
        private Nullable<int> _rechtsdienstUserID;
    
        [DataMember]
        public Nullable<int> RepresentativeID
        {
            get { return _representativeID; }
            set
            {
                if (_representativeID != value)
                {
                    ChangeTracker.RecordOriginalValue("RepresentativeID", _representativeID);
                    if (!IsDeserializing)
                    {
                        if (XUser_Representative != null && XUser_Representative.UserID != value)
                        {
                            XUser_Representative = null;
                        }
                    }
                    _representativeID = value;
                    OnPropertyChanged("RepresentativeID");
                }
            }
        }
        private Nullable<int> _representativeID;
    
        [DataMember]
        public Nullable<int> StellvertreterID
        {
            get { return _stellvertreterID; }
            set
            {
                if (_stellvertreterID != value)
                {
                    _stellvertreterID = value;
                    OnPropertyChanged("StellvertreterID");
                }
            }
        }
        private Nullable<int> _stellvertreterID;
    
        [DataMember]
        public Nullable<int> XProfileID
        {
            get { return _xProfileID; }
            set
            {
                if (_xProfileID != value)
                {
                    _xProfileID = value;
                    OnPropertyChanged("XProfileID");
                }
            }
        }
        private Nullable<int> _xProfileID;
    
        [DataMember]
        public string ItemName
        {
            get { return _itemName; }
            set
            {
                if (_itemName != value)
                {
                    _itemName = value;
                    OnPropertyChanged("ItemName");
                }
            }
        }
        private string _itemName;
    
        [DataMember]
        public Nullable<int> OEItemTypCode
        {
            get { return _oEItemTypCode; }
            set
            {
                if (_oEItemTypCode != value)
                {
                    _oEItemTypCode = value;
                    OnPropertyChanged("OEItemTypCode");
                }
            }
        }
        private Nullable<int> _oEItemTypCode;
    
        [DataMember]
        public Nullable<int> ParentPosition
        {
            get { return _parentPosition; }
            set
            {
                if (_parentPosition != value)
                {
                    _parentPosition = value;
                    OnPropertyChanged("ParentPosition");
                }
            }
        }
        private Nullable<int> _parentPosition;
    
        [DataMember]
        public Nullable<int> Kostenstelle
        {
            get { return _kostenstelle; }
            set
            {
                if (_kostenstelle != value)
                {
                    _kostenstelle = value;
                    OnPropertyChanged("Kostenstelle");
                }
            }
        }
        private Nullable<int> _kostenstelle;
    
        [DataMember]
        public Nullable<int> Mandantennummer
        {
            get { return _mandantennummer; }
            set
            {
                if (_mandantennummer != value)
                {
                    _mandantennummer = value;
                    OnPropertyChanged("Mandantennummer");
                }
            }
        }
        private Nullable<int> _mandantennummer;
    
        [DataMember]
        public Nullable<int> StundenLohnlaufNr
        {
            get { return _stundenLohnlaufNr; }
            set
            {
                if (_stundenLohnlaufNr != value)
                {
                    _stundenLohnlaufNr = value;
                    OnPropertyChanged("StundenLohnlaufNr");
                }
            }
        }
        private Nullable<int> _stundenLohnlaufNr;
    
        [DataMember]
        public Nullable<int> LeistungLohnlaufNr
        {
            get { return _leistungLohnlaufNr; }
            set
            {
                if (_leistungLohnlaufNr != value)
                {
                    _leistungLohnlaufNr = value;
                    OnPropertyChanged("LeistungLohnlaufNr");
                }
            }
        }
        private Nullable<int> _leistungLohnlaufNr;
    
        [DataMember]
        public Nullable<int> Sammelkonto
        {
            get { return _sammelkonto; }
            set
            {
                if (_sammelkonto != value)
                {
                    _sammelkonto = value;
                    OnPropertyChanged("Sammelkonto");
                }
            }
        }
        private Nullable<int> _sammelkonto;
    
        [DataMember]
        public string PCKonto
        {
            get { return _pCKonto; }
            set
            {
                if (_pCKonto != value)
                {
                    _pCKonto = value;
                    OnPropertyChanged("PCKonto");
                }
            }
        }
        private string _pCKonto;
    
        [DataMember]
        public string AD_Abteilung
        {
            get { return _aD_Abteilung; }
            set
            {
                if (_aD_Abteilung != value)
                {
                    _aD_Abteilung = value;
                    OnPropertyChanged("AD_Abteilung");
                }
            }
        }
        private string _aD_Abteilung;
    
        [DataMember]
        public string Logo
        {
            get { return _logo; }
            set
            {
                if (_logo != value)
                {
                    _logo = value;
                    OnPropertyChanged("Logo");
                }
            }
        }
        private string _logo;
    
        [DataMember]
        public string Adressat
        {
            get { return _adressat; }
            set
            {
                if (_adressat != value)
                {
                    _adressat = value;
                    OnPropertyChanged("Adressat");
                }
            }
        }
        private string _adressat;
    
        [DataMember]
        public string Adresse
        {
            get { return _adresse; }
            set
            {
                if (_adresse != value)
                {
                    _adresse = value;
                    OnPropertyChanged("Adresse");
                }
            }
        }
        private string _adresse;
    
        [DataMember]
        public string AdresseKGS
        {
            get { return _adresseKGS; }
            set
            {
                if (_adresseKGS != value)
                {
                    _adresseKGS = value;
                    OnPropertyChanged("AdresseKGS");
                }
            }
        }
        private string _adresseKGS;
    
        [DataMember]
        public string AdresseAbteilung
        {
            get { return _adresseAbteilung; }
            set
            {
                if (_adresseAbteilung != value)
                {
                    _adresseAbteilung = value;
                    OnPropertyChanged("AdresseAbteilung");
                }
            }
        }
        private string _adresseAbteilung;
    
        [DataMember]
        public string AdresseStrasse
        {
            get { return _adresseStrasse; }
            set
            {
                if (_adresseStrasse != value)
                {
                    _adresseStrasse = value;
                    OnPropertyChanged("AdresseStrasse");
                }
            }
        }
        private string _adresseStrasse;
    
        [DataMember]
        public string Postfach
        {
            get { return _postfach; }
            set
            {
                if (_postfach != value)
                {
                    _postfach = value;
                    OnPropertyChanged("Postfach");
                }
            }
        }
        private string _postfach;
    
        [DataMember]
        public bool PostfachOhneNr
        {
            get { return _postfachOhneNr; }
            set
            {
                if (_postfachOhneNr != value)
                {
                    _postfachOhneNr = value;
                    OnPropertyChanged("PostfachOhneNr");
                }
            }
        }
        private bool _postfachOhneNr;
    
        [DataMember]
        public string AdresseHausNr
        {
            get { return _adresseHausNr; }
            set
            {
                if (_adresseHausNr != value)
                {
                    _adresseHausNr = value;
                    OnPropertyChanged("AdresseHausNr");
                }
            }
        }
        private string _adresseHausNr;
    
        [DataMember]
        public string AdressePLZ
        {
            get { return _adressePLZ; }
            set
            {
                if (_adressePLZ != value)
                {
                    _adressePLZ = value;
                    OnPropertyChanged("AdressePLZ");
                }
            }
        }
        private string _adressePLZ;
    
        [DataMember]
        public string AdresseOrt
        {
            get { return _adresseOrt; }
            set
            {
                if (_adresseOrt != value)
                {
                    _adresseOrt = value;
                    OnPropertyChanged("AdresseOrt");
                }
            }
        }
        private string _adresseOrt;
    
        [DataMember]
        public string Phone
        {
            get { return _phone; }
            set
            {
                if (_phone != value)
                {
                    _phone = value;
                    OnPropertyChanged("Phone");
                }
            }
        }
        private string _phone;
    
        [DataMember]
        public string Telefon
        {
            get { return _telefon; }
            set
            {
                if (_telefon != value)
                {
                    _telefon = value;
                    OnPropertyChanged("Telefon");
                }
            }
        }
        private string _telefon;
    
        [DataMember]
        public string Fax
        {
            get { return _fax; }
            set
            {
                if (_fax != value)
                {
                    _fax = value;
                    OnPropertyChanged("Fax");
                }
            }
        }
        private string _fax;
    
        [DataMember]
        public string EMail
        {
            get { return _eMail; }
            set
            {
                if (_eMail != value)
                {
                    _eMail = value;
                    OnPropertyChanged("EMail");
                }
            }
        }
        private string _eMail;
    
        [DataMember]
        public string WWW
        {
            get { return _wWW; }
            set
            {
                if (_wWW != value)
                {
                    _wWW = value;
                    OnPropertyChanged("WWW");
                }
            }
        }
        private string _wWW;
    
        [DataMember]
        public string Internet
        {
            get { return _internet; }
            set
            {
                if (_internet != value)
                {
                    _internet = value;
                    OnPropertyChanged("Internet");
                }
            }
        }
        private string _internet;
    
        [DataMember]
        public Nullable<int> UserProfileCode
        {
            get { return _userProfileCode; }
            set
            {
                if (_userProfileCode != value)
                {
                    _userProfileCode = value;
                    OnPropertyChanged("UserProfileCode");
                }
            }
        }
        private Nullable<int> _userProfileCode;
    
        [DataMember]
        public string Text1
        {
            get { return _text1; }
            set
            {
                if (_text1 != value)
                {
                    _text1 = value;
                    OnPropertyChanged("Text1");
                }
            }
        }
        private string _text1;
    
        [DataMember]
        public string Text2
        {
            get { return _text2; }
            set
            {
                if (_text2 != value)
                {
                    _text2 = value;
                    OnPropertyChanged("Text2");
                }
            }
        }
        private string _text2;
    
        [DataMember]
        public string Text3
        {
            get { return _text3; }
            set
            {
                if (_text3 != value)
                {
                    _text3 = value;
                    OnPropertyChanged("Text3");
                }
            }
        }
        private string _text3;
    
        [DataMember]
        public string Text4
        {
            get { return _text4; }
            set
            {
                if (_text4 != value)
                {
                    _text4 = value;
                    OnPropertyChanged("Text4");
                }
            }
        }
        private string _text4;
    
        [DataMember]
        public string Creator
        {
            get { return _creator; }
            set
            {
                if (_creator != value)
                {
                    _creator = value;
                    OnPropertyChanged("Creator");
                }
            }
        }
        private string _creator;
    
        [DataMember]
        public System.DateTime Created
        {
            get { return _created; }
            set
            {
                if (_created != value)
                {
                    _created = value;
                    OnPropertyChanged("Created");
                }
            }
        }
        private System.DateTime _created;
    
        [DataMember]
        public string Modifier
        {
            get { return _modifier; }
            set
            {
                if (_modifier != value)
                {
                    _modifier = value;
                    OnPropertyChanged("Modifier");
                }
            }
        }
        private string _modifier;
    
        [DataMember]
        public System.DateTime Modified
        {
            get { return _modified; }
            set
            {
                if (_modified != value)
                {
                    _modified = value;
                    OnPropertyChanged("Modified");
                }
            }
        }
        private System.DateTime _modified;
    
        [DataMember]
        public Nullable<int> VerID
        {
            get { return _verID; }
            set
            {
                if (_verID != value)
                {
                    _verID = value;
                    OnPropertyChanged("VerID");
                }
            }
        }
        private Nullable<int> _verID;
    
        [DataMember]
        public byte[] XOrgUnitTS
        {
            get { return _xOrgUnitTS; }
            set
            {
                if (_xOrgUnitTS != value)
                {
                    _xOrgUnitTS = value;
                    OnPropertyChanged("XOrgUnitTS");
                }
            }
        }
        private byte[] _xOrgUnitTS;

        #endregion

        #region Navigation Properties
    
        [DataMember]
        public TrackableCollection<BaInstitution> BaInstitution
        {
            get
            {
                if (_baInstitution == null)
                {
                    _baInstitution = new TrackableCollection<BaInstitution>();
                    _baInstitution.CollectionChanged += FixupBaInstitution;
                }
                return _baInstitution;
            }
            set
            {
                if (!ReferenceEquals(_baInstitution, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_baInstitution != null)
                    {
                        _baInstitution.CollectionChanged -= FixupBaInstitution;
                    }
                    _baInstitution = value;
                    if (_baInstitution != null)
                    {
                        _baInstitution.CollectionChanged += FixupBaInstitution;
                    }
                    OnNavigationPropertyChanged("BaInstitution");
                }
            }
        }
        private TrackableCollection<BaInstitution> _baInstitution;
    
        [DataMember]
        public TrackableCollection<FaKategorisierungEksProdukt> FaKategorisierungEksProdukt
        {
            get
            {
                if (_faKategorisierungEksProdukt == null)
                {
                    _faKategorisierungEksProdukt = new TrackableCollection<FaKategorisierungEksProdukt>();
                    _faKategorisierungEksProdukt.CollectionChanged += FixupFaKategorisierungEksProdukt;
                }
                return _faKategorisierungEksProdukt;
            }
            set
            {
                if (!ReferenceEquals(_faKategorisierungEksProdukt, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_faKategorisierungEksProdukt != null)
                    {
                        _faKategorisierungEksProdukt.CollectionChanged -= FixupFaKategorisierungEksProdukt;
                    }
                    _faKategorisierungEksProdukt = value;
                    if (_faKategorisierungEksProdukt != null)
                    {
                        _faKategorisierungEksProdukt.CollectionChanged += FixupFaKategorisierungEksProdukt;
                    }
                    OnNavigationPropertyChanged("FaKategorisierungEksProdukt");
                }
            }
        }
        private TrackableCollection<FaKategorisierungEksProdukt> _faKategorisierungEksProdukt;
    
        [DataMember]
        public TrackableCollection<XOrgUnit_User> XOrgUnit_User
        {
            get
            {
                if (_xOrgUnit_User == null)
                {
                    _xOrgUnit_User = new TrackableCollection<XOrgUnit_User>();
                    _xOrgUnit_User.CollectionChanged += FixupXOrgUnit_User;
                }
                return _xOrgUnit_User;
            }
            set
            {
                if (!ReferenceEquals(_xOrgUnit_User, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_xOrgUnit_User != null)
                    {
                        _xOrgUnit_User.CollectionChanged -= FixupXOrgUnit_User;
                    }
                    _xOrgUnit_User = value;
                    if (_xOrgUnit_User != null)
                    {
                        _xOrgUnit_User.CollectionChanged += FixupXOrgUnit_User;
                    }
                    OnNavigationPropertyChanged("XOrgUnit_User");
                }
            }
        }
        private TrackableCollection<XOrgUnit_User> _xOrgUnit_User;
    
        [DataMember]
        public TrackableCollection<XOrgUnit> XOrgUnit_IsParentOf
        {
            get
            {
                if (_xOrgUnit_IsParentOf == null)
                {
                    _xOrgUnit_IsParentOf = new TrackableCollection<XOrgUnit>();
                    _xOrgUnit_IsParentOf.CollectionChanged += FixupXOrgUnit_IsParentOf;
                }
                return _xOrgUnit_IsParentOf;
            }
            set
            {
                if (!ReferenceEquals(_xOrgUnit_IsParentOf, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_xOrgUnit_IsParentOf != null)
                    {
                        _xOrgUnit_IsParentOf.CollectionChanged -= FixupXOrgUnit_IsParentOf;
                    }
                    _xOrgUnit_IsParentOf = value;
                    if (_xOrgUnit_IsParentOf != null)
                    {
                        _xOrgUnit_IsParentOf.CollectionChanged += FixupXOrgUnit_IsParentOf;
                    }
                    OnNavigationPropertyChanged("XOrgUnit_IsParentOf");
                }
            }
        }
        private TrackableCollection<XOrgUnit> _xOrgUnit_IsParentOf;
    
        [DataMember]
        public XOrgUnit XOrgUnit_Parent
        {
            get { return _xOrgUnit_Parent; }
            set
            {
                if (!ReferenceEquals(_xOrgUnit_Parent, value))
                {
                    var previousValue = _xOrgUnit_Parent;
                    _xOrgUnit_Parent = value;
                    FixupXOrgUnit_Parent(previousValue);
                    OnNavigationPropertyChanged("XOrgUnit_Parent");
                }
            }
        }
        private XOrgUnit _xOrgUnit_Parent;
    
        [DataMember]
        public XUser XUser_Chief
        {
            get { return _xUser_Chief; }
            set
            {
                if (!ReferenceEquals(_xUser_Chief, value))
                {
                    var previousValue = _xUser_Chief;
                    _xUser_Chief = value;
                    FixupXUser_Chief(previousValue);
                    OnNavigationPropertyChanged("XUser_Chief");
                }
            }
        }
        private XUser _xUser_Chief;
    
        [DataMember]
        public XUser XUser_Rechtsdienst
        {
            get { return _xUser_Rechtsdienst; }
            set
            {
                if (!ReferenceEquals(_xUser_Rechtsdienst, value))
                {
                    var previousValue = _xUser_Rechtsdienst;
                    _xUser_Rechtsdienst = value;
                    FixupXUser_Rechtsdienst(previousValue);
                    OnNavigationPropertyChanged("XUser_Rechtsdienst");
                }
            }
        }
        private XUser _xUser_Rechtsdienst;
    
        [DataMember]
        public XUser XUser_Representative
        {
            get { return _xUser_Representative; }
            set
            {
                if (!ReferenceEquals(_xUser_Representative, value))
                {
                    var previousValue = _xUser_Representative;
                    _xUser_Representative = value;
                    FixupXUser_Representative(previousValue);
                    OnNavigationPropertyChanged("XUser_Representative");
                }
            }
        }
        private XUser _xUser_Representative;
    
        [DataMember]
        public XModul XModul
        {
            get { return _xModul; }
            set
            {
                if (!ReferenceEquals(_xModul, value))
                {
                    var previousValue = _xModul;
                    _xModul = value;
                    FixupXModul(previousValue);
                    OnNavigationPropertyChanged("XModul");
                }
            }
        }
        private XModul _xModul;

        #endregion

        #region ChangeTracking
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected override void ClearNavigationProperties()
        {
            BaInstitution.Clear();
            FaKategorisierungEksProdukt.Clear();
            XOrgUnit_User.Clear();
            XOrgUnit_IsParentOf.Clear();
            XOrgUnit_Parent = null;
            XUser_Chief = null;
            XUser_Rechtsdienst = null;
            XUser_Representative = null;
            XModul = null;
        }

        #endregion

        #region Association Fixup
    
        private void FixupXOrgUnit_Parent(XOrgUnit previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.XOrgUnit_IsParentOf.Contains(this))
            {
                previousValue.XOrgUnit_IsParentOf.Remove(this);
            }
    
            if (XOrgUnit_Parent != null)
            {
                if (!XOrgUnit_Parent.XOrgUnit_IsParentOf.Contains(this))
                {
                    XOrgUnit_Parent.XOrgUnit_IsParentOf.Add(this);
                }
    
                ParentID = XOrgUnit_Parent.OrgUnitID;
            }
            else if (!skipKeys)
            {
                ParentID = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("XOrgUnit_Parent")
                    && (ChangeTracker.OriginalValues["XOrgUnit_Parent"] == XOrgUnit_Parent))
                {
                    ChangeTracker.OriginalValues.Remove("XOrgUnit_Parent");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("XOrgUnit_Parent", previousValue);
                }
                if (XOrgUnit_Parent != null && !XOrgUnit_Parent.ChangeTracker.ChangeTrackingEnabled)
                {
                    XOrgUnit_Parent.StartTracking();
                }
            }
        }
    
        private void FixupXUser_Chief(XUser previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.XOrgUnit_IsChiefOf.Contains(this))
            {
                previousValue.XOrgUnit_IsChiefOf.Remove(this);
            }
    
            if (XUser_Chief != null)
            {
                if (!XUser_Chief.XOrgUnit_IsChiefOf.Contains(this))
                {
                    XUser_Chief.XOrgUnit_IsChiefOf.Add(this);
                }
    
                ChiefID = XUser_Chief.UserID;
            }
            else if (!skipKeys)
            {
                ChiefID = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("XUser_Chief")
                    && (ChangeTracker.OriginalValues["XUser_Chief"] == XUser_Chief))
                {
                    ChangeTracker.OriginalValues.Remove("XUser_Chief");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("XUser_Chief", previousValue);
                }
                if (XUser_Chief != null && !XUser_Chief.ChangeTracker.ChangeTrackingEnabled)
                {
                    XUser_Chief.StartTracking();
                }
            }
        }
    
        private void FixupXUser_Rechtsdienst(XUser previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.XOrgUnit_IsRechtsdienstOf.Contains(this))
            {
                previousValue.XOrgUnit_IsRechtsdienstOf.Remove(this);
            }
    
            if (XUser_Rechtsdienst != null)
            {
                if (!XUser_Rechtsdienst.XOrgUnit_IsRechtsdienstOf.Contains(this))
                {
                    XUser_Rechtsdienst.XOrgUnit_IsRechtsdienstOf.Add(this);
                }
    
                RechtsdienstUserID = XUser_Rechtsdienst.UserID;
            }
            else if (!skipKeys)
            {
                RechtsdienstUserID = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("XUser_Rechtsdienst")
                    && (ChangeTracker.OriginalValues["XUser_Rechtsdienst"] == XUser_Rechtsdienst))
                {
                    ChangeTracker.OriginalValues.Remove("XUser_Rechtsdienst");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("XUser_Rechtsdienst", previousValue);
                }
                if (XUser_Rechtsdienst != null && !XUser_Rechtsdienst.ChangeTracker.ChangeTrackingEnabled)
                {
                    XUser_Rechtsdienst.StartTracking();
                }
            }
        }
    
        private void FixupXUser_Representative(XUser previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.XOrgUnit_IsRepresentativeOf.Contains(this))
            {
                previousValue.XOrgUnit_IsRepresentativeOf.Remove(this);
            }
    
            if (XUser_Representative != null)
            {
                if (!XUser_Representative.XOrgUnit_IsRepresentativeOf.Contains(this))
                {
                    XUser_Representative.XOrgUnit_IsRepresentativeOf.Add(this);
                }
    
                RepresentativeID = XUser_Representative.UserID;
            }
            else if (!skipKeys)
            {
                RepresentativeID = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("XUser_Representative")
                    && (ChangeTracker.OriginalValues["XUser_Representative"] == XUser_Representative))
                {
                    ChangeTracker.OriginalValues.Remove("XUser_Representative");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("XUser_Representative", previousValue);
                }
                if (XUser_Representative != null && !XUser_Representative.ChangeTracker.ChangeTrackingEnabled)
                {
                    XUser_Representative.StartTracking();
                }
            }
        }
    
        private void FixupXModul(XModul previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.XOrgUnit.Contains(this))
            {
                previousValue.XOrgUnit.Remove(this);
            }
    
            if (XModul != null)
            {
                if (!XModul.XOrgUnit.Contains(this))
                {
                    XModul.XOrgUnit.Add(this);
                }
    
                ModulID = XModul.ModulID;
            }
            else if (!skipKeys)
            {
                ModulID = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("XModul")
                    && (ChangeTracker.OriginalValues["XModul"] == XModul))
                {
                    ChangeTracker.OriginalValues.Remove("XModul");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("XModul", previousValue);
                }
                if (XModul != null && !XModul.ChangeTracker.ChangeTrackingEnabled)
                {
                    XModul.StartTracking();
                }
            }
        }
    
        private void FixupBaInstitution(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (BaInstitution item in e.NewItems)
                {
                    item.XOrgUnit = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("BaInstitution", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (BaInstitution item in e.OldItems)
                {
                    if (ReferenceEquals(item.XOrgUnit, this))
                    {
                        item.XOrgUnit = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("BaInstitution", item);
                    }
                }
            }
        }
    
        private void FixupFaKategorisierungEksProdukt(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (FaKategorisierungEksProdukt item in e.NewItems)
                {
                    item.XOrgUnit = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("FaKategorisierungEksProdukt", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (FaKategorisierungEksProdukt item in e.OldItems)
                {
                    if (ReferenceEquals(item.XOrgUnit, this))
                    {
                        item.XOrgUnit = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("FaKategorisierungEksProdukt", item);
                    }
                }
            }
        }
    
        private void FixupXOrgUnit_User(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (XOrgUnit_User item in e.NewItems)
                {
                    item.XOrgUnit = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("XOrgUnit_User", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (XOrgUnit_User item in e.OldItems)
                {
                    if (ReferenceEquals(item.XOrgUnit, this))
                    {
                        item.XOrgUnit = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("XOrgUnit_User", item);
                    }
                }
            }
        }
    
        private void FixupXOrgUnit_IsParentOf(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (XOrgUnit item in e.NewItems)
                {
                    item.XOrgUnit_Parent = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("XOrgUnit_IsParentOf", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (XOrgUnit item in e.OldItems)
                {
                    if (ReferenceEquals(item.XOrgUnit_Parent, this))
                    {
                        item.XOrgUnit_Parent = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("XOrgUnit_IsParentOf", item);
                    }
                }
            }
        }

        #endregion

        #region Methods
    
    	public override bool Equals(object obj)
    	{
    		if (obj == null)
    		{
    			return false;
    		}
    		
    		if (ReferenceEquals(this, obj))
    		{
    			return true;
    		}
    
    		if (GetType() != obj.GetType())
    		{
    			return false;
    		}
    
    		var entity = (XOrgUnit)obj;
    		if (!_orgUnitID.Equals(entity.OrgUnitID) || _orgUnitID == 0)
    		{
    			return false;
    		}
    		
    		return true;
    	}
    	
    	public override int GetHashCode()
        {
            return _orgUnitID.GetHashCode();
        }

        #endregion

    }
}

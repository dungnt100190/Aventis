//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace Kiss.Model
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(FaLeistung))]
    [KnownType(typeof(XClass))]
    [KnownType(typeof(XLOV))]
    [KnownType(typeof(XOrgUnit))]
    [KnownType(typeof(XUser))]
    public partial class XModul: EntityBase<XModul>, IObjectWithChangeTracker
    {
        #region Primitive Properties
    
        [DataMember]
        public int ModulID
        {
            get { return _modulID; }
            set
            {
                if (_modulID != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'ModulID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _modulID = value;
                    OnPropertyChanged("ModulID");
                }
            }
        }
        private int _modulID;
    
        [DataMember]
        public string Name
        {
            get { return _name; }
            set
            {
                if (_name != value)
                {
                    _name = value;
                    OnPropertyChanged("Name");
                }
            }
        }
        private string _name;
    
        [DataMember]
        public string ShortName
        {
            get { return _shortName; }
            set
            {
                if (_shortName != value)
                {
                    _shortName = value;
                    OnPropertyChanged("ShortName");
                }
            }
        }
        private string _shortName;
    
        [DataMember]
        public Nullable<int> SortKey
        {
            get { return _sortKey; }
            set
            {
                if (_sortKey != value)
                {
                    _sortKey = value;
                    OnPropertyChanged("SortKey");
                }
            }
        }
        private Nullable<int> _sortKey;
    
        [DataMember]
        public string NameSpace
        {
            get { return _nameSpace; }
            set
            {
                if (_nameSpace != value)
                {
                    _nameSpace = value;
                    OnPropertyChanged("NameSpace");
                }
            }
        }
        private string _nameSpace;
    
        [DataMember]
        public string DB_Prefix
        {
            get { return _dB_Prefix; }
            set
            {
                if (_dB_Prefix != value)
                {
                    _dB_Prefix = value;
                    OnPropertyChanged("DB_Prefix");
                }
            }
        }
        private string _dB_Prefix;
    
        [DataMember]
        public bool ModulTree
        {
            get { return _modulTree; }
            set
            {
                if (_modulTree != value)
                {
                    _modulTree = value;
                    OnPropertyChanged("ModulTree");
                }
            }
        }
        private bool _modulTree;
    
        [DataMember]
        public string Description
        {
            get { return _description; }
            set
            {
                if (_description != value)
                {
                    _description = value;
                    OnPropertyChanged("Description");
                }
            }
        }
        private string _description;
    
        [DataMember]
        public bool System
        {
            get { return _system; }
            set
            {
                if (_system != value)
                {
                    _system = value;
                    OnPropertyChanged("System");
                }
            }
        }
        private bool _system;
    
        [DataMember]
        public byte[] XModulTS
        {
            get { return _xModulTS; }
            set
            {
                if (_xModulTS != value)
                {
                    _xModulTS = value;
                    OnPropertyChanged("XModulTS");
                }
            }
        }
        private byte[] _xModulTS;
    
        [DataMember]
        public bool Licensed
        {
            get { return _licensed; }
            set
            {
                if (_licensed != value)
                {
                    _licensed = value;
                    OnPropertyChanged("Licensed");
                }
            }
        }
        private bool _licensed;

        #endregion

        #region Navigation Properties
    
        [DataMember]
        public TrackableCollection<FaLeistung> FaLeistung
        {
            get
            {
                if (_faLeistung == null)
                {
                    _faLeistung = new TrackableCollection<FaLeistung>();
                    _faLeistung.CollectionChanged += FixupFaLeistung;
                }
                return _faLeistung;
            }
            set
            {
                if (!ReferenceEquals(_faLeistung, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_faLeistung != null)
                    {
                        _faLeistung.CollectionChanged -= FixupFaLeistung;
                    }
                    _faLeistung = value;
                    if (_faLeistung != null)
                    {
                        _faLeistung.CollectionChanged += FixupFaLeistung;
                    }
                    OnNavigationPropertyChanged("FaLeistung");
                }
            }
        }
        private TrackableCollection<FaLeistung> _faLeistung;
    
        [DataMember]
        public TrackableCollection<XClass> XClass
        {
            get
            {
                if (_xClass == null)
                {
                    _xClass = new TrackableCollection<XClass>();
                    _xClass.CollectionChanged += FixupXClass;
                }
                return _xClass;
            }
            set
            {
                if (!ReferenceEquals(_xClass, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_xClass != null)
                    {
                        _xClass.CollectionChanged -= FixupXClass;
                    }
                    _xClass = value;
                    if (_xClass != null)
                    {
                        _xClass.CollectionChanged += FixupXClass;
                    }
                    OnNavigationPropertyChanged("XClass");
                }
            }
        }
        private TrackableCollection<XClass> _xClass;
    
        [DataMember]
        public TrackableCollection<XLOV> XLOV
        {
            get
            {
                if (_xLOV == null)
                {
                    _xLOV = new TrackableCollection<XLOV>();
                    _xLOV.CollectionChanged += FixupXLOV;
                }
                return _xLOV;
            }
            set
            {
                if (!ReferenceEquals(_xLOV, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_xLOV != null)
                    {
                        _xLOV.CollectionChanged -= FixupXLOV;
                    }
                    _xLOV = value;
                    if (_xLOV != null)
                    {
                        _xLOV.CollectionChanged += FixupXLOV;
                    }
                    OnNavigationPropertyChanged("XLOV");
                }
            }
        }
        private TrackableCollection<XLOV> _xLOV;
    
        [DataMember]
        public TrackableCollection<XOrgUnit> XOrgUnit
        {
            get
            {
                if (_xOrgUnit == null)
                {
                    _xOrgUnit = new TrackableCollection<XOrgUnit>();
                    _xOrgUnit.CollectionChanged += FixupXOrgUnit;
                }
                return _xOrgUnit;
            }
            set
            {
                if (!ReferenceEquals(_xOrgUnit, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_xOrgUnit != null)
                    {
                        _xOrgUnit.CollectionChanged -= FixupXOrgUnit;
                    }
                    _xOrgUnit = value;
                    if (_xOrgUnit != null)
                    {
                        _xOrgUnit.CollectionChanged += FixupXOrgUnit;
                    }
                    OnNavigationPropertyChanged("XOrgUnit");
                }
            }
        }
        private TrackableCollection<XOrgUnit> _xOrgUnit;
    
        [DataMember]
        public TrackableCollection<XUser> XUser
        {
            get
            {
                if (_xUser == null)
                {
                    _xUser = new TrackableCollection<XUser>();
                    _xUser.CollectionChanged += FixupXUser;
                }
                return _xUser;
            }
            set
            {
                if (!ReferenceEquals(_xUser, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_xUser != null)
                    {
                        _xUser.CollectionChanged -= FixupXUser;
                    }
                    _xUser = value;
                    if (_xUser != null)
                    {
                        _xUser.CollectionChanged += FixupXUser;
                    }
                    OnNavigationPropertyChanged("XUser");
                }
            }
        }
        private TrackableCollection<XUser> _xUser;

        #endregion

        #region ChangeTracking
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected override void ClearNavigationProperties()
        {
            FaLeistung.Clear();
            XClass.Clear();
            XLOV.Clear();
            XOrgUnit.Clear();
            XUser.Clear();
        }

        #endregion

        #region Association Fixup
    
        private void FixupFaLeistung(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (FaLeistung item in e.NewItems)
                {
                    item.XModul = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("FaLeistung", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (FaLeistung item in e.OldItems)
                {
                    if (ReferenceEquals(item.XModul, this))
                    {
                        item.XModul = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("FaLeistung", item);
                    }
                }
            }
        }
    
        private void FixupXClass(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (XClass item in e.NewItems)
                {
                    item.XModul = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("XClass", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (XClass item in e.OldItems)
                {
                    if (ReferenceEquals(item.XModul, this))
                    {
                        item.XModul = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("XClass", item);
                    }
                }
            }
        }
    
        private void FixupXLOV(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (XLOV item in e.NewItems)
                {
                    item.XModul = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("XLOV", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (XLOV item in e.OldItems)
                {
                    if (ReferenceEquals(item.XModul, this))
                    {
                        item.XModul = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("XLOV", item);
                    }
                }
            }
        }
    
        private void FixupXOrgUnit(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (XOrgUnit item in e.NewItems)
                {
                    item.XModul = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("XOrgUnit", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (XOrgUnit item in e.OldItems)
                {
                    if (ReferenceEquals(item.XModul, this))
                    {
                        item.XModul = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("XOrgUnit", item);
                    }
                }
            }
        }
    
        private void FixupXUser(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (XUser item in e.NewItems)
                {
                    item.XModul = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("XUser", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (XUser item in e.OldItems)
                {
                    if (ReferenceEquals(item.XModul, this))
                    {
                        item.XModul = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("XUser", item);
                    }
                }
            }
        }

        #endregion

        #region Methods
    
    	public override bool Equals(object obj)
    	{
    		if (obj == null)
    		{
    			return false;
    		}
    		
    		if (ReferenceEquals(this, obj))
    		{
    			return true;
    		}
    
    		if (GetType() != obj.GetType())
    		{
    			return false;
    		}
    
    		var entity = (XModul)obj;
    		if (!_modulID.Equals(entity.ModulID) || _modulID == 0)
    		{
    			return false;
    		}
    		
    		return true;
    	}
    	
    	public override int GetHashCode()
        {
            return _modulID.GetHashCode();
        }

        #endregion

    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace Kiss.Model
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(BaPerson))]
    public partial class BaPraemienverbilligung: EntityBase<BaPraemienverbilligung>, IObjectWithChangeTracker
    {
        #region Primitive Properties
    
        [DataMember]
        public int BaPraemienverbilligungID
        {
            get { return _baPraemienverbilligungID; }
            set
            {
                if (_baPraemienverbilligungID != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'BaPraemienverbilligungID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _baPraemienverbilligungID = value;
                    OnPropertyChanged("BaPraemienverbilligungID");
                }
            }
        }
        private int _baPraemienverbilligungID;
    
        [DataMember]
        public int BaPersonID
        {
            get { return _baPersonID; }
            set
            {
                if (_baPersonID != value)
                {
                    ChangeTracker.RecordOriginalValue("BaPersonID", _baPersonID);
                    if (!IsDeserializing)
                    {
                        if (BaPerson != null && BaPerson.BaPersonID != value)
                        {
                            BaPerson = null;
                        }
                    }
                    _baPersonID = value;
                    OnPropertyChanged("BaPersonID");
                }
            }
        }
        private int _baPersonID;
    
        [DataMember]
        public Nullable<int> Jahr
        {
            get { return _jahr; }
            set
            {
                if (_jahr != value)
                {
                    _jahr = value;
                    OnPropertyChanged("Jahr");
                }
            }
        }
        private Nullable<int> _jahr;
    
        [DataMember]
        public Nullable<int> Folgenummer
        {
            get { return _folgenummer; }
            set
            {
                if (_folgenummer != value)
                {
                    _folgenummer = value;
                    OnPropertyChanged("Folgenummer");
                }
            }
        }
        private Nullable<int> _folgenummer;
    
        [DataMember]
        public Nullable<decimal> BetragAnspruch
        {
            get { return _betragAnspruch; }
            set
            {
                if (_betragAnspruch != value)
                {
                    _betragAnspruch = value;
                    OnPropertyChanged("BetragAnspruch");
                }
            }
        }
        private Nullable<decimal> _betragAnspruch;
    
        [DataMember]
        public Nullable<decimal> BetragAuszahlung
        {
            get { return _betragAuszahlung; }
            set
            {
                if (_betragAuszahlung != value)
                {
                    _betragAuszahlung = value;
                    OnPropertyChanged("BetragAuszahlung");
                }
            }
        }
        private Nullable<decimal> _betragAuszahlung;
    
        [DataMember]
        public string ZahlungAn
        {
            get { return _zahlungAn; }
            set
            {
                if (_zahlungAn != value)
                {
                    _zahlungAn = value;
                    OnPropertyChanged("ZahlungAn");
                }
            }
        }
        private string _zahlungAn;
    
        [DataMember]
        public string ZahlungAn_Krankenkassennummer
        {
            get { return _zahlungAn_Krankenkassennummer; }
            set
            {
                if (_zahlungAn_Krankenkassennummer != value)
                {
                    _zahlungAn_Krankenkassennummer = value;
                    OnPropertyChanged("ZahlungAn_Krankenkassennummer");
                }
            }
        }
        private string _zahlungAn_Krankenkassennummer;
    
        [DataMember]
        public Nullable<System.DateTime> LetzteMutation
        {
            get { return _letzteMutation; }
            set
            {
                if (_letzteMutation != value)
                {
                    _letzteMutation = value;
                    OnPropertyChanged("LetzteMutation");
                }
            }
        }
        private Nullable<System.DateTime> _letzteMutation;
    
        [DataMember]
        public string Grund
        {
            get { return _grund; }
            set
            {
                if (_grund != value)
                {
                    _grund = value;
                    OnPropertyChanged("Grund");
                }
            }
        }
        private string _grund;
    
        [DataMember]
        public byte[] BaPraemienverbilligungTS
        {
            get { return _baPraemienverbilligungTS; }
            set
            {
                if (_baPraemienverbilligungTS != value)
                {
                    _baPraemienverbilligungTS = value;
                    OnPropertyChanged("BaPraemienverbilligungTS");
                }
            }
        }
        private byte[] _baPraemienverbilligungTS;

        #endregion

        #region Navigation Properties
    
        [DataMember]
        public BaPerson BaPerson
        {
            get { return _baPerson; }
            set
            {
                if (!ReferenceEquals(_baPerson, value))
                {
                    var previousValue = _baPerson;
                    _baPerson = value;
                    FixupBaPerson(previousValue);
                    OnNavigationPropertyChanged("BaPerson");
                }
            }
        }
        private BaPerson _baPerson;

        #endregion

        #region ChangeTracking
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected override void ClearNavigationProperties()
        {
            BaPerson = null;
        }

        #endregion

        #region Association Fixup
    
        private void FixupBaPerson(BaPerson previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.BaPraemienverbilligung.Contains(this))
            {
                previousValue.BaPraemienverbilligung.Remove(this);
            }
    
            if (BaPerson != null)
            {
                if (!BaPerson.BaPraemienverbilligung.Contains(this))
                {
                    BaPerson.BaPraemienverbilligung.Add(this);
                }
    
                BaPersonID = BaPerson.BaPersonID;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("BaPerson")
                    && (ChangeTracker.OriginalValues["BaPerson"] == BaPerson))
                {
                    ChangeTracker.OriginalValues.Remove("BaPerson");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("BaPerson", previousValue);
                }
                if (BaPerson != null && !BaPerson.ChangeTracker.ChangeTrackingEnabled)
                {
                    BaPerson.StartTracking();
                }
            }
        }

        #endregion

        #region Methods
    
    	public override bool Equals(object obj)
    	{
    		if (obj == null)
    		{
    			return false;
    		}
    		
    		if (ReferenceEquals(this, obj))
    		{
    			return true;
    		}
    
    		if (GetType() != obj.GetType())
    		{
    			return false;
    		}
    
    		var entity = (BaPraemienverbilligung)obj;
    		if (!_baPraemienverbilligungID.Equals(entity.BaPraemienverbilligungID) || _baPraemienverbilligungID == 0)
    		{
    			return false;
    		}
    		
    		return true;
    	}
    	
    	public override int GetHashCode()
        {
            return _baPraemienverbilligungID.GetHashCode();
        }

        #endregion

    }
}

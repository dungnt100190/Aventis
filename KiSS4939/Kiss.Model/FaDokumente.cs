//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace Kiss.Model
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(BaInstitution))]
    [KnownType(typeof(BaPerson))]
    [KnownType(typeof(FaLeistung))]
    [KnownType(typeof(XUser))]
    [KnownType(typeof(XDocument))]
    public partial class FaDokumente: EntityBase<FaDokumente>, IObjectWithChangeTracker
    {
        #region Primitive Properties
    
        [DataMember]
        public int FaDokumenteID
        {
            get { return _faDokumenteID; }
            set
            {
                if (_faDokumenteID != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'FaDokumenteID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _faDokumenteID = value;
                    OnPropertyChanged("FaDokumenteID");
                }
            }
        }
        private int _faDokumenteID;
    
        [DataMember]
        public int FaLeistungID
        {
            get { return _faLeistungID; }
            set
            {
                if (_faLeistungID != value)
                {
                    ChangeTracker.RecordOriginalValue("FaLeistungID", _faLeistungID);
                    if (!IsDeserializing)
                    {
                        if (FaLeistung != null && FaLeistung.FaLeistungID != value)
                        {
                            FaLeistung = null;
                        }
                    }
                    _faLeistungID = value;
                    OnPropertyChanged("FaLeistungID");
                }
            }
        }
        private int _faLeistungID;
    
        [DataMember]
        public Nullable<int> BaPersonID_LT
        {
            get { return _baPersonID_LT; }
            set
            {
                if (_baPersonID_LT != value)
                {
                    ChangeTracker.RecordOriginalValue("BaPersonID_LT", _baPersonID_LT);
                    if (!IsDeserializing)
                    {
                        if (BaPerson_LT != null && BaPerson_LT.BaPersonID != value)
                        {
                            BaPerson_LT = null;
                        }
                    }
                    _baPersonID_LT = value;
                    OnPropertyChanged("BaPersonID_LT");
                }
            }
        }
        private Nullable<int> _baPersonID_LT;
    
        [DataMember]
        public Nullable<int> BaPersonID_Adressat
        {
            get { return _baPersonID_Adressat; }
            set
            {
                if (_baPersonID_Adressat != value)
                {
                    ChangeTracker.RecordOriginalValue("BaPersonID_Adressat", _baPersonID_Adressat);
                    if (!IsDeserializing)
                    {
                        if (BaPerson_Adressat != null && BaPerson_Adressat.BaPersonID != value)
                        {
                            BaPerson_Adressat = null;
                        }
                    }
                    _baPersonID_Adressat = value;
                    OnPropertyChanged("BaPersonID_Adressat");
                }
            }
        }
        private Nullable<int> _baPersonID_Adressat;
    
        [DataMember]
        public Nullable<int> BaInstitutionID_Adressat
        {
            get { return _baInstitutionID_Adressat; }
            set
            {
                if (_baInstitutionID_Adressat != value)
                {
                    ChangeTracker.RecordOriginalValue("BaInstitutionID_Adressat", _baInstitutionID_Adressat);
                    if (!IsDeserializing)
                    {
                        if (BaInstitution != null && BaInstitution.BaInstitutionID != value)
                        {
                            BaInstitution = null;
                        }
                    }
                    _baInstitutionID_Adressat = value;
                    OnPropertyChanged("BaInstitutionID_Adressat");
                }
            }
        }
        private Nullable<int> _baInstitutionID_Adressat;
    
        [DataMember]
        public Nullable<int> VmPriMaID_Adressat
        {
            get { return _vmPriMaID_Adressat; }
            set
            {
                if (_vmPriMaID_Adressat != value)
                {
                    _vmPriMaID_Adressat = value;
                    OnPropertyChanged("VmPriMaID_Adressat");
                }
            }
        }
        private Nullable<int> _vmPriMaID_Adressat;
    
        [DataMember]
        public Nullable<int> UserID_Absender
        {
            get { return _userID_Absender; }
            set
            {
                if (_userID_Absender != value)
                {
                    ChangeTracker.RecordOriginalValue("UserID_Absender", _userID_Absender);
                    if (!IsDeserializing)
                    {
                        if (XUser_Absender != null && XUser_Absender.UserID != value)
                        {
                            XUser_Absender = null;
                        }
                    }
                    _userID_Absender = value;
                    OnPropertyChanged("UserID_Absender");
                }
            }
        }
        private Nullable<int> _userID_Absender;
    
        [DataMember]
        public Nullable<int> UserID_VisumBeantragtDurch
        {
            get { return _userID_VisumBeantragtDurch; }
            set
            {
                if (_userID_VisumBeantragtDurch != value)
                {
                    ChangeTracker.RecordOriginalValue("UserID_VisumBeantragtDurch", _userID_VisumBeantragtDurch);
                    if (!IsDeserializing)
                    {
                        if (XUser_VisumBeantragtDurch != null && XUser_VisumBeantragtDurch.UserID != value)
                        {
                            XUser_VisumBeantragtDurch = null;
                        }
                    }
                    _userID_VisumBeantragtDurch = value;
                    OnPropertyChanged("UserID_VisumBeantragtDurch");
                }
            }
        }
        private Nullable<int> _userID_VisumBeantragtDurch;
    
        [DataMember]
        public Nullable<int> UserID_VisumBeantragtBei
        {
            get { return _userID_VisumBeantragtBei; }
            set
            {
                if (_userID_VisumBeantragtBei != value)
                {
                    ChangeTracker.RecordOriginalValue("UserID_VisumBeantragtBei", _userID_VisumBeantragtBei);
                    if (!IsDeserializing)
                    {
                        if (XUser_VisumBeantragtBei != null && XUser_VisumBeantragtBei.UserID != value)
                        {
                            XUser_VisumBeantragtBei = null;
                        }
                    }
                    _userID_VisumBeantragtBei = value;
                    OnPropertyChanged("UserID_VisumBeantragtBei");
                }
            }
        }
        private Nullable<int> _userID_VisumBeantragtBei;
    
        [DataMember]
        public Nullable<int> UserID_VisiertDurch
        {
            get { return _userID_VisiertDurch; }
            set
            {
                if (_userID_VisiertDurch != value)
                {
                    ChangeTracker.RecordOriginalValue("UserID_VisiertDurch", _userID_VisiertDurch);
                    if (!IsDeserializing)
                    {
                        if (XUser_VisiertDurch != null && XUser_VisiertDurch.UserID != value)
                        {
                            XUser_VisiertDurch = null;
                        }
                    }
                    _userID_VisiertDurch = value;
                    OnPropertyChanged("UserID_VisiertDurch");
                }
            }
        }
        private Nullable<int> _userID_VisiertDurch;
    
        [DataMember]
        public Nullable<int> UserID_EkVisumUser
        {
            get { return _userID_EkVisumUser; }
            set
            {
                if (_userID_EkVisumUser != value)
                {
                    ChangeTracker.RecordOriginalValue("UserID_EkVisumUser", _userID_EkVisumUser);
                    if (!IsDeserializing)
                    {
                        if (XUser_EkVisum != null && XUser_EkVisum.UserID != value)
                        {
                            XUser_EkVisum = null;
                        }
                    }
                    _userID_EkVisumUser = value;
                    OnPropertyChanged("UserID_EkVisumUser");
                }
            }
        }
        private Nullable<int> _userID_EkVisumUser;
    
        [DataMember]
        public Nullable<int> DocumentID
        {
            get { return _documentID; }
            set
            {
                if (_documentID != value)
                {
                    ChangeTracker.RecordOriginalValue("DocumentID", _documentID);
                    if (!IsDeserializing)
                    {
                        if (XDocument != null && XDocument.DocumentID != value)
                        {
                            XDocument = null;
                        }
                    }
                    _documentID = value;
                    OnPropertyChanged("DocumentID");
                }
            }
        }
        private Nullable<int> _documentID;
    
        [DataMember]
        public Nullable<int> DocumentID_Merkblatt
        {
            get { return _documentID_Merkblatt; }
            set
            {
                if (_documentID_Merkblatt != value)
                {
                    ChangeTracker.RecordOriginalValue("DocumentID_Merkblatt", _documentID_Merkblatt);
                    if (!IsDeserializing)
                    {
                        if (XDocument_Merkblatt != null && XDocument_Merkblatt.DocumentID != value)
                        {
                            XDocument_Merkblatt = null;
                        }
                    }
                    _documentID_Merkblatt = value;
                    OnPropertyChanged("DocumentID_Merkblatt");
                }
            }
        }
        private Nullable<int> _documentID_Merkblatt;
    
        [DataMember]
        public Nullable<System.DateTime> DatumErstellung
        {
            get { return _datumErstellung; }
            set
            {
                if (_datumErstellung != value)
                {
                    _datumErstellung = value;
                    OnPropertyChanged("DatumErstellung");
                }
            }
        }
        private Nullable<System.DateTime> _datumErstellung;
    
        [DataMember]
        public Nullable<int> StatusCode
        {
            get { return _statusCode; }
            set
            {
                if (_statusCode != value)
                {
                    _statusCode = value;
                    OnPropertyChanged("StatusCode");
                }
            }
        }
        private Nullable<int> _statusCode;
    
        [DataMember]
        public Nullable<System.DateTime> PendenzDatum
        {
            get { return _pendenzDatum; }
            set
            {
                if (_pendenzDatum != value)
                {
                    _pendenzDatum = value;
                    OnPropertyChanged("PendenzDatum");
                }
            }
        }
        private Nullable<System.DateTime> _pendenzDatum;
    
        [DataMember]
        public Nullable<bool> PendenzErledigt
        {
            get { return _pendenzErledigt; }
            set
            {
                if (_pendenzErledigt != value)
                {
                    _pendenzErledigt = value;
                    OnPropertyChanged("PendenzErledigt");
                }
            }
        }
        private Nullable<bool> _pendenzErledigt;
    
        [DataMember]
        public Nullable<int> VmErbDienstCode
        {
            get { return _vmErbDienstCode; }
            set
            {
                if (_vmErbDienstCode != value)
                {
                    _vmErbDienstCode = value;
                    OnPropertyChanged("VmErbDienstCode");
                }
            }
        }
        private Nullable<int> _vmErbDienstCode;
    
        [DataMember]
        public Nullable<int> FaDauerCode
        {
            get { return _faDauerCode; }
            set
            {
                if (_faDauerCode != value)
                {
                    _faDauerCode = value;
                    OnPropertyChanged("FaDauerCode");
                }
            }
        }
        private Nullable<int> _faDauerCode;
    
        [DataMember]
        public string Stichwort
        {
            get { return _stichwort; }
            set
            {
                if (_stichwort != value)
                {
                    _stichwort = value;
                    OnPropertyChanged("Stichwort");
                }
            }
        }
        private string _stichwort;
    
        [DataMember]
        public Nullable<int> EingangAusgang
        {
            get { return _eingangAusgang; }
            set
            {
                if (_eingangAusgang != value)
                {
                    _eingangAusgang = value;
                    OnPropertyChanged("EingangAusgang");
                }
            }
        }
        private Nullable<int> _eingangAusgang;
    
        [DataMember]
        public Nullable<int> ThemaCode
        {
            get { return _themaCode; }
            set
            {
                if (_themaCode != value)
                {
                    _themaCode = value;
                    OnPropertyChanged("ThemaCode");
                }
            }
        }
        private Nullable<int> _themaCode;
    
        [DataMember]
        public Nullable<System.DateTime> VisumBeantragtDatum
        {
            get { return _visumBeantragtDatum; }
            set
            {
                if (_visumBeantragtDatum != value)
                {
                    _visumBeantragtDatum = value;
                    OnPropertyChanged("VisumBeantragtDatum");
                }
            }
        }
        private Nullable<System.DateTime> _visumBeantragtDatum;
    
        [DataMember]
        public Nullable<System.DateTime> VisiertDatum
        {
            get { return _visiertDatum; }
            set
            {
                if (_visiertDatum != value)
                {
                    _visiertDatum = value;
                    OnPropertyChanged("VisiertDatum");
                }
            }
        }
        private Nullable<System.DateTime> _visiertDatum;
    
        [DataMember]
        public Nullable<int> EkStatusCode
        {
            get { return _ekStatusCode; }
            set
            {
                if (_ekStatusCode != value)
                {
                    _ekStatusCode = value;
                    OnPropertyChanged("EkStatusCode");
                }
            }
        }
        private Nullable<int> _ekStatusCode;
    
        [DataMember]
        public Nullable<int> EkLaufNr
        {
            get { return _ekLaufNr; }
            set
            {
                if (_ekLaufNr != value)
                {
                    _ekLaufNr = value;
                    OnPropertyChanged("EkLaufNr");
                }
            }
        }
        private Nullable<int> _ekLaufNr;
    
        [DataMember]
        public Nullable<int> EkKW
        {
            get { return _ekKW; }
            set
            {
                if (_ekKW != value)
                {
                    _ekKW = value;
                    OnPropertyChanged("EkKW");
                }
            }
        }
        private Nullable<int> _ekKW;
    
        [DataMember]
        public Nullable<int> EkJahr
        {
            get { return _ekJahr; }
            set
            {
                if (_ekJahr != value)
                {
                    _ekJahr = value;
                    OnPropertyChanged("EkJahr");
                }
            }
        }
        private Nullable<int> _ekJahr;
    
        [DataMember]
        public Nullable<System.DateTime> EkVisumDatum
        {
            get { return _ekVisumDatum; }
            set
            {
                if (_ekVisumDatum != value)
                {
                    _ekVisumDatum = value;
                    OnPropertyChanged("EkVisumDatum");
                }
            }
        }
        private Nullable<System.DateTime> _ekVisumDatum;
    
        [DataMember]
        public string Bemerkung
        {
            get { return _bemerkung; }
            set
            {
                if (_bemerkung != value)
                {
                    _bemerkung = value;
                    OnPropertyChanged("Bemerkung");
                }
            }
        }
        private string _bemerkung;
    
        [DataMember]
        public string FaThemaCodes
        {
            get { return _faThemaCodes; }
            set
            {
                if (_faThemaCodes != value)
                {
                    _faThemaCodes = value;
                    OnPropertyChanged("FaThemaCodes");
                }
            }
        }
        private string _faThemaCodes;
    
        [DataMember]
        public bool Vertraulich
        {
            get { return _vertraulich; }
            set
            {
                if (_vertraulich != value)
                {
                    _vertraulich = value;
                    OnPropertyChanged("Vertraulich");
                }
            }
        }
        private bool _vertraulich;
    
        [DataMember]
        public bool IsDeleted
        {
            get { return _isDeleted; }
            set
            {
                if (_isDeleted != value)
                {
                    _isDeleted = value;
                    OnPropertyChanged("IsDeleted");
                }
            }
        }
        private bool _isDeleted;
    
        [DataMember]
        public bool IstBericht
        {
            get { return _istBericht; }
            set
            {
                if (_istBericht != value)
                {
                    _istBericht = value;
                    OnPropertyChanged("IstBericht");
                }
            }
        }
        private bool _istBericht;
    
        [DataMember]
        public string Creator
        {
            get { return _creator; }
            set
            {
                if (_creator != value)
                {
                    _creator = value;
                    OnPropertyChanged("Creator");
                }
            }
        }
        private string _creator;
    
        [DataMember]
        public System.DateTime Created
        {
            get { return _created; }
            set
            {
                if (_created != value)
                {
                    _created = value;
                    OnPropertyChanged("Created");
                }
            }
        }
        private System.DateTime _created;
    
        [DataMember]
        public string Modifier
        {
            get { return _modifier; }
            set
            {
                if (_modifier != value)
                {
                    _modifier = value;
                    OnPropertyChanged("Modifier");
                }
            }
        }
        private string _modifier;
    
        [DataMember]
        public System.DateTime Modified
        {
            get { return _modified; }
            set
            {
                if (_modified != value)
                {
                    _modified = value;
                    OnPropertyChanged("Modified");
                }
            }
        }
        private System.DateTime _modified;
    
        [DataMember]
        public byte[] FaDokumenteTS
        {
            get { return _faDokumenteTS; }
            set
            {
                if (_faDokumenteTS != value)
                {
                    _faDokumenteTS = value;
                    OnPropertyChanged("FaDokumenteTS");
                }
            }
        }
        private byte[] _faDokumenteTS;
    
        [DataMember]
        public string BaPersonIDs
        {
            get { return _baPersonIDs; }
            set
            {
                if (_baPersonIDs != value)
                {
                    _baPersonIDs = value;
                    OnPropertyChanged("BaPersonIDs");
                }
            }
        }
        private string _baPersonIDs;

        #endregion

        #region Navigation Properties
    
        [DataMember]
        public BaInstitution BaInstitution
        {
            get { return _baInstitution; }
            set
            {
                if (!ReferenceEquals(_baInstitution, value))
                {
                    var previousValue = _baInstitution;
                    _baInstitution = value;
                    FixupBaInstitution(previousValue);
                    OnNavigationPropertyChanged("BaInstitution");
                }
            }
        }
        private BaInstitution _baInstitution;
    
        [DataMember]
        public BaPerson BaPerson_Adressat
        {
            get { return _baPerson_Adressat; }
            set
            {
                if (!ReferenceEquals(_baPerson_Adressat, value))
                {
                    var previousValue = _baPerson_Adressat;
                    _baPerson_Adressat = value;
                    FixupBaPerson_Adressat(previousValue);
                    OnNavigationPropertyChanged("BaPerson_Adressat");
                }
            }
        }
        private BaPerson _baPerson_Adressat;
    
        [DataMember]
        public BaPerson BaPerson_LT
        {
            get { return _baPerson_LT; }
            set
            {
                if (!ReferenceEquals(_baPerson_LT, value))
                {
                    var previousValue = _baPerson_LT;
                    _baPerson_LT = value;
                    FixupBaPerson_LT(previousValue);
                    OnNavigationPropertyChanged("BaPerson_LT");
                }
            }
        }
        private BaPerson _baPerson_LT;
    
        [DataMember]
        public FaLeistung FaLeistung
        {
            get { return _faLeistung; }
            set
            {
                if (!ReferenceEquals(_faLeistung, value))
                {
                    var previousValue = _faLeistung;
                    _faLeistung = value;
                    FixupFaLeistung(previousValue);
                    OnNavigationPropertyChanged("FaLeistung");
                }
            }
        }
        private FaLeistung _faLeistung;
    
        [DataMember]
        public XUser XUser_Absender
        {
            get { return _xUser_Absender; }
            set
            {
                if (!ReferenceEquals(_xUser_Absender, value))
                {
                    var previousValue = _xUser_Absender;
                    _xUser_Absender = value;
                    FixupXUser_Absender(previousValue);
                    OnNavigationPropertyChanged("XUser_Absender");
                }
            }
        }
        private XUser _xUser_Absender;
    
        [DataMember]
        public XUser XUser_EkVisum
        {
            get { return _xUser_EkVisum; }
            set
            {
                if (!ReferenceEquals(_xUser_EkVisum, value))
                {
                    var previousValue = _xUser_EkVisum;
                    _xUser_EkVisum = value;
                    FixupXUser_EkVisum(previousValue);
                    OnNavigationPropertyChanged("XUser_EkVisum");
                }
            }
        }
        private XUser _xUser_EkVisum;
    
        [DataMember]
        public XUser XUser_VisiertDurch
        {
            get { return _xUser_VisiertDurch; }
            set
            {
                if (!ReferenceEquals(_xUser_VisiertDurch, value))
                {
                    var previousValue = _xUser_VisiertDurch;
                    _xUser_VisiertDurch = value;
                    FixupXUser_VisiertDurch(previousValue);
                    OnNavigationPropertyChanged("XUser_VisiertDurch");
                }
            }
        }
        private XUser _xUser_VisiertDurch;
    
        [DataMember]
        public XUser XUser_VisumBeantragtBei
        {
            get { return _xUser_VisumBeantragtBei; }
            set
            {
                if (!ReferenceEquals(_xUser_VisumBeantragtBei, value))
                {
                    var previousValue = _xUser_VisumBeantragtBei;
                    _xUser_VisumBeantragtBei = value;
                    FixupXUser_VisumBeantragtBei(previousValue);
                    OnNavigationPropertyChanged("XUser_VisumBeantragtBei");
                }
            }
        }
        private XUser _xUser_VisumBeantragtBei;
    
        [DataMember]
        public XUser XUser_VisumBeantragtDurch
        {
            get { return _xUser_VisumBeantragtDurch; }
            set
            {
                if (!ReferenceEquals(_xUser_VisumBeantragtDurch, value))
                {
                    var previousValue = _xUser_VisumBeantragtDurch;
                    _xUser_VisumBeantragtDurch = value;
                    FixupXUser_VisumBeantragtDurch(previousValue);
                    OnNavigationPropertyChanged("XUser_VisumBeantragtDurch");
                }
            }
        }
        private XUser _xUser_VisumBeantragtDurch;
    
        [DataMember]
        public XDocument XDocument
        {
            get { return _xDocument; }
            set
            {
                if (!ReferenceEquals(_xDocument, value))
                {
                    var previousValue = _xDocument;
                    _xDocument = value;
                    FixupXDocument(previousValue);
                    OnNavigationPropertyChanged("XDocument");
                }
            }
        }
        private XDocument _xDocument;
    
        [DataMember]
        public XDocument XDocument_Merkblatt
        {
            get { return _xDocument_Merkblatt; }
            set
            {
                if (!ReferenceEquals(_xDocument_Merkblatt, value))
                {
                    var previousValue = _xDocument_Merkblatt;
                    _xDocument_Merkblatt = value;
                    FixupXDocument_Merkblatt(previousValue);
                    OnNavigationPropertyChanged("XDocument_Merkblatt");
                }
            }
        }
        private XDocument _xDocument_Merkblatt;

        #endregion

        #region ChangeTracking
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected override void ClearNavigationProperties()
        {
            BaInstitution = null;
            BaPerson_Adressat = null;
            BaPerson_LT = null;
            FaLeistung = null;
            XUser_Absender = null;
            XUser_EkVisum = null;
            XUser_VisiertDurch = null;
            XUser_VisumBeantragtBei = null;
            XUser_VisumBeantragtDurch = null;
            XDocument = null;
            XDocument_Merkblatt = null;
        }

        #endregion

        #region Association Fixup
    
        private void FixupBaInstitution(BaInstitution previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.FaDokumente.Contains(this))
            {
                previousValue.FaDokumente.Remove(this);
            }
    
            if (BaInstitution != null)
            {
                if (!BaInstitution.FaDokumente.Contains(this))
                {
                    BaInstitution.FaDokumente.Add(this);
                }
    
                BaInstitutionID_Adressat = BaInstitution.BaInstitutionID;
            }
            else if (!skipKeys)
            {
                BaInstitutionID_Adressat = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("BaInstitution")
                    && (ChangeTracker.OriginalValues["BaInstitution"] == BaInstitution))
                {
                    ChangeTracker.OriginalValues.Remove("BaInstitution");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("BaInstitution", previousValue);
                }
                if (BaInstitution != null && !BaInstitution.ChangeTracker.ChangeTrackingEnabled)
                {
                    BaInstitution.StartTracking();
                }
            }
        }
    
        private void FixupBaPerson_Adressat(BaPerson previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.FaDokumente_IsAdressatOf.Contains(this))
            {
                previousValue.FaDokumente_IsAdressatOf.Remove(this);
            }
    
            if (BaPerson_Adressat != null)
            {
                if (!BaPerson_Adressat.FaDokumente_IsAdressatOf.Contains(this))
                {
                    BaPerson_Adressat.FaDokumente_IsAdressatOf.Add(this);
                }
    
                BaPersonID_Adressat = BaPerson_Adressat.BaPersonID;
            }
            else if (!skipKeys)
            {
                BaPersonID_Adressat = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("BaPerson_Adressat")
                    && (ChangeTracker.OriginalValues["BaPerson_Adressat"] == BaPerson_Adressat))
                {
                    ChangeTracker.OriginalValues.Remove("BaPerson_Adressat");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("BaPerson_Adressat", previousValue);
                }
                if (BaPerson_Adressat != null && !BaPerson_Adressat.ChangeTracker.ChangeTrackingEnabled)
                {
                    BaPerson_Adressat.StartTracking();
                }
            }
        }
    
        private void FixupBaPerson_LT(BaPerson previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.FaDokumente_IsLtOf.Contains(this))
            {
                previousValue.FaDokumente_IsLtOf.Remove(this);
            }
    
            if (BaPerson_LT != null)
            {
                if (!BaPerson_LT.FaDokumente_IsLtOf.Contains(this))
                {
                    BaPerson_LT.FaDokumente_IsLtOf.Add(this);
                }
    
                BaPersonID_LT = BaPerson_LT.BaPersonID;
            }
            else if (!skipKeys)
            {
                BaPersonID_LT = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("BaPerson_LT")
                    && (ChangeTracker.OriginalValues["BaPerson_LT"] == BaPerson_LT))
                {
                    ChangeTracker.OriginalValues.Remove("BaPerson_LT");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("BaPerson_LT", previousValue);
                }
                if (BaPerson_LT != null && !BaPerson_LT.ChangeTracker.ChangeTrackingEnabled)
                {
                    BaPerson_LT.StartTracking();
                }
            }
        }
    
        private void FixupFaLeistung(FaLeistung previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.FaDokumente.Contains(this))
            {
                previousValue.FaDokumente.Remove(this);
            }
    
            if (FaLeistung != null)
            {
                if (!FaLeistung.FaDokumente.Contains(this))
                {
                    FaLeistung.FaDokumente.Add(this);
                }
    
                FaLeistungID = FaLeistung.FaLeistungID;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("FaLeistung")
                    && (ChangeTracker.OriginalValues["FaLeistung"] == FaLeistung))
                {
                    ChangeTracker.OriginalValues.Remove("FaLeistung");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("FaLeistung", previousValue);
                }
                if (FaLeistung != null && !FaLeistung.ChangeTracker.ChangeTrackingEnabled)
                {
                    FaLeistung.StartTracking();
                }
            }
        }
    
        private void FixupXUser_Absender(XUser previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.FaDokumente_IsAbsenderOf.Contains(this))
            {
                previousValue.FaDokumente_IsAbsenderOf.Remove(this);
            }
    
            if (XUser_Absender != null)
            {
                if (!XUser_Absender.FaDokumente_IsAbsenderOf.Contains(this))
                {
                    XUser_Absender.FaDokumente_IsAbsenderOf.Add(this);
                }
    
                UserID_Absender = XUser_Absender.UserID;
            }
            else if (!skipKeys)
            {
                UserID_Absender = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("XUser_Absender")
                    && (ChangeTracker.OriginalValues["XUser_Absender"] == XUser_Absender))
                {
                    ChangeTracker.OriginalValues.Remove("XUser_Absender");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("XUser_Absender", previousValue);
                }
                if (XUser_Absender != null && !XUser_Absender.ChangeTracker.ChangeTrackingEnabled)
                {
                    XUser_Absender.StartTracking();
                }
            }
        }
    
        private void FixupXUser_EkVisum(XUser previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.FaDokumente_IsEkVisumOf.Contains(this))
            {
                previousValue.FaDokumente_IsEkVisumOf.Remove(this);
            }
    
            if (XUser_EkVisum != null)
            {
                if (!XUser_EkVisum.FaDokumente_IsEkVisumOf.Contains(this))
                {
                    XUser_EkVisum.FaDokumente_IsEkVisumOf.Add(this);
                }
    
                UserID_EkVisumUser = XUser_EkVisum.UserID;
            }
            else if (!skipKeys)
            {
                UserID_EkVisumUser = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("XUser_EkVisum")
                    && (ChangeTracker.OriginalValues["XUser_EkVisum"] == XUser_EkVisum))
                {
                    ChangeTracker.OriginalValues.Remove("XUser_EkVisum");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("XUser_EkVisum", previousValue);
                }
                if (XUser_EkVisum != null && !XUser_EkVisum.ChangeTracker.ChangeTrackingEnabled)
                {
                    XUser_EkVisum.StartTracking();
                }
            }
        }
    
        private void FixupXUser_VisiertDurch(XUser previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.FaDokumente_IsVisiertDurchOf.Contains(this))
            {
                previousValue.FaDokumente_IsVisiertDurchOf.Remove(this);
            }
    
            if (XUser_VisiertDurch != null)
            {
                if (!XUser_VisiertDurch.FaDokumente_IsVisiertDurchOf.Contains(this))
                {
                    XUser_VisiertDurch.FaDokumente_IsVisiertDurchOf.Add(this);
                }
    
                UserID_VisiertDurch = XUser_VisiertDurch.UserID;
            }
            else if (!skipKeys)
            {
                UserID_VisiertDurch = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("XUser_VisiertDurch")
                    && (ChangeTracker.OriginalValues["XUser_VisiertDurch"] == XUser_VisiertDurch))
                {
                    ChangeTracker.OriginalValues.Remove("XUser_VisiertDurch");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("XUser_VisiertDurch", previousValue);
                }
                if (XUser_VisiertDurch != null && !XUser_VisiertDurch.ChangeTracker.ChangeTrackingEnabled)
                {
                    XUser_VisiertDurch.StartTracking();
                }
            }
        }
    
        private void FixupXUser_VisumBeantragtBei(XUser previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.FaDokumente_IsVisumBeantragtBeiOf.Contains(this))
            {
                previousValue.FaDokumente_IsVisumBeantragtBeiOf.Remove(this);
            }
    
            if (XUser_VisumBeantragtBei != null)
            {
                if (!XUser_VisumBeantragtBei.FaDokumente_IsVisumBeantragtBeiOf.Contains(this))
                {
                    XUser_VisumBeantragtBei.FaDokumente_IsVisumBeantragtBeiOf.Add(this);
                }
    
                UserID_VisumBeantragtBei = XUser_VisumBeantragtBei.UserID;
            }
            else if (!skipKeys)
            {
                UserID_VisumBeantragtBei = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("XUser_VisumBeantragtBei")
                    && (ChangeTracker.OriginalValues["XUser_VisumBeantragtBei"] == XUser_VisumBeantragtBei))
                {
                    ChangeTracker.OriginalValues.Remove("XUser_VisumBeantragtBei");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("XUser_VisumBeantragtBei", previousValue);
                }
                if (XUser_VisumBeantragtBei != null && !XUser_VisumBeantragtBei.ChangeTracker.ChangeTrackingEnabled)
                {
                    XUser_VisumBeantragtBei.StartTracking();
                }
            }
        }
    
        private void FixupXUser_VisumBeantragtDurch(XUser previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.FaDokumente_IsVisumBeantragtDurchOf.Contains(this))
            {
                previousValue.FaDokumente_IsVisumBeantragtDurchOf.Remove(this);
            }
    
            if (XUser_VisumBeantragtDurch != null)
            {
                if (!XUser_VisumBeantragtDurch.FaDokumente_IsVisumBeantragtDurchOf.Contains(this))
                {
                    XUser_VisumBeantragtDurch.FaDokumente_IsVisumBeantragtDurchOf.Add(this);
                }
    
                UserID_VisumBeantragtDurch = XUser_VisumBeantragtDurch.UserID;
            }
            else if (!skipKeys)
            {
                UserID_VisumBeantragtDurch = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("XUser_VisumBeantragtDurch")
                    && (ChangeTracker.OriginalValues["XUser_VisumBeantragtDurch"] == XUser_VisumBeantragtDurch))
                {
                    ChangeTracker.OriginalValues.Remove("XUser_VisumBeantragtDurch");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("XUser_VisumBeantragtDurch", previousValue);
                }
                if (XUser_VisumBeantragtDurch != null && !XUser_VisumBeantragtDurch.ChangeTracker.ChangeTrackingEnabled)
                {
                    XUser_VisumBeantragtDurch.StartTracking();
                }
            }
        }
    
        private void FixupXDocument(XDocument previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.FaDokumente.Contains(this))
            {
                previousValue.FaDokumente.Remove(this);
            }
    
            if (XDocument != null)
            {
                if (!XDocument.FaDokumente.Contains(this))
                {
                    XDocument.FaDokumente.Add(this);
                }
    
                DocumentID = XDocument.DocumentID;
            }
            else if (!skipKeys)
            {
                DocumentID = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("XDocument")
                    && (ChangeTracker.OriginalValues["XDocument"] == XDocument))
                {
                    ChangeTracker.OriginalValues.Remove("XDocument");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("XDocument", previousValue);
                }
                if (XDocument != null && !XDocument.ChangeTracker.ChangeTrackingEnabled)
                {
                    XDocument.StartTracking();
                }
            }
        }
    
        private void FixupXDocument_Merkblatt(XDocument previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.FaDokumente_Merkblatt.Contains(this))
            {
                previousValue.FaDokumente_Merkblatt.Remove(this);
            }
    
            if (XDocument_Merkblatt != null)
            {
                if (!XDocument_Merkblatt.FaDokumente_Merkblatt.Contains(this))
                {
                    XDocument_Merkblatt.FaDokumente_Merkblatt.Add(this);
                }
    
                DocumentID_Merkblatt = XDocument_Merkblatt.DocumentID;
            }
            else if (!skipKeys)
            {
                DocumentID_Merkblatt = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("XDocument_Merkblatt")
                    && (ChangeTracker.OriginalValues["XDocument_Merkblatt"] == XDocument_Merkblatt))
                {
                    ChangeTracker.OriginalValues.Remove("XDocument_Merkblatt");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("XDocument_Merkblatt", previousValue);
                }
                if (XDocument_Merkblatt != null && !XDocument_Merkblatt.ChangeTracker.ChangeTrackingEnabled)
                {
                    XDocument_Merkblatt.StartTracking();
                }
            }
        }

        #endregion

        #region Methods
    
    	public override bool Equals(object obj)
    	{
    		if (obj == null)
    		{
    			return false;
    		}
    		
    		if (ReferenceEquals(this, obj))
    		{
    			return true;
    		}
    
    		if (GetType() != obj.GetType())
    		{
    			return false;
    		}
    
    		var entity = (FaDokumente)obj;
    		if (!_faDokumenteID.Equals(entity.FaDokumenteID) || _faDokumenteID == 0)
    		{
    			return false;
    		}
    		
    		return true;
    	}
    	
    	public override int GetHashCode()
        {
            return _faDokumenteID.GetHashCode();
        }

        #endregion

    }
}

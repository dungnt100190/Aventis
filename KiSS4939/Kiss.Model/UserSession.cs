//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace Kiss.Model
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(XUser))]
    public partial class UserSession: EntityBase<UserSession>, IObjectWithChangeTracker
    {
        #region Primitive Properties
    
        [DataMember]
        public int UserSessionID
        {
            get { return _userSessionID; }
            set
            {
                if (_userSessionID != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'UserSessionID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _userSessionID = value;
                    OnPropertyChanged("UserSessionID");
                }
            }
        }
        private int _userSessionID;
    
        [DataMember]
        public int UserID
        {
            get { return _userID; }
            set
            {
                if (_userID != value)
                {
                    ChangeTracker.RecordOriginalValue("UserID", _userID);
                    if (!IsDeserializing)
                    {
                        if (XUser != null && XUser.UserID != value)
                        {
                            XUser = null;
                        }
                    }
                    _userID = value;
                    OnPropertyChanged("UserID");
                }
            }
        }
        private int _userID;
    
        [DataMember]
        public string LogonName
        {
            get { return _logonName; }
            set
            {
                if (_logonName != value)
                {
                    _logonName = value;
                    OnPropertyChanged("LogonName");
                }
            }
        }
        private string _logonName;
    
        [DataMember]
        public System.DateTime LoginDatum
        {
            get { return _loginDatum; }
            set
            {
                if (_loginDatum != value)
                {
                    _loginDatum = value;
                    OnPropertyChanged("LoginDatum");
                }
            }
        }
        private System.DateTime _loginDatum;
    
        [DataMember]
        public Nullable<System.DateTime> LogoutDatum
        {
            get { return _logoutDatum; }
            set
            {
                if (_logoutDatum != value)
                {
                    _logoutDatum = value;
                    OnPropertyChanged("LogoutDatum");
                }
            }
        }
        private Nullable<System.DateTime> _logoutDatum;
    
        [DataMember]
        public string UserName
        {
            get { return _userName; }
            set
            {
                if (_userName != value)
                {
                    _userName = value;
                    OnPropertyChanged("UserName");
                }
            }
        }
        private string _userName;
    
        [DataMember]
        public string UserDomainName
        {
            get { return _userDomainName; }
            set
            {
                if (_userDomainName != value)
                {
                    _userDomainName = value;
                    OnPropertyChanged("UserDomainName");
                }
            }
        }
        private string _userDomainName;
    
        [DataMember]
        public string MachineName
        {
            get { return _machineName; }
            set
            {
                if (_machineName != value)
                {
                    _machineName = value;
                    OnPropertyChanged("MachineName");
                }
            }
        }
        private string _machineName;
    
        [DataMember]
        public string ClientVersion
        {
            get { return _clientVersion; }
            set
            {
                if (_clientVersion != value)
                {
                    _clientVersion = value;
                    OnPropertyChanged("ClientVersion");
                }
            }
        }
        private string _clientVersion;
    
        [DataMember]
        public string WindowsVersion
        {
            get { return _windowsVersion; }
            set
            {
                if (_windowsVersion != value)
                {
                    _windowsVersion = value;
                    OnPropertyChanged("WindowsVersion");
                }
            }
        }
        private string _windowsVersion;
    
        [DataMember]
        public string DotNetVersion
        {
            get { return _dotNetVersion; }
            set
            {
                if (_dotNetVersion != value)
                {
                    _dotNetVersion = value;
                    OnPropertyChanged("DotNetVersion");
                }
            }
        }
        private string _dotNetVersion;
    
        [DataMember]
        public Nullable<int> AufloesungBreite
        {
            get { return _aufloesungBreite; }
            set
            {
                if (_aufloesungBreite != value)
                {
                    _aufloesungBreite = value;
                    OnPropertyChanged("AufloesungBreite");
                }
            }
        }
        private Nullable<int> _aufloesungBreite;
    
        [DataMember]
        public Nullable<int> AufloesungHoehe
        {
            get { return _aufloesungHoehe; }
            set
            {
                if (_aufloesungHoehe != value)
                {
                    _aufloesungHoehe = value;
                    OnPropertyChanged("AufloesungHoehe");
                }
            }
        }
        private Nullable<int> _aufloesungHoehe;
    
        [DataMember]
        public string OfficeVersionWord
        {
            get { return _officeVersionWord; }
            set
            {
                if (_officeVersionWord != value)
                {
                    _officeVersionWord = value;
                    OnPropertyChanged("OfficeVersionWord");
                }
            }
        }
        private string _officeVersionWord;
    
        [DataMember]
        public string OfficeVersionExcel
        {
            get { return _officeVersionExcel; }
            set
            {
                if (_officeVersionExcel != value)
                {
                    _officeVersionExcel = value;
                    OnPropertyChanged("OfficeVersionExcel");
                }
            }
        }
        private string _officeVersionExcel;
    
        [DataMember]
        public string OfficeVersionOutlook
        {
            get { return _officeVersionOutlook; }
            set
            {
                if (_officeVersionOutlook != value)
                {
                    _officeVersionOutlook = value;
                    OnPropertyChanged("OfficeVersionOutlook");
                }
            }
        }
        private string _officeVersionOutlook;
    
        [DataMember]
        public string CultureInfo
        {
            get { return _cultureInfo; }
            set
            {
                if (_cultureInfo != value)
                {
                    _cultureInfo = value;
                    OnPropertyChanged("CultureInfo");
                }
            }
        }
        private string _cultureInfo;
    
        [DataMember]
        public string Creator
        {
            get { return _creator; }
            set
            {
                if (_creator != value)
                {
                    _creator = value;
                    OnPropertyChanged("Creator");
                }
            }
        }
        private string _creator;
    
        [DataMember]
        public System.DateTime Created
        {
            get { return _created; }
            set
            {
                if (_created != value)
                {
                    _created = value;
                    OnPropertyChanged("Created");
                }
            }
        }
        private System.DateTime _created;
    
        [DataMember]
        public string Modifier
        {
            get { return _modifier; }
            set
            {
                if (_modifier != value)
                {
                    _modifier = value;
                    OnPropertyChanged("Modifier");
                }
            }
        }
        private string _modifier;
    
        [DataMember]
        public System.DateTime Modified
        {
            get { return _modified; }
            set
            {
                if (_modified != value)
                {
                    _modified = value;
                    OnPropertyChanged("Modified");
                }
            }
        }
        private System.DateTime _modified;
    
        [DataMember]
        public byte[] UserSessionTS
        {
            get { return _userSessionTS; }
            set
            {
                if (_userSessionTS != value)
                {
                    _userSessionTS = value;
                    OnPropertyChanged("UserSessionTS");
                }
            }
        }
        private byte[] _userSessionTS;

        #endregion

        #region Navigation Properties
    
        [DataMember]
        public XUser XUser
        {
            get { return _xUser; }
            set
            {
                if (!ReferenceEquals(_xUser, value))
                {
                    var previousValue = _xUser;
                    _xUser = value;
                    FixupXUser(previousValue);
                    OnNavigationPropertyChanged("XUser");
                }
            }
        }
        private XUser _xUser;

        #endregion

        #region ChangeTracking
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected override void ClearNavigationProperties()
        {
            XUser = null;
        }

        #endregion

        #region Association Fixup
    
        private void FixupXUser(XUser previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.UserSession.Contains(this))
            {
                previousValue.UserSession.Remove(this);
            }
    
            if (XUser != null)
            {
                if (!XUser.UserSession.Contains(this))
                {
                    XUser.UserSession.Add(this);
                }
    
                UserID = XUser.UserID;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("XUser")
                    && (ChangeTracker.OriginalValues["XUser"] == XUser))
                {
                    ChangeTracker.OriginalValues.Remove("XUser");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("XUser", previousValue);
                }
                if (XUser != null && !XUser.ChangeTracker.ChangeTrackingEnabled)
                {
                    XUser.StartTracking();
                }
            }
        }

        #endregion

        #region Methods
    
    	public override bool Equals(object obj)
    	{
    		if (obj == null)
    		{
    			return false;
    		}
    		
    		if (ReferenceEquals(this, obj))
    		{
    			return true;
    		}
    
    		if (GetType() != obj.GetType())
    		{
    			return false;
    		}
    
    		var entity = (UserSession)obj;
    		if (!_userSessionID.Equals(entity.UserSessionID) || _userSessionID == 0)
    		{
    			return false;
    		}
    		
    		return true;
    	}
    	
    	public override int GetHashCode()
        {
            return _userSessionID.GetHashCode();
        }

        #endregion

    }
}

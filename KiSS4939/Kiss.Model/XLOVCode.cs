//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace Kiss.Model
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(XLOV))]
    public partial class XLOVCode: EntityBase<XLOVCode>, IObjectWithChangeTracker
    {
        #region Primitive Properties
    
        [DataMember]
        public int XLOVCodeID
        {
            get { return _xLOVCodeID; }
            set
            {
                if (_xLOVCodeID != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'XLOVCodeID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _xLOVCodeID = value;
                    OnPropertyChanged("XLOVCodeID");
                }
            }
        }
        private int _xLOVCodeID;
    
        [DataMember]
        public int XLOVID
        {
            get { return _xLOVID; }
            set
            {
                if (_xLOVID != value)
                {
                    ChangeTracker.RecordOriginalValue("XLOVID", _xLOVID);
                    if (!IsDeserializing)
                    {
                        if (XLOV != null && XLOV.XLOVID != value)
                        {
                            XLOV = null;
                        }
                    }
                    _xLOVID = value;
                    OnPropertyChanged("XLOVID");
                }
            }
        }
        private int _xLOVID;
    
        [DataMember]
        public string LOVName
        {
            get { return _lOVName; }
            set
            {
                if (_lOVName != value)
                {
                    _lOVName = value;
                    OnPropertyChanged("LOVName");
                }
            }
        }
        private string _lOVName;
    
        [DataMember]
        public int Code
        {
            get { return _code; }
            set
            {
                if (_code != value)
                {
                    _code = value;
                    OnPropertyChanged("Code");
                }
            }
        }
        private int _code;
    
        [DataMember]
        public string Text
        {
            get { return _text; }
            set
            {
                if (_text != value)
                {
                    _text = value;
                    OnPropertyChanged("Text");
                }
            }
        }
        private string _text;
    
        [DataMember]
        public Nullable<int> TextTID
        {
            get { return _textTID; }
            set
            {
                if (_textTID != value)
                {
                    _textTID = value;
                    OnPropertyChanged("TextTID");
                }
            }
        }
        private Nullable<int> _textTID;
    
        [DataMember]
        public Nullable<int> SortKey
        {
            get { return _sortKey; }
            set
            {
                if (_sortKey != value)
                {
                    _sortKey = value;
                    OnPropertyChanged("SortKey");
                }
            }
        }
        private Nullable<int> _sortKey;
    
        [DataMember]
        public string ShortText
        {
            get { return _shortText; }
            set
            {
                if (_shortText != value)
                {
                    _shortText = value;
                    OnPropertyChanged("ShortText");
                }
            }
        }
        private string _shortText;
    
        [DataMember]
        public Nullable<int> ShortTextTID
        {
            get { return _shortTextTID; }
            set
            {
                if (_shortTextTID != value)
                {
                    _shortTextTID = value;
                    OnPropertyChanged("ShortTextTID");
                }
            }
        }
        private Nullable<int> _shortTextTID;
    
        [DataMember]
        public Nullable<int> BFSCode
        {
            get { return _bFSCode; }
            set
            {
                if (_bFSCode != value)
                {
                    _bFSCode = value;
                    OnPropertyChanged("BFSCode");
                }
            }
        }
        private Nullable<int> _bFSCode;
    
        [DataMember]
        public string Value1
        {
            get { return _value1; }
            set
            {
                if (_value1 != value)
                {
                    _value1 = value;
                    OnPropertyChanged("Value1");
                }
            }
        }
        private string _value1;
    
        [DataMember]
        public Nullable<int> Value1TID
        {
            get { return _value1TID; }
            set
            {
                if (_value1TID != value)
                {
                    _value1TID = value;
                    OnPropertyChanged("Value1TID");
                }
            }
        }
        private Nullable<int> _value1TID;
    
        [DataMember]
        public string Value2
        {
            get { return _value2; }
            set
            {
                if (_value2 != value)
                {
                    _value2 = value;
                    OnPropertyChanged("Value2");
                }
            }
        }
        private string _value2;
    
        [DataMember]
        public Nullable<int> Value2TID
        {
            get { return _value2TID; }
            set
            {
                if (_value2TID != value)
                {
                    _value2TID = value;
                    OnPropertyChanged("Value2TID");
                }
            }
        }
        private Nullable<int> _value2TID;
    
        [DataMember]
        public string Value3
        {
            get { return _value3; }
            set
            {
                if (_value3 != value)
                {
                    _value3 = value;
                    OnPropertyChanged("Value3");
                }
            }
        }
        private string _value3;
    
        [DataMember]
        public Nullable<int> Value3TID
        {
            get { return _value3TID; }
            set
            {
                if (_value3TID != value)
                {
                    _value3TID = value;
                    OnPropertyChanged("Value3TID");
                }
            }
        }
        private Nullable<int> _value3TID;
    
        [DataMember]
        public string Description
        {
            get { return _description; }
            set
            {
                if (_description != value)
                {
                    _description = value;
                    OnPropertyChanged("Description");
                }
            }
        }
        private string _description;
    
        [DataMember]
        public string LOVCodeName
        {
            get { return _lOVCodeName; }
            set
            {
                if (_lOVCodeName != value)
                {
                    _lOVCodeName = value;
                    OnPropertyChanged("LOVCodeName");
                }
            }
        }
        private string _lOVCodeName;
    
        [DataMember]
        public bool IsActive
        {
            get { return _isActive; }
            set
            {
                if (_isActive != value)
                {
                    _isActive = value;
                    OnPropertyChanged("IsActive");
                }
            }
        }
        private bool _isActive;
    
        [DataMember]
        public bool System
        {
            get { return _system; }
            set
            {
                if (_system != value)
                {
                    _system = value;
                    OnPropertyChanged("System");
                }
            }
        }
        private bool _system;
    
        [DataMember]
        public byte[] XLOVCodeTS
        {
            get { return _xLOVCodeTS; }
            set
            {
                if (_xLOVCodeTS != value)
                {
                    _xLOVCodeTS = value;
                    OnPropertyChanged("XLOVCodeTS");
                }
            }
        }
        private byte[] _xLOVCodeTS;

        #endregion

        #region Navigation Properties
    
        [DataMember]
        public XLOV XLOV
        {
            get { return _xLOV; }
            set
            {
                if (!ReferenceEquals(_xLOV, value))
                {
                    var previousValue = _xLOV;
                    _xLOV = value;
                    FixupXLOV(previousValue);
                    OnNavigationPropertyChanged("XLOV");
                }
            }
        }
        private XLOV _xLOV;

        #endregion

        #region ChangeTracking
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected override void ClearNavigationProperties()
        {
            XLOV = null;
        }

        #endregion

        #region Association Fixup
    
        private void FixupXLOV(XLOV previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.XLOVCode.Contains(this))
            {
                previousValue.XLOVCode.Remove(this);
            }
    
            if (XLOV != null)
            {
                if (!XLOV.XLOVCode.Contains(this))
                {
                    XLOV.XLOVCode.Add(this);
                }
    
                XLOVID = XLOV.XLOVID;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("XLOV")
                    && (ChangeTracker.OriginalValues["XLOV"] == XLOV))
                {
                    ChangeTracker.OriginalValues.Remove("XLOV");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("XLOV", previousValue);
                }
                if (XLOV != null && !XLOV.ChangeTracker.ChangeTrackingEnabled)
                {
                    XLOV.StartTracking();
                }
            }
        }

        #endregion

        #region Methods
    
    	public override bool Equals(object obj)
    	{
    		if (obj == null)
    		{
    			return false;
    		}
    		
    		if (ReferenceEquals(this, obj))
    		{
    			return true;
    		}
    
    		if (GetType() != obj.GetType())
    		{
    			return false;
    		}
    
    		var entity = (XLOVCode)obj;
    		if (!_xLOVCodeID.Equals(entity.XLOVCodeID) || _xLOVCodeID == 0)
    		{
    			return false;
    		}
    		
    		return true;
    	}
    	
    	public override int GetHashCode()
        {
            return _xLOVCodeID.GetHashCode();
        }

        #endregion

    }
}

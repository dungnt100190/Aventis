//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace Kiss.Model
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(BaBank))]
    [KnownType(typeof(BaInstitution))]
    [KnownType(typeof(BaLand))]
    [KnownType(typeof(BaPerson))]
    public partial class BaZahlungsweg: EntityBase<BaZahlungsweg>, IObjectWithChangeTracker
    {
        #region Primitive Properties
    
        [DataMember]
        public int BaZahlungswegID
        {
            get { return _baZahlungswegID; }
            set
            {
                if (_baZahlungswegID != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'BaZahlungswegID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _baZahlungswegID = value;
                    OnPropertyChanged("BaZahlungswegID");
                }
            }
        }
        private int _baZahlungswegID;
    
        [DataMember]
        public Nullable<int> BaPersonID
        {
            get { return _baPersonID; }
            set
            {
                if (_baPersonID != value)
                {
                    ChangeTracker.RecordOriginalValue("BaPersonID", _baPersonID);
                    if (!IsDeserializing)
                    {
                        if (BaPerson != null && BaPerson.BaPersonID != value)
                        {
                            BaPerson = null;
                        }
                    }
                    _baPersonID = value;
                    OnPropertyChanged("BaPersonID");
                }
            }
        }
        private Nullable<int> _baPersonID;
    
        [DataMember]
        public Nullable<int> BaInstitutionID
        {
            get { return _baInstitutionID; }
            set
            {
                if (_baInstitutionID != value)
                {
                    ChangeTracker.RecordOriginalValue("BaInstitutionID", _baInstitutionID);
                    if (!IsDeserializing)
                    {
                        if (BaInstitution != null && BaInstitution.BaInstitutionID != value)
                        {
                            BaInstitution = null;
                        }
                    }
                    _baInstitutionID = value;
                    OnPropertyChanged("BaInstitutionID");
                }
            }
        }
        private Nullable<int> _baInstitutionID;
    
        [DataMember]
        public System.DateTime DatumVon
        {
            get { return _datumVon; }
            set
            {
                if (_datumVon != value)
                {
                    _datumVon = value;
                    OnPropertyChanged("DatumVon");
                }
            }
        }
        private System.DateTime _datumVon;
    
        [DataMember]
        public Nullable<System.DateTime> DatumBis
        {
            get { return _datumBis; }
            set
            {
                if (_datumBis != value)
                {
                    _datumBis = value;
                    OnPropertyChanged("DatumBis");
                }
            }
        }
        private Nullable<System.DateTime> _datumBis;
    
        [DataMember]
        public Nullable<int> EinzahlungsscheinCode
        {
            get { return _einzahlungsscheinCode; }
            set
            {
                if (_einzahlungsscheinCode != value)
                {
                    _einzahlungsscheinCode = value;
                    OnPropertyChanged("EinzahlungsscheinCode");
                }
            }
        }
        private Nullable<int> _einzahlungsscheinCode;
    
        [DataMember]
        public Nullable<int> BaBankID
        {
            get { return _baBankID; }
            set
            {
                if (_baBankID != value)
                {
                    ChangeTracker.RecordOriginalValue("BaBankID", _baBankID);
                    if (!IsDeserializing)
                    {
                        if (BaBank != null && BaBank.BaBankID != value)
                        {
                            BaBank = null;
                        }
                    }
                    _baBankID = value;
                    OnPropertyChanged("BaBankID");
                }
            }
        }
        private Nullable<int> _baBankID;
    
        [DataMember]
        public string BankKontoNummer
        {
            get { return _bankKontoNummer; }
            set
            {
                if (_bankKontoNummer != value)
                {
                    _bankKontoNummer = value;
                    OnPropertyChanged("BankKontoNummer");
                }
            }
        }
        private string _bankKontoNummer;
    
        [DataMember]
        public string IBANNummer
        {
            get { return _iBANNummer; }
            set
            {
                if (_iBANNummer != value)
                {
                    _iBANNummer = value;
                    OnPropertyChanged("IBANNummer");
                }
            }
        }
        private string _iBANNummer;
    
        [DataMember]
        public string PostKontoNummer
        {
            get { return _postKontoNummer; }
            set
            {
                if (_postKontoNummer != value)
                {
                    _postKontoNummer = value;
                    OnPropertyChanged("PostKontoNummer");
                }
            }
        }
        private string _postKontoNummer;
    
        [DataMember]
        public string ReferenzNummer
        {
            get { return _referenzNummer; }
            set
            {
                if (_referenzNummer != value)
                {
                    _referenzNummer = value;
                    OnPropertyChanged("ReferenzNummer");
                }
            }
        }
        private string _referenzNummer;
    
        [DataMember]
        public string AdresseName
        {
            get { return _adresseName; }
            set
            {
                if (_adresseName != value)
                {
                    _adresseName = value;
                    OnPropertyChanged("AdresseName");
                }
            }
        }
        private string _adresseName;
    
        [DataMember]
        public string AdresseName2
        {
            get { return _adresseName2; }
            set
            {
                if (_adresseName2 != value)
                {
                    _adresseName2 = value;
                    OnPropertyChanged("AdresseName2");
                }
            }
        }
        private string _adresseName2;
    
        [DataMember]
        public string AdresseStrasse
        {
            get { return _adresseStrasse; }
            set
            {
                if (_adresseStrasse != value)
                {
                    _adresseStrasse = value;
                    OnPropertyChanged("AdresseStrasse");
                }
            }
        }
        private string _adresseStrasse;
    
        [DataMember]
        public string AdresseHausNr
        {
            get { return _adresseHausNr; }
            set
            {
                if (_adresseHausNr != value)
                {
                    _adresseHausNr = value;
                    OnPropertyChanged("AdresseHausNr");
                }
            }
        }
        private string _adresseHausNr;
    
        [DataMember]
        public string AdressePostfach
        {
            get { return _adressePostfach; }
            set
            {
                if (_adressePostfach != value)
                {
                    _adressePostfach = value;
                    OnPropertyChanged("AdressePostfach");
                }
            }
        }
        private string _adressePostfach;
    
        [DataMember]
        public string AdressePLZ
        {
            get { return _adressePLZ; }
            set
            {
                if (_adressePLZ != value)
                {
                    _adressePLZ = value;
                    OnPropertyChanged("AdressePLZ");
                }
            }
        }
        private string _adressePLZ;
    
        [DataMember]
        public string AdresseOrt
        {
            get { return _adresseOrt; }
            set
            {
                if (_adresseOrt != value)
                {
                    _adresseOrt = value;
                    OnPropertyChanged("AdresseOrt");
                }
            }
        }
        private string _adresseOrt;
    
        [DataMember]
        public Nullable<int> AdresseLandCode
        {
            get { return _adresseLandCode; }
            set
            {
                if (_adresseLandCode != value)
                {
                    ChangeTracker.RecordOriginalValue("AdresseLandCode", _adresseLandCode);
                    if (!IsDeserializing)
                    {
                        if (BaLand != null && BaLand.BaLandID != value)
                        {
                            BaLand = null;
                        }
                    }
                    _adresseLandCode = value;
                    OnPropertyChanged("AdresseLandCode");
                }
            }
        }
        private Nullable<int> _adresseLandCode;
    
        [DataMember]
        public string BaZahlwegModulStdCodes
        {
            get { return _baZahlwegModulStdCodes; }
            set
            {
                if (_baZahlwegModulStdCodes != value)
                {
                    _baZahlwegModulStdCodes = value;
                    OnPropertyChanged("BaZahlwegModulStdCodes");
                }
            }
        }
        private string _baZahlwegModulStdCodes;
    
        [DataMember]
        public byte[] BaZahlungswegTS
        {
            get { return _baZahlungswegTS; }
            set
            {
                if (_baZahlungswegTS != value)
                {
                    _baZahlungswegTS = value;
                    OnPropertyChanged("BaZahlungswegTS");
                }
            }
        }
        private byte[] _baZahlungswegTS;

        #endregion

        #region Navigation Properties
    
        [DataMember]
        public BaBank BaBank
        {
            get { return _baBank; }
            set
            {
                if (!ReferenceEquals(_baBank, value))
                {
                    var previousValue = _baBank;
                    _baBank = value;
                    FixupBaBank(previousValue);
                    OnNavigationPropertyChanged("BaBank");
                }
            }
        }
        private BaBank _baBank;
    
        [DataMember]
        public BaInstitution BaInstitution
        {
            get { return _baInstitution; }
            set
            {
                if (!ReferenceEquals(_baInstitution, value))
                {
                    var previousValue = _baInstitution;
                    _baInstitution = value;
                    FixupBaInstitution(previousValue);
                    OnNavigationPropertyChanged("BaInstitution");
                }
            }
        }
        private BaInstitution _baInstitution;
    
        [DataMember]
        public BaLand BaLand
        {
            get { return _baLand; }
            set
            {
                if (!ReferenceEquals(_baLand, value))
                {
                    var previousValue = _baLand;
                    _baLand = value;
                    FixupBaLand(previousValue);
                    OnNavigationPropertyChanged("BaLand");
                }
            }
        }
        private BaLand _baLand;
    
        [DataMember]
        public BaPerson BaPerson
        {
            get { return _baPerson; }
            set
            {
                if (!ReferenceEquals(_baPerson, value))
                {
                    var previousValue = _baPerson;
                    _baPerson = value;
                    FixupBaPerson(previousValue);
                    OnNavigationPropertyChanged("BaPerson");
                }
            }
        }
        private BaPerson _baPerson;

        #endregion

        #region ChangeTracking
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected override void ClearNavigationProperties()
        {
            BaBank = null;
            BaInstitution = null;
            BaLand = null;
            BaPerson = null;
        }

        #endregion

        #region Association Fixup
    
        private void FixupBaBank(BaBank previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.BaZahlungsweg.Contains(this))
            {
                previousValue.BaZahlungsweg.Remove(this);
            }
    
            if (BaBank != null)
            {
                if (!BaBank.BaZahlungsweg.Contains(this))
                {
                    BaBank.BaZahlungsweg.Add(this);
                }
    
                BaBankID = BaBank.BaBankID;
            }
            else if (!skipKeys)
            {
                BaBankID = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("BaBank")
                    && (ChangeTracker.OriginalValues["BaBank"] == BaBank))
                {
                    ChangeTracker.OriginalValues.Remove("BaBank");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("BaBank", previousValue);
                }
                if (BaBank != null && !BaBank.ChangeTracker.ChangeTrackingEnabled)
                {
                    BaBank.StartTracking();
                }
            }
        }
    
        private void FixupBaInstitution(BaInstitution previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.BaZahlungsweg.Contains(this))
            {
                previousValue.BaZahlungsweg.Remove(this);
            }
    
            if (BaInstitution != null)
            {
                if (!BaInstitution.BaZahlungsweg.Contains(this))
                {
                    BaInstitution.BaZahlungsweg.Add(this);
                }
    
                BaInstitutionID = BaInstitution.BaInstitutionID;
            }
            else if (!skipKeys)
            {
                BaInstitutionID = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("BaInstitution")
                    && (ChangeTracker.OriginalValues["BaInstitution"] == BaInstitution))
                {
                    ChangeTracker.OriginalValues.Remove("BaInstitution");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("BaInstitution", previousValue);
                }
                if (BaInstitution != null && !BaInstitution.ChangeTracker.ChangeTrackingEnabled)
                {
                    BaInstitution.StartTracking();
                }
            }
        }
    
        private void FixupBaLand(BaLand previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.BaZahlungsweg.Contains(this))
            {
                previousValue.BaZahlungsweg.Remove(this);
            }
    
            if (BaLand != null)
            {
                if (!BaLand.BaZahlungsweg.Contains(this))
                {
                    BaLand.BaZahlungsweg.Add(this);
                }
    
                AdresseLandCode = BaLand.BaLandID;
            }
            else if (!skipKeys)
            {
                AdresseLandCode = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("BaLand")
                    && (ChangeTracker.OriginalValues["BaLand"] == BaLand))
                {
                    ChangeTracker.OriginalValues.Remove("BaLand");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("BaLand", previousValue);
                }
                if (BaLand != null && !BaLand.ChangeTracker.ChangeTrackingEnabled)
                {
                    BaLand.StartTracking();
                }
            }
        }
    
        private void FixupBaPerson(BaPerson previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.BaZahlungsweg.Contains(this))
            {
                previousValue.BaZahlungsweg.Remove(this);
            }
    
            if (BaPerson != null)
            {
                if (!BaPerson.BaZahlungsweg.Contains(this))
                {
                    BaPerson.BaZahlungsweg.Add(this);
                }
    
                BaPersonID = BaPerson.BaPersonID;
            }
            else if (!skipKeys)
            {
                BaPersonID = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("BaPerson")
                    && (ChangeTracker.OriginalValues["BaPerson"] == BaPerson))
                {
                    ChangeTracker.OriginalValues.Remove("BaPerson");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("BaPerson", previousValue);
                }
                if (BaPerson != null && !BaPerson.ChangeTracker.ChangeTrackingEnabled)
                {
                    BaPerson.StartTracking();
                }
            }
        }

        #endregion

        #region Methods
    
    	public override bool Equals(object obj)
    	{
    		if (obj == null)
    		{
    			return false;
    		}
    		
    		if (ReferenceEquals(this, obj))
    		{
    			return true;
    		}
    
    		if (GetType() != obj.GetType())
    		{
    			return false;
    		}
    
    		var entity = (BaZahlungsweg)obj;
    		if (!_baZahlungswegID.Equals(entity.BaZahlungswegID) || _baZahlungswegID == 0)
    		{
    			return false;
    		}
    		
    		return true;
    	}
    	
    	public override int GetHashCode()
        {
            return _baZahlungswegID.GetHashCode();
        }

        #endregion

    }
}

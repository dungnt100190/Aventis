//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace Kiss.Model
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(ServiceProcessError))]
    public partial class ServiceProcessErrorMessage: EntityBase<ServiceProcessErrorMessage>, IObjectWithChangeTracker
    {
        #region Primitive Properties
    
        [DataMember]
        public int ServiceProcessErrorMessageID
        {
            get { return _serviceProcessErrorMessageID; }
            set
            {
                if (_serviceProcessErrorMessageID != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'ServiceProcessErrorMessageID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _serviceProcessErrorMessageID = value;
                    OnPropertyChanged("ServiceProcessErrorMessageID");
                }
            }
        }
        private int _serviceProcessErrorMessageID;
    
        [DataMember]
        public int ServiceProcessErrorID
        {
            get { return _serviceProcessErrorID; }
            set
            {
                if (_serviceProcessErrorID != value)
                {
                    ChangeTracker.RecordOriginalValue("ServiceProcessErrorID", _serviceProcessErrorID);
                    if (!IsDeserializing)
                    {
                        if (ServiceProcessError != null && ServiceProcessError.ServiceProcessErrorID != value)
                        {
                            ServiceProcessError = null;
                        }
                    }
                    _serviceProcessErrorID = value;
                    OnPropertyChanged("ServiceProcessErrorID");
                }
            }
        }
        private int _serviceProcessErrorID;
    
        [DataMember]
        public string Message
        {
            get { return _message; }
            set
            {
                if (_message != value)
                {
                    _message = value;
                    OnPropertyChanged("Message");
                }
            }
        }
        private string _message;
    
        [DataMember]
        public string Creator
        {
            get { return _creator; }
            set
            {
                if (_creator != value)
                {
                    _creator = value;
                    OnPropertyChanged("Creator");
                }
            }
        }
        private string _creator;
    
        [DataMember]
        public System.DateTime Created
        {
            get { return _created; }
            set
            {
                if (_created != value)
                {
                    _created = value;
                    OnPropertyChanged("Created");
                }
            }
        }
        private System.DateTime _created;
    
        [DataMember]
        public string Modifier
        {
            get { return _modifier; }
            set
            {
                if (_modifier != value)
                {
                    _modifier = value;
                    OnPropertyChanged("Modifier");
                }
            }
        }
        private string _modifier;
    
        [DataMember]
        public System.DateTime Modified
        {
            get { return _modified; }
            set
            {
                if (_modified != value)
                {
                    _modified = value;
                    OnPropertyChanged("Modified");
                }
            }
        }
        private System.DateTime _modified;
    
        [DataMember]
        public byte[] ServiceProcessErrorMessageTS
        {
            get { return _serviceProcessErrorMessageTS; }
            set
            {
                if (_serviceProcessErrorMessageTS != value)
                {
                    _serviceProcessErrorMessageTS = value;
                    OnPropertyChanged("ServiceProcessErrorMessageTS");
                }
            }
        }
        private byte[] _serviceProcessErrorMessageTS;

        #endregion

        #region Navigation Properties
    
        [DataMember]
        public ServiceProcessError ServiceProcessError
        {
            get { return _serviceProcessError; }
            set
            {
                if (!ReferenceEquals(_serviceProcessError, value))
                {
                    var previousValue = _serviceProcessError;
                    _serviceProcessError = value;
                    FixupServiceProcessError(previousValue);
                    OnNavigationPropertyChanged("ServiceProcessError");
                }
            }
        }
        private ServiceProcessError _serviceProcessError;

        #endregion

        #region ChangeTracking
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected override void ClearNavigationProperties()
        {
            ServiceProcessError = null;
        }

        #endregion

        #region Association Fixup
    
        private void FixupServiceProcessError(ServiceProcessError previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.ServiceProcessErrorMessage.Contains(this))
            {
                previousValue.ServiceProcessErrorMessage.Remove(this);
            }
    
            if (ServiceProcessError != null)
            {
                if (!ServiceProcessError.ServiceProcessErrorMessage.Contains(this))
                {
                    ServiceProcessError.ServiceProcessErrorMessage.Add(this);
                }
    
                ServiceProcessErrorID = ServiceProcessError.ServiceProcessErrorID;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("ServiceProcessError")
                    && (ChangeTracker.OriginalValues["ServiceProcessError"] == ServiceProcessError))
                {
                    ChangeTracker.OriginalValues.Remove("ServiceProcessError");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("ServiceProcessError", previousValue);
                }
                if (ServiceProcessError != null && !ServiceProcessError.ChangeTracker.ChangeTrackingEnabled)
                {
                    ServiceProcessError.StartTracking();
                }
            }
        }

        #endregion

        #region Methods
    
    	public override bool Equals(object obj)
    	{
    		if (obj == null)
    		{
    			return false;
    		}
    		
    		if (ReferenceEquals(this, obj))
    		{
    			return true;
    		}
    
    		if (GetType() != obj.GetType())
    		{
    			return false;
    		}
    
    		var entity = (ServiceProcessErrorMessage)obj;
    		if (!_serviceProcessErrorMessageID.Equals(entity.ServiceProcessErrorMessageID) || _serviceProcessErrorMessageID == 0)
    		{
    			return false;
    		}
    		
    		return true;
    	}
    	
    	public override int GetHashCode()
        {
            return _serviceProcessErrorMessageID.GetHashCode();
        }

        #endregion

    }
}

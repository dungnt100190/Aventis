//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace Kiss.Model
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(BaPerson))]
    [KnownType(typeof(XUser))]
    [KnownType(typeof(ServiceProcessErrorMessage))]
    public partial class ServiceProcessError: EntityBase<ServiceProcessError>, IObjectWithChangeTracker
    {
        #region Primitive Properties
    
        [DataMember]
        public int ServiceProcessErrorID
        {
            get { return _serviceProcessErrorID; }
            set
            {
                if (_serviceProcessErrorID != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'ServiceProcessErrorID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _serviceProcessErrorID = value;
                    OnPropertyChanged("ServiceProcessErrorID");
                }
            }
        }
        private int _serviceProcessErrorID;
    
        [DataMember]
        public Nullable<int> UserID
        {
            get { return _userID; }
            set
            {
                if (_userID != value)
                {
                    ChangeTracker.RecordOriginalValue("UserID", _userID);
                    if (!IsDeserializing)
                    {
                        if (XUser != null && XUser.UserID != value)
                        {
                            XUser = null;
                        }
                    }
                    _userID = value;
                    OnPropertyChanged("UserID");
                }
            }
        }
        private Nullable<int> _userID;
    
        [DataMember]
        public Nullable<int> BaPersonID
        {
            get { return _baPersonID; }
            set
            {
                if (_baPersonID != value)
                {
                    ChangeTracker.RecordOriginalValue("BaPersonID", _baPersonID);
                    if (!IsDeserializing)
                    {
                        if (BaPerson != null && BaPerson.BaPersonID != value)
                        {
                            BaPerson = null;
                        }
                    }
                    _baPersonID = value;
                    OnPropertyChanged("BaPersonID");
                }
            }
        }
        private Nullable<int> _baPersonID;
    
        [DataMember]
        public string FremdsystemID
        {
            get { return _fremdsystemID; }
            set
            {
                if (_fremdsystemID != value)
                {
                    _fremdsystemID = value;
                    OnPropertyChanged("FremdsystemID");
                }
            }
        }
        private string _fremdsystemID;
    
        [DataMember]
        public string ServiceName
        {
            get { return _serviceName; }
            set
            {
                if (_serviceName != value)
                {
                    _serviceName = value;
                    OnPropertyChanged("ServiceName");
                }
            }
        }
        private string _serviceName;
    
        [DataMember]
        public string MethodName
        {
            get { return _methodName; }
            set
            {
                if (_methodName != value)
                {
                    _methodName = value;
                    OnPropertyChanged("MethodName");
                }
            }
        }
        private string _methodName;
    
        [DataMember]
        public string Info
        {
            get { return _info; }
            set
            {
                if (_info != value)
                {
                    _info = value;
                    OnPropertyChanged("Info");
                }
            }
        }
        private string _info;
    
        [DataMember]
        public string Creator
        {
            get { return _creator; }
            set
            {
                if (_creator != value)
                {
                    _creator = value;
                    OnPropertyChanged("Creator");
                }
            }
        }
        private string _creator;
    
        [DataMember]
        public System.DateTime Created
        {
            get { return _created; }
            set
            {
                if (_created != value)
                {
                    _created = value;
                    OnPropertyChanged("Created");
                }
            }
        }
        private System.DateTime _created;
    
        [DataMember]
        public string Modifier
        {
            get { return _modifier; }
            set
            {
                if (_modifier != value)
                {
                    _modifier = value;
                    OnPropertyChanged("Modifier");
                }
            }
        }
        private string _modifier;
    
        [DataMember]
        public System.DateTime Modified
        {
            get { return _modified; }
            set
            {
                if (_modified != value)
                {
                    _modified = value;
                    OnPropertyChanged("Modified");
                }
            }
        }
        private System.DateTime _modified;
    
        [DataMember]
        public byte[] ServiceProcessErrorTS
        {
            get { return _serviceProcessErrorTS; }
            set
            {
                if (_serviceProcessErrorTS != value)
                {
                    _serviceProcessErrorTS = value;
                    OnPropertyChanged("ServiceProcessErrorTS");
                }
            }
        }
        private byte[] _serviceProcessErrorTS;

        #endregion

        #region Navigation Properties
    
        [DataMember]
        public BaPerson BaPerson
        {
            get { return _baPerson; }
            set
            {
                if (!ReferenceEquals(_baPerson, value))
                {
                    var previousValue = _baPerson;
                    _baPerson = value;
                    FixupBaPerson(previousValue);
                    OnNavigationPropertyChanged("BaPerson");
                }
            }
        }
        private BaPerson _baPerson;
    
        [DataMember]
        public XUser XUser
        {
            get { return _xUser; }
            set
            {
                if (!ReferenceEquals(_xUser, value))
                {
                    var previousValue = _xUser;
                    _xUser = value;
                    FixupXUser(previousValue);
                    OnNavigationPropertyChanged("XUser");
                }
            }
        }
        private XUser _xUser;
    
        [DataMember]
        public TrackableCollection<ServiceProcessErrorMessage> ServiceProcessErrorMessage
        {
            get
            {
                if (_serviceProcessErrorMessage == null)
                {
                    _serviceProcessErrorMessage = new TrackableCollection<ServiceProcessErrorMessage>();
                    _serviceProcessErrorMessage.CollectionChanged += FixupServiceProcessErrorMessage;
                }
                return _serviceProcessErrorMessage;
            }
            set
            {
                if (!ReferenceEquals(_serviceProcessErrorMessage, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_serviceProcessErrorMessage != null)
                    {
                        _serviceProcessErrorMessage.CollectionChanged -= FixupServiceProcessErrorMessage;
                    }
                    _serviceProcessErrorMessage = value;
                    if (_serviceProcessErrorMessage != null)
                    {
                        _serviceProcessErrorMessage.CollectionChanged += FixupServiceProcessErrorMessage;
                    }
                    OnNavigationPropertyChanged("ServiceProcessErrorMessage");
                }
            }
        }
        private TrackableCollection<ServiceProcessErrorMessage> _serviceProcessErrorMessage;

        #endregion

        #region ChangeTracking
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected override void ClearNavigationProperties()
        {
            BaPerson = null;
            XUser = null;
            ServiceProcessErrorMessage.Clear();
        }

        #endregion

        #region Association Fixup
    
        private void FixupBaPerson(BaPerson previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.ServiceProcessError.Contains(this))
            {
                previousValue.ServiceProcessError.Remove(this);
            }
    
            if (BaPerson != null)
            {
                if (!BaPerson.ServiceProcessError.Contains(this))
                {
                    BaPerson.ServiceProcessError.Add(this);
                }
    
                BaPersonID = BaPerson.BaPersonID;
            }
            else if (!skipKeys)
            {
                BaPersonID = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("BaPerson")
                    && (ChangeTracker.OriginalValues["BaPerson"] == BaPerson))
                {
                    ChangeTracker.OriginalValues.Remove("BaPerson");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("BaPerson", previousValue);
                }
                if (BaPerson != null && !BaPerson.ChangeTracker.ChangeTrackingEnabled)
                {
                    BaPerson.StartTracking();
                }
            }
        }
    
        private void FixupXUser(XUser previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.ServiceProcessError.Contains(this))
            {
                previousValue.ServiceProcessError.Remove(this);
            }
    
            if (XUser != null)
            {
                if (!XUser.ServiceProcessError.Contains(this))
                {
                    XUser.ServiceProcessError.Add(this);
                }
    
                UserID = XUser.UserID;
            }
            else if (!skipKeys)
            {
                UserID = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("XUser")
                    && (ChangeTracker.OriginalValues["XUser"] == XUser))
                {
                    ChangeTracker.OriginalValues.Remove("XUser");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("XUser", previousValue);
                }
                if (XUser != null && !XUser.ChangeTracker.ChangeTrackingEnabled)
                {
                    XUser.StartTracking();
                }
            }
        }
    
        private void FixupServiceProcessErrorMessage(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (ServiceProcessErrorMessage item in e.NewItems)
                {
                    item.ServiceProcessError = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("ServiceProcessErrorMessage", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (ServiceProcessErrorMessage item in e.OldItems)
                {
                    if (ReferenceEquals(item.ServiceProcessError, this))
                    {
                        item.ServiceProcessError = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("ServiceProcessErrorMessage", item);
                    }
                }
            }
        }

        #endregion

        #region Methods
    
    	public override bool Equals(object obj)
    	{
    		if (obj == null)
    		{
    			return false;
    		}
    		
    		if (ReferenceEquals(this, obj))
    		{
    			return true;
    		}
    
    		if (GetType() != obj.GetType())
    		{
    			return false;
    		}
    
    		var entity = (ServiceProcessError)obj;
    		if (!_serviceProcessErrorID.Equals(entity.ServiceProcessErrorID) || _serviceProcessErrorID == 0)
    		{
    			return false;
    		}
    		
    		return true;
    	}
    	
    	public override int GetHashCode()
        {
            return _serviceProcessErrorID.GetHashCode();
        }

        #endregion

    }
}

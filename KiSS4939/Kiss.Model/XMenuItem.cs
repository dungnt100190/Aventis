//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace Kiss.Model
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(XMenuItem))]
    public partial class XMenuItem: EntityBase<XMenuItem>, IObjectWithChangeTracker
    {
        #region Primitive Properties
    
        [DataMember]
        public int MenuItemID
        {
            get { return _menuItemID; }
            set
            {
                if (_menuItemID != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'MenuItemID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _menuItemID = value;
                    OnPropertyChanged("MenuItemID");
                }
            }
        }
        private int _menuItemID;
    
        [DataMember]
        public Nullable<int> ParentMenuItemID
        {
            get { return _parentMenuItemID; }
            set
            {
                if (_parentMenuItemID != value)
                {
                    ChangeTracker.RecordOriginalValue("ParentMenuItemID", _parentMenuItemID);
                    if (!IsDeserializing)
                    {
                        if (XMenuItem2 != null && XMenuItem2.MenuItemID != value)
                        {
                            XMenuItem2 = null;
                        }
                    }
                    _parentMenuItemID = value;
                    OnPropertyChanged("ParentMenuItemID");
                }
            }
        }
        private Nullable<int> _parentMenuItemID;
    
        [DataMember]
        public string ControlName
        {
            get { return _controlName; }
            set
            {
                if (_controlName != value)
                {
                    _controlName = value;
                    OnPropertyChanged("ControlName");
                }
            }
        }
        private string _controlName;
    
        [DataMember]
        public bool BeginMenuGroup
        {
            get { return _beginMenuGroup; }
            set
            {
                if (_beginMenuGroup != value)
                {
                    _beginMenuGroup = value;
                    OnPropertyChanged("BeginMenuGroup");
                }
            }
        }
        private bool _beginMenuGroup;
    
        [DataMember]
        public bool Enabled
        {
            get { return _enabled; }
            set
            {
                if (_enabled != value)
                {
                    _enabled = value;
                    OnPropertyChanged("Enabled");
                }
            }
        }
        private bool _enabled;
    
        [DataMember]
        public bool Visible
        {
            get { return _visible; }
            set
            {
                if (_visible != value)
                {
                    _visible = value;
                    OnPropertyChanged("Visible");
                }
            }
        }
        private bool _visible;
    
        [DataMember]
        public string Caption
        {
            get { return _caption; }
            set
            {
                if (_caption != value)
                {
                    _caption = value;
                    OnPropertyChanged("Caption");
                }
            }
        }
        private string _caption;
    
        [DataMember]
        public Nullable<int> MenuTID
        {
            get { return _menuTID; }
            set
            {
                if (_menuTID != value)
                {
                    _menuTID = value;
                    OnPropertyChanged("MenuTID");
                }
            }
        }
        private Nullable<int> _menuTID;
    
        [DataMember]
        public bool ItemShortcutCtrl
        {
            get { return _itemShortcutCtrl; }
            set
            {
                if (_itemShortcutCtrl != value)
                {
                    _itemShortcutCtrl = value;
                    OnPropertyChanged("ItemShortcutCtrl");
                }
            }
        }
        private bool _itemShortcutCtrl;
    
        [DataMember]
        public bool ItemShortcutShift
        {
            get { return _itemShortcutShift; }
            set
            {
                if (_itemShortcutShift != value)
                {
                    _itemShortcutShift = value;
                    OnPropertyChanged("ItemShortcutShift");
                }
            }
        }
        private bool _itemShortcutShift;
    
        [DataMember]
        public bool ItemShortcutAlt
        {
            get { return _itemShortcutAlt; }
            set
            {
                if (_itemShortcutAlt != value)
                {
                    _itemShortcutAlt = value;
                    OnPropertyChanged("ItemShortcutAlt");
                }
            }
        }
        private bool _itemShortcutAlt;
    
        [DataMember]
        public string ItemShortcutKey
        {
            get { return _itemShortcutKey; }
            set
            {
                if (_itemShortcutKey != value)
                {
                    _itemShortcutKey = value;
                    OnPropertyChanged("ItemShortcutKey");
                }
            }
        }
        private string _itemShortcutKey;
    
        [DataMember]
        public int ImageIndex
        {
            get { return _imageIndex; }
            set
            {
                if (_imageIndex != value)
                {
                    _imageIndex = value;
                    OnPropertyChanged("ImageIndex");
                }
            }
        }
        private int _imageIndex;
    
        [DataMember]
        public int ImageIndexDisabled
        {
            get { return _imageIndexDisabled; }
            set
            {
                if (_imageIndexDisabled != value)
                {
                    _imageIndexDisabled = value;
                    OnPropertyChanged("ImageIndexDisabled");
                }
            }
        }
        private int _imageIndexDisabled;
    
        [DataMember]
        public Nullable<int> SortKey
        {
            get { return _sortKey; }
            set
            {
                if (_sortKey != value)
                {
                    _sortKey = value;
                    OnPropertyChanged("SortKey");
                }
            }
        }
        private Nullable<int> _sortKey;
    
        [DataMember]
        public string ClassName
        {
            get { return _className; }
            set
            {
                if (_className != value)
                {
                    _className = value;
                    OnPropertyChanged("ClassName");
                }
            }
        }
        private string _className;
    
        [DataMember]
        public bool ShowInToolbar
        {
            get { return _showInToolbar; }
            set
            {
                if (_showInToolbar != value)
                {
                    _showInToolbar = value;
                    OnPropertyChanged("ShowInToolbar");
                }
            }
        }
        private bool _showInToolbar;
    
        [DataMember]
        public bool BeginToolbarGroup
        {
            get { return _beginToolbarGroup; }
            set
            {
                if (_beginToolbarGroup != value)
                {
                    _beginToolbarGroup = value;
                    OnPropertyChanged("BeginToolbarGroup");
                }
            }
        }
        private bool _beginToolbarGroup;
    
        [DataMember]
        public Nullable<int> ToolbarSortKey
        {
            get { return _toolbarSortKey; }
            set
            {
                if (_toolbarSortKey != value)
                {
                    _toolbarSortKey = value;
                    OnPropertyChanged("ToolbarSortKey");
                }
            }
        }
        private Nullable<int> _toolbarSortKey;
    
        [DataMember]
        public bool System
        {
            get { return _system; }
            set
            {
                if (_system != value)
                {
                    _system = value;
                    OnPropertyChanged("System");
                }
            }
        }
        private bool _system;
    
        [DataMember]
        public bool HideLockedItems
        {
            get { return _hideLockedItems; }
            set
            {
                if (_hideLockedItems != value)
                {
                    _hideLockedItems = value;
                    OnPropertyChanged("HideLockedItems");
                }
            }
        }
        private bool _hideLockedItems;
    
        [DataMember]
        public string Description
        {
            get { return _description; }
            set
            {
                if (_description != value)
                {
                    _description = value;
                    OnPropertyChanged("Description");
                }
            }
        }
        private string _description;
    
        [DataMember]
        public byte[] XMenuItemTS
        {
            get { return _xMenuItemTS; }
            set
            {
                if (_xMenuItemTS != value)
                {
                    _xMenuItemTS = value;
                    OnPropertyChanged("XMenuItemTS");
                }
            }
        }
        private byte[] _xMenuItemTS;
    
        [DataMember]
        public bool OnlyBIAGAdminVisible
        {
            get { return _onlyBIAGAdminVisible; }
            set
            {
                if (_onlyBIAGAdminVisible != value)
                {
                    _onlyBIAGAdminVisible = value;
                    OnPropertyChanged("OnlyBIAGAdminVisible");
                }
            }
        }
        private bool _onlyBIAGAdminVisible;
    
        [DataMember]
        public Nullable<int> XClassID
        {
            get { return _xClassID; }
            set
            {
                if (_xClassID != value)
                {
                    _xClassID = value;
                    OnPropertyChanged("XClassID");
                }
            }
        }
        private Nullable<int> _xClassID;

        #endregion
        #region Navigation Properties
    
        [DataMember]
        public TrackableCollection<XMenuItem> XMenuItem1
        {
            get
            {
                if (_xMenuItem1 == null)
                {
                    _xMenuItem1 = new TrackableCollection<XMenuItem>();
                    _xMenuItem1.CollectionChanged += FixupXMenuItem1;
                }
                return _xMenuItem1;
            }
            set
            {
                if (!ReferenceEquals(_xMenuItem1, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_xMenuItem1 != null)
                    {
                        _xMenuItem1.CollectionChanged -= FixupXMenuItem1;
                    }
                    _xMenuItem1 = value;
                    if (_xMenuItem1 != null)
                    {
                        _xMenuItem1.CollectionChanged += FixupXMenuItem1;
                    }
                    OnNavigationPropertyChanged("XMenuItem1");
                }
            }
        }
        private TrackableCollection<XMenuItem> _xMenuItem1;
    
        [DataMember]
        public XMenuItem XMenuItem2
        {
            get { return _xMenuItem2; }
            set
            {
                if (!ReferenceEquals(_xMenuItem2, value))
                {
                    var previousValue = _xMenuItem2;
                    _xMenuItem2 = value;
                    FixupXMenuItem2(previousValue);
                    OnNavigationPropertyChanged("XMenuItem2");
                }
            }
        }
        private XMenuItem _xMenuItem2;

        #endregion
        #region ChangeTracking
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected override void ClearNavigationProperties()
        {
            XMenuItem1.Clear();
            XMenuItem2 = null;
        }

        #endregion
        #region Association Fixup
    
        private void FixupXMenuItem2(XMenuItem previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.XMenuItem1.Contains(this))
            {
                previousValue.XMenuItem1.Remove(this);
            }
    
            if (XMenuItem2 != null)
            {
                if (!XMenuItem2.XMenuItem1.Contains(this))
                {
                    XMenuItem2.XMenuItem1.Add(this);
                }
    
                ParentMenuItemID = XMenuItem2.MenuItemID;
            }
            else if (!skipKeys)
            {
                ParentMenuItemID = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("XMenuItem2")
                    && (ChangeTracker.OriginalValues["XMenuItem2"] == XMenuItem2))
                {
                    ChangeTracker.OriginalValues.Remove("XMenuItem2");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("XMenuItem2", previousValue);
                }
                if (XMenuItem2 != null && !XMenuItem2.ChangeTracker.ChangeTrackingEnabled)
                {
                    XMenuItem2.StartTracking();
                }
            }
        }
    
        private void FixupXMenuItem1(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (XMenuItem item in e.NewItems)
                {
                    item.XMenuItem2 = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("XMenuItem1", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (XMenuItem item in e.OldItems)
                {
                    if (ReferenceEquals(item.XMenuItem2, this))
                    {
                        item.XMenuItem2 = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("XMenuItem1", item);
                    }
                }
            }
        }

        #endregion
        #region Methods
    
    	public override bool Equals(object obj)
    	{
    		if (obj == null)
    		{
    			return false;
    		}
    		
    		if (ReferenceEquals(this, obj))
    		{
    			return true;
    		}
    
    		if (GetType() != obj.GetType())
    		{
    			return false;
    		}
    
    		var entity = (XMenuItem)obj;
    		if (!_menuItemID.Equals(entity.MenuItemID) || _menuItemID == 0)
    		{
    			return false;
    		}
    		
    		return true;
    	}
    	
    	public override int GetHashCode()
        {
            return _menuItemID.GetHashCode();
        }

        #endregion
    }
}

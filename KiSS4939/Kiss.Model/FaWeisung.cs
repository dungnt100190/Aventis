//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace Kiss.Model
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(FaLeistung))]
    [KnownType(typeof(XTask))]
    [KnownType(typeof(XUser))]
    [KnownType(typeof(XDocument))]
    [KnownType(typeof(FaWeisungProtokoll))]
    [KnownType(typeof(FaWeisung_BaPerson))]
    public partial class FaWeisung: EntityBase<FaWeisung>, IObjectWithChangeTracker
    {
        #region Primitive Properties
    
        [DataMember]
        public int FaWeisungID
        {
            get { return _faWeisungID; }
            set
            {
                if (_faWeisungID != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'FaWeisungID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _faWeisungID = value;
                    OnPropertyChanged("FaWeisungID");
                }
            }
        }
        private int _faWeisungID;
    
        [DataMember]
        public int FaLeistungID
        {
            get { return _faLeistungID; }
            set
            {
                if (_faLeistungID != value)
                {
                    ChangeTracker.RecordOriginalValue("FaLeistungID", _faLeistungID);
                    if (!IsDeserializing)
                    {
                        if (FaLeistung != null && FaLeistung.FaLeistungID != value)
                        {
                            FaLeistung = null;
                        }
                    }
                    _faLeistungID = value;
                    OnPropertyChanged("FaLeistungID");
                }
            }
        }
        private int _faLeistungID;
    
        [DataMember]
        public int UserID_Creator
        {
            get { return _userID_Creator; }
            set
            {
                if (_userID_Creator != value)
                {
                    ChangeTracker.RecordOriginalValue("UserID_Creator", _userID_Creator);
                    if (!IsDeserializing)
                    {
                        if (XUser_Creator != null && XUser_Creator.UserID != value)
                        {
                            XUser_Creator = null;
                        }
                    }
                    _userID_Creator = value;
                    OnPropertyChanged("UserID_Creator");
                }
            }
        }
        private int _userID_Creator;
    
        [DataMember]
        public Nullable<int> UserID_VerantwortlichRD
        {
            get { return _userID_VerantwortlichRD; }
            set
            {
                if (_userID_VerantwortlichRD != value)
                {
                    ChangeTracker.RecordOriginalValue("UserID_VerantwortlichRD", _userID_VerantwortlichRD);
                    if (!IsDeserializing)
                    {
                        if (XUser_VerantwortlichRd != null && XUser_VerantwortlichRd.UserID != value)
                        {
                            XUser_VerantwortlichRd = null;
                        }
                    }
                    _userID_VerantwortlichRD = value;
                    OnPropertyChanged("UserID_VerantwortlichRD");
                }
            }
        }
        private Nullable<int> _userID_VerantwortlichRD;
    
        [DataMember]
        public Nullable<int> UserID_VerantwortlichSAR
        {
            get { return _userID_VerantwortlichSAR; }
            set
            {
                if (_userID_VerantwortlichSAR != value)
                {
                    ChangeTracker.RecordOriginalValue("UserID_VerantwortlichSAR", _userID_VerantwortlichSAR);
                    if (!IsDeserializing)
                    {
                        if (XUser_VerantwortlichSar != null && XUser_VerantwortlichSar.UserID != value)
                        {
                            XUser_VerantwortlichSar = null;
                        }
                    }
                    _userID_VerantwortlichSAR = value;
                    OnPropertyChanged("UserID_VerantwortlichSAR");
                }
            }
        }
        private Nullable<int> _userID_VerantwortlichSAR;
    
        [DataMember]
        public Nullable<int> XTaskID_SAR
        {
            get { return _xTaskID_SAR; }
            set
            {
                if (_xTaskID_SAR != value)
                {
                    ChangeTracker.RecordOriginalValue("XTaskID_SAR", _xTaskID_SAR);
                    if (!IsDeserializing)
                    {
                        if (XTask != null && XTask.XTaskID != value)
                        {
                            XTask = null;
                        }
                    }
                    _xTaskID_SAR = value;
                    OnPropertyChanged("XTaskID_SAR");
                }
            }
        }
        private Nullable<int> _xTaskID_SAR;
    
        [DataMember]
        public int StatusCode
        {
            get { return _statusCode; }
            set
            {
                if (_statusCode != value)
                {
                    _statusCode = value;
                    OnPropertyChanged("StatusCode");
                }
            }
        }
        private int _statusCode;
    
        [DataMember]
        public int WeisungsartCode
        {
            get { return _weisungsartCode; }
            set
            {
                if (_weisungsartCode != value)
                {
                    _weisungsartCode = value;
                    OnPropertyChanged("WeisungsartCode");
                }
            }
        }
        private int _weisungsartCode;
    
        [DataMember]
        public string Betreff
        {
            get { return _betreff; }
            set
            {
                if (_betreff != value)
                {
                    _betreff = value;
                    OnPropertyChanged("Betreff");
                }
            }
        }
        private string _betreff;
    
        [DataMember]
        public string Ausganslage
        {
            get { return _ausganslage; }
            set
            {
                if (_ausganslage != value)
                {
                    _ausganslage = value;
                    OnPropertyChanged("Ausganslage");
                }
            }
        }
        private string _ausganslage;
    
        [DataMember]
        public string Auflage
        {
            get { return _auflage; }
            set
            {
                if (_auflage != value)
                {
                    _auflage = value;
                    OnPropertyChanged("Auflage");
                }
            }
        }
        private string _auflage;
    
        [DataMember]
        public int KonsequenzCodeAngedroht
        {
            get { return _konsequenzCodeAngedroht; }
            set
            {
                if (_konsequenzCodeAngedroht != value)
                {
                    _konsequenzCodeAngedroht = value;
                    OnPropertyChanged("KonsequenzCodeAngedroht");
                }
            }
        }
        private int _konsequenzCodeAngedroht;
    
        [DataMember]
        public int KuerzungGBAngedroht
        {
            get { return _kuerzungGBAngedroht; }
            set
            {
                if (_kuerzungGBAngedroht != value)
                {
                    _kuerzungGBAngedroht = value;
                    OnPropertyChanged("KuerzungGBAngedroht");
                }
            }
        }
        private int _kuerzungGBAngedroht;
    
        [DataMember]
        public Nullable<System.DateTime> TerminWeisung
        {
            get { return _terminWeisung; }
            set
            {
                if (_terminWeisung != value)
                {
                    _terminWeisung = value;
                    OnPropertyChanged("TerminWeisung");
                }
            }
        }
        private Nullable<System.DateTime> _terminWeisung;
    
        [DataMember]
        public Nullable<int> XDocumentID_Weisung
        {
            get { return _xDocumentID_Weisung; }
            set
            {
                if (_xDocumentID_Weisung != value)
                {
                    ChangeTracker.RecordOriginalValue("XDocumentID_Weisung", _xDocumentID_Weisung);
                    if (!IsDeserializing)
                    {
                        if (XDocument_Weisung != null && XDocument_Weisung.DocumentID != value)
                        {
                            XDocument_Weisung = null;
                        }
                    }
                    _xDocumentID_Weisung = value;
                    OnPropertyChanged("XDocumentID_Weisung");
                }
            }
        }
        private Nullable<int> _xDocumentID_Weisung;
    
        [DataMember]
        public Nullable<System.DateTime> TerminMahnung1
        {
            get { return _terminMahnung1; }
            set
            {
                if (_terminMahnung1 != value)
                {
                    _terminMahnung1 = value;
                    OnPropertyChanged("TerminMahnung1");
                }
            }
        }
        private Nullable<System.DateTime> _terminMahnung1;
    
        [DataMember]
        public Nullable<int> XDocumentID_Mahnung1
        {
            get { return _xDocumentID_Mahnung1; }
            set
            {
                if (_xDocumentID_Mahnung1 != value)
                {
                    ChangeTracker.RecordOriginalValue("XDocumentID_Mahnung1", _xDocumentID_Mahnung1);
                    if (!IsDeserializing)
                    {
                        if (XDocument_Mahnung1 != null && XDocument_Mahnung1.DocumentID != value)
                        {
                            XDocument_Mahnung1 = null;
                        }
                    }
                    _xDocumentID_Mahnung1 = value;
                    OnPropertyChanged("XDocumentID_Mahnung1");
                }
            }
        }
        private Nullable<int> _xDocumentID_Mahnung1;
    
        [DataMember]
        public Nullable<System.DateTime> TerminMahnung2
        {
            get { return _terminMahnung2; }
            set
            {
                if (_terminMahnung2 != value)
                {
                    _terminMahnung2 = value;
                    OnPropertyChanged("TerminMahnung2");
                }
            }
        }
        private Nullable<System.DateTime> _terminMahnung2;
    
        [DataMember]
        public Nullable<int> XDocumentID_Mahnung2
        {
            get { return _xDocumentID_Mahnung2; }
            set
            {
                if (_xDocumentID_Mahnung2 != value)
                {
                    ChangeTracker.RecordOriginalValue("XDocumentID_Mahnung2", _xDocumentID_Mahnung2);
                    if (!IsDeserializing)
                    {
                        if (XDocument_Mahnung2 != null && XDocument_Mahnung2.DocumentID != value)
                        {
                            XDocument_Mahnung2 = null;
                        }
                    }
                    _xDocumentID_Mahnung2 = value;
                    OnPropertyChanged("XDocumentID_Mahnung2");
                }
            }
        }
        private Nullable<int> _xDocumentID_Mahnung2;
    
        [DataMember]
        public Nullable<System.DateTime> TerminMahnung3
        {
            get { return _terminMahnung3; }
            set
            {
                if (_terminMahnung3 != value)
                {
                    _terminMahnung3 = value;
                    OnPropertyChanged("TerminMahnung3");
                }
            }
        }
        private Nullable<System.DateTime> _terminMahnung3;
    
        [DataMember]
        public Nullable<int> XDocumentID_Mahnung3
        {
            get { return _xDocumentID_Mahnung3; }
            set
            {
                if (_xDocumentID_Mahnung3 != value)
                {
                    ChangeTracker.RecordOriginalValue("XDocumentID_Mahnung3", _xDocumentID_Mahnung3);
                    if (!IsDeserializing)
                    {
                        if (XDocument_Mahnung3 != null && XDocument_Mahnung3.DocumentID != value)
                        {
                            XDocument_Mahnung3 = null;
                        }
                    }
                    _xDocumentID_Mahnung3 = value;
                    OnPropertyChanged("XDocumentID_Mahnung3");
                }
            }
        }
        private Nullable<int> _xDocumentID_Mahnung3;
    
        [DataMember]
        public Nullable<System.DateTime> DatumVerfuegung
        {
            get { return _datumVerfuegung; }
            set
            {
                if (_datumVerfuegung != value)
                {
                    _datumVerfuegung = value;
                    OnPropertyChanged("DatumVerfuegung");
                }
            }
        }
        private Nullable<System.DateTime> _datumVerfuegung;
    
        [DataMember]
        public Nullable<int> XDocumentID_Verfuegung
        {
            get { return _xDocumentID_Verfuegung; }
            set
            {
                if (_xDocumentID_Verfuegung != value)
                {
                    ChangeTracker.RecordOriginalValue("XDocumentID_Verfuegung", _xDocumentID_Verfuegung);
                    if (!IsDeserializing)
                    {
                        if (XDocument_Verfuegung != null && XDocument_Verfuegung.DocumentID != value)
                        {
                            XDocument_Verfuegung = null;
                        }
                    }
                    _xDocumentID_Verfuegung = value;
                    OnPropertyChanged("XDocumentID_Verfuegung");
                }
            }
        }
        private Nullable<int> _xDocumentID_Verfuegung;
    
        [DataMember]
        public Nullable<int> KonsequenzCodeVerfuegt
        {
            get { return _konsequenzCodeVerfuegt; }
            set
            {
                if (_konsequenzCodeVerfuegt != value)
                {
                    _konsequenzCodeVerfuegt = value;
                    OnPropertyChanged("KonsequenzCodeVerfuegt");
                }
            }
        }
        private Nullable<int> _konsequenzCodeVerfuegt;
    
        [DataMember]
        public Nullable<System.DateTime> KonsequenzDatumVon
        {
            get { return _konsequenzDatumVon; }
            set
            {
                if (_konsequenzDatumVon != value)
                {
                    _konsequenzDatumVon = value;
                    OnPropertyChanged("KonsequenzDatumVon");
                }
            }
        }
        private Nullable<System.DateTime> _konsequenzDatumVon;
    
        [DataMember]
        public Nullable<System.DateTime> KonsequenzDatumBis
        {
            get { return _konsequenzDatumBis; }
            set
            {
                if (_konsequenzDatumBis != value)
                {
                    _konsequenzDatumBis = value;
                    OnPropertyChanged("KonsequenzDatumBis");
                }
            }
        }
        private Nullable<System.DateTime> _konsequenzDatumBis;
    
        [DataMember]
        public Nullable<int> KuerzungGBVerfuegt
        {
            get { return _kuerzungGBVerfuegt; }
            set
            {
                if (_kuerzungGBVerfuegt != value)
                {
                    _kuerzungGBVerfuegt = value;
                    OnPropertyChanged("KuerzungGBVerfuegt");
                }
            }
        }
        private Nullable<int> _kuerzungGBVerfuegt;
    
        [DataMember]
        public Nullable<System.DateTime> KuerzungDatumVon
        {
            get { return _kuerzungDatumVon; }
            set
            {
                if (_kuerzungDatumVon != value)
                {
                    _kuerzungDatumVon = value;
                    OnPropertyChanged("KuerzungDatumVon");
                }
            }
        }
        private Nullable<System.DateTime> _kuerzungDatumVon;
    
        [DataMember]
        public Nullable<System.DateTime> KuerzungDatumBis
        {
            get { return _kuerzungDatumBis; }
            set
            {
                if (_kuerzungDatumBis != value)
                {
                    _kuerzungDatumBis = value;
                    OnPropertyChanged("KuerzungDatumBis");
                }
            }
        }
        private Nullable<System.DateTime> _kuerzungDatumBis;
    
        [DataMember]
        public bool WeisungVerschoben
        {
            get { return _weisungVerschoben; }
            set
            {
                if (_weisungVerschoben != value)
                {
                    _weisungVerschoben = value;
                    OnPropertyChanged("WeisungVerschoben");
                }
            }
        }
        private bool _weisungVerschoben;
    
        [DataMember]
        public bool WeisungErfuellt
        {
            get { return _weisungErfuellt; }
            set
            {
                if (_weisungErfuellt != value)
                {
                    _weisungErfuellt = value;
                    OnPropertyChanged("WeisungErfuellt");
                }
            }
        }
        private bool _weisungErfuellt;
    
        [DataMember]
        public bool CanDelete
        {
            get { return _canDelete; }
            set
            {
                if (_canDelete != value)
                {
                    _canDelete = value;
                    OnPropertyChanged("CanDelete");
                }
            }
        }
        private bool _canDelete;
    
        [DataMember]
        public string Creator
        {
            get { return _creator; }
            set
            {
                if (_creator != value)
                {
                    _creator = value;
                    OnPropertyChanged("Creator");
                }
            }
        }
        private string _creator;
    
        [DataMember]
        public System.DateTime Created
        {
            get { return _created; }
            set
            {
                if (_created != value)
                {
                    _created = value;
                    OnPropertyChanged("Created");
                }
            }
        }
        private System.DateTime _created;
    
        [DataMember]
        public string Modifier
        {
            get { return _modifier; }
            set
            {
                if (_modifier != value)
                {
                    _modifier = value;
                    OnPropertyChanged("Modifier");
                }
            }
        }
        private string _modifier;
    
        [DataMember]
        public System.DateTime Modified
        {
            get { return _modified; }
            set
            {
                if (_modified != value)
                {
                    _modified = value;
                    OnPropertyChanged("Modified");
                }
            }
        }
        private System.DateTime _modified;
    
        [DataMember]
        public byte[] FaWeisungTS
        {
            get { return _faWeisungTS; }
            set
            {
                if (_faWeisungTS != value)
                {
                    _faWeisungTS = value;
                    OnPropertyChanged("FaWeisungTS");
                }
            }
        }
        private byte[] _faWeisungTS;

        #endregion

        #region Navigation Properties
    
        [DataMember]
        public FaLeistung FaLeistung
        {
            get { return _faLeistung; }
            set
            {
                if (!ReferenceEquals(_faLeistung, value))
                {
                    var previousValue = _faLeistung;
                    _faLeistung = value;
                    FixupFaLeistung(previousValue);
                    OnNavigationPropertyChanged("FaLeistung");
                }
            }
        }
        private FaLeistung _faLeistung;
    
        [DataMember]
        public XTask XTask
        {
            get { return _xTask; }
            set
            {
                if (!ReferenceEquals(_xTask, value))
                {
                    var previousValue = _xTask;
                    _xTask = value;
                    FixupXTask(previousValue);
                    OnNavigationPropertyChanged("XTask");
                }
            }
        }
        private XTask _xTask;
    
        [DataMember]
        public XUser XUser_Creator
        {
            get { return _xUser_Creator; }
            set
            {
                if (!ReferenceEquals(_xUser_Creator, value))
                {
                    var previousValue = _xUser_Creator;
                    _xUser_Creator = value;
                    FixupXUser_Creator(previousValue);
                    OnNavigationPropertyChanged("XUser_Creator");
                }
            }
        }
        private XUser _xUser_Creator;
    
        [DataMember]
        public XUser XUser_VerantwortlichRd
        {
            get { return _xUser_VerantwortlichRd; }
            set
            {
                if (!ReferenceEquals(_xUser_VerantwortlichRd, value))
                {
                    var previousValue = _xUser_VerantwortlichRd;
                    _xUser_VerantwortlichRd = value;
                    FixupXUser_VerantwortlichRd(previousValue);
                    OnNavigationPropertyChanged("XUser_VerantwortlichRd");
                }
            }
        }
        private XUser _xUser_VerantwortlichRd;
    
        [DataMember]
        public XUser XUser_VerantwortlichSar
        {
            get { return _xUser_VerantwortlichSar; }
            set
            {
                if (!ReferenceEquals(_xUser_VerantwortlichSar, value))
                {
                    var previousValue = _xUser_VerantwortlichSar;
                    _xUser_VerantwortlichSar = value;
                    FixupXUser_VerantwortlichSar(previousValue);
                    OnNavigationPropertyChanged("XUser_VerantwortlichSar");
                }
            }
        }
        private XUser _xUser_VerantwortlichSar;
    
        [DataMember]
        public XDocument XDocument_Weisung
        {
            get { return _xDocument_Weisung; }
            set
            {
                if (!ReferenceEquals(_xDocument_Weisung, value))
                {
                    var previousValue = _xDocument_Weisung;
                    _xDocument_Weisung = value;
                    FixupXDocument_Weisung(previousValue);
                    OnNavigationPropertyChanged("XDocument_Weisung");
                }
            }
        }
        private XDocument _xDocument_Weisung;
    
        [DataMember]
        public XDocument XDocument_Mahnung1
        {
            get { return _xDocument_Mahnung1; }
            set
            {
                if (!ReferenceEquals(_xDocument_Mahnung1, value))
                {
                    var previousValue = _xDocument_Mahnung1;
                    _xDocument_Mahnung1 = value;
                    FixupXDocument_Mahnung1(previousValue);
                    OnNavigationPropertyChanged("XDocument_Mahnung1");
                }
            }
        }
        private XDocument _xDocument_Mahnung1;
    
        [DataMember]
        public XDocument XDocument_Mahnung2
        {
            get { return _xDocument_Mahnung2; }
            set
            {
                if (!ReferenceEquals(_xDocument_Mahnung2, value))
                {
                    var previousValue = _xDocument_Mahnung2;
                    _xDocument_Mahnung2 = value;
                    FixupXDocument_Mahnung2(previousValue);
                    OnNavigationPropertyChanged("XDocument_Mahnung2");
                }
            }
        }
        private XDocument _xDocument_Mahnung2;
    
        [DataMember]
        public XDocument XDocument_Mahnung3
        {
            get { return _xDocument_Mahnung3; }
            set
            {
                if (!ReferenceEquals(_xDocument_Mahnung3, value))
                {
                    var previousValue = _xDocument_Mahnung3;
                    _xDocument_Mahnung3 = value;
                    FixupXDocument_Mahnung3(previousValue);
                    OnNavigationPropertyChanged("XDocument_Mahnung3");
                }
            }
        }
        private XDocument _xDocument_Mahnung3;
    
        [DataMember]
        public XDocument XDocument_Verfuegung
        {
            get { return _xDocument_Verfuegung; }
            set
            {
                if (!ReferenceEquals(_xDocument_Verfuegung, value))
                {
                    var previousValue = _xDocument_Verfuegung;
                    _xDocument_Verfuegung = value;
                    FixupXDocument_Verfuegung(previousValue);
                    OnNavigationPropertyChanged("XDocument_Verfuegung");
                }
            }
        }
        private XDocument _xDocument_Verfuegung;
    
        [DataMember]
        public TrackableCollection<FaWeisungProtokoll> FaWeisungProtokoll
        {
            get
            {
                if (_faWeisungProtokoll == null)
                {
                    _faWeisungProtokoll = new TrackableCollection<FaWeisungProtokoll>();
                    _faWeisungProtokoll.CollectionChanged += FixupFaWeisungProtokoll;
                }
                return _faWeisungProtokoll;
            }
            set
            {
                if (!ReferenceEquals(_faWeisungProtokoll, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_faWeisungProtokoll != null)
                    {
                        _faWeisungProtokoll.CollectionChanged -= FixupFaWeisungProtokoll;
                    }
                    _faWeisungProtokoll = value;
                    if (_faWeisungProtokoll != null)
                    {
                        _faWeisungProtokoll.CollectionChanged += FixupFaWeisungProtokoll;
                    }
                    OnNavigationPropertyChanged("FaWeisungProtokoll");
                }
            }
        }
        private TrackableCollection<FaWeisungProtokoll> _faWeisungProtokoll;
    
        [DataMember]
        public TrackableCollection<FaWeisung_BaPerson> FaWeisung_BaPerson
        {
            get
            {
                if (_faWeisung_BaPerson == null)
                {
                    _faWeisung_BaPerson = new TrackableCollection<FaWeisung_BaPerson>();
                    _faWeisung_BaPerson.CollectionChanged += FixupFaWeisung_BaPerson;
                }
                return _faWeisung_BaPerson;
            }
            set
            {
                if (!ReferenceEquals(_faWeisung_BaPerson, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_faWeisung_BaPerson != null)
                    {
                        _faWeisung_BaPerson.CollectionChanged -= FixupFaWeisung_BaPerson;
                    }
                    _faWeisung_BaPerson = value;
                    if (_faWeisung_BaPerson != null)
                    {
                        _faWeisung_BaPerson.CollectionChanged += FixupFaWeisung_BaPerson;
                    }
                    OnNavigationPropertyChanged("FaWeisung_BaPerson");
                }
            }
        }
        private TrackableCollection<FaWeisung_BaPerson> _faWeisung_BaPerson;

        #endregion

        #region ChangeTracking
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected override void ClearNavigationProperties()
        {
            FaLeistung = null;
            XTask = null;
            XUser_Creator = null;
            XUser_VerantwortlichRd = null;
            XUser_VerantwortlichSar = null;
            XDocument_Weisung = null;
            XDocument_Mahnung1 = null;
            XDocument_Mahnung2 = null;
            XDocument_Mahnung3 = null;
            XDocument_Verfuegung = null;
            FaWeisungProtokoll.Clear();
            FaWeisung_BaPerson.Clear();
        }

        #endregion

        #region Association Fixup
    
        private void FixupFaLeistung(FaLeistung previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.FaWeisung.Contains(this))
            {
                previousValue.FaWeisung.Remove(this);
            }
    
            if (FaLeistung != null)
            {
                if (!FaLeistung.FaWeisung.Contains(this))
                {
                    FaLeistung.FaWeisung.Add(this);
                }
    
                FaLeistungID = FaLeistung.FaLeistungID;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("FaLeistung")
                    && (ChangeTracker.OriginalValues["FaLeistung"] == FaLeistung))
                {
                    ChangeTracker.OriginalValues.Remove("FaLeistung");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("FaLeistung", previousValue);
                }
                if (FaLeistung != null && !FaLeistung.ChangeTracker.ChangeTrackingEnabled)
                {
                    FaLeistung.StartTracking();
                }
            }
        }
    
        private void FixupXTask(XTask previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.FaWeisung.Contains(this))
            {
                previousValue.FaWeisung.Remove(this);
            }
    
            if (XTask != null)
            {
                if (!XTask.FaWeisung.Contains(this))
                {
                    XTask.FaWeisung.Add(this);
                }
    
                XTaskID_SAR = XTask.XTaskID;
            }
            else if (!skipKeys)
            {
                XTaskID_SAR = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("XTask")
                    && (ChangeTracker.OriginalValues["XTask"] == XTask))
                {
                    ChangeTracker.OriginalValues.Remove("XTask");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("XTask", previousValue);
                }
                if (XTask != null && !XTask.ChangeTracker.ChangeTrackingEnabled)
                {
                    XTask.StartTracking();
                }
            }
        }
    
        private void FixupXUser_Creator(XUser previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.FaWeisung_IsCreatorOf.Contains(this))
            {
                previousValue.FaWeisung_IsCreatorOf.Remove(this);
            }
    
            if (XUser_Creator != null)
            {
                if (!XUser_Creator.FaWeisung_IsCreatorOf.Contains(this))
                {
                    XUser_Creator.FaWeisung_IsCreatorOf.Add(this);
                }
    
                UserID_Creator = XUser_Creator.UserID;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("XUser_Creator")
                    && (ChangeTracker.OriginalValues["XUser_Creator"] == XUser_Creator))
                {
                    ChangeTracker.OriginalValues.Remove("XUser_Creator");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("XUser_Creator", previousValue);
                }
                if (XUser_Creator != null && !XUser_Creator.ChangeTracker.ChangeTrackingEnabled)
                {
                    XUser_Creator.StartTracking();
                }
            }
        }
    
        private void FixupXUser_VerantwortlichRd(XUser previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.FaWeisung_IsVerantwortlichRdOf.Contains(this))
            {
                previousValue.FaWeisung_IsVerantwortlichRdOf.Remove(this);
            }
    
            if (XUser_VerantwortlichRd != null)
            {
                if (!XUser_VerantwortlichRd.FaWeisung_IsVerantwortlichRdOf.Contains(this))
                {
                    XUser_VerantwortlichRd.FaWeisung_IsVerantwortlichRdOf.Add(this);
                }
    
                UserID_VerantwortlichRD = XUser_VerantwortlichRd.UserID;
            }
            else if (!skipKeys)
            {
                UserID_VerantwortlichRD = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("XUser_VerantwortlichRd")
                    && (ChangeTracker.OriginalValues["XUser_VerantwortlichRd"] == XUser_VerantwortlichRd))
                {
                    ChangeTracker.OriginalValues.Remove("XUser_VerantwortlichRd");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("XUser_VerantwortlichRd", previousValue);
                }
                if (XUser_VerantwortlichRd != null && !XUser_VerantwortlichRd.ChangeTracker.ChangeTrackingEnabled)
                {
                    XUser_VerantwortlichRd.StartTracking();
                }
            }
        }
    
        private void FixupXUser_VerantwortlichSar(XUser previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.FaWeisung_IsVerantwortlichSarOf.Contains(this))
            {
                previousValue.FaWeisung_IsVerantwortlichSarOf.Remove(this);
            }
    
            if (XUser_VerantwortlichSar != null)
            {
                if (!XUser_VerantwortlichSar.FaWeisung_IsVerantwortlichSarOf.Contains(this))
                {
                    XUser_VerantwortlichSar.FaWeisung_IsVerantwortlichSarOf.Add(this);
                }
    
                UserID_VerantwortlichSAR = XUser_VerantwortlichSar.UserID;
            }
            else if (!skipKeys)
            {
                UserID_VerantwortlichSAR = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("XUser_VerantwortlichSar")
                    && (ChangeTracker.OriginalValues["XUser_VerantwortlichSar"] == XUser_VerantwortlichSar))
                {
                    ChangeTracker.OriginalValues.Remove("XUser_VerantwortlichSar");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("XUser_VerantwortlichSar", previousValue);
                }
                if (XUser_VerantwortlichSar != null && !XUser_VerantwortlichSar.ChangeTracker.ChangeTrackingEnabled)
                {
                    XUser_VerantwortlichSar.StartTracking();
                }
            }
        }
    
        private void FixupXDocument_Weisung(XDocument previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.FaWeisung.Contains(this))
            {
                previousValue.FaWeisung.Remove(this);
            }
    
            if (XDocument_Weisung != null)
            {
                if (!XDocument_Weisung.FaWeisung.Contains(this))
                {
                    XDocument_Weisung.FaWeisung.Add(this);
                }
    
                XDocumentID_Weisung = XDocument_Weisung.DocumentID;
            }
            else if (!skipKeys)
            {
                XDocumentID_Weisung = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("XDocument_Weisung")
                    && (ChangeTracker.OriginalValues["XDocument_Weisung"] == XDocument_Weisung))
                {
                    ChangeTracker.OriginalValues.Remove("XDocument_Weisung");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("XDocument_Weisung", previousValue);
                }
                if (XDocument_Weisung != null && !XDocument_Weisung.ChangeTracker.ChangeTrackingEnabled)
                {
                    XDocument_Weisung.StartTracking();
                }
            }
        }
    
        private void FixupXDocument_Mahnung1(XDocument previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.FaWeisung_Mahnung1.Contains(this))
            {
                previousValue.FaWeisung_Mahnung1.Remove(this);
            }
    
            if (XDocument_Mahnung1 != null)
            {
                if (!XDocument_Mahnung1.FaWeisung_Mahnung1.Contains(this))
                {
                    XDocument_Mahnung1.FaWeisung_Mahnung1.Add(this);
                }
    
                XDocumentID_Mahnung1 = XDocument_Mahnung1.DocumentID;
            }
            else if (!skipKeys)
            {
                XDocumentID_Mahnung1 = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("XDocument_Mahnung1")
                    && (ChangeTracker.OriginalValues["XDocument_Mahnung1"] == XDocument_Mahnung1))
                {
                    ChangeTracker.OriginalValues.Remove("XDocument_Mahnung1");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("XDocument_Mahnung1", previousValue);
                }
                if (XDocument_Mahnung1 != null && !XDocument_Mahnung1.ChangeTracker.ChangeTrackingEnabled)
                {
                    XDocument_Mahnung1.StartTracking();
                }
            }
        }
    
        private void FixupXDocument_Mahnung2(XDocument previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.FaWeisung_Mahnung2.Contains(this))
            {
                previousValue.FaWeisung_Mahnung2.Remove(this);
            }
    
            if (XDocument_Mahnung2 != null)
            {
                if (!XDocument_Mahnung2.FaWeisung_Mahnung2.Contains(this))
                {
                    XDocument_Mahnung2.FaWeisung_Mahnung2.Add(this);
                }
    
                XDocumentID_Mahnung2 = XDocument_Mahnung2.DocumentID;
            }
            else if (!skipKeys)
            {
                XDocumentID_Mahnung2 = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("XDocument_Mahnung2")
                    && (ChangeTracker.OriginalValues["XDocument_Mahnung2"] == XDocument_Mahnung2))
                {
                    ChangeTracker.OriginalValues.Remove("XDocument_Mahnung2");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("XDocument_Mahnung2", previousValue);
                }
                if (XDocument_Mahnung2 != null && !XDocument_Mahnung2.ChangeTracker.ChangeTrackingEnabled)
                {
                    XDocument_Mahnung2.StartTracking();
                }
            }
        }
    
        private void FixupXDocument_Mahnung3(XDocument previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.FaWeisung_Mahnung3.Contains(this))
            {
                previousValue.FaWeisung_Mahnung3.Remove(this);
            }
    
            if (XDocument_Mahnung3 != null)
            {
                if (!XDocument_Mahnung3.FaWeisung_Mahnung3.Contains(this))
                {
                    XDocument_Mahnung3.FaWeisung_Mahnung3.Add(this);
                }
    
                XDocumentID_Mahnung3 = XDocument_Mahnung3.DocumentID;
            }
            else if (!skipKeys)
            {
                XDocumentID_Mahnung3 = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("XDocument_Mahnung3")
                    && (ChangeTracker.OriginalValues["XDocument_Mahnung3"] == XDocument_Mahnung3))
                {
                    ChangeTracker.OriginalValues.Remove("XDocument_Mahnung3");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("XDocument_Mahnung3", previousValue);
                }
                if (XDocument_Mahnung3 != null && !XDocument_Mahnung3.ChangeTracker.ChangeTrackingEnabled)
                {
                    XDocument_Mahnung3.StartTracking();
                }
            }
        }
    
        private void FixupXDocument_Verfuegung(XDocument previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.FaWeisung_Verfuegung.Contains(this))
            {
                previousValue.FaWeisung_Verfuegung.Remove(this);
            }
    
            if (XDocument_Verfuegung != null)
            {
                if (!XDocument_Verfuegung.FaWeisung_Verfuegung.Contains(this))
                {
                    XDocument_Verfuegung.FaWeisung_Verfuegung.Add(this);
                }
    
                XDocumentID_Verfuegung = XDocument_Verfuegung.DocumentID;
            }
            else if (!skipKeys)
            {
                XDocumentID_Verfuegung = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("XDocument_Verfuegung")
                    && (ChangeTracker.OriginalValues["XDocument_Verfuegung"] == XDocument_Verfuegung))
                {
                    ChangeTracker.OriginalValues.Remove("XDocument_Verfuegung");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("XDocument_Verfuegung", previousValue);
                }
                if (XDocument_Verfuegung != null && !XDocument_Verfuegung.ChangeTracker.ChangeTrackingEnabled)
                {
                    XDocument_Verfuegung.StartTracking();
                }
            }
        }
    
        private void FixupFaWeisungProtokoll(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (FaWeisungProtokoll item in e.NewItems)
                {
                    item.FaWeisung = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("FaWeisungProtokoll", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (FaWeisungProtokoll item in e.OldItems)
                {
                    if (ReferenceEquals(item.FaWeisung, this))
                    {
                        item.FaWeisung = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("FaWeisungProtokoll", item);
                    }
                }
            }
        }
    
        private void FixupFaWeisung_BaPerson(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (FaWeisung_BaPerson item in e.NewItems)
                {
                    item.FaWeisung = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("FaWeisung_BaPerson", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (FaWeisung_BaPerson item in e.OldItems)
                {
                    if (ReferenceEquals(item.FaWeisung, this))
                    {
                        item.FaWeisung = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("FaWeisung_BaPerson", item);
                    }
                }
            }
        }

        #endregion

        #region Methods
    
    	public override bool Equals(object obj)
    	{
    		if (obj == null)
    		{
    			return false;
    		}
    		
    		if (ReferenceEquals(this, obj))
    		{
    			return true;
    		}
    
    		if (GetType() != obj.GetType())
    		{
    			return false;
    		}
    
    		var entity = (FaWeisung)obj;
    		if (!_faWeisungID.Equals(entity.FaWeisungID) || _faWeisungID == 0)
    		{
    			return false;
    		}
    		
    		return true;
    	}
    	
    	public override int GetHashCode()
        {
            return _faWeisungID.GetHashCode();
        }

        #endregion

    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace Kiss.Model
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(KesMassnahme))]
    public partial class KesBehoerde: EntityBase<KesBehoerde>, IObjectWithChangeTracker
    {
        #region Primitive Properties
    
        [DataMember]
        public int KesBehoerdeID
        {
            get { return _kesBehoerdeID; }
            set
            {
                if (_kesBehoerdeID != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'KesBehoerdeID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _kesBehoerdeID = value;
                    OnPropertyChanged("KesBehoerdeID");
                }
            }
        }
        private int _kesBehoerdeID;
    
        [DataMember]
        public string KESBID
        {
            get { return _kESBID; }
            set
            {
                if (_kESBID != value)
                {
                    _kESBID = value;
                    OnPropertyChanged("KESBID");
                }
            }
        }
        private string _kESBID;
    
        [DataMember]
        public string Kanton
        {
            get { return _kanton; }
            set
            {
                if (_kanton != value)
                {
                    _kanton = value;
                    OnPropertyChanged("Kanton");
                }
            }
        }
        private string _kanton;
    
        [DataMember]
        public string KESBName
        {
            get { return _kESBName; }
            set
            {
                if (_kESBName != value)
                {
                    _kESBName = value;
                    OnPropertyChanged("KESBName");
                }
            }
        }
        private string _kESBName;
    
        [DataMember]
        public bool IsActive
        {
            get { return _isActive; }
            set
            {
                if (_isActive != value)
                {
                    _isActive = value;
                    OnPropertyChanged("IsActive");
                }
            }
        }
        private bool _isActive;
    
        [DataMember]
        public string Creator
        {
            get { return _creator; }
            set
            {
                if (_creator != value)
                {
                    _creator = value;
                    OnPropertyChanged("Creator");
                }
            }
        }
        private string _creator;
    
        [DataMember]
        public System.DateTime Created
        {
            get { return _created; }
            set
            {
                if (_created != value)
                {
                    _created = value;
                    OnPropertyChanged("Created");
                }
            }
        }
        private System.DateTime _created;
    
        [DataMember]
        public string Modifier
        {
            get { return _modifier; }
            set
            {
                if (_modifier != value)
                {
                    _modifier = value;
                    OnPropertyChanged("Modifier");
                }
            }
        }
        private string _modifier;
    
        [DataMember]
        public System.DateTime Modified
        {
            get { return _modified; }
            set
            {
                if (_modified != value)
                {
                    _modified = value;
                    OnPropertyChanged("Modified");
                }
            }
        }
        private System.DateTime _modified;
    
        [DataMember]
        public byte[] KesBehoerdeTS
        {
            get { return _kesBehoerdeTS; }
            set
            {
                if (_kesBehoerdeTS != value)
                {
                    _kesBehoerdeTS = value;
                    OnPropertyChanged("KesBehoerdeTS");
                }
            }
        }
        private byte[] _kesBehoerdeTS;

        #endregion

        #region Navigation Properties
    
        [DataMember]
        public TrackableCollection<KesMassnahme> KesMassnahme_UebernahmeVon
        {
            get
            {
                if (_kesMassnahme_UebernahmeVon == null)
                {
                    _kesMassnahme_UebernahmeVon = new TrackableCollection<KesMassnahme>();
                    _kesMassnahme_UebernahmeVon.CollectionChanged += FixupKesMassnahme_UebernahmeVon;
                }
                return _kesMassnahme_UebernahmeVon;
            }
            set
            {
                if (!ReferenceEquals(_kesMassnahme_UebernahmeVon, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_kesMassnahme_UebernahmeVon != null)
                    {
                        _kesMassnahme_UebernahmeVon.CollectionChanged -= FixupKesMassnahme_UebernahmeVon;
                    }
                    _kesMassnahme_UebernahmeVon = value;
                    if (_kesMassnahme_UebernahmeVon != null)
                    {
                        _kesMassnahme_UebernahmeVon.CollectionChanged += FixupKesMassnahme_UebernahmeVon;
                    }
                    OnNavigationPropertyChanged("KesMassnahme_UebernahmeVon");
                }
            }
        }
        private TrackableCollection<KesMassnahme> _kesMassnahme_UebernahmeVon;
    
        [DataMember]
        public TrackableCollection<KesMassnahme> KesMassnahme_UebertragungAn
        {
            get
            {
                if (_kesMassnahme_UebertragungAn == null)
                {
                    _kesMassnahme_UebertragungAn = new TrackableCollection<KesMassnahme>();
                    _kesMassnahme_UebertragungAn.CollectionChanged += FixupKesMassnahme_UebertragungAn;
                }
                return _kesMassnahme_UebertragungAn;
            }
            set
            {
                if (!ReferenceEquals(_kesMassnahme_UebertragungAn, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_kesMassnahme_UebertragungAn != null)
                    {
                        _kesMassnahme_UebertragungAn.CollectionChanged -= FixupKesMassnahme_UebertragungAn;
                    }
                    _kesMassnahme_UebertragungAn = value;
                    if (_kesMassnahme_UebertragungAn != null)
                    {
                        _kesMassnahme_UebertragungAn.CollectionChanged += FixupKesMassnahme_UebertragungAn;
                    }
                    OnNavigationPropertyChanged("KesMassnahme_UebertragungAn");
                }
            }
        }
        private TrackableCollection<KesMassnahme> _kesMassnahme_UebertragungAn;
    
        [DataMember]
        public TrackableCollection<KesMassnahme> KesMassnahme_Zustaendig
        {
            get
            {
                if (_kesMassnahme_Zustaendig == null)
                {
                    _kesMassnahme_Zustaendig = new TrackableCollection<KesMassnahme>();
                    _kesMassnahme_Zustaendig.CollectionChanged += FixupKesMassnahme_Zustaendig;
                }
                return _kesMassnahme_Zustaendig;
            }
            set
            {
                if (!ReferenceEquals(_kesMassnahme_Zustaendig, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_kesMassnahme_Zustaendig != null)
                    {
                        _kesMassnahme_Zustaendig.CollectionChanged -= FixupKesMassnahme_Zustaendig;
                    }
                    _kesMassnahme_Zustaendig = value;
                    if (_kesMassnahme_Zustaendig != null)
                    {
                        _kesMassnahme_Zustaendig.CollectionChanged += FixupKesMassnahme_Zustaendig;
                    }
                    OnNavigationPropertyChanged("KesMassnahme_Zustaendig");
                }
            }
        }
        private TrackableCollection<KesMassnahme> _kesMassnahme_Zustaendig;

        #endregion

        #region ChangeTracking
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected override void ClearNavigationProperties()
        {
            KesMassnahme_UebernahmeVon.Clear();
            KesMassnahme_UebertragungAn.Clear();
            KesMassnahme_Zustaendig.Clear();
        }

        #endregion

        #region Association Fixup
    
        private void FixupKesMassnahme_UebernahmeVon(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (KesMassnahme item in e.NewItems)
                {
                    item.UebernahmeVon_KesBehoerde = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("KesMassnahme_UebernahmeVon", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (KesMassnahme item in e.OldItems)
                {
                    if (ReferenceEquals(item.UebernahmeVon_KesBehoerde, this))
                    {
                        item.UebernahmeVon_KesBehoerde = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("KesMassnahme_UebernahmeVon", item);
                    }
                }
            }
        }
    
        private void FixupKesMassnahme_UebertragungAn(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (KesMassnahme item in e.NewItems)
                {
                    item.UebertragungAn_KesBehoerde = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("KesMassnahme_UebertragungAn", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (KesMassnahme item in e.OldItems)
                {
                    if (ReferenceEquals(item.UebertragungAn_KesBehoerde, this))
                    {
                        item.UebertragungAn_KesBehoerde = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("KesMassnahme_UebertragungAn", item);
                    }
                }
            }
        }
    
        private void FixupKesMassnahme_Zustaendig(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (KesMassnahme item in e.NewItems)
                {
                    item.Zustaendig_KesBehoerde = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("KesMassnahme_Zustaendig", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (KesMassnahme item in e.OldItems)
                {
                    if (ReferenceEquals(item.Zustaendig_KesBehoerde, this))
                    {
                        item.Zustaendig_KesBehoerde = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("KesMassnahme_Zustaendig", item);
                    }
                }
            }
        }

        #endregion

        #region Methods
    
    	public override bool Equals(object obj)
    	{
    		if (obj == null)
    		{
    			return false;
    		}
    		
    		if (ReferenceEquals(this, obj))
    		{
    			return true;
    		}
    
    		if (GetType() != obj.GetType())
    		{
    			return false;
    		}
    
    		var entity = (KesBehoerde)obj;
    		if (!_kesBehoerdeID.Equals(entity.KesBehoerdeID) || _kesBehoerdeID == 0)
    		{
    			return false;
    		}
    		
    		return true;
    	}
    	
    	public override int GetHashCode()
        {
            return _kesBehoerdeID.GetHashCode();
        }

        #endregion

    }
}

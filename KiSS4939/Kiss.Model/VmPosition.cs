//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace Kiss.Model
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(VmKlientenbudget))]
    [KnownType(typeof(VmPositionsart))]
    public partial class VmPosition: EntityBase<VmPosition>, IObjectWithChangeTracker
    {
        #region Primitive Properties
    
        [DataMember]
        public int VmPositionID
        {
            get { return _vmPositionID; }
            set
            {
                if (_vmPositionID != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'VmPositionID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _vmPositionID = value;
                    OnPropertyChanged("VmPositionID");
                }
            }
        }
        private int _vmPositionID;
    
        [DataMember]
        public int VmKlientenbudgetID
        {
            get { return _vmKlientenbudgetID; }
            set
            {
                if (_vmKlientenbudgetID != value)
                {
                    ChangeTracker.RecordOriginalValue("VmKlientenbudgetID", _vmKlientenbudgetID);
                    if (!IsDeserializing)
                    {
                        if (VmKlientenbudget != null && VmKlientenbudget.VmKlientenbudgetID != value)
                        {
                            VmKlientenbudget = null;
                        }
                    }
                    _vmKlientenbudgetID = value;
                    OnPropertyChanged("VmKlientenbudgetID");
                }
            }
        }
        private int _vmKlientenbudgetID;
    
        [DataMember]
        public int VmPositionsartID
        {
            get { return _vmPositionsartID; }
            set
            {
                if (_vmPositionsartID != value)
                {
                    ChangeTracker.RecordOriginalValue("VmPositionsartID", _vmPositionsartID);
                    if (!IsDeserializing)
                    {
                        if (VmPositionsart != null && VmPositionsart.VmPositionsartID != value)
                        {
                            VmPositionsart = null;
                        }
                    }
                    _vmPositionsartID = value;
                    OnPropertyChanged("VmPositionsartID");
                }
            }
        }
        private int _vmPositionsartID;
    
        [DataMember]
        public bool IstImportiert
        {
            get { return _istImportiert; }
            set
            {
                if (_istImportiert != value)
                {
                    _istImportiert = value;
                    OnPropertyChanged("IstImportiert");
                }
            }
        }
        private bool _istImportiert;
    
        [DataMember]
        public string Name
        {
            get { return _name; }
            set
            {
                if (_name != value)
                {
                    _name = value;
                    OnPropertyChanged("Name");
                }
            }
        }
        private string _name;
    
        [DataMember]
        public string Bemerkung
        {
            get { return _bemerkung; }
            set
            {
                if (_bemerkung != value)
                {
                    _bemerkung = value;
                    OnPropertyChanged("Bemerkung");
                }
            }
        }
        private string _bemerkung;
    
        [DataMember]
        public Nullable<System.DateTime> DatumSaldoPer
        {
            get { return _datumSaldoPer; }
            set
            {
                if (_datumSaldoPer != value)
                {
                    _datumSaldoPer = value;
                    OnPropertyChanged("DatumSaldoPer");
                }
            }
        }
        private Nullable<System.DateTime> _datumSaldoPer;
    
        [DataMember]
        public Nullable<decimal> Saldo
        {
            get { return _saldo; }
            set
            {
                if (_saldo != value)
                {
                    _saldo = value;
                    OnPropertyChanged("Saldo");
                }
            }
        }
        private Nullable<decimal> _saldo;
    
        [DataMember]
        public Nullable<decimal> BetragMonatlich
        {
            get { return _betragMonatlich; }
            set
            {
                if (_betragMonatlich != value)
                {
                    _betragMonatlich = value;
                    OnPropertyChanged("BetragMonatlich");
                }
            }
        }
        private Nullable<decimal> _betragMonatlich;
    
        [DataMember]
        public Nullable<decimal> BetragJaehrlich
        {
            get { return _betragJaehrlich; }
            set
            {
                if (_betragJaehrlich != value)
                {
                    _betragJaehrlich = value;
                    OnPropertyChanged("BetragJaehrlich");
                }
            }
        }
        private Nullable<decimal> _betragJaehrlich;
    
        [DataMember]
        public int SortKey
        {
            get { return _sortKey; }
            set
            {
                if (_sortKey != value)
                {
                    _sortKey = value;
                    OnPropertyChanged("SortKey");
                }
            }
        }
        private int _sortKey;
    
        [DataMember]
        public string Creator
        {
            get { return _creator; }
            set
            {
                if (_creator != value)
                {
                    _creator = value;
                    OnPropertyChanged("Creator");
                }
            }
        }
        private string _creator;
    
        [DataMember]
        public System.DateTime Created
        {
            get { return _created; }
            set
            {
                if (_created != value)
                {
                    _created = value;
                    OnPropertyChanged("Created");
                }
            }
        }
        private System.DateTime _created;
    
        [DataMember]
        public string Modifier
        {
            get { return _modifier; }
            set
            {
                if (_modifier != value)
                {
                    _modifier = value;
                    OnPropertyChanged("Modifier");
                }
            }
        }
        private string _modifier;
    
        [DataMember]
        public System.DateTime Modified
        {
            get { return _modified; }
            set
            {
                if (_modified != value)
                {
                    _modified = value;
                    OnPropertyChanged("Modified");
                }
            }
        }
        private System.DateTime _modified;
    
        [DataMember]
        public byte[] VmPositionTS
        {
            get { return _vmPositionTS; }
            set
            {
                if (_vmPositionTS != value)
                {
                    _vmPositionTS = value;
                    OnPropertyChanged("VmPositionTS");
                }
            }
        }
        private byte[] _vmPositionTS;

        #endregion

        #region Navigation Properties
    
        [DataMember]
        public VmKlientenbudget VmKlientenbudget
        {
            get { return _vmKlientenbudget; }
            set
            {
                if (!ReferenceEquals(_vmKlientenbudget, value))
                {
                    var previousValue = _vmKlientenbudget;
                    _vmKlientenbudget = value;
                    FixupVmKlientenbudget(previousValue);
                    OnNavigationPropertyChanged("VmKlientenbudget");
                }
            }
        }
        private VmKlientenbudget _vmKlientenbudget;
    
        [DataMember]
        public VmPositionsart VmPositionsart
        {
            get { return _vmPositionsart; }
            set
            {
                if (!ReferenceEquals(_vmPositionsart, value))
                {
                    var previousValue = _vmPositionsart;
                    _vmPositionsart = value;
                    FixupVmPositionsart(previousValue);
                    OnNavigationPropertyChanged("VmPositionsart");
                }
            }
        }
        private VmPositionsart _vmPositionsart;

        #endregion

        #region ChangeTracking
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected override void ClearNavigationProperties()
        {
            VmKlientenbudget = null;
            VmPositionsart = null;
        }

        #endregion

        #region Association Fixup
    
        private void FixupVmKlientenbudget(VmKlientenbudget previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.VmPosition.Contains(this))
            {
                previousValue.VmPosition.Remove(this);
            }
    
            if (VmKlientenbudget != null)
            {
                if (!VmKlientenbudget.VmPosition.Contains(this))
                {
                    VmKlientenbudget.VmPosition.Add(this);
                }
    
                VmKlientenbudgetID = VmKlientenbudget.VmKlientenbudgetID;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("VmKlientenbudget")
                    && (ChangeTracker.OriginalValues["VmKlientenbudget"] == VmKlientenbudget))
                {
                    ChangeTracker.OriginalValues.Remove("VmKlientenbudget");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("VmKlientenbudget", previousValue);
                }
                if (VmKlientenbudget != null && !VmKlientenbudget.ChangeTracker.ChangeTrackingEnabled)
                {
                    VmKlientenbudget.StartTracking();
                }
            }
        }
    
        private void FixupVmPositionsart(VmPositionsart previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.VmPosition.Contains(this))
            {
                previousValue.VmPosition.Remove(this);
            }
    
            if (VmPositionsart != null)
            {
                if (!VmPositionsart.VmPosition.Contains(this))
                {
                    VmPositionsart.VmPosition.Add(this);
                }
    
                VmPositionsartID = VmPositionsart.VmPositionsartID;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("VmPositionsart")
                    && (ChangeTracker.OriginalValues["VmPositionsart"] == VmPositionsart))
                {
                    ChangeTracker.OriginalValues.Remove("VmPositionsart");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("VmPositionsart", previousValue);
                }
                if (VmPositionsart != null && !VmPositionsart.ChangeTracker.ChangeTrackingEnabled)
                {
                    VmPositionsart.StartTracking();
                }
            }
        }

        #endregion

        #region Methods
    
    	public override bool Equals(object obj)
    	{
    		if (obj == null)
    		{
    			return false;
    		}
    		
    		if (ReferenceEquals(this, obj))
    		{
    			return true;
    		}
    
    		if (GetType() != obj.GetType())
    		{
    			return false;
    		}
    
    		var entity = (VmPosition)obj;
    		if (!_vmPositionID.Equals(entity.VmPositionID) || _vmPositionID == 0)
    		{
    			return false;
    		}
    		
    		return true;
    	}
    	
    	public override int GetHashCode()
        {
            return _vmPositionID.GetHashCode();
        }

        #endregion

    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace Kiss.Model
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(FaKategorisierung))]
    [KnownType(typeof(XOrgUnit))]
    public partial class FaKategorisierungEksProdukt: EntityBase<FaKategorisierungEksProdukt>, IObjectWithChangeTracker
    {
        #region Primitive Properties
    
        [DataMember]
        public int FaKategorisierungEksProduktID
        {
            get { return _faKategorisierungEksProduktID; }
            set
            {
                if (_faKategorisierungEksProduktID != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'FaKategorisierungEksProduktID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _faKategorisierungEksProduktID = value;
                    OnPropertyChanged("FaKategorisierungEksProduktID");
                }
            }
        }
        private int _faKategorisierungEksProduktID;
    
        [DataMember]
        public int OrgUnitID
        {
            get { return _orgUnitID; }
            set
            {
                if (_orgUnitID != value)
                {
                    ChangeTracker.RecordOriginalValue("OrgUnitID", _orgUnitID);
                    if (!IsDeserializing)
                    {
                        if (XOrgUnit != null && XOrgUnit.OrgUnitID != value)
                        {
                            XOrgUnit = null;
                        }
                    }
                    _orgUnitID = value;
                    OnPropertyChanged("OrgUnitID");
                }
            }
        }
        private int _orgUnitID;
    
        [DataMember]
        public string Text
        {
            get { return _text; }
            set
            {
                if (_text != value)
                {
                    _text = value;
                    OnPropertyChanged("Text");
                }
            }
        }
        private string _text;
    
        [DataMember]
        public string ShortText
        {
            get { return _shortText; }
            set
            {
                if (_shortText != value)
                {
                    _shortText = value;
                    OnPropertyChanged("ShortText");
                }
            }
        }
        private string _shortText;
    
        [DataMember]
        public Nullable<int> Frist
        {
            get { return _frist; }
            set
            {
                if (_frist != value)
                {
                    _frist = value;
                    OnPropertyChanged("Frist");
                }
            }
        }
        private Nullable<int> _frist;
    
        [DataMember]
        public int FaKategorisierungEksProduktFristTypCode
        {
            get { return _faKategorisierungEksProduktFristTypCode; }
            set
            {
                if (_faKategorisierungEksProduktFristTypCode != value)
                {
                    _faKategorisierungEksProduktFristTypCode = value;
                    OnPropertyChanged("FaKategorisierungEksProduktFristTypCode");
                }
            }
        }
        private int _faKategorisierungEksProduktFristTypCode;
    
        [DataMember]
        public string Creator
        {
            get { return _creator; }
            set
            {
                if (_creator != value)
                {
                    _creator = value;
                    OnPropertyChanged("Creator");
                }
            }
        }
        private string _creator;
    
        [DataMember]
        public System.DateTime Created
        {
            get { return _created; }
            set
            {
                if (_created != value)
                {
                    _created = value;
                    OnPropertyChanged("Created");
                }
            }
        }
        private System.DateTime _created;
    
        [DataMember]
        public string Modifier
        {
            get { return _modifier; }
            set
            {
                if (_modifier != value)
                {
                    _modifier = value;
                    OnPropertyChanged("Modifier");
                }
            }
        }
        private string _modifier;
    
        [DataMember]
        public System.DateTime Modified
        {
            get { return _modified; }
            set
            {
                if (_modified != value)
                {
                    _modified = value;
                    OnPropertyChanged("Modified");
                }
            }
        }
        private System.DateTime _modified;
    
        [DataMember]
        public byte[] FaKategorisierungEksProduktTS
        {
            get { return _faKategorisierungEksProduktTS; }
            set
            {
                if (_faKategorisierungEksProduktTS != value)
                {
                    _faKategorisierungEksProduktTS = value;
                    OnPropertyChanged("FaKategorisierungEksProduktTS");
                }
            }
        }
        private byte[] _faKategorisierungEksProduktTS;
    
        [DataMember]
        public int FaKategorieCode
        {
            get { return _faKategorieCode; }
            set
            {
                if (_faKategorieCode != value)
                {
                    _faKategorieCode = value;
                    OnPropertyChanged("FaKategorieCode");
                }
            }
        }
        private int _faKategorieCode;

        #endregion

        #region Navigation Properties
    
        [DataMember]
        public TrackableCollection<FaKategorisierung> FaKategorisierung
        {
            get
            {
                if (_faKategorisierung == null)
                {
                    _faKategorisierung = new TrackableCollection<FaKategorisierung>();
                    _faKategorisierung.CollectionChanged += FixupFaKategorisierung;
                }
                return _faKategorisierung;
            }
            set
            {
                if (!ReferenceEquals(_faKategorisierung, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_faKategorisierung != null)
                    {
                        _faKategorisierung.CollectionChanged -= FixupFaKategorisierung;
                    }
                    _faKategorisierung = value;
                    if (_faKategorisierung != null)
                    {
                        _faKategorisierung.CollectionChanged += FixupFaKategorisierung;
                    }
                    OnNavigationPropertyChanged("FaKategorisierung");
                }
            }
        }
        private TrackableCollection<FaKategorisierung> _faKategorisierung;
    
        [DataMember]
        public XOrgUnit XOrgUnit
        {
            get { return _xOrgUnit; }
            set
            {
                if (!ReferenceEquals(_xOrgUnit, value))
                {
                    var previousValue = _xOrgUnit;
                    _xOrgUnit = value;
                    FixupXOrgUnit(previousValue);
                    OnNavigationPropertyChanged("XOrgUnit");
                }
            }
        }
        private XOrgUnit _xOrgUnit;

        #endregion

        #region ChangeTracking
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected override void ClearNavigationProperties()
        {
            FaKategorisierung.Clear();
            XOrgUnit = null;
        }

        #endregion

        #region Association Fixup
    
        private void FixupXOrgUnit(XOrgUnit previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.FaKategorisierungEksProdukt.Contains(this))
            {
                previousValue.FaKategorisierungEksProdukt.Remove(this);
            }
    
            if (XOrgUnit != null)
            {
                if (!XOrgUnit.FaKategorisierungEksProdukt.Contains(this))
                {
                    XOrgUnit.FaKategorisierungEksProdukt.Add(this);
                }
    
                OrgUnitID = XOrgUnit.OrgUnitID;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("XOrgUnit")
                    && (ChangeTracker.OriginalValues["XOrgUnit"] == XOrgUnit))
                {
                    ChangeTracker.OriginalValues.Remove("XOrgUnit");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("XOrgUnit", previousValue);
                }
                if (XOrgUnit != null && !XOrgUnit.ChangeTracker.ChangeTrackingEnabled)
                {
                    XOrgUnit.StartTracking();
                }
            }
        }
    
        private void FixupFaKategorisierung(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (FaKategorisierung item in e.NewItems)
                {
                    item.FaKategorisierungEksProdukt = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("FaKategorisierung", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (FaKategorisierung item in e.OldItems)
                {
                    if (ReferenceEquals(item.FaKategorisierungEksProdukt, this))
                    {
                        item.FaKategorisierungEksProdukt = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("FaKategorisierung", item);
                    }
                }
            }
        }

        #endregion

        #region Methods
    
    	public override bool Equals(object obj)
    	{
    		if (obj == null)
    		{
    			return false;
    		}
    		
    		if (ReferenceEquals(this, obj))
    		{
    			return true;
    		}
    
    		if (GetType() != obj.GetType())
    		{
    			return false;
    		}
    
    		var entity = (FaKategorisierungEksProdukt)obj;
    		if (!_faKategorisierungEksProduktID.Equals(entity.FaKategorisierungEksProduktID) || _faKategorisierungEksProduktID == 0)
    		{
    			return false;
    		}
    		
    		return true;
    	}
    	
    	public override int GetHashCode()
        {
            return _faKategorisierungEksProduktID.GetHashCode();
        }

        #endregion

    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace Kiss.Model
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(FaWeisung))]
    public partial class FaWeisungProtokoll: EntityBase<FaWeisungProtokoll>, IObjectWithChangeTracker
    {
        #region Primitive Properties
    
        [DataMember]
        public int FaWeisungProtokollID
        {
            get { return _faWeisungProtokollID; }
            set
            {
                if (_faWeisungProtokollID != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'FaWeisungProtokollID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _faWeisungProtokollID = value;
                    OnPropertyChanged("FaWeisungProtokollID");
                }
            }
        }
        private int _faWeisungProtokollID;
    
        [DataMember]
        public int FaWeisungID
        {
            get { return _faWeisungID; }
            set
            {
                if (_faWeisungID != value)
                {
                    ChangeTracker.RecordOriginalValue("FaWeisungID", _faWeisungID);
                    if (!IsDeserializing)
                    {
                        if (FaWeisung != null && FaWeisung.FaWeisungID != value)
                        {
                            FaWeisung = null;
                        }
                    }
                    _faWeisungID = value;
                    OnPropertyChanged("FaWeisungID");
                }
            }
        }
        private int _faWeisungID;
    
        [DataMember]
        public string Aktion
        {
            get { return _aktion; }
            set
            {
                if (_aktion != value)
                {
                    _aktion = value;
                    OnPropertyChanged("Aktion");
                }
            }
        }
        private string _aktion;
    
        [DataMember]
        public string Bemerkung
        {
            get { return _bemerkung; }
            set
            {
                if (_bemerkung != value)
                {
                    _bemerkung = value;
                    OnPropertyChanged("Bemerkung");
                }
            }
        }
        private string _bemerkung;
    
        [DataMember]
        public Nullable<System.DateTime> Termin
        {
            get { return _termin; }
            set
            {
                if (_termin != value)
                {
                    _termin = value;
                    OnPropertyChanged("Termin");
                }
            }
        }
        private Nullable<System.DateTime> _termin;
    
        [DataMember]
        public string Verantwortlich
        {
            get { return _verantwortlich; }
            set
            {
                if (_verantwortlich != value)
                {
                    _verantwortlich = value;
                    OnPropertyChanged("Verantwortlich");
                }
            }
        }
        private string _verantwortlich;
    
        [DataMember]
        public string Creator
        {
            get { return _creator; }
            set
            {
                if (_creator != value)
                {
                    _creator = value;
                    OnPropertyChanged("Creator");
                }
            }
        }
        private string _creator;
    
        [DataMember]
        public System.DateTime Created
        {
            get { return _created; }
            set
            {
                if (_created != value)
                {
                    _created = value;
                    OnPropertyChanged("Created");
                }
            }
        }
        private System.DateTime _created;
    
        [DataMember]
        public string Modifier
        {
            get { return _modifier; }
            set
            {
                if (_modifier != value)
                {
                    _modifier = value;
                    OnPropertyChanged("Modifier");
                }
            }
        }
        private string _modifier;
    
        [DataMember]
        public System.DateTime Modified
        {
            get { return _modified; }
            set
            {
                if (_modified != value)
                {
                    _modified = value;
                    OnPropertyChanged("Modified");
                }
            }
        }
        private System.DateTime _modified;
    
        [DataMember]
        public byte[] FaWeisung_ProtokollTS
        {
            get { return _faWeisung_ProtokollTS; }
            set
            {
                if (_faWeisung_ProtokollTS != value)
                {
                    _faWeisung_ProtokollTS = value;
                    OnPropertyChanged("FaWeisung_ProtokollTS");
                }
            }
        }
        private byte[] _faWeisung_ProtokollTS;

        #endregion

        #region Navigation Properties
    
        [DataMember]
        public FaWeisung FaWeisung
        {
            get { return _faWeisung; }
            set
            {
                if (!ReferenceEquals(_faWeisung, value))
                {
                    var previousValue = _faWeisung;
                    _faWeisung = value;
                    FixupFaWeisung(previousValue);
                    OnNavigationPropertyChanged("FaWeisung");
                }
            }
        }
        private FaWeisung _faWeisung;

        #endregion

        #region ChangeTracking
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected override void ClearNavigationProperties()
        {
            FaWeisung = null;
        }

        #endregion

        #region Association Fixup
    
        private void FixupFaWeisung(FaWeisung previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.FaWeisungProtokoll.Contains(this))
            {
                previousValue.FaWeisungProtokoll.Remove(this);
            }
    
            if (FaWeisung != null)
            {
                if (!FaWeisung.FaWeisungProtokoll.Contains(this))
                {
                    FaWeisung.FaWeisungProtokoll.Add(this);
                }
    
                FaWeisungID = FaWeisung.FaWeisungID;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("FaWeisung")
                    && (ChangeTracker.OriginalValues["FaWeisung"] == FaWeisung))
                {
                    ChangeTracker.OriginalValues.Remove("FaWeisung");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("FaWeisung", previousValue);
                }
                if (FaWeisung != null && !FaWeisung.ChangeTracker.ChangeTrackingEnabled)
                {
                    FaWeisung.StartTracking();
                }
            }
        }

        #endregion

        #region Methods
    
    	public override bool Equals(object obj)
    	{
    		if (obj == null)
    		{
    			return false;
    		}
    		
    		if (ReferenceEquals(this, obj))
    		{
    			return true;
    		}
    
    		if (GetType() != obj.GetType())
    		{
    			return false;
    		}
    
    		var entity = (FaWeisungProtokoll)obj;
    		if (!_faWeisungProtokollID.Equals(entity.FaWeisungProtokollID) || _faWeisungProtokollID == 0)
    		{
    			return false;
    		}
    		
    		return true;
    	}
    	
    	public override int GetHashCode()
        {
            return _faWeisungProtokollID.GetHashCode();
        }

        #endregion

    }
}

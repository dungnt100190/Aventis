//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace Kiss.Model
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(BaPerson))]
    [KnownType(typeof(FaFall))]
    public partial class FaFallPerson: EntityBase<FaFallPerson>, IObjectWithChangeTracker
    {
        #region Primitive Properties
    
        [DataMember]
        public int FaFallPersonID
        {
            get { return _faFallPersonID; }
            set
            {
                if (_faFallPersonID != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'FaFallPersonID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _faFallPersonID = value;
                    OnPropertyChanged("FaFallPersonID");
                }
            }
        }
        private int _faFallPersonID;
    
        [DataMember]
        public int FaFallID
        {
            get { return _faFallID; }
            set
            {
                if (_faFallID != value)
                {
                    ChangeTracker.RecordOriginalValue("FaFallID", _faFallID);
                    if (!IsDeserializing)
                    {
                        if (FaFall != null && FaFall.FaFallID != value)
                        {
                            FaFall = null;
                        }
                    }
                    _faFallID = value;
                    OnPropertyChanged("FaFallID");
                }
            }
        }
        private int _faFallID;
    
        [DataMember]
        public int BaPersonID
        {
            get { return _baPersonID; }
            set
            {
                if (_baPersonID != value)
                {
                    ChangeTracker.RecordOriginalValue("BaPersonID", _baPersonID);
                    if (!IsDeserializing)
                    {
                        if (BaPerson != null && BaPerson.BaPersonID != value)
                        {
                            BaPerson = null;
                        }
                    }
                    _baPersonID = value;
                    OnPropertyChanged("BaPersonID");
                }
            }
        }
        private int _baPersonID;
    
        [DataMember]
        public Nullable<System.DateTime> DatumVon
        {
            get { return _datumVon; }
            set
            {
                if (_datumVon != value)
                {
                    _datumVon = value;
                    OnPropertyChanged("DatumVon");
                }
            }
        }
        private Nullable<System.DateTime> _datumVon;
    
        [DataMember]
        public Nullable<System.DateTime> DatumBis
        {
            get { return _datumBis; }
            set
            {
                if (_datumBis != value)
                {
                    _datumBis = value;
                    OnPropertyChanged("DatumBis");
                }
            }
        }
        private Nullable<System.DateTime> _datumBis;

        #endregion

        #region Navigation Properties
    
        [DataMember]
        public BaPerson BaPerson
        {
            get { return _baPerson; }
            set
            {
                if (!ReferenceEquals(_baPerson, value))
                {
                    var previousValue = _baPerson;
                    _baPerson = value;
                    FixupBaPerson(previousValue);
                    OnNavigationPropertyChanged("BaPerson");
                }
            }
        }
        private BaPerson _baPerson;
    
        [DataMember]
        public FaFall FaFall
        {
            get { return _faFall; }
            set
            {
                if (!ReferenceEquals(_faFall, value))
                {
                    var previousValue = _faFall;
                    _faFall = value;
                    FixupFaFall(previousValue);
                    OnNavigationPropertyChanged("FaFall");
                }
            }
        }
        private FaFall _faFall;

        #endregion

        #region ChangeTracking
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected override void ClearNavigationProperties()
        {
            BaPerson = null;
            FaFall = null;
        }

        #endregion

        #region Association Fixup
    
        private void FixupBaPerson(BaPerson previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.FaFallPerson.Contains(this))
            {
                previousValue.FaFallPerson.Remove(this);
            }
    
            if (BaPerson != null)
            {
                if (!BaPerson.FaFallPerson.Contains(this))
                {
                    BaPerson.FaFallPerson.Add(this);
                }
    
                BaPersonID = BaPerson.BaPersonID;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("BaPerson")
                    && (ChangeTracker.OriginalValues["BaPerson"] == BaPerson))
                {
                    ChangeTracker.OriginalValues.Remove("BaPerson");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("BaPerson", previousValue);
                }
                if (BaPerson != null && !BaPerson.ChangeTracker.ChangeTrackingEnabled)
                {
                    BaPerson.StartTracking();
                }
            }
        }
    
        private void FixupFaFall(FaFall previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.FaFallPerson.Contains(this))
            {
                previousValue.FaFallPerson.Remove(this);
            }
    
            if (FaFall != null)
            {
                if (!FaFall.FaFallPerson.Contains(this))
                {
                    FaFall.FaFallPerson.Add(this);
                }
    
                FaFallID = FaFall.FaFallID;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("FaFall")
                    && (ChangeTracker.OriginalValues["FaFall"] == FaFall))
                {
                    ChangeTracker.OriginalValues.Remove("FaFall");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("FaFall", previousValue);
                }
                if (FaFall != null && !FaFall.ChangeTracker.ChangeTrackingEnabled)
                {
                    FaFall.StartTracking();
                }
            }
        }

        #endregion

        #region Methods
    
    	public override bool Equals(object obj)
    	{
    		if (obj == null)
    		{
    			return false;
    		}
    		
    		if (ReferenceEquals(this, obj))
    		{
    			return true;
    		}
    
    		if (GetType() != obj.GetType())
    		{
    			return false;
    		}
    
    		var entity = (FaFallPerson)obj;
    		if (!_faFallPersonID.Equals(entity.FaFallPersonID) || _faFallPersonID == 0)
    		{
    			return false;
    		}
    		
    		return true;
    	}
    	
    	public override int GetHashCode()
        {
            return _faFallPersonID.GetHashCode();
        }

        #endregion

    }
}

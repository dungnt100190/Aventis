//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace Kiss.Model
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(XTask))]
    public partial class FaPendenzgruppe: EntityBase<FaPendenzgruppe>, IObjectWithChangeTracker
    {
        #region Primitive Properties
    
        [DataMember]
        public int FaPendenzgruppeID
        {
            get { return _faPendenzgruppeID; }
            set
            {
                if (_faPendenzgruppeID != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'FaPendenzgruppeID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _faPendenzgruppeID = value;
                    OnPropertyChanged("FaPendenzgruppeID");
                }
            }
        }
        private int _faPendenzgruppeID;
    
        [DataMember]
        public string Name
        {
            get { return _name; }
            set
            {
                if (_name != value)
                {
                    _name = value;
                    OnPropertyChanged("Name");
                }
            }
        }
        private string _name;
    
        [DataMember]
        public string Beschreibung
        {
            get { return _beschreibung; }
            set
            {
                if (_beschreibung != value)
                {
                    _beschreibung = value;
                    OnPropertyChanged("Beschreibung");
                }
            }
        }
        private string _beschreibung;
    
        [DataMember]
        public byte[] FaPendenzgruppeTS
        {
            get { return _faPendenzgruppeTS; }
            set
            {
                if (_faPendenzgruppeTS != value)
                {
                    _faPendenzgruppeTS = value;
                    OnPropertyChanged("FaPendenzgruppeTS");
                }
            }
        }
        private byte[] _faPendenzgruppeTS;

        #endregion

        #region Navigation Properties
    
        [DataMember]
        public TrackableCollection<XTask> XTask_Received
        {
            get
            {
                if (_xTask_Received == null)
                {
                    _xTask_Received = new TrackableCollection<XTask>();
                    _xTask_Received.CollectionChanged += FixupXTask_Received;
                }
                return _xTask_Received;
            }
            set
            {
                if (!ReferenceEquals(_xTask_Received, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_xTask_Received != null)
                    {
                        _xTask_Received.CollectionChanged -= FixupXTask_Received;
                    }
                    _xTask_Received = value;
                    if (_xTask_Received != null)
                    {
                        _xTask_Received.CollectionChanged += FixupXTask_Received;
                    }
                    OnNavigationPropertyChanged("XTask_Received");
                }
            }
        }
        private TrackableCollection<XTask> _xTask_Received;

        #endregion

        #region ChangeTracking
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected override void ClearNavigationProperties()
        {
            XTask_Received.Clear();
        }

        #endregion

        #region Association Fixup
    
        private void FixupXTask_Received(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (XTask item in e.NewItems)
                {
                    item.FaPendenzgruppe_Receiver = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("XTask_Received", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (XTask item in e.OldItems)
                {
                    if (ReferenceEquals(item.FaPendenzgruppe_Receiver, this))
                    {
                        item.FaPendenzgruppe_Receiver = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("XTask_Received", item);
                    }
                }
            }
        }

        #endregion

        #region Methods
    
    	public override bool Equals(object obj)
    	{
    		if (obj == null)
    		{
    			return false;
    		}
    		
    		if (ReferenceEquals(this, obj))
    		{
    			return true;
    		}
    
    		if (GetType() != obj.GetType())
    		{
    			return false;
    		}
    
    		var entity = (FaPendenzgruppe)obj;
    		if (!_faPendenzgruppeID.Equals(entity.FaPendenzgruppeID) || _faPendenzgruppeID == 0)
    		{
    			return false;
    		}
    		
    		return true;
    	}
    	
    	public override int GetHashCode()
        {
            return _faPendenzgruppeID.GetHashCode();
        }

        #endregion

    }
}

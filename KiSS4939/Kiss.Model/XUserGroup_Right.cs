//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace Kiss.Model
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(XClass))]
    [KnownType(typeof(XRight))]
    [KnownType(typeof(XUserGroup))]
    public partial class XUserGroup_Right: EntityBase<XUserGroup_Right>, IObjectWithChangeTracker
    {
        #region Primitive Properties
    
        [DataMember]
        public int UserGroup_RightID
        {
            get { return _userGroup_RightID; }
            set
            {
                if (_userGroup_RightID != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'UserGroup_RightID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _userGroup_RightID = value;
                    OnPropertyChanged("UserGroup_RightID");
                }
            }
        }
        private int _userGroup_RightID;
    
        [DataMember]
        public int UserGroupID
        {
            get { return _userGroupID; }
            set
            {
                if (_userGroupID != value)
                {
                    ChangeTracker.RecordOriginalValue("UserGroupID", _userGroupID);
                    if (!IsDeserializing)
                    {
                        if (XUserGroup != null && XUserGroup.UserGroupID != value)
                        {
                            XUserGroup = null;
                        }
                    }
                    _userGroupID = value;
                    OnPropertyChanged("UserGroupID");
                }
            }
        }
        private int _userGroupID;
    
        [DataMember]
        public Nullable<int> RightID
        {
            get { return _rightID; }
            set
            {
                if (_rightID != value)
                {
                    ChangeTracker.RecordOriginalValue("RightID", _rightID);
                    if (!IsDeserializing)
                    {
                        if (XRight != null && XRight.RightID != value)
                        {
                            XRight = null;
                        }
                    }
                    _rightID = value;
                    OnPropertyChanged("RightID");
                }
            }
        }
        private Nullable<int> _rightID;
    
        [DataMember]
        public string MaskName
        {
            get { return _maskName; }
            set
            {
                if (_maskName != value)
                {
                    _maskName = value;
                    OnPropertyChanged("MaskName");
                }
            }
        }
        private string _maskName;
    
        [DataMember]
        public bool MayInsert
        {
            get { return _mayInsert; }
            set
            {
                if (_mayInsert != value)
                {
                    _mayInsert = value;
                    OnPropertyChanged("MayInsert");
                }
            }
        }
        private bool _mayInsert;
    
        [DataMember]
        public bool MayUpdate
        {
            get { return _mayUpdate; }
            set
            {
                if (_mayUpdate != value)
                {
                    _mayUpdate = value;
                    OnPropertyChanged("MayUpdate");
                }
            }
        }
        private bool _mayUpdate;
    
        [DataMember]
        public bool MayDelete
        {
            get { return _mayDelete; }
            set
            {
                if (_mayDelete != value)
                {
                    _mayDelete = value;
                    OnPropertyChanged("MayDelete");
                }
            }
        }
        private bool _mayDelete;
    
        [DataMember]
        public byte[] XUserGroup_RightTS
        {
            get { return _xUserGroup_RightTS; }
            set
            {
                if (_xUserGroup_RightTS != value)
                {
                    _xUserGroup_RightTS = value;
                    OnPropertyChanged("XUserGroup_RightTS");
                }
            }
        }
        private byte[] _xUserGroup_RightTS;
    
        [DataMember]
        public string QueryName
        {
            get { return _queryName; }
            set
            {
                if (_queryName != value)
                {
                    _queryName = value;
                    OnPropertyChanged("QueryName");
                }
            }
        }
        private string _queryName;
    
        [DataMember]
        public string ClassName
        {
            get { return _className; }
            set
            {
                if (_className != value)
                {
                    _className = value;
                    OnPropertyChanged("ClassName");
                }
            }
        }
        private string _className;
    
        [DataMember]
        public Nullable<int> XClassID
        {
            get { return _xClassID; }
            set
            {
                if (_xClassID != value)
                {
                    ChangeTracker.RecordOriginalValue("XClassID", _xClassID);
                    if (!IsDeserializing)
                    {
                        if (XClass != null && XClass.XClassID != value)
                        {
                            XClass = null;
                        }
                    }
                    _xClassID = value;
                    OnPropertyChanged("XClassID");
                }
            }
        }
        private Nullable<int> _xClassID;

        #endregion

        #region Navigation Properties
    
        [DataMember]
        public XClass XClass
        {
            get { return _xClass; }
            set
            {
                if (!ReferenceEquals(_xClass, value))
                {
                    var previousValue = _xClass;
                    _xClass = value;
                    FixupXClass(previousValue);
                    OnNavigationPropertyChanged("XClass");
                }
            }
        }
        private XClass _xClass;
    
        [DataMember]
        public XRight XRight
        {
            get { return _xRight; }
            set
            {
                if (!ReferenceEquals(_xRight, value))
                {
                    var previousValue = _xRight;
                    _xRight = value;
                    FixupXRight(previousValue);
                    OnNavigationPropertyChanged("XRight");
                }
            }
        }
        private XRight _xRight;
    
        [DataMember]
        public XUserGroup XUserGroup
        {
            get { return _xUserGroup; }
            set
            {
                if (!ReferenceEquals(_xUserGroup, value))
                {
                    var previousValue = _xUserGroup;
                    _xUserGroup = value;
                    FixupXUserGroup(previousValue);
                    OnNavigationPropertyChanged("XUserGroup");
                }
            }
        }
        private XUserGroup _xUserGroup;

        #endregion

        #region ChangeTracking
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected override void ClearNavigationProperties()
        {
            XClass = null;
            XRight = null;
            XUserGroup = null;
        }

        #endregion

        #region Association Fixup
    
        private void FixupXClass(XClass previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.XUserGroup_Right.Contains(this))
            {
                previousValue.XUserGroup_Right.Remove(this);
            }
    
            if (XClass != null)
            {
                if (!XClass.XUserGroup_Right.Contains(this))
                {
                    XClass.XUserGroup_Right.Add(this);
                }
    
                XClassID = XClass.XClassID;
            }
            else if (!skipKeys)
            {
                XClassID = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("XClass")
                    && (ChangeTracker.OriginalValues["XClass"] == XClass))
                {
                    ChangeTracker.OriginalValues.Remove("XClass");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("XClass", previousValue);
                }
                if (XClass != null && !XClass.ChangeTracker.ChangeTrackingEnabled)
                {
                    XClass.StartTracking();
                }
            }
        }
    
        private void FixupXRight(XRight previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.XUserGroup_Right.Contains(this))
            {
                previousValue.XUserGroup_Right.Remove(this);
            }
    
            if (XRight != null)
            {
                if (!XRight.XUserGroup_Right.Contains(this))
                {
                    XRight.XUserGroup_Right.Add(this);
                }
    
                RightID = XRight.RightID;
            }
            else if (!skipKeys)
            {
                RightID = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("XRight")
                    && (ChangeTracker.OriginalValues["XRight"] == XRight))
                {
                    ChangeTracker.OriginalValues.Remove("XRight");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("XRight", previousValue);
                }
                if (XRight != null && !XRight.ChangeTracker.ChangeTrackingEnabled)
                {
                    XRight.StartTracking();
                }
            }
        }
    
        private void FixupXUserGroup(XUserGroup previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.XUserGroup_Right.Contains(this))
            {
                previousValue.XUserGroup_Right.Remove(this);
            }
    
            if (XUserGroup != null)
            {
                if (!XUserGroup.XUserGroup_Right.Contains(this))
                {
                    XUserGroup.XUserGroup_Right.Add(this);
                }
    
                UserGroupID = XUserGroup.UserGroupID;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("XUserGroup")
                    && (ChangeTracker.OriginalValues["XUserGroup"] == XUserGroup))
                {
                    ChangeTracker.OriginalValues.Remove("XUserGroup");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("XUserGroup", previousValue);
                }
                if (XUserGroup != null && !XUserGroup.ChangeTracker.ChangeTrackingEnabled)
                {
                    XUserGroup.StartTracking();
                }
            }
        }

        #endregion

        #region Methods
    
    	public override bool Equals(object obj)
    	{
    		if (obj == null)
    		{
    			return false;
    		}
    		
    		if (ReferenceEquals(this, obj))
    		{
    			return true;
    		}
    
    		if (GetType() != obj.GetType())
    		{
    			return false;
    		}
    
    		var entity = (XUserGroup_Right)obj;
    		if (!_userGroup_RightID.Equals(entity.UserGroup_RightID) || _userGroup_RightID == 0)
    		{
    			return false;
    		}
    		
    		return true;
    	}
    	
    	public override int GetHashCode()
        {
            return _userGroup_RightID.GetHashCode();
        }

        #endregion

    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace Kiss.Model
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(XUserGroup_Right))]
    [KnownType(typeof(XRight))]
    [KnownType(typeof(XModul))]
    public partial class XClass: EntityBase<XClass>, IObjectWithChangeTracker
    {
        #region Primitive Properties
    
        [DataMember]
        public int XClassID
        {
            get { return _xClassID; }
            set
            {
                if (_xClassID != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'XClassID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _xClassID = value;
                    OnPropertyChanged("XClassID");
                }
            }
        }
        private int _xClassID;
    
        [DataMember]
        public string ClassName
        {
            get { return _className; }
            set
            {
                if (_className != value)
                {
                    _className = value;
                    OnPropertyChanged("ClassName");
                }
            }
        }
        private string _className;
    
        [DataMember]
        public int ModulID
        {
            get { return _modulID; }
            set
            {
                if (_modulID != value)
                {
                    ChangeTracker.RecordOriginalValue("ModulID", _modulID);
                    if (!IsDeserializing)
                    {
                        if (XModul != null && XModul.ModulID != value)
                        {
                            XModul = null;
                        }
                    }
                    _modulID = value;
                    OnPropertyChanged("ModulID");
                }
            }
        }
        private int _modulID;
    
        [DataMember]
        public string MaskName
        {
            get { return _maskName; }
            set
            {
                if (_maskName != value)
                {
                    _maskName = value;
                    OnPropertyChanged("MaskName");
                }
            }
        }
        private string _maskName;
    
        [DataMember]
        public string BaseType
        {
            get { return _baseType; }
            set
            {
                if (_baseType != value)
                {
                    _baseType = value;
                    OnPropertyChanged("BaseType");
                }
            }
        }
        private string _baseType;
    
        [DataMember]
        public Nullable<int> ClassCode
        {
            get { return _classCode; }
            set
            {
                if (_classCode != value)
                {
                    _classCode = value;
                    OnPropertyChanged("ClassCode");
                }
            }
        }
        private Nullable<int> _classCode;
    
        [DataMember]
        public Nullable<int> ClassTID
        {
            get { return _classTID; }
            set
            {
                if (_classTID != value)
                {
                    _classTID = value;
                    OnPropertyChanged("ClassTID");
                }
            }
        }
        private Nullable<int> _classTID;
    
        [DataMember]
        public string PropertiesXML
        {
            get { return _propertiesXML; }
            set
            {
                if (_propertiesXML != value)
                {
                    _propertiesXML = value;
                    OnPropertyChanged("PropertiesXML");
                }
            }
        }
        private string _propertiesXML;
    
        [DataMember]
        public int Designer
        {
            get { return _designer; }
            set
            {
                if (_designer != value)
                {
                    _designer = value;
                    OnPropertyChanged("Designer");
                }
            }
        }
        private int _designer;
    
        [DataMember]
        public string Description
        {
            get { return _description; }
            set
            {
                if (_description != value)
                {
                    _description = value;
                    OnPropertyChanged("Description");
                }
            }
        }
        private string _description;
    
        [DataMember]
        public string CodeGenerated
        {
            get { return _codeGenerated; }
            set
            {
                if (_codeGenerated != value)
                {
                    _codeGenerated = value;
                    OnPropertyChanged("CodeGenerated");
                }
            }
        }
        private string _codeGenerated;
    
        [DataMember]
        public byte[] Resource
        {
            get { return _resource; }
            set
            {
                if (_resource != value)
                {
                    _resource = value;
                    OnPropertyChanged("Resource");
                }
            }
        }
        private byte[] _resource;
    
        [DataMember]
        public byte[] Assembly
        {
            get { return _assembly; }
            set
            {
                if (_assembly != value)
                {
                    _assembly = value;
                    OnPropertyChanged("Assembly");
                }
            }
        }
        private byte[] _assembly;
    
        [DataMember]
        public string Branch
        {
            get { return _branch; }
            set
            {
                if (_branch != value)
                {
                    _branch = value;
                    OnPropertyChanged("Branch");
                }
            }
        }
        private string _branch;
    
        [DataMember]
        public int BuildNr
        {
            get { return _buildNr; }
            set
            {
                if (_buildNr != value)
                {
                    _buildNr = value;
                    OnPropertyChanged("BuildNr");
                }
            }
        }
        private int _buildNr;
    
        [DataMember]
        public bool System
        {
            get { return _system; }
            set
            {
                if (_system != value)
                {
                    _system = value;
                    OnPropertyChanged("System");
                }
            }
        }
        private bool _system;
    
        [DataMember]
        public Nullable<int> CheckOut_UserID
        {
            get { return _checkOut_UserID; }
            set
            {
                if (_checkOut_UserID != value)
                {
                    _checkOut_UserID = value;
                    OnPropertyChanged("CheckOut_UserID");
                }
            }
        }
        private Nullable<int> _checkOut_UserID;
    
        [DataMember]
        public Nullable<System.DateTime> CheckOut_Date
        {
            get { return _checkOut_Date; }
            set
            {
                if (_checkOut_Date != value)
                {
                    _checkOut_Date = value;
                    OnPropertyChanged("CheckOut_Date");
                }
            }
        }
        private Nullable<System.DateTime> _checkOut_Date;
    
        [DataMember]
        public string NamespaceExtension
        {
            get { return _namespaceExtension; }
            set
            {
                if (_namespaceExtension != value)
                {
                    _namespaceExtension = value;
                    OnPropertyChanged("NamespaceExtension");
                }
            }
        }
        private string _namespaceExtension;
    
        [DataMember]
        public byte[] XClassTS
        {
            get { return _xClassTS; }
            set
            {
                if (_xClassTS != value)
                {
                    _xClassTS = value;
                    OnPropertyChanged("XClassTS");
                }
            }
        }
        private byte[] _xClassTS;
    
        [DataMember]
        public string ClassNameViewModel
        {
            get { return _classNameViewModel; }
            set
            {
                if (_classNameViewModel != value)
                {
                    _classNameViewModel = value;
                    OnPropertyChanged("ClassNameViewModel");
                }
            }
        }
        private string _classNameViewModel;

        #endregion

        #region Navigation Properties
    
        [DataMember]
        public TrackableCollection<XUserGroup_Right> XUserGroup_Right
        {
            get
            {
                if (_xUserGroup_Right == null)
                {
                    _xUserGroup_Right = new TrackableCollection<XUserGroup_Right>();
                    _xUserGroup_Right.CollectionChanged += FixupXUserGroup_Right;
                }
                return _xUserGroup_Right;
            }
            set
            {
                if (!ReferenceEquals(_xUserGroup_Right, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_xUserGroup_Right != null)
                    {
                        _xUserGroup_Right.CollectionChanged -= FixupXUserGroup_Right;
                    }
                    _xUserGroup_Right = value;
                    if (_xUserGroup_Right != null)
                    {
                        _xUserGroup_Right.CollectionChanged += FixupXUserGroup_Right;
                    }
                    OnNavigationPropertyChanged("XUserGroup_Right");
                }
            }
        }
        private TrackableCollection<XUserGroup_Right> _xUserGroup_Right;
    
        [DataMember]
        public TrackableCollection<XRight> XRight
        {
            get
            {
                if (_xRight == null)
                {
                    _xRight = new TrackableCollection<XRight>();
                    _xRight.CollectionChanged += FixupXRight;
                }
                return _xRight;
            }
            set
            {
                if (!ReferenceEquals(_xRight, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_xRight != null)
                    {
                        _xRight.CollectionChanged -= FixupXRight;
                    }
                    _xRight = value;
                    if (_xRight != null)
                    {
                        _xRight.CollectionChanged += FixupXRight;
                    }
                    OnNavigationPropertyChanged("XRight");
                }
            }
        }
        private TrackableCollection<XRight> _xRight;
    
        [DataMember]
        public XModul XModul
        {
            get { return _xModul; }
            set
            {
                if (!ReferenceEquals(_xModul, value))
                {
                    var previousValue = _xModul;
                    _xModul = value;
                    FixupXModul(previousValue);
                    OnNavigationPropertyChanged("XModul");
                }
            }
        }
        private XModul _xModul;

        #endregion

        #region ChangeTracking
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected override void ClearNavigationProperties()
        {
            XUserGroup_Right.Clear();
            XRight.Clear();
            XModul = null;
        }

        #endregion

        #region Association Fixup
    
        private void FixupXModul(XModul previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.XClass.Contains(this))
            {
                previousValue.XClass.Remove(this);
            }
    
            if (XModul != null)
            {
                if (!XModul.XClass.Contains(this))
                {
                    XModul.XClass.Add(this);
                }
    
                ModulID = XModul.ModulID;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("XModul")
                    && (ChangeTracker.OriginalValues["XModul"] == XModul))
                {
                    ChangeTracker.OriginalValues.Remove("XModul");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("XModul", previousValue);
                }
                if (XModul != null && !XModul.ChangeTracker.ChangeTrackingEnabled)
                {
                    XModul.StartTracking();
                }
            }
        }
    
        private void FixupXUserGroup_Right(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (XUserGroup_Right item in e.NewItems)
                {
                    item.XClass = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("XUserGroup_Right", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (XUserGroup_Right item in e.OldItems)
                {
                    if (ReferenceEquals(item.XClass, this))
                    {
                        item.XClass = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("XUserGroup_Right", item);
                    }
                }
            }
        }
    
        private void FixupXRight(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (XRight item in e.NewItems)
                {
                    item.XClass = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("XRight", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (XRight item in e.OldItems)
                {
                    if (ReferenceEquals(item.XClass, this))
                    {
                        item.XClass = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("XRight", item);
                    }
                }
            }
        }

        #endregion

        #region Methods
    
    	public override bool Equals(object obj)
    	{
    		if (obj == null)
    		{
    			return false;
    		}
    		
    		if (ReferenceEquals(this, obj))
    		{
    			return true;
    		}
    
    		if (GetType() != obj.GetType())
    		{
    			return false;
    		}
    
    		var entity = (XClass)obj;
    		if (!_xClassID.Equals(entity.XClassID) || _xClassID == 0)
    		{
    			return false;
    		}
    		
    		return true;
    	}
    	
    	public override int GetHashCode()
        {
            return _xClassID.GetHashCode();
        }

        #endregion

    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace Kiss.Model
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(XUser))]
    public partial class BDEPensum_XUser: EntityBase<BDEPensum_XUser>, IObjectWithChangeTracker
    {
        #region Primitive Properties
    
        [DataMember]
        public int BDEPensum_XUserID
        {
            get { return _bDEPensum_XUserID; }
            set
            {
                if (_bDEPensum_XUserID != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'BDEPensum_XUserID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _bDEPensum_XUserID = value;
                    OnPropertyChanged("BDEPensum_XUserID");
                }
            }
        }
        private int _bDEPensum_XUserID;
    
        [DataMember]
        public int UserID
        {
            get { return _userID; }
            set
            {
                if (_userID != value)
                {
                    ChangeTracker.RecordOriginalValue("UserID", _userID);
                    if (!IsDeserializing)
                    {
                        if (XUser != null && XUser.UserID != value)
                        {
                            XUser = null;
                        }
                    }
                    _userID = value;
                    OnPropertyChanged("UserID");
                }
            }
        }
        private int _userID;
    
        [DataMember]
        public System.DateTime DatumVon
        {
            get { return _datumVon; }
            set
            {
                if (_datumVon != value)
                {
                    _datumVon = value;
                    OnPropertyChanged("DatumVon");
                }
            }
        }
        private System.DateTime _datumVon;
    
        [DataMember]
        public Nullable<System.DateTime> DatumBis
        {
            get { return _datumBis; }
            set
            {
                if (_datumBis != value)
                {
                    _datumBis = value;
                    OnPropertyChanged("DatumBis");
                }
            }
        }
        private Nullable<System.DateTime> _datumBis;
    
        [DataMember]
        public int PensumProzent
        {
            get { return _pensumProzent; }
            set
            {
                if (_pensumProzent != value)
                {
                    _pensumProzent = value;
                    OnPropertyChanged("PensumProzent");
                }
            }
        }
        private int _pensumProzent;
    
        [DataMember]
        public bool ManualEdit
        {
            get { return _manualEdit; }
            set
            {
                if (_manualEdit != value)
                {
                    _manualEdit = value;
                    OnPropertyChanged("ManualEdit");
                }
            }
        }
        private bool _manualEdit;
    
        [DataMember]
        public byte[] BDEPensum_XUserTS
        {
            get { return _bDEPensum_XUserTS; }
            set
            {
                if (_bDEPensum_XUserTS != value)
                {
                    _bDEPensum_XUserTS = value;
                    OnPropertyChanged("BDEPensum_XUserTS");
                }
            }
        }
        private byte[] _bDEPensum_XUserTS;

        #endregion

        #region Navigation Properties
    
        [DataMember]
        public XUser XUser
        {
            get { return _xUser; }
            set
            {
                if (!ReferenceEquals(_xUser, value))
                {
                    var previousValue = _xUser;
                    _xUser = value;
                    FixupXUser(previousValue);
                    OnNavigationPropertyChanged("XUser");
                }
            }
        }
        private XUser _xUser;

        #endregion

        #region ChangeTracking
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected override void ClearNavigationProperties()
        {
            XUser = null;
        }

        #endregion

        #region Association Fixup
    
        private void FixupXUser(XUser previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.BDEPensum_XUser.Contains(this))
            {
                previousValue.BDEPensum_XUser.Remove(this);
            }
    
            if (XUser != null)
            {
                if (!XUser.BDEPensum_XUser.Contains(this))
                {
                    XUser.BDEPensum_XUser.Add(this);
                }
    
                UserID = XUser.UserID;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("XUser")
                    && (ChangeTracker.OriginalValues["XUser"] == XUser))
                {
                    ChangeTracker.OriginalValues.Remove("XUser");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("XUser", previousValue);
                }
                if (XUser != null && !XUser.ChangeTracker.ChangeTrackingEnabled)
                {
                    XUser.StartTracking();
                }
            }
        }

        #endregion

        #region Methods
    
    	public override bool Equals(object obj)
    	{
    		if (obj == null)
    		{
    			return false;
    		}
    		
    		if (ReferenceEquals(this, obj))
    		{
    			return true;
    		}
    
    		if (GetType() != obj.GetType())
    		{
    			return false;
    		}
    
    		var entity = (BDEPensum_XUser)obj;
    		if (!_bDEPensum_XUserID.Equals(entity.BDEPensum_XUserID) || _bDEPensum_XUserID == 0)
    		{
    			return false;
    		}
    		
    		return true;
    	}
    	
    	public override int GetHashCode()
        {
            return _bDEPensum_XUserID.GetHashCode();
        }

        #endregion

    }
}

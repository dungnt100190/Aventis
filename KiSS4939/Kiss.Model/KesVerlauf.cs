//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace Kiss.Model
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(BaInstitution))]
    [KnownType(typeof(BaPerson))]
    [KnownType(typeof(FaLeistung))]
    [KnownType(typeof(XUser))]
    public partial class KesVerlauf: EntityBase<KesVerlauf>, IObjectWithChangeTracker
    {
        #region Primitive Properties
    
        [DataMember]
        public int KesVerlaufID
        {
            get { return _kesVerlaufID; }
            set
            {
                if (_kesVerlaufID != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'KesVerlaufID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _kesVerlaufID = value;
                    OnPropertyChanged("KesVerlaufID");
                }
            }
        }
        private int _kesVerlaufID;
    
        [DataMember]
        public int FaLeistungID
        {
            get { return _faLeistungID; }
            set
            {
                if (_faLeistungID != value)
                {
                    ChangeTracker.RecordOriginalValue("FaLeistungID", _faLeistungID);
                    if (!IsDeserializing)
                    {
                        if (FaLeistung != null && FaLeistung.FaLeistungID != value)
                        {
                            FaLeistung = null;
                        }
                    }
                    _faLeistungID = value;
                    OnPropertyChanged("FaLeistungID");
                }
            }
        }
        private int _faLeistungID;
    
        [DataMember]
        public int KesVerlaufTypCode
        {
            get { return _kesVerlaufTypCode; }
            set
            {
                if (_kesVerlaufTypCode != value)
                {
                    _kesVerlaufTypCode = value;
                    OnPropertyChanged("KesVerlaufTypCode");
                }
            }
        }
        private int _kesVerlaufTypCode;
    
        [DataMember]
        public Nullable<int> UserID
        {
            get { return _userID; }
            set
            {
                if (_userID != value)
                {
                    ChangeTracker.RecordOriginalValue("UserID", _userID);
                    if (!IsDeserializing)
                    {
                        if (XUser != null && XUser.UserID != value)
                        {
                            XUser = null;
                        }
                    }
                    _userID = value;
                    OnPropertyChanged("UserID");
                }
            }
        }
        private Nullable<int> _userID;
    
        [DataMember]
        public Nullable<int> BaPersonID_Adressat
        {
            get { return _baPersonID_Adressat; }
            set
            {
                if (_baPersonID_Adressat != value)
                {
                    ChangeTracker.RecordOriginalValue("BaPersonID_Adressat", _baPersonID_Adressat);
                    if (!IsDeserializing)
                    {
                        if (BaPerson != null && BaPerson.BaPersonID != value)
                        {
                            BaPerson = null;
                        }
                    }
                    _baPersonID_Adressat = value;
                    OnPropertyChanged("BaPersonID_Adressat");
                }
            }
        }
        private Nullable<int> _baPersonID_Adressat;
    
        [DataMember]
        public Nullable<int> BaInstitutionID_Adressat
        {
            get { return _baInstitutionID_Adressat; }
            set
            {
                if (_baInstitutionID_Adressat != value)
                {
                    ChangeTracker.RecordOriginalValue("BaInstitutionID_Adressat", _baInstitutionID_Adressat);
                    if (!IsDeserializing)
                    {
                        if (BaInstitution != null && BaInstitution.BaInstitutionID != value)
                        {
                            BaInstitution = null;
                        }
                    }
                    _baInstitutionID_Adressat = value;
                    OnPropertyChanged("BaInstitutionID_Adressat");
                }
            }
        }
        private Nullable<int> _baInstitutionID_Adressat;
    
        [DataMember]
        public Nullable<int> DocumentID
        {
            get { return _documentID; }
            set
            {
                if (_documentID != value)
                {
                    _documentID = value;
                    OnPropertyChanged("DocumentID");
                }
            }
        }
        private Nullable<int> _documentID;
    
        [DataMember]
        public Nullable<System.DateTime> Datum
        {
            get { return _datum; }
            set
            {
                if (_datum != value)
                {
                    _datum = value;
                    OnPropertyChanged("Datum");
                }
            }
        }
        private Nullable<System.DateTime> _datum;
    
        [DataMember]
        public Nullable<int> KesKontaktartCode
        {
            get { return _kesKontaktartCode; }
            set
            {
                if (_kesKontaktartCode != value)
                {
                    _kesKontaktartCode = value;
                    OnPropertyChanged("KesKontaktartCode");
                }
            }
        }
        private Nullable<int> _kesKontaktartCode;
    
        [DataMember]
        public Nullable<int> KesDienstleistungCode
        {
            get { return _kesDienstleistungCode; }
            set
            {
                if (_kesDienstleistungCode != value)
                {
                    _kesDienstleistungCode = value;
                    OnPropertyChanged("KesDienstleistungCode");
                }
            }
        }
        private Nullable<int> _kesDienstleistungCode;
    
        [DataMember]
        public string Stichwort
        {
            get { return _stichwort; }
            set
            {
                if (_stichwort != value)
                {
                    _stichwort = value;
                    OnPropertyChanged("Stichwort");
                }
            }
        }
        private string _stichwort;
    
        [DataMember]
        public Nullable<int> FaDauerCode
        {
            get { return _faDauerCode; }
            set
            {
                if (_faDauerCode != value)
                {
                    _faDauerCode = value;
                    OnPropertyChanged("FaDauerCode");
                }
            }
        }
        private Nullable<int> _faDauerCode;
    
        [DataMember]
        public string Inhalt
        {
            get { return _inhalt; }
            set
            {
                if (_inhalt != value)
                {
                    _inhalt = value;
                    OnPropertyChanged("Inhalt");
                }
            }
        }
        private string _inhalt;
    
        [DataMember]
        public string Creator
        {
            get { return _creator; }
            set
            {
                if (_creator != value)
                {
                    _creator = value;
                    OnPropertyChanged("Creator");
                }
            }
        }
        private string _creator;
    
        [DataMember]
        public System.DateTime Created
        {
            get { return _created; }
            set
            {
                if (_created != value)
                {
                    _created = value;
                    OnPropertyChanged("Created");
                }
            }
        }
        private System.DateTime _created;
    
        [DataMember]
        public string Modifier
        {
            get { return _modifier; }
            set
            {
                if (_modifier != value)
                {
                    _modifier = value;
                    OnPropertyChanged("Modifier");
                }
            }
        }
        private string _modifier;
    
        [DataMember]
        public System.DateTime Modified
        {
            get { return _modified; }
            set
            {
                if (_modified != value)
                {
                    _modified = value;
                    OnPropertyChanged("Modified");
                }
            }
        }
        private System.DateTime _modified;
    
        [DataMember]
        public byte[] KesVerlaufTS
        {
            get { return _kesVerlaufTS; }
            set
            {
                if (_kesVerlaufTS != value)
                {
                    _kesVerlaufTS = value;
                    OnPropertyChanged("KesVerlaufTS");
                }
            }
        }
        private byte[] _kesVerlaufTS;

        #endregion

        #region Navigation Properties
    
        [DataMember]
        public BaInstitution BaInstitution
        {
            get { return _baInstitution; }
            set
            {
                if (!ReferenceEquals(_baInstitution, value))
                {
                    var previousValue = _baInstitution;
                    _baInstitution = value;
                    FixupBaInstitution(previousValue);
                    OnNavigationPropertyChanged("BaInstitution");
                }
            }
        }
        private BaInstitution _baInstitution;
    
        [DataMember]
        public BaPerson BaPerson
        {
            get { return _baPerson; }
            set
            {
                if (!ReferenceEquals(_baPerson, value))
                {
                    var previousValue = _baPerson;
                    _baPerson = value;
                    FixupBaPerson(previousValue);
                    OnNavigationPropertyChanged("BaPerson");
                }
            }
        }
        private BaPerson _baPerson;
    
        [DataMember]
        public FaLeistung FaLeistung
        {
            get { return _faLeistung; }
            set
            {
                if (!ReferenceEquals(_faLeistung, value))
                {
                    var previousValue = _faLeistung;
                    _faLeistung = value;
                    FixupFaLeistung(previousValue);
                    OnNavigationPropertyChanged("FaLeistung");
                }
            }
        }
        private FaLeistung _faLeistung;
    
        [DataMember]
        public XUser XUser
        {
            get { return _xUser; }
            set
            {
                if (!ReferenceEquals(_xUser, value))
                {
                    var previousValue = _xUser;
                    _xUser = value;
                    FixupXUser(previousValue);
                    OnNavigationPropertyChanged("XUser");
                }
            }
        }
        private XUser _xUser;

        #endregion

        #region ChangeTracking
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected override void ClearNavigationProperties()
        {
            BaInstitution = null;
            BaPerson = null;
            FaLeistung = null;
            XUser = null;
        }

        #endregion

        #region Association Fixup
    
        private void FixupBaInstitution(BaInstitution previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.KesVerlauf.Contains(this))
            {
                previousValue.KesVerlauf.Remove(this);
            }
    
            if (BaInstitution != null)
            {
                if (!BaInstitution.KesVerlauf.Contains(this))
                {
                    BaInstitution.KesVerlauf.Add(this);
                }
    
                BaInstitutionID_Adressat = BaInstitution.BaInstitutionID;
            }
            else if (!skipKeys)
            {
                BaInstitutionID_Adressat = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("BaInstitution")
                    && (ChangeTracker.OriginalValues["BaInstitution"] == BaInstitution))
                {
                    ChangeTracker.OriginalValues.Remove("BaInstitution");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("BaInstitution", previousValue);
                }
                if (BaInstitution != null && !BaInstitution.ChangeTracker.ChangeTrackingEnabled)
                {
                    BaInstitution.StartTracking();
                }
            }
        }
    
        private void FixupBaPerson(BaPerson previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.KesVerlauf.Contains(this))
            {
                previousValue.KesVerlauf.Remove(this);
            }
    
            if (BaPerson != null)
            {
                if (!BaPerson.KesVerlauf.Contains(this))
                {
                    BaPerson.KesVerlauf.Add(this);
                }
    
                BaPersonID_Adressat = BaPerson.BaPersonID;
            }
            else if (!skipKeys)
            {
                BaPersonID_Adressat = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("BaPerson")
                    && (ChangeTracker.OriginalValues["BaPerson"] == BaPerson))
                {
                    ChangeTracker.OriginalValues.Remove("BaPerson");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("BaPerson", previousValue);
                }
                if (BaPerson != null && !BaPerson.ChangeTracker.ChangeTrackingEnabled)
                {
                    BaPerson.StartTracking();
                }
            }
        }
    
        private void FixupFaLeistung(FaLeistung previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.KesVerlauf.Contains(this))
            {
                previousValue.KesVerlauf.Remove(this);
            }
    
            if (FaLeistung != null)
            {
                if (!FaLeistung.KesVerlauf.Contains(this))
                {
                    FaLeistung.KesVerlauf.Add(this);
                }
    
                FaLeistungID = FaLeistung.FaLeistungID;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("FaLeistung")
                    && (ChangeTracker.OriginalValues["FaLeistung"] == FaLeistung))
                {
                    ChangeTracker.OriginalValues.Remove("FaLeistung");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("FaLeistung", previousValue);
                }
                if (FaLeistung != null && !FaLeistung.ChangeTracker.ChangeTrackingEnabled)
                {
                    FaLeistung.StartTracking();
                }
            }
        }
    
        private void FixupXUser(XUser previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.KesVerlauf.Contains(this))
            {
                previousValue.KesVerlauf.Remove(this);
            }
    
            if (XUser != null)
            {
                if (!XUser.KesVerlauf.Contains(this))
                {
                    XUser.KesVerlauf.Add(this);
                }
    
                UserID = XUser.UserID;
            }
            else if (!skipKeys)
            {
                UserID = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("XUser")
                    && (ChangeTracker.OriginalValues["XUser"] == XUser))
                {
                    ChangeTracker.OriginalValues.Remove("XUser");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("XUser", previousValue);
                }
                if (XUser != null && !XUser.ChangeTracker.ChangeTrackingEnabled)
                {
                    XUser.StartTracking();
                }
            }
        }

        #endregion

        #region Methods
    
    	public override bool Equals(object obj)
    	{
    		if (obj == null)
    		{
    			return false;
    		}
    		
    		if (ReferenceEquals(this, obj))
    		{
    			return true;
    		}
    
    		if (GetType() != obj.GetType())
    		{
    			return false;
    		}
    
    		var entity = (KesVerlauf)obj;
    		if (!_kesVerlaufID.Equals(entity.KesVerlaufID) || _kesVerlaufID == 0)
    		{
    			return false;
    		}
    		
    		return true;
    	}
    	
    	public override int GetHashCode()
        {
            return _kesVerlaufID.GetHashCode();
        }

        #endregion

    }
}

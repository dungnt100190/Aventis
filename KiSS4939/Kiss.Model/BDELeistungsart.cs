//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace Kiss.Model
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(FsReduktion))]
    public partial class BDELeistungsart: EntityBase<BDELeistungsart>, IObjectWithChangeTracker
    {
        #region Primitive Properties
    
        [DataMember]
        public int BDELeistungsartID
        {
            get { return _bDELeistungsartID; }
            set
            {
                if (_bDELeistungsartID != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'BDELeistungsartID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _bDELeistungsartID = value;
                    OnPropertyChanged("BDELeistungsartID");
                }
            }
        }
        private int _bDELeistungsartID;
    
        [DataMember]
        public string Bezeichnung
        {
            get { return _bezeichnung; }
            set
            {
                if (_bezeichnung != value)
                {
                    _bezeichnung = value;
                    OnPropertyChanged("Bezeichnung");
                }
            }
        }
        private string _bezeichnung;
    
        [DataMember]
        public Nullable<int> BezeichnungTID
        {
            get { return _bezeichnungTID; }
            set
            {
                if (_bezeichnungTID != value)
                {
                    _bezeichnungTID = value;
                    OnPropertyChanged("BezeichnungTID");
                }
            }
        }
        private Nullable<int> _bezeichnungTID;
    
        [DataMember]
        public System.DateTime DatumVon
        {
            get { return _datumVon; }
            set
            {
                if (_datumVon != value)
                {
                    _datumVon = value;
                    OnPropertyChanged("DatumVon");
                }
            }
        }
        private System.DateTime _datumVon;
    
        [DataMember]
        public Nullable<System.DateTime> DatumBis
        {
            get { return _datumBis; }
            set
            {
                if (_datumBis != value)
                {
                    _datumBis = value;
                    OnPropertyChanged("DatumBis");
                }
            }
        }
        private Nullable<System.DateTime> _datumBis;
    
        [DataMember]
        public Nullable<int> SortKey
        {
            get { return _sortKey; }
            set
            {
                if (_sortKey != value)
                {
                    _sortKey = value;
                    OnPropertyChanged("SortKey");
                }
            }
        }
        private Nullable<int> _sortKey;
    
        [DataMember]
        public Nullable<int> KlientErfassungCode
        {
            get { return _klientErfassungCode; }
            set
            {
                if (_klientErfassungCode != value)
                {
                    _klientErfassungCode = value;
                    OnPropertyChanged("KlientErfassungCode");
                }
            }
        }
        private Nullable<int> _klientErfassungCode;
    
        [DataMember]
        public Nullable<int> AnzahlCode
        {
            get { return _anzahlCode; }
            set
            {
                if (_anzahlCode != value)
                {
                    _anzahlCode = value;
                    OnPropertyChanged("AnzahlCode");
                }
            }
        }
        private Nullable<int> _anzahlCode;
    
        [DataMember]
        public string ArtikelNr
        {
            get { return _artikelNr; }
            set
            {
                if (_artikelNr != value)
                {
                    _artikelNr = value;
                    OnPropertyChanged("ArtikelNr");
                }
            }
        }
        private string _artikelNr;
    
        [DataMember]
        public int LeistungsartTypCode
        {
            get { return _leistungsartTypCode; }
            set
            {
                if (_leistungsartTypCode != value)
                {
                    _leistungsartTypCode = value;
                    OnPropertyChanged("LeistungsartTypCode");
                }
            }
        }
        private int _leistungsartTypCode;
    
        [DataMember]
        public Nullable<int> KostenartCode
        {
            get { return _kostenartCode; }
            set
            {
                if (_kostenartCode != value)
                {
                    _kostenartCode = value;
                    OnPropertyChanged("KostenartCode");
                }
            }
        }
        private Nullable<int> _kostenartCode;
    
        [DataMember]
        public string KTRStandard
        {
            get { return _kTRStandard; }
            set
            {
                if (_kTRStandard != value)
                {
                    _kTRStandard = value;
                    OnPropertyChanged("KTRStandard");
                }
            }
        }
        private string _kTRStandard;
    
        [DataMember]
        public string KTRIV
        {
            get { return _kTRIV; }
            set
            {
                if (_kTRIV != value)
                {
                    _kTRIV = value;
                    OnPropertyChanged("KTRIV");
                }
            }
        }
        private string _kTRIV;
    
        [DataMember]
        public string KTRAHV
        {
            get { return _kTRAHV; }
            set
            {
                if (_kTRAHV != value)
                {
                    _kTRAHV = value;
                    OnPropertyChanged("KTRAHV");
                }
            }
        }
        private string _kTRAHV;
    
        [DataMember]
        public string KTRNichtberechtigte
        {
            get { return _kTRNichtberechtigte; }
            set
            {
                if (_kTRNichtberechtigte != value)
                {
                    _kTRNichtberechtigte = value;
                    OnPropertyChanged("KTRNichtberechtigte");
                }
            }
        }
        private string _kTRNichtberechtigte;
    
        [DataMember]
        public string Beschreibung
        {
            get { return _beschreibung; }
            set
            {
                if (_beschreibung != value)
                {
                    _beschreibung = value;
                    OnPropertyChanged("Beschreibung");
                }
            }
        }
        private string _beschreibung;
    
        [DataMember]
        public Nullable<int> AuswDienstleistungCode
        {
            get { return _auswDienstleistungCode; }
            set
            {
                if (_auswDienstleistungCode != value)
                {
                    _auswDienstleistungCode = value;
                    OnPropertyChanged("AuswDienstleistungCode");
                }
            }
        }
        private Nullable<int> _auswDienstleistungCode;
    
        [DataMember]
        public Nullable<int> AuswFakturaCode
        {
            get { return _auswFakturaCode; }
            set
            {
                if (_auswFakturaCode != value)
                {
                    _auswFakturaCode = value;
                    OnPropertyChanged("AuswFakturaCode");
                }
            }
        }
        private Nullable<int> _auswFakturaCode;
    
        [DataMember]
        public Nullable<int> AuswProduktCode
        {
            get { return _auswProduktCode; }
            set
            {
                if (_auswProduktCode != value)
                {
                    _auswProduktCode = value;
                    OnPropertyChanged("AuswProduktCode");
                }
            }
        }
        private Nullable<int> _auswProduktCode;
    
        [DataMember]
        public Nullable<int> AuswPIAuftragCode
        {
            get { return _auswPIAuftragCode; }
            set
            {
                if (_auswPIAuftragCode != value)
                {
                    _auswPIAuftragCode = value;
                    OnPropertyChanged("AuswPIAuftragCode");
                }
            }
        }
        private Nullable<int> _auswPIAuftragCode;
    
        [DataMember]
        public byte[] BDELeistungsartTS
        {
            get { return _bDELeistungsartTS; }
            set
            {
                if (_bDELeistungsartTS != value)
                {
                    _bDELeistungsartTS = value;
                    OnPropertyChanged("BDELeistungsartTS");
                }
            }
        }
        private byte[] _bDELeistungsartTS;
    
        [DataMember]
        public Nullable<int> VerID
        {
            get { return _verID; }
            set
            {
                if (_verID != value)
                {
                    _verID = value;
                    OnPropertyChanged("VerID");
                }
            }
        }
        private Nullable<int> _verID;

        #endregion

        #region Navigation Properties
    
        [DataMember]
        public TrackableCollection<FsReduktion> FsReduktion
        {
            get
            {
                if (_fsReduktion == null)
                {
                    _fsReduktion = new TrackableCollection<FsReduktion>();
                    _fsReduktion.CollectionChanged += FixupFsReduktion;
                }
                return _fsReduktion;
            }
            set
            {
                if (!ReferenceEquals(_fsReduktion, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_fsReduktion != null)
                    {
                        _fsReduktion.CollectionChanged -= FixupFsReduktion;
                    }
                    _fsReduktion = value;
                    if (_fsReduktion != null)
                    {
                        _fsReduktion.CollectionChanged += FixupFsReduktion;
                    }
                    OnNavigationPropertyChanged("FsReduktion");
                }
            }
        }
        private TrackableCollection<FsReduktion> _fsReduktion;

        #endregion

        #region ChangeTracking
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected override void ClearNavigationProperties()
        {
            FsReduktion.Clear();
        }

        #endregion

        #region Association Fixup
    
        private void FixupFsReduktion(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (FsReduktion item in e.NewItems)
                {
                    item.BDELeistungsart = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("FsReduktion", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (FsReduktion item in e.OldItems)
                {
                    if (ReferenceEquals(item.BDELeistungsart, this))
                    {
                        item.BDELeistungsart = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("FsReduktion", item);
                    }
                }
            }
        }

        #endregion

        #region Methods
    
    	public override bool Equals(object obj)
    	{
    		if (obj == null)
    		{
    			return false;
    		}
    		
    		if (ReferenceEquals(this, obj))
    		{
    			return true;
    		}
    
    		if (GetType() != obj.GetType())
    		{
    			return false;
    		}
    
    		var entity = (BDELeistungsart)obj;
    		if (!_bDELeistungsartID.Equals(entity.BDELeistungsartID) || _bDELeistungsartID == 0)
    		{
    			return false;
    		}
    		
    		return true;
    	}
    	
    	public override int GetHashCode()
        {
            return _bDELeistungsartID.GetHashCode();
        }

        #endregion

    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace Kiss.Model
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(XOrgUnit))]
    [KnownType(typeof(XUser))]
    public partial class XOrgUnit_User: EntityBase<XOrgUnit_User>, IObjectWithChangeTracker
    {
        #region Primitive Properties
    
        [DataMember]
        public int XOrgUnit_UserID
        {
            get { return _xOrgUnit_UserID; }
            set
            {
                if (_xOrgUnit_UserID != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'XOrgUnit_UserID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _xOrgUnit_UserID = value;
                    OnPropertyChanged("XOrgUnit_UserID");
                }
            }
        }
        private int _xOrgUnit_UserID;
    
        [DataMember]
        public int OrgUnitID
        {
            get { return _orgUnitID; }
            set
            {
                if (_orgUnitID != value)
                {
                    ChangeTracker.RecordOriginalValue("OrgUnitID", _orgUnitID);
                    if (!IsDeserializing)
                    {
                        if (XOrgUnit != null && XOrgUnit.OrgUnitID != value)
                        {
                            XOrgUnit = null;
                        }
                    }
                    _orgUnitID = value;
                    OnPropertyChanged("OrgUnitID");
                }
            }
        }
        private int _orgUnitID;
    
        [DataMember]
        public int UserID
        {
            get { return _userID; }
            set
            {
                if (_userID != value)
                {
                    ChangeTracker.RecordOriginalValue("UserID", _userID);
                    if (!IsDeserializing)
                    {
                        if (XUser != null && XUser.UserID != value)
                        {
                            XUser = null;
                        }
                    }
                    _userID = value;
                    OnPropertyChanged("UserID");
                }
            }
        }
        private int _userID;
    
        [DataMember]
        public int OrgUnitMemberCode
        {
            get { return _orgUnitMemberCode; }
            set
            {
                if (_orgUnitMemberCode != value)
                {
                    _orgUnitMemberCode = value;
                    OnPropertyChanged("OrgUnitMemberCode");
                }
            }
        }
        private int _orgUnitMemberCode;
    
        [DataMember]
        public bool MayInsert
        {
            get { return _mayInsert; }
            set
            {
                if (_mayInsert != value)
                {
                    _mayInsert = value;
                    OnPropertyChanged("MayInsert");
                }
            }
        }
        private bool _mayInsert;
    
        [DataMember]
        public bool MayUpdate
        {
            get { return _mayUpdate; }
            set
            {
                if (_mayUpdate != value)
                {
                    _mayUpdate = value;
                    OnPropertyChanged("MayUpdate");
                }
            }
        }
        private bool _mayUpdate;
    
        [DataMember]
        public bool MayDelete
        {
            get { return _mayDelete; }
            set
            {
                if (_mayDelete != value)
                {
                    _mayDelete = value;
                    OnPropertyChanged("MayDelete");
                }
            }
        }
        private bool _mayDelete;
    
        [DataMember]
        public Nullable<int> VerID
        {
            get { return _verID; }
            set
            {
                if (_verID != value)
                {
                    _verID = value;
                    OnPropertyChanged("VerID");
                }
            }
        }
        private Nullable<int> _verID;
    
        [DataMember]
        public byte[] XOrgUnit_UserTS
        {
            get { return _xOrgUnit_UserTS; }
            set
            {
                if (_xOrgUnit_UserTS != value)
                {
                    _xOrgUnit_UserTS = value;
                    OnPropertyChanged("XOrgUnit_UserTS");
                }
            }
        }
        private byte[] _xOrgUnit_UserTS;

        #endregion

        #region Navigation Properties
    
        [DataMember]
        public XOrgUnit XOrgUnit
        {
            get { return _xOrgUnit; }
            set
            {
                if (!ReferenceEquals(_xOrgUnit, value))
                {
                    var previousValue = _xOrgUnit;
                    _xOrgUnit = value;
                    FixupXOrgUnit(previousValue);
                    OnNavigationPropertyChanged("XOrgUnit");
                }
            }
        }
        private XOrgUnit _xOrgUnit;
    
        [DataMember]
        public XUser XUser
        {
            get { return _xUser; }
            set
            {
                if (!ReferenceEquals(_xUser, value))
                {
                    var previousValue = _xUser;
                    _xUser = value;
                    FixupXUser(previousValue);
                    OnNavigationPropertyChanged("XUser");
                }
            }
        }
        private XUser _xUser;

        #endregion

        #region ChangeTracking
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected override void ClearNavigationProperties()
        {
            XOrgUnit = null;
            XUser = null;
        }

        #endregion

        #region Association Fixup
    
        private void FixupXOrgUnit(XOrgUnit previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.XOrgUnit_User.Contains(this))
            {
                previousValue.XOrgUnit_User.Remove(this);
            }
    
            if (XOrgUnit != null)
            {
                if (!XOrgUnit.XOrgUnit_User.Contains(this))
                {
                    XOrgUnit.XOrgUnit_User.Add(this);
                }
    
                OrgUnitID = XOrgUnit.OrgUnitID;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("XOrgUnit")
                    && (ChangeTracker.OriginalValues["XOrgUnit"] == XOrgUnit))
                {
                    ChangeTracker.OriginalValues.Remove("XOrgUnit");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("XOrgUnit", previousValue);
                }
                if (XOrgUnit != null && !XOrgUnit.ChangeTracker.ChangeTrackingEnabled)
                {
                    XOrgUnit.StartTracking();
                }
            }
        }
    
        private void FixupXUser(XUser previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.XOrgUnit_User.Contains(this))
            {
                previousValue.XOrgUnit_User.Remove(this);
            }
    
            if (XUser != null)
            {
                if (!XUser.XOrgUnit_User.Contains(this))
                {
                    XUser.XOrgUnit_User.Add(this);
                }
    
                UserID = XUser.UserID;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("XUser")
                    && (ChangeTracker.OriginalValues["XUser"] == XUser))
                {
                    ChangeTracker.OriginalValues.Remove("XUser");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("XUser", previousValue);
                }
                if (XUser != null && !XUser.ChangeTracker.ChangeTrackingEnabled)
                {
                    XUser.StartTracking();
                }
            }
        }

        #endregion

        #region Methods
    
    	public override bool Equals(object obj)
    	{
    		if (obj == null)
    		{
    			return false;
    		}
    		
    		if (ReferenceEquals(this, obj))
    		{
    			return true;
    		}
    
    		if (GetType() != obj.GetType())
    		{
    			return false;
    		}
    
    		var entity = (XOrgUnit_User)obj;
    		if (!_xOrgUnit_UserID.Equals(entity.XOrgUnit_UserID) || _xOrgUnit_UserID == 0)
    		{
    			return false;
    		}
    		
    		return true;
    	}
    	
    	public override int GetHashCode()
        {
            return _xOrgUnit_UserID.GetHashCode();
        }

        #endregion

    }
}

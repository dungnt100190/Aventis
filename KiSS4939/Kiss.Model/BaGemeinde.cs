//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace Kiss.Model
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(BaPerson))]
    public partial class BaGemeinde: EntityBase<BaGemeinde>, IObjectWithChangeTracker
    {
        #region Primitive Properties
    
        [DataMember]
        public int BaGemeindeID
        {
            get { return _baGemeindeID; }
            set
            {
                if (_baGemeindeID != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'BaGemeindeID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _baGemeindeID = value;
                    OnPropertyChanged("BaGemeindeID");
                }
            }
        }
        private int _baGemeindeID;
    
        [DataMember]
        public Nullable<int> PLZ
        {
            get { return _pLZ; }
            set
            {
                if (_pLZ != value)
                {
                    _pLZ = value;
                    OnPropertyChanged("PLZ");
                }
            }
        }
        private Nullable<int> _pLZ;
    
        [DataMember]
        public string Name
        {
            get { return _name; }
            set
            {
                if (_name != value)
                {
                    _name = value;
                    OnPropertyChanged("Name");
                }
            }
        }
        private string _name;
    
        [DataMember]
        public Nullable<int> NameTID
        {
            get { return _nameTID; }
            set
            {
                if (_nameTID != value)
                {
                    _nameTID = value;
                    OnPropertyChanged("NameTID");
                }
            }
        }
        private Nullable<int> _nameTID;
    
        [DataMember]
        public Nullable<int> BezirkCode
        {
            get { return _bezirkCode; }
            set
            {
                if (_bezirkCode != value)
                {
                    _bezirkCode = value;
                    OnPropertyChanged("BezirkCode");
                }
            }
        }
        private Nullable<int> _bezirkCode;
    
        [DataMember]
        public string BezirkName
        {
            get { return _bezirkName; }
            set
            {
                if (_bezirkName != value)
                {
                    _bezirkName = value;
                    OnPropertyChanged("BezirkName");
                }
            }
        }
        private string _bezirkName;
    
        [DataMember]
        public Nullable<int> BezirkNameTID
        {
            get { return _bezirkNameTID; }
            set
            {
                if (_bezirkNameTID != value)
                {
                    _bezirkNameTID = value;
                    OnPropertyChanged("BezirkNameTID");
                }
            }
        }
        private Nullable<int> _bezirkNameTID;
    
        [DataMember]
        public string Kanton
        {
            get { return _kanton; }
            set
            {
                if (_kanton != value)
                {
                    _kanton = value;
                    OnPropertyChanged("Kanton");
                }
            }
        }
        private string _kanton;
    
        [DataMember]
        public Nullable<int> BFSCode
        {
            get { return _bFSCode; }
            set
            {
                if (_bFSCode != value)
                {
                    _bFSCode = value;
                    OnPropertyChanged("BFSCode");
                }
            }
        }
        private Nullable<int> _bFSCode;
    
        [DataMember]
        public byte[] BaGemeindeTS
        {
            get { return _baGemeindeTS; }
            set
            {
                if (_baGemeindeTS != value)
                {
                    _baGemeindeTS = value;
                    OnPropertyChanged("BaGemeindeTS");
                }
            }
        }
        private byte[] _baGemeindeTS;
    
        [DataMember]
        public string NameLang
        {
            get { return _nameLang; }
            set
            {
                if (_nameLang != value)
                {
                    _nameLang = value;
                    OnPropertyChanged("NameLang");
                }
            }
        }
        private string _nameLang;
    
        [DataMember]
        public Nullable<int> GemeindeEintragArt
        {
            get { return _gemeindeEintragArt; }
            set
            {
                if (_gemeindeEintragArt != value)
                {
                    _gemeindeEintragArt = value;
                    OnPropertyChanged("GemeindeEintragArt");
                }
            }
        }
        private Nullable<int> _gemeindeEintragArt;
    
        [DataMember]
        public Nullable<int> GemeindeStatus
        {
            get { return _gemeindeStatus; }
            set
            {
                if (_gemeindeStatus != value)
                {
                    _gemeindeStatus = value;
                    OnPropertyChanged("GemeindeStatus");
                }
            }
        }
        private Nullable<int> _gemeindeStatus;
    
        [DataMember]
        public Nullable<int> GemeindeAufnahmeNummer
        {
            get { return _gemeindeAufnahmeNummer; }
            set
            {
                if (_gemeindeAufnahmeNummer != value)
                {
                    _gemeindeAufnahmeNummer = value;
                    OnPropertyChanged("GemeindeAufnahmeNummer");
                }
            }
        }
        private Nullable<int> _gemeindeAufnahmeNummer;
    
        [DataMember]
        public Nullable<int> GemeindeAufnahmeModus
        {
            get { return _gemeindeAufnahmeModus; }
            set
            {
                if (_gemeindeAufnahmeModus != value)
                {
                    _gemeindeAufnahmeModus = value;
                    OnPropertyChanged("GemeindeAufnahmeModus");
                }
            }
        }
        private Nullable<int> _gemeindeAufnahmeModus;
    
        [DataMember]
        public Nullable<System.DateTime> GemeindeAufnahmeDatum
        {
            get { return _gemeindeAufnahmeDatum; }
            set
            {
                if (_gemeindeAufnahmeDatum != value)
                {
                    _gemeindeAufnahmeDatum = value;
                    OnPropertyChanged("GemeindeAufnahmeDatum");
                }
            }
        }
        private Nullable<System.DateTime> _gemeindeAufnahmeDatum;
    
        [DataMember]
        public Nullable<int> GemeindeAufhebungNummer
        {
            get { return _gemeindeAufhebungNummer; }
            set
            {
                if (_gemeindeAufhebungNummer != value)
                {
                    _gemeindeAufhebungNummer = value;
                    OnPropertyChanged("GemeindeAufhebungNummer");
                }
            }
        }
        private Nullable<int> _gemeindeAufhebungNummer;
    
        [DataMember]
        public Nullable<int> GemeindeAufhebungModus
        {
            get { return _gemeindeAufhebungModus; }
            set
            {
                if (_gemeindeAufhebungModus != value)
                {
                    _gemeindeAufhebungModus = value;
                    OnPropertyChanged("GemeindeAufhebungModus");
                }
            }
        }
        private Nullable<int> _gemeindeAufhebungModus;
    
        [DataMember]
        public Nullable<System.DateTime> GemeindeAufhebungDatum
        {
            get { return _gemeindeAufhebungDatum; }
            set
            {
                if (_gemeindeAufhebungDatum != value)
                {
                    _gemeindeAufhebungDatum = value;
                    OnPropertyChanged("GemeindeAufhebungDatum");
                }
            }
        }
        private Nullable<System.DateTime> _gemeindeAufhebungDatum;
    
        [DataMember]
        public Nullable<System.DateTime> GemeindeAenderungDatum
        {
            get { return _gemeindeAenderungDatum; }
            set
            {
                if (_gemeindeAenderungDatum != value)
                {
                    _gemeindeAenderungDatum = value;
                    OnPropertyChanged("GemeindeAenderungDatum");
                }
            }
        }
        private Nullable<System.DateTime> _gemeindeAenderungDatum;
    
        [DataMember]
        public Nullable<int> GemeindeHistorisierungID
        {
            get { return _gemeindeHistorisierungID; }
            set
            {
                if (_gemeindeHistorisierungID != value)
                {
                    _gemeindeHistorisierungID = value;
                    OnPropertyChanged("GemeindeHistorisierungID");
                }
            }
        }
        private Nullable<int> _gemeindeHistorisierungID;
    
        [DataMember]
        public string BezirkNameLang
        {
            get { return _bezirkNameLang; }
            set
            {
                if (_bezirkNameLang != value)
                {
                    _bezirkNameLang = value;
                    OnPropertyChanged("BezirkNameLang");
                }
            }
        }
        private string _bezirkNameLang;
    
        [DataMember]
        public Nullable<int> BezirkEintragArt
        {
            get { return _bezirkEintragArt; }
            set
            {
                if (_bezirkEintragArt != value)
                {
                    _bezirkEintragArt = value;
                    OnPropertyChanged("BezirkEintragArt");
                }
            }
        }
        private Nullable<int> _bezirkEintragArt;
    
        [DataMember]
        public Nullable<int> BezirkAufnahmeNummer
        {
            get { return _bezirkAufnahmeNummer; }
            set
            {
                if (_bezirkAufnahmeNummer != value)
                {
                    _bezirkAufnahmeNummer = value;
                    OnPropertyChanged("BezirkAufnahmeNummer");
                }
            }
        }
        private Nullable<int> _bezirkAufnahmeNummer;
    
        [DataMember]
        public Nullable<int> BezirkAufnahmeModus
        {
            get { return _bezirkAufnahmeModus; }
            set
            {
                if (_bezirkAufnahmeModus != value)
                {
                    _bezirkAufnahmeModus = value;
                    OnPropertyChanged("BezirkAufnahmeModus");
                }
            }
        }
        private Nullable<int> _bezirkAufnahmeModus;
    
        [DataMember]
        public Nullable<System.DateTime> BezirkAufnahmeDatum
        {
            get { return _bezirkAufnahmeDatum; }
            set
            {
                if (_bezirkAufnahmeDatum != value)
                {
                    _bezirkAufnahmeDatum = value;
                    OnPropertyChanged("BezirkAufnahmeDatum");
                }
            }
        }
        private Nullable<System.DateTime> _bezirkAufnahmeDatum;
    
        [DataMember]
        public Nullable<int> BezirkAufhebungNummer
        {
            get { return _bezirkAufhebungNummer; }
            set
            {
                if (_bezirkAufhebungNummer != value)
                {
                    _bezirkAufhebungNummer = value;
                    OnPropertyChanged("BezirkAufhebungNummer");
                }
            }
        }
        private Nullable<int> _bezirkAufhebungNummer;
    
        [DataMember]
        public Nullable<int> BezirkAufhebungModus
        {
            get { return _bezirkAufhebungModus; }
            set
            {
                if (_bezirkAufhebungModus != value)
                {
                    _bezirkAufhebungModus = value;
                    OnPropertyChanged("BezirkAufhebungModus");
                }
            }
        }
        private Nullable<int> _bezirkAufhebungModus;
    
        [DataMember]
        public Nullable<System.DateTime> BezirkAufhebungDatum
        {
            get { return _bezirkAufhebungDatum; }
            set
            {
                if (_bezirkAufhebungDatum != value)
                {
                    _bezirkAufhebungDatum = value;
                    OnPropertyChanged("BezirkAufhebungDatum");
                }
            }
        }
        private Nullable<System.DateTime> _bezirkAufhebungDatum;
    
        [DataMember]
        public Nullable<System.DateTime> BezirkAenderungDatum
        {
            get { return _bezirkAenderungDatum; }
            set
            {
                if (_bezirkAenderungDatum != value)
                {
                    _bezirkAenderungDatum = value;
                    OnPropertyChanged("BezirkAenderungDatum");
                }
            }
        }
        private Nullable<System.DateTime> _bezirkAenderungDatum;
    
        [DataMember]
        public Nullable<int> KantonID
        {
            get { return _kantonID; }
            set
            {
                if (_kantonID != value)
                {
                    _kantonID = value;
                    OnPropertyChanged("KantonID");
                }
            }
        }
        private Nullable<int> _kantonID;
    
        [DataMember]
        public string KantonNameLang
        {
            get { return _kantonNameLang; }
            set
            {
                if (_kantonNameLang != value)
                {
                    _kantonNameLang = value;
                    OnPropertyChanged("KantonNameLang");
                }
            }
        }
        private string _kantonNameLang;
    
        [DataMember]
        public Nullable<bool> BFSDelivered
        {
            get { return _bFSDelivered; }
            set
            {
                if (_bFSDelivered != value)
                {
                    _bFSDelivered = value;
                    OnPropertyChanged("BFSDelivered");
                }
            }
        }
        private Nullable<bool> _bFSDelivered;

        #endregion

        #region Navigation Properties
    
        [DataMember]
        public TrackableCollection<BaPerson> BaPerson
        {
            get
            {
                if (_baPerson == null)
                {
                    _baPerson = new TrackableCollection<BaPerson>();
                    _baPerson.CollectionChanged += FixupBaPerson;
                }
                return _baPerson;
            }
            set
            {
                if (!ReferenceEquals(_baPerson, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_baPerson != null)
                    {
                        _baPerson.CollectionChanged -= FixupBaPerson;
                    }
                    _baPerson = value;
                    if (_baPerson != null)
                    {
                        _baPerson.CollectionChanged += FixupBaPerson;
                    }
                    OnNavigationPropertyChanged("BaPerson");
                }
            }
        }
        private TrackableCollection<BaPerson> _baPerson;
    
        [DataMember]
        public TrackableCollection<BaPerson> BaPerson1
        {
            get
            {
                if (_baPerson1 == null)
                {
                    _baPerson1 = new TrackableCollection<BaPerson>();
                    _baPerson1.CollectionChanged += FixupBaPerson1;
                }
                return _baPerson1;
            }
            set
            {
                if (!ReferenceEquals(_baPerson1, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_baPerson1 != null)
                    {
                        _baPerson1.CollectionChanged -= FixupBaPerson1;
                    }
                    _baPerson1 = value;
                    if (_baPerson1 != null)
                    {
                        _baPerson1.CollectionChanged += FixupBaPerson1;
                    }
                    OnNavigationPropertyChanged("BaPerson1");
                }
            }
        }
        private TrackableCollection<BaPerson> _baPerson1;
    
        [DataMember]
        public TrackableCollection<BaPerson> BaPerson2
        {
            get
            {
                if (_baPerson2 == null)
                {
                    _baPerson2 = new TrackableCollection<BaPerson>();
                    _baPerson2.CollectionChanged += FixupBaPerson2;
                }
                return _baPerson2;
            }
            set
            {
                if (!ReferenceEquals(_baPerson2, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_baPerson2 != null)
                    {
                        _baPerson2.CollectionChanged -= FixupBaPerson2;
                    }
                    _baPerson2 = value;
                    if (_baPerson2 != null)
                    {
                        _baPerson2.CollectionChanged += FixupBaPerson2;
                    }
                    OnNavigationPropertyChanged("BaPerson2");
                }
            }
        }
        private TrackableCollection<BaPerson> _baPerson2;
    
        [DataMember]
        public TrackableCollection<BaPerson> BaPerson3
        {
            get
            {
                if (_baPerson3 == null)
                {
                    _baPerson3 = new TrackableCollection<BaPerson>();
                    _baPerson3.CollectionChanged += FixupBaPerson3;
                }
                return _baPerson3;
            }
            set
            {
                if (!ReferenceEquals(_baPerson3, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_baPerson3 != null)
                    {
                        _baPerson3.CollectionChanged -= FixupBaPerson3;
                    }
                    _baPerson3 = value;
                    if (_baPerson3 != null)
                    {
                        _baPerson3.CollectionChanged += FixupBaPerson3;
                    }
                    OnNavigationPropertyChanged("BaPerson3");
                }
            }
        }
        private TrackableCollection<BaPerson> _baPerson3;

        #endregion

        #region ChangeTracking
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected override void ClearNavigationProperties()
        {
            BaPerson.Clear();
            BaPerson1.Clear();
            BaPerson2.Clear();
            BaPerson3.Clear();
        }

        #endregion

        #region Association Fixup
    
        private void FixupBaPerson(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (BaPerson item in e.NewItems)
                {
                    item.BaGemeinde = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("BaPerson", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (BaPerson item in e.OldItems)
                {
                    if (ReferenceEquals(item.BaGemeinde, this))
                    {
                        item.BaGemeinde = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("BaPerson", item);
                    }
                }
            }
        }
    
        private void FixupBaPerson1(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (BaPerson item in e.NewItems)
                {
                    item.BaGemeinde1 = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("BaPerson1", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (BaPerson item in e.OldItems)
                {
                    if (ReferenceEquals(item.BaGemeinde1, this))
                    {
                        item.BaGemeinde1 = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("BaPerson1", item);
                    }
                }
            }
        }
    
        private void FixupBaPerson2(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (BaPerson item in e.NewItems)
                {
                    item.BaGemeinde2 = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("BaPerson2", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (BaPerson item in e.OldItems)
                {
                    if (ReferenceEquals(item.BaGemeinde2, this))
                    {
                        item.BaGemeinde2 = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("BaPerson2", item);
                    }
                }
            }
        }
    
        private void FixupBaPerson3(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (BaPerson item in e.NewItems)
                {
                    item.BaGemeinde3 = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("BaPerson3", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (BaPerson item in e.OldItems)
                {
                    if (ReferenceEquals(item.BaGemeinde3, this))
                    {
                        item.BaGemeinde3 = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("BaPerson3", item);
                    }
                }
            }
        }

        #endregion

        #region Methods
    
    	public override bool Equals(object obj)
    	{
    		if (obj == null)
    		{
    			return false;
    		}
    		
    		if (ReferenceEquals(this, obj))
    		{
    			return true;
    		}
    
    		if (GetType() != obj.GetType())
    		{
    			return false;
    		}
    
    		var entity = (BaGemeinde)obj;
    		if (!_baGemeindeID.Equals(entity.BaGemeindeID) || _baGemeindeID == 0)
    		{
    			return false;
    		}
    		
    		return true;
    	}
    	
    	public override int GetHashCode()
        {
            return _baGemeindeID.GetHashCode();
        }

        #endregion

    }
}

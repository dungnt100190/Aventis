//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace Kiss.Model
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(XLOVCode))]
    [KnownType(typeof(XModul))]
    public partial class XLOV: EntityBase<XLOV>, IObjectWithChangeTracker
    {
        #region Primitive Properties
    
        [DataMember]
        public int XLOVID
        {
            get { return _xLOVID; }
            set
            {
                if (_xLOVID != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'XLOVID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _xLOVID = value;
                    OnPropertyChanged("XLOVID");
                }
            }
        }
        private int _xLOVID;
    
        [DataMember]
        public string LOVName
        {
            get { return _lOVName; }
            set
            {
                if (_lOVName != value)
                {
                    _lOVName = value;
                    OnPropertyChanged("LOVName");
                }
            }
        }
        private string _lOVName;
    
        [DataMember]
        public string Description
        {
            get { return _description; }
            set
            {
                if (_description != value)
                {
                    _description = value;
                    OnPropertyChanged("Description");
                }
            }
        }
        private string _description;
    
        [DataMember]
        public bool System
        {
            get { return _system; }
            set
            {
                if (_system != value)
                {
                    _system = value;
                    OnPropertyChanged("System");
                }
            }
        }
        private bool _system;
    
        [DataMember]
        public bool Expandable
        {
            get { return _expandable; }
            set
            {
                if (_expandable != value)
                {
                    _expandable = value;
                    OnPropertyChanged("Expandable");
                }
            }
        }
        private bool _expandable;
    
        [DataMember]
        public Nullable<int> ModulID
        {
            get { return _modulID; }
            set
            {
                if (_modulID != value)
                {
                    ChangeTracker.RecordOriginalValue("ModulID", _modulID);
                    if (!IsDeserializing)
                    {
                        if (XModul != null && XModul.ModulID != value)
                        {
                            XModul = null;
                        }
                    }
                    _modulID = value;
                    OnPropertyChanged("ModulID");
                }
            }
        }
        private Nullable<int> _modulID;
    
        [DataMember]
        public Nullable<System.DateTime> LastUpdated
        {
            get { return _lastUpdated; }
            set
            {
                if (_lastUpdated != value)
                {
                    _lastUpdated = value;
                    OnPropertyChanged("LastUpdated");
                }
            }
        }
        private Nullable<System.DateTime> _lastUpdated;
    
        [DataMember]
        public bool Translatable
        {
            get { return _translatable; }
            set
            {
                if (_translatable != value)
                {
                    _translatable = value;
                    OnPropertyChanged("Translatable");
                }
            }
        }
        private bool _translatable;
    
        [DataMember]
        public string NameValue1
        {
            get { return _nameValue1; }
            set
            {
                if (_nameValue1 != value)
                {
                    _nameValue1 = value;
                    OnPropertyChanged("NameValue1");
                }
            }
        }
        private string _nameValue1;
    
        [DataMember]
        public string NameValue2
        {
            get { return _nameValue2; }
            set
            {
                if (_nameValue2 != value)
                {
                    _nameValue2 = value;
                    OnPropertyChanged("NameValue2");
                }
            }
        }
        private string _nameValue2;
    
        [DataMember]
        public string NameValue3
        {
            get { return _nameValue3; }
            set
            {
                if (_nameValue3 != value)
                {
                    _nameValue3 = value;
                    OnPropertyChanged("NameValue3");
                }
            }
        }
        private string _nameValue3;
    
        [DataMember]
        public byte[] XLOVTS
        {
            get { return _xLOVTS; }
            set
            {
                if (_xLOVTS != value)
                {
                    _xLOVTS = value;
                    OnPropertyChanged("XLOVTS");
                }
            }
        }
        private byte[] _xLOVTS;

        #endregion

        #region Navigation Properties
    
        [DataMember]
        public TrackableCollection<XLOVCode> XLOVCode
        {
            get
            {
                if (_xLOVCode == null)
                {
                    _xLOVCode = new TrackableCollection<XLOVCode>();
                    _xLOVCode.CollectionChanged += FixupXLOVCode;
                }
                return _xLOVCode;
            }
            set
            {
                if (!ReferenceEquals(_xLOVCode, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_xLOVCode != null)
                    {
                        _xLOVCode.CollectionChanged -= FixupXLOVCode;
                    }
                    _xLOVCode = value;
                    if (_xLOVCode != null)
                    {
                        _xLOVCode.CollectionChanged += FixupXLOVCode;
                    }
                    OnNavigationPropertyChanged("XLOVCode");
                }
            }
        }
        private TrackableCollection<XLOVCode> _xLOVCode;
    
        [DataMember]
        public XModul XModul
        {
            get { return _xModul; }
            set
            {
                if (!ReferenceEquals(_xModul, value))
                {
                    var previousValue = _xModul;
                    _xModul = value;
                    FixupXModul(previousValue);
                    OnNavigationPropertyChanged("XModul");
                }
            }
        }
        private XModul _xModul;

        #endregion

        #region ChangeTracking
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected override void ClearNavigationProperties()
        {
            XLOVCode.Clear();
            XModul = null;
        }

        #endregion

        #region Association Fixup
    
        private void FixupXModul(XModul previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.XLOV.Contains(this))
            {
                previousValue.XLOV.Remove(this);
            }
    
            if (XModul != null)
            {
                if (!XModul.XLOV.Contains(this))
                {
                    XModul.XLOV.Add(this);
                }
    
                ModulID = XModul.ModulID;
            }
            else if (!skipKeys)
            {
                ModulID = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("XModul")
                    && (ChangeTracker.OriginalValues["XModul"] == XModul))
                {
                    ChangeTracker.OriginalValues.Remove("XModul");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("XModul", previousValue);
                }
                if (XModul != null && !XModul.ChangeTracker.ChangeTrackingEnabled)
                {
                    XModul.StartTracking();
                }
            }
        }
    
        private void FixupXLOVCode(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (XLOVCode item in e.NewItems)
                {
                    item.XLOV = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("XLOVCode", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (XLOVCode item in e.OldItems)
                {
                    if (ReferenceEquals(item.XLOV, this))
                    {
                        item.XLOV = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("XLOVCode", item);
                    }
                }
            }
        }

        #endregion

        #region Methods
    
    	public override bool Equals(object obj)
    	{
    		if (obj == null)
    		{
    			return false;
    		}
    		
    		if (ReferenceEquals(this, obj))
    		{
    			return true;
    		}
    
    		if (GetType() != obj.GetType())
    		{
    			return false;
    		}
    
    		var entity = (XLOV)obj;
    		if (!_xLOVID.Equals(entity.XLOVID) || _xLOVID == 0)
    		{
    			return false;
    		}
    		
    		return true;
    	}
    	
    	public override int GetHashCode()
        {
            return _xLOVID.GetHashCode();
        }

        #endregion

    }
}

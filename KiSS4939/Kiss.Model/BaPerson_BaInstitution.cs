//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace Kiss.Model
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(BaInstitution))]
    [KnownType(typeof(BaPerson))]
    public partial class BaPerson_BaInstitution: EntityBase<BaPerson_BaInstitution>, IObjectWithChangeTracker
    {
        #region Primitive Properties
    
        [DataMember]
        public int BaPerson_BaInstitutionID
        {
            get { return _baPerson_BaInstitutionID; }
            set
            {
                if (_baPerson_BaInstitutionID != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'BaPerson_BaInstitutionID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _baPerson_BaInstitutionID = value;
                    OnPropertyChanged("BaPerson_BaInstitutionID");
                }
            }
        }
        private int _baPerson_BaInstitutionID;
    
        [DataMember]
        public int BaPersonID
        {
            get { return _baPersonID; }
            set
            {
                if (_baPersonID != value)
                {
                    ChangeTracker.RecordOriginalValue("BaPersonID", _baPersonID);
                    if (!IsDeserializing)
                    {
                        if (BaPerson != null && BaPerson.BaPersonID != value)
                        {
                            BaPerson = null;
                        }
                    }
                    _baPersonID = value;
                    OnPropertyChanged("BaPersonID");
                }
            }
        }
        private int _baPersonID;
    
        [DataMember]
        public int BaInstitutionID
        {
            get { return _baInstitutionID; }
            set
            {
                if (_baInstitutionID != value)
                {
                    ChangeTracker.RecordOriginalValue("BaInstitutionID", _baInstitutionID);
                    if (!IsDeserializing)
                    {
                        if (BaInstitution != null && BaInstitution.BaInstitutionID != value)
                        {
                            BaInstitution = null;
                        }
                    }
                    _baInstitutionID = value;
                    OnPropertyChanged("BaInstitutionID");
                }
            }
        }
        private int _baInstitutionID;
    
        [DataMember]
        public Nullable<int> BaInstitutionKontaktID
        {
            get { return _baInstitutionKontaktID; }
            set
            {
                if (_baInstitutionKontaktID != value)
                {
                    _baInstitutionKontaktID = value;
                    OnPropertyChanged("BaInstitutionKontaktID");
                }
            }
        }
        private Nullable<int> _baInstitutionKontaktID;
    
        [DataMember]
        public Nullable<int> BaInstitutionTypID
        {
            get { return _baInstitutionTypID; }
            set
            {
                if (_baInstitutionTypID != value)
                {
                    _baInstitutionTypID = value;
                    OnPropertyChanged("BaInstitutionTypID");
                }
            }
        }
        private Nullable<int> _baInstitutionTypID;
    
        [DataMember]
        public string Bemerkung
        {
            get { return _bemerkung; }
            set
            {
                if (_bemerkung != value)
                {
                    _bemerkung = value;
                    OnPropertyChanged("Bemerkung");
                }
            }
        }
        private string _bemerkung;
    
        [DataMember]
        public string Creator
        {
            get { return _creator; }
            set
            {
                if (_creator != value)
                {
                    _creator = value;
                    OnPropertyChanged("Creator");
                }
            }
        }
        private string _creator;
    
        [DataMember]
        public System.DateTime Created
        {
            get { return _created; }
            set
            {
                if (_created != value)
                {
                    _created = value;
                    OnPropertyChanged("Created");
                }
            }
        }
        private System.DateTime _created;
    
        [DataMember]
        public string Modifier
        {
            get { return _modifier; }
            set
            {
                if (_modifier != value)
                {
                    _modifier = value;
                    OnPropertyChanged("Modifier");
                }
            }
        }
        private string _modifier;
    
        [DataMember]
        public System.DateTime Modified
        {
            get { return _modified; }
            set
            {
                if (_modified != value)
                {
                    _modified = value;
                    OnPropertyChanged("Modified");
                }
            }
        }
        private System.DateTime _modified;
    
        [DataMember]
        public byte[] BaPerson_BaInstitutionTS
        {
            get { return _baPerson_BaInstitutionTS; }
            set
            {
                if (_baPerson_BaInstitutionTS != value)
                {
                    _baPerson_BaInstitutionTS = value;
                    OnPropertyChanged("BaPerson_BaInstitutionTS");
                }
            }
        }
        private byte[] _baPerson_BaInstitutionTS;

        #endregion

        #region Navigation Properties
    
        [DataMember]
        public BaInstitution BaInstitution
        {
            get { return _baInstitution; }
            set
            {
                if (!ReferenceEquals(_baInstitution, value))
                {
                    var previousValue = _baInstitution;
                    _baInstitution = value;
                    FixupBaInstitution(previousValue);
                    OnNavigationPropertyChanged("BaInstitution");
                }
            }
        }
        private BaInstitution _baInstitution;
    
        [DataMember]
        public BaPerson BaPerson
        {
            get { return _baPerson; }
            set
            {
                if (!ReferenceEquals(_baPerson, value))
                {
                    var previousValue = _baPerson;
                    _baPerson = value;
                    FixupBaPerson(previousValue);
                    OnNavigationPropertyChanged("BaPerson");
                }
            }
        }
        private BaPerson _baPerson;

        #endregion

        #region ChangeTracking
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected override void ClearNavigationProperties()
        {
            BaInstitution = null;
            BaPerson = null;
        }

        #endregion

        #region Association Fixup
    
        private void FixupBaInstitution(BaInstitution previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.BaPerson_BaInstitution.Contains(this))
            {
                previousValue.BaPerson_BaInstitution.Remove(this);
            }
    
            if (BaInstitution != null)
            {
                if (!BaInstitution.BaPerson_BaInstitution.Contains(this))
                {
                    BaInstitution.BaPerson_BaInstitution.Add(this);
                }
    
                BaInstitutionID = BaInstitution.BaInstitutionID;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("BaInstitution")
                    && (ChangeTracker.OriginalValues["BaInstitution"] == BaInstitution))
                {
                    ChangeTracker.OriginalValues.Remove("BaInstitution");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("BaInstitution", previousValue);
                }
                if (BaInstitution != null && !BaInstitution.ChangeTracker.ChangeTrackingEnabled)
                {
                    BaInstitution.StartTracking();
                }
            }
        }
    
        private void FixupBaPerson(BaPerson previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.BaPerson_BaInstitution.Contains(this))
            {
                previousValue.BaPerson_BaInstitution.Remove(this);
            }
    
            if (BaPerson != null)
            {
                if (!BaPerson.BaPerson_BaInstitution.Contains(this))
                {
                    BaPerson.BaPerson_BaInstitution.Add(this);
                }
    
                BaPersonID = BaPerson.BaPersonID;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("BaPerson")
                    && (ChangeTracker.OriginalValues["BaPerson"] == BaPerson))
                {
                    ChangeTracker.OriginalValues.Remove("BaPerson");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("BaPerson", previousValue);
                }
                if (BaPerson != null && !BaPerson.ChangeTracker.ChangeTrackingEnabled)
                {
                    BaPerson.StartTracking();
                }
            }
        }

        #endregion

        #region Methods
    
    	public override bool Equals(object obj)
    	{
    		if (obj == null)
    		{
    			return false;
    		}
    		
    		if (ReferenceEquals(this, obj))
    		{
    			return true;
    		}
    
    		if (GetType() != obj.GetType())
    		{
    			return false;
    		}
    
    		var entity = (BaPerson_BaInstitution)obj;
    		if (!_baPerson_BaInstitutionID.Equals(entity.BaPerson_BaInstitutionID) || _baPerson_BaInstitutionID == 0)
    		{
    			return false;
    		}
    		
    		return true;
    	}
    	
    	public override int GetHashCode()
        {
            return _baPerson_BaInstitutionID.GetHashCode();
        }

        #endregion

    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace Kiss.Model
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(BaInstitution))]
    [KnownType(typeof(BaPerson))]
    [KnownType(typeof(KesAuftrag))]
    [KnownType(typeof(XUser))]
    [KnownType(typeof(XDocument))]
    [KnownType(typeof(FaLeistung))]
    public partial class KesDokument: EntityBase<KesDokument>, IObjectWithChangeTracker
    {
        #region Primitive Properties
    
        [DataMember]
        public int KesDokumentID
        {
            get { return _kesDokumentID; }
            set
            {
                if (_kesDokumentID != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'KesDokumentID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _kesDokumentID = value;
                    OnPropertyChanged("KesDokumentID");
                }
            }
        }
        private int _kesDokumentID;
    
        [DataMember]
        public Nullable<int> KesAuftragID
        {
            get { return _kesAuftragID; }
            set
            {
                if (_kesAuftragID != value)
                {
                    ChangeTracker.RecordOriginalValue("KesAuftragID", _kesAuftragID);
                    if (!IsDeserializing)
                    {
                        if (KesAuftrag != null && KesAuftrag.KesAuftragID != value)
                        {
                            KesAuftrag = null;
                        }
                    }
                    _kesAuftragID = value;
                    OnPropertyChanged("KesAuftragID");
                }
            }
        }
        private Nullable<int> _kesAuftragID;
    
        [DataMember]
        public Nullable<int> UserID
        {
            get { return _userID; }
            set
            {
                if (_userID != value)
                {
                    ChangeTracker.RecordOriginalValue("UserID", _userID);
                    if (!IsDeserializing)
                    {
                        if (XUser != null && XUser.UserID != value)
                        {
                            XUser = null;
                        }
                    }
                    _userID = value;
                    OnPropertyChanged("UserID");
                }
            }
        }
        private Nullable<int> _userID;
    
        [DataMember]
        public Nullable<int> BaPersonID_Adressat
        {
            get { return _baPersonID_Adressat; }
            set
            {
                if (_baPersonID_Adressat != value)
                {
                    ChangeTracker.RecordOriginalValue("BaPersonID_Adressat", _baPersonID_Adressat);
                    if (!IsDeserializing)
                    {
                        if (BaPerson != null && BaPerson.BaPersonID != value)
                        {
                            BaPerson = null;
                        }
                    }
                    _baPersonID_Adressat = value;
                    OnPropertyChanged("BaPersonID_Adressat");
                }
            }
        }
        private Nullable<int> _baPersonID_Adressat;
    
        [DataMember]
        public Nullable<int> BaInstitutionID_Adressat
        {
            get { return _baInstitutionID_Adressat; }
            set
            {
                if (_baInstitutionID_Adressat != value)
                {
                    ChangeTracker.RecordOriginalValue("BaInstitutionID_Adressat", _baInstitutionID_Adressat);
                    if (!IsDeserializing)
                    {
                        if (BaInstitution != null && BaInstitution.BaInstitutionID != value)
                        {
                            BaInstitution = null;
                        }
                    }
                    _baInstitutionID_Adressat = value;
                    OnPropertyChanged("BaInstitutionID_Adressat");
                }
            }
        }
        private Nullable<int> _baInstitutionID_Adressat;
    
        [DataMember]
        public string Stichwort
        {
            get { return _stichwort; }
            set
            {
                if (_stichwort != value)
                {
                    _stichwort = value;
                    OnPropertyChanged("Stichwort");
                }
            }
        }
        private string _stichwort;
    
        [DataMember]
        public Nullable<int> KesDokumentResultatCode
        {
            get { return _kesDokumentResultatCode; }
            set
            {
                if (_kesDokumentResultatCode != value)
                {
                    _kesDokumentResultatCode = value;
                    OnPropertyChanged("KesDokumentResultatCode");
                }
            }
        }
        private Nullable<int> _kesDokumentResultatCode;
    
        [DataMember]
        public Nullable<int> XDocumentID_Dokument
        {
            get { return _xDocumentID_Dokument; }
            set
            {
                if (_xDocumentID_Dokument != value)
                {
                    ChangeTracker.RecordOriginalValue("XDocumentID_Dokument", _xDocumentID_Dokument);
                    if (!IsDeserializing)
                    {
                        if (XDocumentDokument != null && XDocumentDokument.DocumentID != value)
                        {
                            XDocumentDokument = null;
                        }
                    }
                    _xDocumentID_Dokument = value;
                    OnPropertyChanged("XDocumentID_Dokument");
                }
            }
        }
        private Nullable<int> _xDocumentID_Dokument;
    
        [DataMember]
        public Nullable<int> XDocumentID_Versand
        {
            get { return _xDocumentID_Versand; }
            set
            {
                if (_xDocumentID_Versand != value)
                {
                    ChangeTracker.RecordOriginalValue("XDocumentID_Versand", _xDocumentID_Versand);
                    if (!IsDeserializing)
                    {
                        if (XDocumentVersand != null && XDocumentVersand.DocumentID != value)
                        {
                            XDocumentVersand = null;
                        }
                    }
                    _xDocumentID_Versand = value;
                    OnPropertyChanged("XDocumentID_Versand");
                }
            }
        }
        private Nullable<int> _xDocumentID_Versand;
    
        [DataMember]
        public int KesDokumentTypCode
        {
            get { return _kesDokumentTypCode; }
            set
            {
                if (_kesDokumentTypCode != value)
                {
                    _kesDokumentTypCode = value;
                    OnPropertyChanged("KesDokumentTypCode");
                }
            }
        }
        private int _kesDokumentTypCode;
    
        [DataMember]
        public string Creator
        {
            get { return _creator; }
            set
            {
                if (_creator != value)
                {
                    _creator = value;
                    OnPropertyChanged("Creator");
                }
            }
        }
        private string _creator;
    
        [DataMember]
        public System.DateTime Created
        {
            get { return _created; }
            set
            {
                if (_created != value)
                {
                    _created = value;
                    OnPropertyChanged("Created");
                }
            }
        }
        private System.DateTime _created;
    
        [DataMember]
        public string Modifier
        {
            get { return _modifier; }
            set
            {
                if (_modifier != value)
                {
                    _modifier = value;
                    OnPropertyChanged("Modifier");
                }
            }
        }
        private string _modifier;
    
        [DataMember]
        public System.DateTime Modified
        {
            get { return _modified; }
            set
            {
                if (_modified != value)
                {
                    _modified = value;
                    OnPropertyChanged("Modified");
                }
            }
        }
        private System.DateTime _modified;
    
        [DataMember]
        public byte[] KesDokumentTS
        {
            get { return _kesDokumentTS; }
            set
            {
                if (_kesDokumentTS != value)
                {
                    _kesDokumentTS = value;
                    OnPropertyChanged("KesDokumentTS");
                }
            }
        }
        private byte[] _kesDokumentTS;
    
        [DataMember]
        public Nullable<int> FaLeistungID
        {
            get { return _faLeistungID; }
            set
            {
                if (_faLeistungID != value)
                {
                    ChangeTracker.RecordOriginalValue("FaLeistungID", _faLeistungID);
                    if (!IsDeserializing)
                    {
                        if (FaLeistung != null && FaLeistung.FaLeistungID != value)
                        {
                            FaLeistung = null;
                        }
                    }
                    _faLeistungID = value;
                    OnPropertyChanged("FaLeistungID");
                }
            }
        }
        private Nullable<int> _faLeistungID;
    
        [DataMember]
        public Nullable<int> KesDokumentArtCode
        {
            get { return _kesDokumentArtCode; }
            set
            {
                if (_kesDokumentArtCode != value)
                {
                    _kesDokumentArtCode = value;
                    OnPropertyChanged("KesDokumentArtCode");
                }
            }
        }
        private Nullable<int> _kesDokumentArtCode;
    
        [DataMember]
        public bool IsDeleted
        {
            get { return _isDeleted; }
            set
            {
                if (_isDeleted != value)
                {
                    _isDeleted = value;
                    OnPropertyChanged("IsDeleted");
                }
            }
        }
        private bool _isDeleted;

        #endregion

        #region Navigation Properties
    
        [DataMember]
        public BaInstitution BaInstitution
        {
            get { return _baInstitution; }
            set
            {
                if (!ReferenceEquals(_baInstitution, value))
                {
                    var previousValue = _baInstitution;
                    _baInstitution = value;
                    FixupBaInstitution(previousValue);
                    OnNavigationPropertyChanged("BaInstitution");
                }
            }
        }
        private BaInstitution _baInstitution;
    
        [DataMember]
        public BaPerson BaPerson
        {
            get { return _baPerson; }
            set
            {
                if (!ReferenceEquals(_baPerson, value))
                {
                    var previousValue = _baPerson;
                    _baPerson = value;
                    FixupBaPerson(previousValue);
                    OnNavigationPropertyChanged("BaPerson");
                }
            }
        }
        private BaPerson _baPerson;
    
        [DataMember]
        public KesAuftrag KesAuftrag
        {
            get { return _kesAuftrag; }
            set
            {
                if (!ReferenceEquals(_kesAuftrag, value))
                {
                    var previousValue = _kesAuftrag;
                    _kesAuftrag = value;
                    FixupKesAuftrag(previousValue);
                    OnNavigationPropertyChanged("KesAuftrag");
                }
            }
        }
        private KesAuftrag _kesAuftrag;
    
        [DataMember]
        public XUser XUser
        {
            get { return _xUser; }
            set
            {
                if (!ReferenceEquals(_xUser, value))
                {
                    var previousValue = _xUser;
                    _xUser = value;
                    FixupXUser(previousValue);
                    OnNavigationPropertyChanged("XUser");
                }
            }
        }
        private XUser _xUser;
    
        [DataMember]
        public XDocument XDocumentVersand
        {
            get { return _xDocumentVersand; }
            set
            {
                if (!ReferenceEquals(_xDocumentVersand, value))
                {
                    var previousValue = _xDocumentVersand;
                    _xDocumentVersand = value;
                    FixupXDocumentVersand(previousValue);
                    OnNavigationPropertyChanged("XDocumentVersand");
                }
            }
        }
        private XDocument _xDocumentVersand;
    
        [DataMember]
        public XDocument XDocumentDokument
        {
            get { return _xDocumentDokument; }
            set
            {
                if (!ReferenceEquals(_xDocumentDokument, value))
                {
                    var previousValue = _xDocumentDokument;
                    _xDocumentDokument = value;
                    FixupXDocumentDokument(previousValue);
                    OnNavigationPropertyChanged("XDocumentDokument");
                }
            }
        }
        private XDocument _xDocumentDokument;
    
        [DataMember]
        public FaLeistung FaLeistung
        {
            get { return _faLeistung; }
            set
            {
                if (!ReferenceEquals(_faLeistung, value))
                {
                    var previousValue = _faLeistung;
                    _faLeistung = value;
                    FixupFaLeistung(previousValue);
                    OnNavigationPropertyChanged("FaLeistung");
                }
            }
        }
        private FaLeistung _faLeistung;

        #endregion

        #region ChangeTracking
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected override void ClearNavigationProperties()
        {
            BaInstitution = null;
            BaPerson = null;
            KesAuftrag = null;
            XUser = null;
            XDocumentVersand = null;
            XDocumentDokument = null;
            FaLeistung = null;
        }

        #endregion

        #region Association Fixup
    
        private void FixupBaInstitution(BaInstitution previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.KesDokument.Contains(this))
            {
                previousValue.KesDokument.Remove(this);
            }
    
            if (BaInstitution != null)
            {
                if (!BaInstitution.KesDokument.Contains(this))
                {
                    BaInstitution.KesDokument.Add(this);
                }
    
                BaInstitutionID_Adressat = BaInstitution.BaInstitutionID;
            }
            else if (!skipKeys)
            {
                BaInstitutionID_Adressat = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("BaInstitution")
                    && (ChangeTracker.OriginalValues["BaInstitution"] == BaInstitution))
                {
                    ChangeTracker.OriginalValues.Remove("BaInstitution");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("BaInstitution", previousValue);
                }
                if (BaInstitution != null && !BaInstitution.ChangeTracker.ChangeTrackingEnabled)
                {
                    BaInstitution.StartTracking();
                }
            }
        }
    
        private void FixupBaPerson(BaPerson previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.KesDokument.Contains(this))
            {
                previousValue.KesDokument.Remove(this);
            }
    
            if (BaPerson != null)
            {
                if (!BaPerson.KesDokument.Contains(this))
                {
                    BaPerson.KesDokument.Add(this);
                }
    
                BaPersonID_Adressat = BaPerson.BaPersonID;
            }
            else if (!skipKeys)
            {
                BaPersonID_Adressat = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("BaPerson")
                    && (ChangeTracker.OriginalValues["BaPerson"] == BaPerson))
                {
                    ChangeTracker.OriginalValues.Remove("BaPerson");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("BaPerson", previousValue);
                }
                if (BaPerson != null && !BaPerson.ChangeTracker.ChangeTrackingEnabled)
                {
                    BaPerson.StartTracking();
                }
            }
        }
    
        private void FixupKesAuftrag(KesAuftrag previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.KesDokument.Contains(this))
            {
                previousValue.KesDokument.Remove(this);
            }
    
            if (KesAuftrag != null)
            {
                if (!KesAuftrag.KesDokument.Contains(this))
                {
                    KesAuftrag.KesDokument.Add(this);
                }
    
                KesAuftragID = KesAuftrag.KesAuftragID;
            }
            else if (!skipKeys)
            {
                KesAuftragID = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("KesAuftrag")
                    && (ChangeTracker.OriginalValues["KesAuftrag"] == KesAuftrag))
                {
                    ChangeTracker.OriginalValues.Remove("KesAuftrag");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("KesAuftrag", previousValue);
                }
                if (KesAuftrag != null && !KesAuftrag.ChangeTracker.ChangeTrackingEnabled)
                {
                    KesAuftrag.StartTracking();
                }
            }
        }
    
        private void FixupXUser(XUser previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.KesDokument.Contains(this))
            {
                previousValue.KesDokument.Remove(this);
            }
    
            if (XUser != null)
            {
                if (!XUser.KesDokument.Contains(this))
                {
                    XUser.KesDokument.Add(this);
                }
    
                UserID = XUser.UserID;
            }
            else if (!skipKeys)
            {
                UserID = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("XUser")
                    && (ChangeTracker.OriginalValues["XUser"] == XUser))
                {
                    ChangeTracker.OriginalValues.Remove("XUser");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("XUser", previousValue);
                }
                if (XUser != null && !XUser.ChangeTracker.ChangeTrackingEnabled)
                {
                    XUser.StartTracking();
                }
            }
        }
    
        private void FixupXDocumentVersand(XDocument previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.KesDokument1.Contains(this))
            {
                previousValue.KesDokument1.Remove(this);
            }
    
            if (XDocumentVersand != null)
            {
                if (!XDocumentVersand.KesDokument1.Contains(this))
                {
                    XDocumentVersand.KesDokument1.Add(this);
                }
    
                XDocumentID_Versand = XDocumentVersand.DocumentID;
            }
            else if (!skipKeys)
            {
                XDocumentID_Versand = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("XDocumentVersand")
                    && (ChangeTracker.OriginalValues["XDocumentVersand"] == XDocumentVersand))
                {
                    ChangeTracker.OriginalValues.Remove("XDocumentVersand");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("XDocumentVersand", previousValue);
                }
                if (XDocumentVersand != null && !XDocumentVersand.ChangeTracker.ChangeTrackingEnabled)
                {
                    XDocumentVersand.StartTracking();
                }
            }
        }
    
        private void FixupXDocumentDokument(XDocument previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.KesDokument.Contains(this))
            {
                previousValue.KesDokument.Remove(this);
            }
    
            if (XDocumentDokument != null)
            {
                if (!XDocumentDokument.KesDokument.Contains(this))
                {
                    XDocumentDokument.KesDokument.Add(this);
                }
    
                XDocumentID_Dokument = XDocumentDokument.DocumentID;
            }
            else if (!skipKeys)
            {
                XDocumentID_Dokument = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("XDocumentDokument")
                    && (ChangeTracker.OriginalValues["XDocumentDokument"] == XDocumentDokument))
                {
                    ChangeTracker.OriginalValues.Remove("XDocumentDokument");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("XDocumentDokument", previousValue);
                }
                if (XDocumentDokument != null && !XDocumentDokument.ChangeTracker.ChangeTrackingEnabled)
                {
                    XDocumentDokument.StartTracking();
                }
            }
        }
    
        private void FixupFaLeistung(FaLeistung previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.KesDokument.Contains(this))
            {
                previousValue.KesDokument.Remove(this);
            }
    
            if (FaLeistung != null)
            {
                if (!FaLeistung.KesDokument.Contains(this))
                {
                    FaLeistung.KesDokument.Add(this);
                }
    
                FaLeistungID = FaLeistung.FaLeistungID;
            }
            else if (!skipKeys)
            {
                FaLeistungID = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("FaLeistung")
                    && (ChangeTracker.OriginalValues["FaLeistung"] == FaLeistung))
                {
                    ChangeTracker.OriginalValues.Remove("FaLeistung");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("FaLeistung", previousValue);
                }
                if (FaLeistung != null && !FaLeistung.ChangeTracker.ChangeTrackingEnabled)
                {
                    FaLeistung.StartTracking();
                }
            }
        }

        #endregion

        #region Methods
    
    	public override bool Equals(object obj)
    	{
    		if (obj == null)
    		{
    			return false;
    		}
    		
    		if (ReferenceEquals(this, obj))
    		{
    			return true;
    		}
    
    		if (GetType() != obj.GetType())
    		{
    			return false;
    		}
    
    		var entity = (KesDokument)obj;
    		if (!_kesDokumentID.Equals(entity.KesDokumentID) || _kesDokumentID == 0)
    		{
    			return false;
    		}
    		
    		return true;
    	}
    	
    	public override int GetHashCode()
        {
            return _kesDokumentID.GetHashCode();
        }

        #endregion

    }
}

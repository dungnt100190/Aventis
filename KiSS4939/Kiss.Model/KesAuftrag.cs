//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace Kiss.Model
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(FaLeistung))]
    [KnownType(typeof(XUser))]
    [KnownType(typeof(KesAuftrag_BaPerson))]
    [KnownType(typeof(KesDokument))]
    public partial class KesAuftrag: EntityBase<KesAuftrag>, IObjectWithChangeTracker
    {
        #region Primitive Properties
    
        [DataMember]
        public int KesAuftragID
        {
            get { return _kesAuftragID; }
            set
            {
                if (_kesAuftragID != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'KesAuftragID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _kesAuftragID = value;
                    OnPropertyChanged("KesAuftragID");
                }
            }
        }
        private int _kesAuftragID;
    
        [DataMember]
        public int FaLeistungID
        {
            get { return _faLeistungID; }
            set
            {
                if (_faLeistungID != value)
                {
                    ChangeTracker.RecordOriginalValue("FaLeistungID", _faLeistungID);
                    if (!IsDeserializing)
                    {
                        if (FaLeistung != null && FaLeistung.FaLeistungID != value)
                        {
                            FaLeistung = null;
                        }
                    }
                    _faLeistungID = value;
                    OnPropertyChanged("FaLeistungID");
                }
            }
        }
        private int _faLeistungID;
    
        [DataMember]
        public Nullable<System.DateTime> DatumAuftrag
        {
            get { return _datumAuftrag; }
            set
            {
                if (_datumAuftrag != value)
                {
                    _datumAuftrag = value;
                    OnPropertyChanged("DatumAuftrag");
                }
            }
        }
        private Nullable<System.DateTime> _datumAuftrag;
    
        [DataMember]
        public Nullable<int> DocumentID_Auftrag
        {
            get { return _documentID_Auftrag; }
            set
            {
                if (_documentID_Auftrag != value)
                {
                    _documentID_Auftrag = value;
                    OnPropertyChanged("DocumentID_Auftrag");
                }
            }
        }
        private Nullable<int> _documentID_Auftrag;
    
        [DataMember]
        public Nullable<int> UserID
        {
            get { return _userID; }
            set
            {
                if (_userID != value)
                {
                    ChangeTracker.RecordOriginalValue("UserID", _userID);
                    if (!IsDeserializing)
                    {
                        if (XUser != null && XUser.UserID != value)
                        {
                            XUser = null;
                        }
                    }
                    _userID = value;
                    OnPropertyChanged("UserID");
                }
            }
        }
        private Nullable<int> _userID;
    
        [DataMember]
        public Nullable<System.DateTime> DatumFrist
        {
            get { return _datumFrist; }
            set
            {
                if (_datumFrist != value)
                {
                    _datumFrist = value;
                    OnPropertyChanged("DatumFrist");
                }
            }
        }
        private Nullable<System.DateTime> _datumFrist;
    
        [DataMember]
        public Nullable<int> KesAuftragDurchCode
        {
            get { return _kesAuftragDurchCode; }
            set
            {
                if (_kesAuftragDurchCode != value)
                {
                    _kesAuftragDurchCode = value;
                    OnPropertyChanged("KesAuftragDurchCode");
                }
            }
        }
        private Nullable<int> _kesAuftragDurchCode;
    
        [DataMember]
        public string Anlass
        {
            get { return _anlass; }
            set
            {
                if (_anlass != value)
                {
                    _anlass = value;
                    OnPropertyChanged("Anlass");
                }
            }
        }
        private string _anlass;
    
        [DataMember]
        public string Auftrag
        {
            get { return _auftrag; }
            set
            {
                if (_auftrag != value)
                {
                    _auftrag = value;
                    OnPropertyChanged("Auftrag");
                }
            }
        }
        private string _auftrag;
    
        [DataMember]
        public Nullable<System.DateTime> AbschlussDatum
        {
            get { return _abschlussDatum; }
            set
            {
                if (_abschlussDatum != value)
                {
                    _abschlussDatum = value;
                    OnPropertyChanged("AbschlussDatum");
                }
            }
        }
        private Nullable<System.DateTime> _abschlussDatum;
    
        [DataMember]
        public Nullable<int> KesAuftragAbschlussgrundCode
        {
            get { return _kesAuftragAbschlussgrundCode; }
            set
            {
                if (_kesAuftragAbschlussgrundCode != value)
                {
                    _kesAuftragAbschlussgrundCode = value;
                    OnPropertyChanged("KesAuftragAbschlussgrundCode");
                }
            }
        }
        private Nullable<int> _kesAuftragAbschlussgrundCode;
    
        [DataMember]
        public Nullable<int> DocumentID_BeschlussRueckmeldung
        {
            get { return _documentID_BeschlussRueckmeldung; }
            set
            {
                if (_documentID_BeschlussRueckmeldung != value)
                {
                    _documentID_BeschlussRueckmeldung = value;
                    OnPropertyChanged("DocumentID_BeschlussRueckmeldung");
                }
            }
        }
        private Nullable<int> _documentID_BeschlussRueckmeldung;
    
        [DataMember]
        public string Creator
        {
            get { return _creator; }
            set
            {
                if (_creator != value)
                {
                    _creator = value;
                    OnPropertyChanged("Creator");
                }
            }
        }
        private string _creator;
    
        [DataMember]
        public System.DateTime Created
        {
            get { return _created; }
            set
            {
                if (_created != value)
                {
                    _created = value;
                    OnPropertyChanged("Created");
                }
            }
        }
        private System.DateTime _created;
    
        [DataMember]
        public string Modifier
        {
            get { return _modifier; }
            set
            {
                if (_modifier != value)
                {
                    _modifier = value;
                    OnPropertyChanged("Modifier");
                }
            }
        }
        private string _modifier;
    
        [DataMember]
        public System.DateTime Modified
        {
            get { return _modified; }
            set
            {
                if (_modified != value)
                {
                    _modified = value;
                    OnPropertyChanged("Modified");
                }
            }
        }
        private System.DateTime _modified;
    
        [DataMember]
        public byte[] KesAuftragTS
        {
            get { return _kesAuftragTS; }
            set
            {
                if (_kesAuftragTS != value)
                {
                    _kesAuftragTS = value;
                    OnPropertyChanged("KesAuftragTS");
                }
            }
        }
        private byte[] _kesAuftragTS;
    
        [DataMember]
        public Nullable<int> KesAuftragAbklaerungsartCode
        {
            get { return _kesAuftragAbklaerungsartCode; }
            set
            {
                if (_kesAuftragAbklaerungsartCode != value)
                {
                    _kesAuftragAbklaerungsartCode = value;
                    OnPropertyChanged("KesAuftragAbklaerungsartCode");
                }
            }
        }
        private Nullable<int> _kesAuftragAbklaerungsartCode;
    
        [DataMember]
        public bool IsKS
        {
            get { return _isKS; }
            set
            {
                if (_isKS != value)
                {
                    _isKS = value;
                    OnPropertyChanged("IsKS");
                }
            }
        }
        private bool _isKS;
    
        [DataMember]
        public Nullable<int> KesGefaehrdungsmeldungDurchCode
        {
            get { return _kesGefaehrdungsmeldungDurchCode; }
            set
            {
                if (_kesGefaehrdungsmeldungDurchCode != value)
                {
                    _kesGefaehrdungsmeldungDurchCode = value;
                    OnPropertyChanged("KesGefaehrdungsmeldungDurchCode");
                }
            }
        }
        private Nullable<int> _kesGefaehrdungsmeldungDurchCode;

        #endregion

        #region Navigation Properties
    
        [DataMember]
        public FaLeistung FaLeistung
        {
            get { return _faLeistung; }
            set
            {
                if (!ReferenceEquals(_faLeistung, value))
                {
                    var previousValue = _faLeistung;
                    _faLeistung = value;
                    FixupFaLeistung(previousValue);
                    OnNavigationPropertyChanged("FaLeistung");
                }
            }
        }
        private FaLeistung _faLeistung;
    
        [DataMember]
        public XUser XUser
        {
            get { return _xUser; }
            set
            {
                if (!ReferenceEquals(_xUser, value))
                {
                    var previousValue = _xUser;
                    _xUser = value;
                    FixupXUser(previousValue);
                    OnNavigationPropertyChanged("XUser");
                }
            }
        }
        private XUser _xUser;
    
        [DataMember]
        public TrackableCollection<KesAuftrag_BaPerson> KesAuftrag_BaPerson
        {
            get
            {
                if (_kesAuftrag_BaPerson == null)
                {
                    _kesAuftrag_BaPerson = new TrackableCollection<KesAuftrag_BaPerson>();
                    _kesAuftrag_BaPerson.CollectionChanged += FixupKesAuftrag_BaPerson;
                }
                return _kesAuftrag_BaPerson;
            }
            set
            {
                if (!ReferenceEquals(_kesAuftrag_BaPerson, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_kesAuftrag_BaPerson != null)
                    {
                        _kesAuftrag_BaPerson.CollectionChanged -= FixupKesAuftrag_BaPerson;
                    }
                    _kesAuftrag_BaPerson = value;
                    if (_kesAuftrag_BaPerson != null)
                    {
                        _kesAuftrag_BaPerson.CollectionChanged += FixupKesAuftrag_BaPerson;
                    }
                    OnNavigationPropertyChanged("KesAuftrag_BaPerson");
                }
            }
        }
        private TrackableCollection<KesAuftrag_BaPerson> _kesAuftrag_BaPerson;
    
        [DataMember]
        public TrackableCollection<KesDokument> KesDokument
        {
            get
            {
                if (_kesDokument == null)
                {
                    _kesDokument = new TrackableCollection<KesDokument>();
                    _kesDokument.CollectionChanged += FixupKesDokument;
                }
                return _kesDokument;
            }
            set
            {
                if (!ReferenceEquals(_kesDokument, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_kesDokument != null)
                    {
                        _kesDokument.CollectionChanged -= FixupKesDokument;
                    }
                    _kesDokument = value;
                    if (_kesDokument != null)
                    {
                        _kesDokument.CollectionChanged += FixupKesDokument;
                    }
                    OnNavigationPropertyChanged("KesDokument");
                }
            }
        }
        private TrackableCollection<KesDokument> _kesDokument;

        #endregion

        #region ChangeTracking
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected override void ClearNavigationProperties()
        {
            FaLeistung = null;
            XUser = null;
            KesAuftrag_BaPerson.Clear();
            KesDokument.Clear();
        }

        #endregion

        #region Association Fixup
    
        private void FixupFaLeistung(FaLeistung previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.KesAuftrag.Contains(this))
            {
                previousValue.KesAuftrag.Remove(this);
            }
    
            if (FaLeistung != null)
            {
                if (!FaLeistung.KesAuftrag.Contains(this))
                {
                    FaLeistung.KesAuftrag.Add(this);
                }
    
                FaLeistungID = FaLeistung.FaLeistungID;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("FaLeistung")
                    && (ChangeTracker.OriginalValues["FaLeistung"] == FaLeistung))
                {
                    ChangeTracker.OriginalValues.Remove("FaLeistung");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("FaLeistung", previousValue);
                }
                if (FaLeistung != null && !FaLeistung.ChangeTracker.ChangeTrackingEnabled)
                {
                    FaLeistung.StartTracking();
                }
            }
        }
    
        private void FixupXUser(XUser previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.KesAuftrag.Contains(this))
            {
                previousValue.KesAuftrag.Remove(this);
            }
    
            if (XUser != null)
            {
                if (!XUser.KesAuftrag.Contains(this))
                {
                    XUser.KesAuftrag.Add(this);
                }
    
                UserID = XUser.UserID;
            }
            else if (!skipKeys)
            {
                UserID = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("XUser")
                    && (ChangeTracker.OriginalValues["XUser"] == XUser))
                {
                    ChangeTracker.OriginalValues.Remove("XUser");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("XUser", previousValue);
                }
                if (XUser != null && !XUser.ChangeTracker.ChangeTrackingEnabled)
                {
                    XUser.StartTracking();
                }
            }
        }
    
        private void FixupKesAuftrag_BaPerson(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (KesAuftrag_BaPerson item in e.NewItems)
                {
                    item.KesAuftrag = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("KesAuftrag_BaPerson", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (KesAuftrag_BaPerson item in e.OldItems)
                {
                    if (ReferenceEquals(item.KesAuftrag, this))
                    {
                        item.KesAuftrag = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("KesAuftrag_BaPerson", item);
                    }
                }
            }
        }
    
        private void FixupKesDokument(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (KesDokument item in e.NewItems)
                {
                    item.KesAuftrag = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("KesDokument", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (KesDokument item in e.OldItems)
                {
                    if (ReferenceEquals(item.KesAuftrag, this))
                    {
                        item.KesAuftrag = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("KesDokument", item);
                    }
                }
            }
        }

        #endregion

        #region Methods
    
    	public override bool Equals(object obj)
    	{
    		if (obj == null)
    		{
    			return false;
    		}
    		
    		if (ReferenceEquals(this, obj))
    		{
    			return true;
    		}
    
    		if (GetType() != obj.GetType())
    		{
    			return false;
    		}
    
    		var entity = (KesAuftrag)obj;
    		if (!_kesAuftragID.Equals(entity.KesAuftragID) || _kesAuftragID == 0)
    		{
    			return false;
    		}
    		
    		return true;
    	}
    	
    	public override int GetHashCode()
        {
            return _kesAuftragID.GetHashCode();
        }

        #endregion

    }
}

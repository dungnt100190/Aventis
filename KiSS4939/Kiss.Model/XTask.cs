//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace Kiss.Model
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(BaPerson))]
    [KnownType(typeof(FaLeistung))]
    [KnownType(typeof(FaWeisung))]
    [KnownType(typeof(XUser))]
    [KnownType(typeof(FaPendenzgruppe))]
    [KnownType(typeof(XTaskAutoGenerated))]
    public partial class XTask: EntityBase<XTask>, IObjectWithChangeTracker
    {
        #region Primitive Properties
    
        [DataMember]
        public int XTaskID
        {
            get { return _xTaskID; }
            set
            {
                if (_xTaskID != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'XTaskID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _xTaskID = value;
                    OnPropertyChanged("XTaskID");
                }
            }
        }
        private int _xTaskID;
    
        [DataMember]
        public Nullable<int> BaPersonID
        {
            get { return _baPersonID; }
            set
            {
                if (_baPersonID != value)
                {
                    ChangeTracker.RecordOriginalValue("BaPersonID", _baPersonID);
                    if (!IsDeserializing)
                    {
                        if (BaPerson != null && BaPerson.BaPersonID != value)
                        {
                            BaPerson = null;
                        }
                    }
                    _baPersonID = value;
                    OnPropertyChanged("BaPersonID");
                }
            }
        }
        private Nullable<int> _baPersonID;
    
        [DataMember]
        public Nullable<int> FaFallID
        {
            get { return _faFallID; }
            set
            {
                if (_faFallID != value)
                {
                    _faFallID = value;
                    OnPropertyChanged("FaFallID");
                }
            }
        }
        private Nullable<int> _faFallID;
    
        [DataMember]
        public Nullable<int> FaLeistungID
        {
            get { return _faLeistungID; }
            set
            {
                if (_faLeistungID != value)
                {
                    ChangeTracker.RecordOriginalValue("FaLeistungID", _faLeistungID);
                    if (!IsDeserializing)
                    {
                        if (FaLeistung != null && FaLeistung.FaLeistungID != value)
                        {
                            FaLeistung = null;
                        }
                    }
                    _faLeistungID = value;
                    OnPropertyChanged("FaLeistungID");
                }
            }
        }
        private Nullable<int> _faLeistungID;
    
        [DataMember]
        public Nullable<int> UserID_Erledigt
        {
            get { return _userID_Erledigt; }
            set
            {
                if (_userID_Erledigt != value)
                {
                    ChangeTracker.RecordOriginalValue("UserID_Erledigt", _userID_Erledigt);
                    if (!IsDeserializing)
                    {
                        if (XUser_Erledigt != null && XUser_Erledigt.UserID != value)
                        {
                            XUser_Erledigt = null;
                        }
                    }
                    _userID_Erledigt = value;
                    OnPropertyChanged("UserID_Erledigt");
                }
            }
        }
        private Nullable<int> _userID_Erledigt;
    
        [DataMember]
        public Nullable<int> UserID_InBearbeitung
        {
            get { return _userID_InBearbeitung; }
            set
            {
                if (_userID_InBearbeitung != value)
                {
                    ChangeTracker.RecordOriginalValue("UserID_InBearbeitung", _userID_InBearbeitung);
                    if (!IsDeserializing)
                    {
                        if (XUser_Bearbeitung != null && XUser_Bearbeitung.UserID != value)
                        {
                            XUser_Bearbeitung = null;
                        }
                    }
                    _userID_InBearbeitung = value;
                    OnPropertyChanged("UserID_InBearbeitung");
                }
            }
        }
        private Nullable<int> _userID_InBearbeitung;
    
        [DataMember]
        public Nullable<int> FaAktennotizID
        {
            get { return _faAktennotizID; }
            set
            {
                if (_faAktennotizID != value)
                {
                    _faAktennotizID = value;
                    OnPropertyChanged("FaAktennotizID");
                }
            }
        }
        private Nullable<int> _faAktennotizID;
    
        [DataMember]
        public Nullable<int> FaDokumenteID
        {
            get { return _faDokumenteID; }
            set
            {
                if (_faDokumenteID != value)
                {
                    _faDokumenteID = value;
                    OnPropertyChanged("FaDokumenteID");
                }
            }
        }
        private Nullable<int> _faDokumenteID;
    
        [DataMember]
        public Nullable<int> TaskTypeCode
        {
            get { return _taskTypeCode; }
            set
            {
                if (_taskTypeCode != value)
                {
                    _taskTypeCode = value;
                    OnPropertyChanged("TaskTypeCode");
                }
            }
        }
        private Nullable<int> _taskTypeCode;
    
        [DataMember]
        public int TaskStatusCode
        {
            get { return _taskStatusCode; }
            set
            {
                if (_taskStatusCode != value)
                {
                    _taskStatusCode = value;
                    OnPropertyChanged("TaskStatusCode");
                }
            }
        }
        private int _taskStatusCode;
    
        [DataMember]
        public System.DateTime CreateDate
        {
            get { return _createDate; }
            set
            {
                if (_createDate != value)
                {
                    _createDate = value;
                    OnPropertyChanged("CreateDate");
                }
            }
        }
        private System.DateTime _createDate;
    
        [DataMember]
        public Nullable<System.DateTime> StartDate
        {
            get { return _startDate; }
            set
            {
                if (_startDate != value)
                {
                    _startDate = value;
                    OnPropertyChanged("StartDate");
                }
            }
        }
        private Nullable<System.DateTime> _startDate;
    
        [DataMember]
        public Nullable<System.DateTime> ExpirationDate
        {
            get { return _expirationDate; }
            set
            {
                if (_expirationDate != value)
                {
                    _expirationDate = value;
                    OnPropertyChanged("ExpirationDate");
                }
            }
        }
        private Nullable<System.DateTime> _expirationDate;
    
        [DataMember]
        public Nullable<System.DateTime> DoneDate
        {
            get { return _doneDate; }
            set
            {
                if (_doneDate != value)
                {
                    _doneDate = value;
                    OnPropertyChanged("DoneDate");
                }
            }
        }
        private Nullable<System.DateTime> _doneDate;
    
        [DataMember]
        public string Subject
        {
            get { return _subject; }
            set
            {
                if (_subject != value)
                {
                    _subject = value;
                    OnPropertyChanged("Subject");
                }
            }
        }
        private string _subject;
    
        [DataMember]
        public string TaskDescription
        {
            get { return _taskDescription; }
            set
            {
                if (_taskDescription != value)
                {
                    _taskDescription = value;
                    OnPropertyChanged("TaskDescription");
                }
            }
        }
        private string _taskDescription;
    
        [DataMember]
        public Nullable<int> SenderID
        {
            get { return _senderID; }
            set
            {
                if (_senderID != value)
                {
                    _senderID = value;
                    OnPropertyChanged("SenderID");
                }
            }
        }
        private Nullable<int> _senderID;
    
        [DataMember]
        public Nullable<int> TaskSenderCode
        {
            get { return _taskSenderCode; }
            set
            {
                if (_taskSenderCode != value)
                {
                    _taskSenderCode = value;
                    OnPropertyChanged("TaskSenderCode");
                }
            }
        }
        private Nullable<int> _taskSenderCode;
    
        [DataMember]
        public Nullable<int> ReceiverID
        {
            get { return _receiverID; }
            set
            {
                if (_receiverID != value)
                {
                    ChangeTracker.RecordOriginalValue("ReceiverID", _receiverID);
                    if (!IsDeserializing)
                    {
                        if (XUser_Receiver != null && XUser_Receiver.UserID != value)
                        {
                            XUser_Receiver = null;
                        }
                        if (FaPendenzgruppe_Receiver != null && FaPendenzgruppe_Receiver.FaPendenzgruppeID != value)
                        {
                            FaPendenzgruppe_Receiver = null;
                        }
                    }
                    _receiverID = value;
                    OnPropertyChanged("ReceiverID");
                }
            }
        }
        private Nullable<int> _receiverID;
    
        [DataMember]
        public Nullable<int> TaskReceiverCode
        {
            get { return _taskReceiverCode; }
            set
            {
                if (_taskReceiverCode != value)
                {
                    _taskReceiverCode = value;
                    OnPropertyChanged("TaskReceiverCode");
                }
            }
        }
        private Nullable<int> _taskReceiverCode;
    
        [DataMember]
        public string ResponseText
        {
            get { return _responseText; }
            set
            {
                if (_responseText != value)
                {
                    _responseText = value;
                    OnPropertyChanged("ResponseText");
                }
            }
        }
        private string _responseText;
    
        [DataMember]
        public Nullable<int> TaskResponseCode
        {
            get { return _taskResponseCode; }
            set
            {
                if (_taskResponseCode != value)
                {
                    _taskResponseCode = value;
                    OnPropertyChanged("TaskResponseCode");
                }
            }
        }
        private Nullable<int> _taskResponseCode;
    
        [DataMember]
        public string JumpToPath
        {
            get { return _jumpToPath; }
            set
            {
                if (_jumpToPath != value)
                {
                    _jumpToPath = value;
                    OnPropertyChanged("JumpToPath");
                }
            }
        }
        private string _jumpToPath;
    
        [DataMember]
        public byte[] XTaskTS
        {
            get { return _xTaskTS; }
            set
            {
                if (_xTaskTS != value)
                {
                    _xTaskTS = value;
                    OnPropertyChanged("XTaskTS");
                }
            }
        }
        private byte[] _xTaskTS;

        #endregion

        #region Navigation Properties
    
        [DataMember]
        public BaPerson BaPerson
        {
            get { return _baPerson; }
            set
            {
                if (!ReferenceEquals(_baPerson, value))
                {
                    var previousValue = _baPerson;
                    _baPerson = value;
                    FixupBaPerson(previousValue);
                    OnNavigationPropertyChanged("BaPerson");
                }
            }
        }
        private BaPerson _baPerson;
    
        [DataMember]
        public FaLeistung FaLeistung
        {
            get { return _faLeistung; }
            set
            {
                if (!ReferenceEquals(_faLeistung, value))
                {
                    var previousValue = _faLeistung;
                    _faLeistung = value;
                    FixupFaLeistung(previousValue);
                    OnNavigationPropertyChanged("FaLeistung");
                }
            }
        }
        private FaLeistung _faLeistung;
    
        [DataMember]
        public TrackableCollection<FaWeisung> FaWeisung
        {
            get
            {
                if (_faWeisung == null)
                {
                    _faWeisung = new TrackableCollection<FaWeisung>();
                    _faWeisung.CollectionChanged += FixupFaWeisung;
                }
                return _faWeisung;
            }
            set
            {
                if (!ReferenceEquals(_faWeisung, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_faWeisung != null)
                    {
                        _faWeisung.CollectionChanged -= FixupFaWeisung;
                    }
                    _faWeisung = value;
                    if (_faWeisung != null)
                    {
                        _faWeisung.CollectionChanged += FixupFaWeisung;
                    }
                    OnNavigationPropertyChanged("FaWeisung");
                }
            }
        }
        private TrackableCollection<FaWeisung> _faWeisung;
    
        [DataMember]
        public XUser XUser_Bearbeitung
        {
            get { return _xUser_Bearbeitung; }
            set
            {
                if (!ReferenceEquals(_xUser_Bearbeitung, value))
                {
                    var previousValue = _xUser_Bearbeitung;
                    _xUser_Bearbeitung = value;
                    FixupXUser_Bearbeitung(previousValue);
                    OnNavigationPropertyChanged("XUser_Bearbeitung");
                }
            }
        }
        private XUser _xUser_Bearbeitung;
    
        [DataMember]
        public XUser XUser_Erledigt
        {
            get { return _xUser_Erledigt; }
            set
            {
                if (!ReferenceEquals(_xUser_Erledigt, value))
                {
                    var previousValue = _xUser_Erledigt;
                    _xUser_Erledigt = value;
                    FixupXUser_Erledigt(previousValue);
                    OnNavigationPropertyChanged("XUser_Erledigt");
                }
            }
        }
        private XUser _xUser_Erledigt;
    
        [DataMember]
        public XUser XUser_Receiver
        {
            get { return _xUser_Receiver; }
            set
            {
                if (!ReferenceEquals(_xUser_Receiver, value))
                {
                    var previousValue = _xUser_Receiver;
                    _xUser_Receiver = value;
                    FixupXUser_Receiver(previousValue);
                    OnNavigationPropertyChanged("XUser_Receiver");
                }
            }
        }
        private XUser _xUser_Receiver;
    
        [DataMember]
        public FaPendenzgruppe FaPendenzgruppe_Receiver
        {
            get { return _faPendenzgruppe_Receiver; }
            set
            {
                if (!ReferenceEquals(_faPendenzgruppe_Receiver, value))
                {
                    var previousValue = _faPendenzgruppe_Receiver;
                    _faPendenzgruppe_Receiver = value;
                    FixupFaPendenzgruppe_Receiver(previousValue);
                    OnNavigationPropertyChanged("FaPendenzgruppe_Receiver");
                }
            }
        }
        private FaPendenzgruppe _faPendenzgruppe_Receiver;
    
        [DataMember]
        public TrackableCollection<XTaskAutoGenerated> XTaskAutoGenerated
        {
            get
            {
                if (_xTaskAutoGenerated == null)
                {
                    _xTaskAutoGenerated = new TrackableCollection<XTaskAutoGenerated>();
                    _xTaskAutoGenerated.CollectionChanged += FixupXTaskAutoGenerated;
                }
                return _xTaskAutoGenerated;
            }
            set
            {
                if (!ReferenceEquals(_xTaskAutoGenerated, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_xTaskAutoGenerated != null)
                    {
                        _xTaskAutoGenerated.CollectionChanged -= FixupXTaskAutoGenerated;
                    }
                    _xTaskAutoGenerated = value;
                    if (_xTaskAutoGenerated != null)
                    {
                        _xTaskAutoGenerated.CollectionChanged += FixupXTaskAutoGenerated;
                    }
                    OnNavigationPropertyChanged("XTaskAutoGenerated");
                }
            }
        }
        private TrackableCollection<XTaskAutoGenerated> _xTaskAutoGenerated;

        #endregion

        #region ChangeTracking
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected override void ClearNavigationProperties()
        {
            BaPerson = null;
            FaLeistung = null;
            FaWeisung.Clear();
            XUser_Bearbeitung = null;
            XUser_Erledigt = null;
            XUser_Receiver = null;
            FaPendenzgruppe_Receiver = null;
            XTaskAutoGenerated.Clear();
        }

        #endregion

        #region Association Fixup
    
        private void FixupBaPerson(BaPerson previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.XTask.Contains(this))
            {
                previousValue.XTask.Remove(this);
            }
    
            if (BaPerson != null)
            {
                if (!BaPerson.XTask.Contains(this))
                {
                    BaPerson.XTask.Add(this);
                }
    
                BaPersonID = BaPerson.BaPersonID;
            }
            else if (!skipKeys)
            {
                BaPersonID = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("BaPerson")
                    && (ChangeTracker.OriginalValues["BaPerson"] == BaPerson))
                {
                    ChangeTracker.OriginalValues.Remove("BaPerson");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("BaPerson", previousValue);
                }
                if (BaPerson != null && !BaPerson.ChangeTracker.ChangeTrackingEnabled)
                {
                    BaPerson.StartTracking();
                }
            }
        }
    
        private void FixupFaLeistung(FaLeistung previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.XTask.Contains(this))
            {
                previousValue.XTask.Remove(this);
            }
    
            if (FaLeistung != null)
            {
                if (!FaLeistung.XTask.Contains(this))
                {
                    FaLeistung.XTask.Add(this);
                }
    
                FaLeistungID = FaLeistung.FaLeistungID;
            }
            else if (!skipKeys)
            {
                FaLeistungID = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("FaLeistung")
                    && (ChangeTracker.OriginalValues["FaLeistung"] == FaLeistung))
                {
                    ChangeTracker.OriginalValues.Remove("FaLeistung");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("FaLeistung", previousValue);
                }
                if (FaLeistung != null && !FaLeistung.ChangeTracker.ChangeTrackingEnabled)
                {
                    FaLeistung.StartTracking();
                }
            }
        }
    
        private void FixupXUser_Bearbeitung(XUser previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.XTask_IsBearbeitungOf.Contains(this))
            {
                previousValue.XTask_IsBearbeitungOf.Remove(this);
            }
    
            if (XUser_Bearbeitung != null)
            {
                if (!XUser_Bearbeitung.XTask_IsBearbeitungOf.Contains(this))
                {
                    XUser_Bearbeitung.XTask_IsBearbeitungOf.Add(this);
                }
    
                UserID_InBearbeitung = XUser_Bearbeitung.UserID;
            }
            else if (!skipKeys)
            {
                UserID_InBearbeitung = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("XUser_Bearbeitung")
                    && (ChangeTracker.OriginalValues["XUser_Bearbeitung"] == XUser_Bearbeitung))
                {
                    ChangeTracker.OriginalValues.Remove("XUser_Bearbeitung");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("XUser_Bearbeitung", previousValue);
                }
                if (XUser_Bearbeitung != null && !XUser_Bearbeitung.ChangeTracker.ChangeTrackingEnabled)
                {
                    XUser_Bearbeitung.StartTracking();
                }
            }
        }
    
        private void FixupXUser_Erledigt(XUser previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.XTask_IsErledigtOf.Contains(this))
            {
                previousValue.XTask_IsErledigtOf.Remove(this);
            }
    
            if (XUser_Erledigt != null)
            {
                if (!XUser_Erledigt.XTask_IsErledigtOf.Contains(this))
                {
                    XUser_Erledigt.XTask_IsErledigtOf.Add(this);
                }
    
                UserID_Erledigt = XUser_Erledigt.UserID;
            }
            else if (!skipKeys)
            {
                UserID_Erledigt = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("XUser_Erledigt")
                    && (ChangeTracker.OriginalValues["XUser_Erledigt"] == XUser_Erledigt))
                {
                    ChangeTracker.OriginalValues.Remove("XUser_Erledigt");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("XUser_Erledigt", previousValue);
                }
                if (XUser_Erledigt != null && !XUser_Erledigt.ChangeTracker.ChangeTrackingEnabled)
                {
                    XUser_Erledigt.StartTracking();
                }
            }
        }
    
        private void FixupXUser_Receiver(XUser previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.XTask_Received.Contains(this))
            {
                previousValue.XTask_Received.Remove(this);
            }
    
            if (XUser_Receiver != null)
            {
                if (!XUser_Receiver.XTask_Received.Contains(this))
                {
                    XUser_Receiver.XTask_Received.Add(this);
                }
    
                ReceiverID = XUser_Receiver.UserID;
            }
            else if (!skipKeys)
            {
                ReceiverID = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("XUser_Receiver")
                    && (ChangeTracker.OriginalValues["XUser_Receiver"] == XUser_Receiver))
                {
                    ChangeTracker.OriginalValues.Remove("XUser_Receiver");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("XUser_Receiver", previousValue);
                }
                if (XUser_Receiver != null && !XUser_Receiver.ChangeTracker.ChangeTrackingEnabled)
                {
                    XUser_Receiver.StartTracking();
                }
            }
        }
    
        private void FixupFaPendenzgruppe_Receiver(FaPendenzgruppe previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.XTask_Received.Contains(this))
            {
                previousValue.XTask_Received.Remove(this);
            }
    
            if (FaPendenzgruppe_Receiver != null)
            {
                if (!FaPendenzgruppe_Receiver.XTask_Received.Contains(this))
                {
                    FaPendenzgruppe_Receiver.XTask_Received.Add(this);
                }
    
                ReceiverID = FaPendenzgruppe_Receiver.FaPendenzgruppeID;
            }
            else if (!skipKeys)
            {
                ReceiverID = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("FaPendenzgruppe_Receiver")
                    && (ChangeTracker.OriginalValues["FaPendenzgruppe_Receiver"] == FaPendenzgruppe_Receiver))
                {
                    ChangeTracker.OriginalValues.Remove("FaPendenzgruppe_Receiver");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("FaPendenzgruppe_Receiver", previousValue);
                }
                if (FaPendenzgruppe_Receiver != null && !FaPendenzgruppe_Receiver.ChangeTracker.ChangeTrackingEnabled)
                {
                    FaPendenzgruppe_Receiver.StartTracking();
                }
            }
        }
    
        private void FixupFaWeisung(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (FaWeisung item in e.NewItems)
                {
                    item.XTask = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("FaWeisung", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (FaWeisung item in e.OldItems)
                {
                    if (ReferenceEquals(item.XTask, this))
                    {
                        item.XTask = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("FaWeisung", item);
                    }
                }
            }
        }
    
        private void FixupXTaskAutoGenerated(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (XTaskAutoGenerated item in e.NewItems)
                {
                    item.XTask = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("XTaskAutoGenerated", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (XTaskAutoGenerated item in e.OldItems)
                {
                    if (ReferenceEquals(item.XTask, this))
                    {
                        item.XTask = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("XTaskAutoGenerated", item);
                    }
                }
            }
        }

        #endregion

        #region Methods
    
    	public override bool Equals(object obj)
    	{
    		if (obj == null)
    		{
    			return false;
    		}
    		
    		if (ReferenceEquals(this, obj))
    		{
    			return true;
    		}
    
    		if (GetType() != obj.GetType())
    		{
    			return false;
    		}
    
    		var entity = (XTask)obj;
    		if (!_xTaskID.Equals(entity.XTaskID) || _xTaskID == 0)
    		{
    			return false;
    		}
    		
    		return true;
    	}
    	
    	public override int GetHashCode()
        {
            return _xTaskID.GetHashCode();
        }

        #endregion

    }
}

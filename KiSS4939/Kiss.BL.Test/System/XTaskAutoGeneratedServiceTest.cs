using System;
using System.Collections.Generic;
using System.Linq;
using System.Transactions;

using Kiss.BL.KissSystem;
using Kiss.Infrastructure.IoC;
using Kiss.Interfaces.Database;
using Kiss.Model;

using Microsoft.VisualStudio.TestTools.UnitTesting;

namespace Kiss.BL.Test.System
{
    [TestClass]
    public class XTaskAutoGeneratedServiceTest
    {
        private IRepository<XTaskAutoGenerated> _repositoryXTaskAutoGenerated;
        private IRepository<XTask> _repositoryXTask;
        private List<XTaskAutoGenerated> _tasks;
        private List<XTask> _xtasks;
        private const int REFERENCE_ID = 111112;
        private int _taskId;
        private readonly string _referenceTable = typeof(FaKategorisierung).Name;
        private const string CREATOR = "sys_test_fakategorisierung_frist";
        private int _countGeneratedTasksBeforeAddingOne;
        private int _countTasksBeforeAddingOne;
        private readonly DateTime _expirationDate = new DateTime(2013, 1, 30);

        [ClassInitialize]
        public static void ClassInitialize(TestContext context)
        {
            TestServiceBase.ClassInitialize();
        }

        [TestInitialize]
        public void TestSetup()
        {
            using (var transaction = new TransactionScope())
            {
                // Create some temporary test objects and store the entities
                var unitOfWork = UnitOfWork.GetNew;

                // Create some FsDienstleistungspaket entities
                _repositoryXTaskAutoGenerated = UnitOfWork.GetRepository<XTaskAutoGenerated>(unitOfWork);
                _countGeneratedTasksBeforeAddingOne = _repositoryXTaskAutoGenerated.Count();
                _repositoryXTask = UnitOfWork.GetRepository<XTask>(unitOfWork);
                _countTasksBeforeAddingOne = _repositoryXTask.Count();

                _xtasks = new List<XTask>();
                var xTask = new XTask
                {
                    ExpirationDate = _expirationDate,
                    CreateDate = new DateTime(2013, 1, 1),
                    ResponseText = CREATOR
                };
                _xtasks.Add(xTask);
                _xtasks.ForEach(x => _repositoryXTask.ApplyChanges(x));
                unitOfWork.SaveChanges();

                _taskId = _repositoryXTask.Single(tsk => tsk.ExpirationDate == _expirationDate && tsk.ResponseText == CREATOR).XTaskID;

                _tasks = new List<XTaskAutoGenerated>();
                var task1 = new XTaskAutoGenerated
                            {
                                XTaskID = _taskId,
                                ReferenceID = REFERENCE_ID,
                                ReferenceTable = _referenceTable,
                                Creator = CREATOR,
                                XTask = xTask,
                                Created = DateTime.Today,
                                Modifier = CREATOR,
                                Modified = DateTime.Today
                            };
                _tasks.Add(task1);
                _tasks.ForEach(x => _repositoryXTaskAutoGenerated.ApplyChanges(x));
                unitOfWork.SaveChanges();

                transaction.Complete();
            }
        }

        [ClassCleanup]
        public static void ClassCleanup()
        {
            TestServiceBase.ClassCleanup();
        }

        [TestCleanup]
        public void TestCleanup()
        {
            using (var transaction = new TransactionScope())
            {
                var unitOfWork = UnitOfWork.GetNew;
                _repositoryXTaskAutoGenerated = UnitOfWork.GetRepository<XTaskAutoGenerated>(unitOfWork);
                _repositoryXTask = UnitOfWork.GetRepository<XTask>(unitOfWork);

                if (_repositoryXTaskAutoGenerated.Count() != _countGeneratedTasksBeforeAddingOne)
                {
                    // delete the entities that have not been deleted yet
                    var xTasksAutoGeneratedToDelete = _tasks.Where(dl => dl.ChangeTracker.State != ObjectState.Deleted).ToList();

                    // Delete the temporary test objects
                    // Delete all XTasks
                    xTasksAutoGeneratedToDelete.ForEach(x => x.MarkAsDeleted());
                    xTasksAutoGeneratedToDelete.ForEach(x => _repositoryXTaskAutoGenerated.ApplyChanges(x));
                    unitOfWork.SaveChanges();

                }

                if (_repositoryXTask.Count() != _countTasksBeforeAddingOne)
                {
                    // delete the entities that have not been deleted yet
                    var xTasksToDelete = _xtasks.Where(dl => dl.ChangeTracker.State != ObjectState.Deleted).ToList();

                    // Delete the temporary test objects
                    // Delete all XTasks
                    xTasksToDelete.ForEach(x => x.MarkAsDeleted());
                    xTasksToDelete.ForEach(x => _repositoryXTask.ApplyChanges(x));
                    unitOfWork.SaveChanges();

                }

                transaction.Complete();
            }
        }

        [TestMethod]
        public void UpdateXTasksOfFaKategorisierung_DeleteItem()
        {
            // Arrange
            var xTaskAutoGeneratedService = Container.Resolve<XTaskAutoGeneratedService>();

            // Act
            xTaskAutoGeneratedService.UpdateXTasksOfFaKategorisierung(null, REFERENCE_ID, null);

            // Assert
            var unitOfWork = UnitOfWork.GetNew;
            _repositoryXTaskAutoGenerated = UnitOfWork.GetRepository<XTaskAutoGenerated>(unitOfWork);
            Assert.AreEqual(_countGeneratedTasksBeforeAddingOne, _repositoryXTaskAutoGenerated.Count());
            Assert.IsNull(_repositoryXTaskAutoGenerated.FirstOrDefault(tag => tag.ReferenceID == REFERENCE_ID && tag.ReferenceTable == _referenceTable));
        }

        [TestMethod]
        public void UpdateXTasksOfFaKategorisierung_ChangeItem()
        {
            // Arrange
            var xTaskAutoGeneratedService = Container.Resolve<XTaskAutoGeneratedService>();

            // Act
            xTaskAutoGeneratedService.UpdateXTasksOfFaKategorisierung(null, REFERENCE_ID, _expirationDate.AddDays(1));

            // Assert
            var unitOfWork = UnitOfWork.GetNew;
            _repositoryXTask = UnitOfWork.GetRepository<XTask>(unitOfWork);
            var result = _repositoryXTask.FirstOrDefault(tsk => tsk.XTaskID == _taskId);
            Assert.AreEqual((_countGeneratedTasksBeforeAddingOne + 1), _repositoryXTaskAutoGenerated.Count());
            Assert.IsNotNull(result);
            Assert.AreEqual(_expirationDate.AddDays(1), result.ExpirationDate);
            Assert.AreEqual(_expirationDate.AddDays(-29), result.CreateDate);

        }

        [TestMethod]
        public void UpdateXTasksOfFaKategorisierung_DoNotDeleteOrChangeItem()
        {
            // Arrange
            var xTaskAutoGeneratedService = Container.Resolve<XTaskAutoGeneratedService>();

            // Act
            xTaskAutoGeneratedService.UpdateXTasksOfFaKategorisierung(null, REFERENCE_ID, _expirationDate);

            // Assert
            var unitOfWork = UnitOfWork.GetNew;
            _repositoryXTask = UnitOfWork.GetRepository<XTask>(unitOfWork);
            var result = _repositoryXTask.FirstOrDefault(tsk => tsk.XTaskID == _taskId);
            Assert.AreEqual((_countGeneratedTasksBeforeAddingOne + 1), _repositoryXTaskAutoGenerated.Count());
            Assert.IsNotNull(result);
            Assert.AreEqual(_expirationDate, result.ExpirationDate);
            Assert.AreEqual(_expirationDate.AddDays(-29), result.CreateDate);
        }

        [TestMethod]
        public void UpdateXTasksOfFaKategorisierung_DeleteExpiredItem()
        {
            // Arrange
            var xTaskAutoGeneratedService = Container.Resolve<XTaskAutoGeneratedService>();

            // Act
            xTaskAutoGeneratedService.UpdateXTasksOfFaKategorisierung(null, REFERENCE_ID, _expirationDate.AddDays(60));

            // Assert
            var unitOfWork = UnitOfWork.GetNew;
            _repositoryXTaskAutoGenerated = UnitOfWork.GetRepository<XTaskAutoGenerated>(unitOfWork);
            Assert.AreEqual(_countGeneratedTasksBeforeAddingOne, _repositoryXTaskAutoGenerated.Count());
            Assert.IsNull(_repositoryXTaskAutoGenerated.FirstOrDefault(tag => tag.ReferenceID == REFERENCE_ID && tag.ReferenceTable == _referenceTable));
        }

    }
}

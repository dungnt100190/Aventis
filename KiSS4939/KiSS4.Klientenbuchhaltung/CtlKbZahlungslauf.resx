<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <metadata name="qryBuchung.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>138, 17</value>
  </metadata>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="edtErstelltDatum.Properties.Buttons" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        iVBORw0KGgoAAAANSUhEUgAAAAwAAAAQCAYAAAAiYZ4HAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8
        YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAABMSURBVDhPYwABY2Pj/8RgsGIQgHFQBKEAqxyIQwyGKsdu
        MjrAqaGhgQErG6sGkAKYInSaOhpAYERrAAFkNk4NuACGBmIwVDkpgIEBAO2ojyYwtBe7AAAAAElFTkSu
        QmCC
</value>
  </data>
  <data name="edtFaelligkeitsdatum.Properties.Buttons" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        iVBORw0KGgoAAAANSUhEUgAAAAwAAAAQCAYAAAAiYZ4HAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8
        YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAABMSURBVDhPYwABY2Pj/8RgsGIQgHFQBKEAqxyIQwyGKsdu
        MjrAqaGhgQErG6sGkAKYInSaOhpAYERrAAFkNk4NuACGBmIwVDkpgIEBAO2ojyYwtBe7AAAAAElFTkSu
        QmCC
</value>
  </data>
  <data name="qryBuchung.SelectStatement" xml:space="preserve">
    <value>DECLARE @IsGruppeUndZahlungskontoEingeschraenkt BIT;
DECLARE @KbZahlungskontoID INT;
SET @IsGruppeUndZahlungskontoEingeschraenkt = {0};
SET @KbZahlungskontoID = {1};

SELECT KbBuchungID,
       --FlZahlungslaufID,
       BUC.BaZahlungswegID,
       --BUC.KbAuszahlungsArtCode,
       --FlTypSourceCode,
       --FlBelegStatusCode,
       --IdSource,
       BUC.BelegNr,
       BUC.BarbelegUserID,
       BUC.ErstelltDatum,
       BUC.TransferDatum,
       BUC.BelegDatum,
       BUC.ValutaDatum,
       BUC.BarbelegDatum,
       BUC.Text,
       --BUC.Extern,
       BUC.ReferenzNummer,
       --BUC.Belegnummer,
       --BUC.AggregateInfo,
       --FibuMsg,
       --Remark,
       --Old_SourceID,
       BUC.KbPeriodeID,
       BUC.KbBuchungTypCode,
       BUC.Betrag,
       BUC.SollKtoNr,
       BUC.HabenKtoNr,
       
       COALESCE(BUC.PCKontoNr, BAB.PCKontoNr) AS PCKontoNr,
       BUC.BankKontoNr,
       BUC.IBAN,
       BUC.BaBankID,
       BUC.BankBCN,
       BUC.BankName,
       BUC.BankStrasse,
       BUC.BankPLZ,
       BUC.BankOrt,
       --Zahlungsgrund
       BUC.MitteilungZeile1,
       BUC.MitteilungZeile2,
       BUC.MitteilungZeile3,
       BUC.MitteilungZeile4,
       BUC.BeguenstigtName,
       BUC.BeguenstigtName2,
       BUC.BeguenstigtStrasse,
       BUC.BeguenstigtHausNr,
       --BUC.BeguenstigtPostfach,
       BUC.BeguenstigtPLZ,
       BUC.BeguenstigtOrt,
       --BUC.BeguenstigtLandCode,
       BUC.KbZahlungseingangID,
       BUC.ErstelltUserID,
       BUC.MutiertUserID,
       BUC.MutiertDatum,
       BUC.BgBudgetID,
       BUC.KbBuchungStatusCode,
       --BUC.IkPositionID,
       BUC.StorniertKbBuchungID,
       BUC.Schuldner_BaInstitutionID,
       BUC.Schuldner_BaPersonID,
       EinzahlungsscheinCode = WEG.EinzahlungsscheinCode,
       BUC.FibuFehlermeldung,

       -- this column is used for feedback
       Uebermitteln    = convert(bit,1),
       
       --KreditorLinie   = IsNull(BeguenstigtName,'') + ' ' + IsNull(BeguenstigtName2,''),
       KreditorLinie   = CASE
                            WHEN BeguenstigtName IS NULL THEN CoalEsce(BankKontoNr, COALESCE(BUC.PCKontoNr, BAB.PCKontoNr), '')
                            ELSE IsNull(BeguenstigtName,'') + ' ' + IsNull(BeguenstigtName2,'')
                          END,

       Tage            = datediff(d,GetDate(), BUC.ValutaDatum),
       Status          = 0,  -- placeholder, set later, used for feedback
       DTAKontoNr      = ''  -- placeholder / this is the number of the account that actually pays the bills!

FROM dbo.KbBuchung  BUC WITH (READUNCOMMITTED)
   LEFT JOIN dbo.BaZahlungsweg WEG WITH (READUNCOMMITTED) ON WEG.BaZahlungswegID = BUC.BaZahlungswegID
   LEFT JOIN dbo.BgBudget      BDG WITH (READUNCOMMITTED) ON BDG.BgBudgetID = BUC.BgBudgetID
   LEFT JOIN dbo.BgFinanzplan  FP  WITH (READUNCOMMITTED) ON FP.BgFinanzplanID = BDG.BgFinanzplanID
   LEFT JOIN dbo.FaLeistung    LST WITH (READUNCOMMITTED) ON LST.FaLeistungID = FP.FaLeistungID
   LEFT JOIN dbo.vwPerson      PRS ON PRS.BaPersonID = LST.BaPersonID
   LEFT JOIN dbo.vwUser        USR ON USR.UserID = LST.UserID
   LEFT JOIN dbo.BaBank       BAB ON BAB.BaBankID = BUC.BaBankID
WHERE BUC.KbBuchungStatusCode in (5, 13) -- Zahlauftrag fehlerhaft, verbucht
  AND BUC.KbAuszahlungsArtCode in (101 /*elektronisch*/)
  AND (@IsGruppeUndZahlungskontoEingeschraenkt = 0 OR ISNULL(BUC.KbZahlungskontoID, @KbZahlungskontoID) = @KbZahlungskontoID)
--- AND BUC.ValutaDatum &lt;= {edtSucheValutaBis}
--- AND KbPeriodeID = {edtPeriodeID}
--- AND (USR.OrgUnitID = {edtGruppeX} OR @IsGruppeUndZahlungskontoEingeschraenkt = 1)
ORDER BY BUC.ValutaDatum;</value>
  </data>
  <data name="edtSucheValutaBis.Properties.Buttons" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        iVBORw0KGgoAAAANSUhEUgAAAAwAAAAQCAYAAAAiYZ4HAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8
        YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAABMSURBVDhPYwABY2Pj/8RgsGIQgHFQBKEAqxyIQwyGKsdu
        MjrAqaGhgQErG6sGkAKYInSaOhpAYERrAAFkNk4NuACGBmIwVDkpgIEBAO2ojyYwtBe7AAAAAElFTkSu
        QmCC
</value>
  </data>
  <data name="picTitel.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABGdBTUEAALGPC/xhBQAAACBjSFJNAAB6
        JgAAgIQAAPoAAACA6AAAdTAAAOpgAAA6mAAAF3CculE8AAAACXBIWXMAABJxAAAScQHz3HqOAAAAiElE
        QVQ4T61OCQ7AIAzy6f7chSqTdhprMhLSw4IURa21kWOVxxAp7yAGrs/AjhcJMjQ0gAat9flUcTs0WMwE
        HfOo41uDwTfBKVEw8AnQc2YfGQx+TrCaYw0GdwmwB8XA/4ies/ak7AwmUhMV8GfOKiTeI1TMZEYM2JGa
        sOKN3IkBdxgJ4V5cygOAacgNGAbXVQAAAABJRU5ErkJggg==
</value>
  </data>
  <metadata name="qryAktivKonto.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>17, 17</value>
  </metadata>
  <metadata name="qryGruppe.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>250, 17</value>
  </metadata>
  <data name="qryGruppe.SelectStatement" xml:space="preserve">
    <value>SELECT Text = ORG.ItemName,   
       Code = ORG.OrgUnitID
FROM dbo.XOrgUnit ORG WITH (READUNCOMMITTED)
WHERE {0} = 0 --{0}: Config-Value ZahlungskontoUndGruppeEingeschraenkt
  OR {1} = 1 --{1}: User has Spezialrecht AlleGruppen
  OR EXISTS(SELECT TOP 1 1 
            FROM XOrgUnit_User OUU
            WHERE OUU.OrgUnitID = ORG.OrgUnitID
              AND OUU.UserID = {2}
              AND OUU.OrgUnitMemberCode = 2) --2: Mitglied
UNION

SELECT Text = '',
       Code = NULL
WHERE {0} = 0 --{0}: Config-Value ZahlungskontoUndGruppeEingeschraenkt
  OR {1} = 1 --{1}: User has Spezialrecht AlleGruppen

ORDER BY Text</value>
  </data>
  <metadata name="qryZahlungskonto.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>360, 17</value>
  </metadata>
  <data name="qryZahlungskonto.SelectStatement" xml:space="preserve">
    <value>--Determine Parent_OrgUnits of the current OrgUnit
;WITH OrgUnitCTE AS
(
  SELECT
    ORG.OrgUnitID,
    ORG.ParentID
  FROM dbo.XOrgUnit ORG WITH (READUNCOMMITTED)
  WHERE OrgUnitID = {2}

  UNION ALL

  SELECT
    ORG.OrgUnitID,
    ORG.ParentID
  FROM dbo.XOrgUnit ORG WITH (READUNCOMMITTED)
    INNER JOIN OrgUnitCTE CTE ON CTE.ParentID = ORG.OrgUnitID
)

SELECT 
   KbZahlungskontoID     = KZK.KbZahlungskontoID,
   Name                  = KZK.Name,
   VertragNr             = KZK.VertragNr,
   KontoNr               = KZK.KontoNr,
   BaBankID              = KZK.BaBankID,
   KbFinanzInstitutCode  = KZK.KbFinanzInstitutCode,

   -- Bank Details (if available)
   BankName              = BAB.Name,
   Zusatz                = BAB.Zusatz,
   Strasse               = BAB.Strasse,
   PLZ                   = BAB.PLZ,
   Ort                   = BAB.Ort,
   ClearingNr            = BAB.ClearingNr,
   FilialeNr             = BAB.FilialeNr,
   HauptsitzBCL          = BAB.HauptsitzBCL,
   PCKontoNr             = BAB.PCKontoNr,
   GueltigAb             = BAB.GueltigAb,
   LandCode              = BAB.LandCode,

   KBK.KontoNr,
   KBK.KbPeriodeID,
   -- used for drop down
   Text = KZK.Name + ' - ' + KZK.KontoNr,
   Code = KZK.KbZahlungskontoID

FROM dbo.KbZahlungskonto KZK WITH (READUNCOMMITTED)
   LEFT JOIN dbo.BaBank  BAB WITH (READUNCOMMITTED) ON BAB.BaBankID = KZK.BaBankID
   LEFT JOIN dbo.KbKonto KBK WITH (READUNCOMMITTED) ON KBK.KbZahlungskontoID = KZK.KbZahlungskontoID
WHERE KBK.KbPeriodeID = {0}
  AND ({1} = 0
       OR {2} IS NULL
       OR EXISTS (SELECT TOP 1 1 
                  FROM OrgUnitCTE CTE
                    INNER JOIN dbo.KbZahlungskonto_XOrgUnit KOU WITH (READUNCOMMITTED) ON KOU.OrgUnitID = CTE.OrgUnitID
                  WHERE KOU.KbZahlungskontoID = KZK.KbZahlungskontoID))
</value>
  </data>
</root>
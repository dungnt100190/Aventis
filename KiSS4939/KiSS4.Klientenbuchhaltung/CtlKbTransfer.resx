<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <metadata name="qryZahlungslauf.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>680, 17</value>
  </metadata>
  <data name="qryZahlungslauf.SelectStatement" xml:space="preserve">
    <value>SELECT
  KbZahlungslaufID,
  FilePath,
  TotalBetrag,
  Transferdatum,
  KBZ.KbZahlungskontoID,
  KBZ.UserID,
  Transferiert,
  KBZ.FaelligkeitDatum,

  -- KbZahlungskonto
  KTO.Name,
  KTO.KontoNr,

  -- XUser
  Ersteller       = IsNull(XUS.Firstname, '') + ' ' + IsNull(XUS.Lastname, ''),

  JournalStatus   = CASE
                      WHEN EXISTS (SELECT TOP 1 1
                                   FROM KbTransfer 
                                   WHERE KbZahlungslaufID = KBZ.KbZahlungslaufID
                                     AND KbTransferStatusCode = 2)
                        THEN 'pendent' 

                      WHEN EXISTS (SELECT TOP 1 1
                                   FROM KbTransfer
                                   WHERE KbZahlungslaufID = KBZ.KbZahlungslaufID
                                     AND KbTransferStatusCode = 4)
                        THEN 'abgeschlossen mit Fehler' 

                      ELSE 'abgeschlossen ohne Fehler' 
                    END,
  TotalBezahlt    = (SELECT SUM(Betrag)
                     FROM KbTransfer        KBT
                       INNER JOIN KbBuchung KBB ON KBB.KbBuchungID = KBT.KbBuchungID
                     WHERE KbZahlungslaufID = KBZ.KbZahlungslaufID 
                       AND KbTransferStatusCode = 3),
  TotalFehlerhaft = (SELECT SUM(Betrag)
                     FROM KbTransfer		    KBT
                       INNER JOIN KbBuchung KBB ON KBB.KbBuchungID = KBT.KbBuchungID
                     WHERE KbZahlungslaufID = KBZ.KbZahlungslaufID 
                       AND KbTransferStatusCode = 4)
FROM dbo.KbZahlungslauf          KBZ
  LEFT JOIN dbo.KbZahlungskonto  KTO ON KTO.KbZahlungskontoID = KBZ.KbZahlungskontoID
  LEFT JOIN dbo.XUser            XUS ON XUS.UserID = KBZ.UserID
WHERE EXISTS (SELECT TOP 1 1
              FROM dbo.KbTransfer        TRA
                INNER JOIN dbo.KbBuchung BUC ON BUC.KbBuchungID = TRA.KbBuchungID
                INNER JOIN dbo.KbPeriode PRD ON PRD.KbPeriodeID = {0}
              WHERE TRA.KbZahlungslaufID = KBZ.KbZahlungslaufID
                AND (BUC.KbPeriodeID = {0} -- Zahlungsläuf von dieser Periode
                  OR BUC.KbPeriodeID IN (SELECT KbPeriodeID -- pendente Zahlungsläuf von vorherige Perioden
                                         FROM dbo.KbPeriode PRD1
                                         WHERE PRD1.KbMandantID = PRD.KbMandantID
                                           AND PRD1.PeriodeVon &lt; PRD.PeriodeVon
                                           AND TRA.KbTransferStatusCode = 2))
---             AND BUC.BelegNr = {editBelegNrX}
---             AND BUC.Betrag = {editBetragX}
---             AND BUC.KbBuchungStatusCode = {editStatusX}
             )
--- AND TransferDatum &gt;= {editTransferDatumVonX}
--- AND TransferDatum &lt;= {editTransferDatumBisX}
--- AND TotalBetrag &gt;= {editTotalBetragVonX}
--- AND TotalBetrag &lt;= {editTotalBetragBisX}
--- AND KBZ.UserID = {edtErfasserX.LookupID}
--- AND KTO.KbZahlungskontoID = {editEZugangX}
--- AND ({edtNurPendenteX} = 0 OR EXISTS(SELECT 1 FROM dbo.KbTransfer WHERE KbZahlungslaufID = KBZ.KbZahlungslaufID AND KbTransferStatusCode = 2))-- Ticket 2817: Default: nur pendente anzeigen!
ORDER BY Transferdatum;
</value>
  </data>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="edtBelegdatum.Properties.Buttons" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        iVBORw0KGgoAAAANSUhEUgAAAAwAAAAQCAYAAAAiYZ4HAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8
        YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAABRSURBVDhPY2AAAmNj4//EYJBaMAApRqbhErjkiDEdZiiK
        Dcgmo7NxamhoYAA7DwSQ2Vg1gBTAFKHT1NGA7AyibBhuGoiKB5Jimpj0hM9AnHIA7aiPJlUTWpwAAAAA
        SUVORK5CYII=
</value>
  </data>
  <metadata name="qryBuchung.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>274, 17</value>
  </metadata>
  <data name="qryBuchung.SelectStatement" xml:space="preserve">
    <value>SELECT
  TRA.KbZahlungslaufID,
  TRA.KbTransferStatusCode,
  -- Buchung
  BUC.KbBuchungID,
  BUC.KbBuchungTypCode,
  BUC.KbBuchungStatusCode,
  BUC.ValutaDatum,
  BUC.Betrag,
  BUC.BelegNr,
  BUC.SollKtoNr,
  BUC.HabenKtoNr,
  Beguenstigter         = ISNULL(BUC.BeguenstigtName, '') + ' ' + ISNULL(BUC.BeguenstigtName2, ''),
  Zahlungsgrund         = ISNULL(BUC.MitteilungZeile1, ''),
  KontoNr               = ISNULL(BUC.BankKontoNr, dbo.fnTnToPc(BUC.PCKontoNr)),
  AufwandPeriode        = CONVERT(VARCHAR(10), PRD.PeriodeVon, 104) + '-' + CONVERT(VARCHAR(10), PRD.PeriodeBis, 104),
  BudgetMonatJahr       = CONVERT(VARCHAR(2), RIGHT('0' + CAST(BDG.Monat AS VARCHAR), 2)) + '.' + CONVERT(VARCHAR(4),BDG.Jahr),
  BDG.BgBudgetID, 
  BDG.BgFinanzplanID,  
  -- Ausgleichsbuchung
  BezahltAm             = ABU.BelegDatum,
  AusgleichBelegNr      = ABU.BelegNr,
  AusgleichPeriode      = CONVERT(VARCHAR(10), PRD1.PeriodeVon, 104) + '-' + CONVERT(VARCHAR(10), PRD1.PeriodeBis, 104),
  -- User Selection
  Auswaehlen            = CONVERT(BIT, 0)
  
FROM dbo.KbTransfer             TRA
  INNER JOIN dbo.KbBuchung      BUC  ON BUC.KbBuchungID = TRA.KbBuchungID
  INNER JOIN dbo.KbPeriode      PRD  ON PRD.KbPeriodeID = BUC.KbPeriodeID
  LEFT  JOIN dbo.KbOpAusgleich  OPA  ON OPA.OpBuchungID = BUC.KbBuchungID
  LEFT  JOIN dbo.KbBuchung      ABU  ON ABU.KbBuchungID = OPA.AusgleichBuchungID
  LEFT  JOIN dbo.KbPeriode      PRD1 ON PRD1.KbPeriodeID = ABU.KbPeriodeID
  LEFT  JOIN dbo.BgBudget       BDG  ON BDG.BgBudgetID = BUC.BgBudgetID
WHERE TRA.KbZahlungslaufID = {0}
ORDER BY TRA.KbZahlungslaufID;</value>
  </data>
  <data name="editTransferDatumBisX.Properties.Buttons" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        iVBORw0KGgoAAAANSUhEUgAAAAwAAAAQCAYAAAAiYZ4HAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8
        YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAABRSURBVDhPY2AAAmNj4//EYJBaMAApRqbhErjkiDEdZiiK
        Dcgmo7NxamhoYAA7DwSQ2Vg1gBTAFKHT1NGA7AyibBhuGoiKB5Jimpj0hM9AnHIA7aiPJlUTWpwAAAAA
        SUVORK5CYII=
</value>
  </data>
  <data name="editTransferDatumVonX.Properties.Buttons" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        iVBORw0KGgoAAAANSUhEUgAAAAwAAAAQCAYAAAAiYZ4HAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8
        YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAABRSURBVDhPY2AAAmNj4//EYJBaMAApRqbhErjkiDEdZiiK
        Dcgmo7NxamhoYAA7DwSQ2Vg1gBTAFKHT1NGA7AyibBhuGoiKB5Jimpj0hM9AnHIA7aiPJlUTWpwAAAAA
        SUVORK5CYII=
</value>
  </data>
  <metadata name="qryAktivKonto.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>17, 17</value>
  </metadata>
  <metadata name="qryZahlungskonto.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>530, 17</value>
  </metadata>
  <data name="qryZahlungskonto.SelectStatement" xml:space="preserve">
    <value>SELECT 
   -- used for drop down
   Text = KZK.Name + ' - ' + KontoNr,
   Code = KbZahlungskontoID
FROM dbo.KbZahlungskonto   KZK
   LEFT  JOIN  dbo.BaBank  BAB ON BAB.BaBankID = KZK.BaBankID

UNION 

SELECT null, null</value>
  </data>
</root>
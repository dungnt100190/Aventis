#region Header

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3053
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#endregion

using System;
using System.Collections.Generic;
using System.Data;
using System.Windows.Forms;

using Kiss.Infrastructure;
using Kiss.Interfaces.UI;
using KiSS4.DB;
using KiSS4.Gui;
using KiSS4.Messages;

namespace KiSS4.Klientenbuchhaltung.ZH
{
    public class CtlKbBelegKorrekturAltdaten : KiSS4.Common.KissSearchUserControl
    {
        #region Fields

        #region Private Fields

        private bool _ChangingData = false;
        private int _tempKbBuchungBruttoIDCounter = -10000;
        private bool _updateWasSuccessfull = false;
        private List<int> _KbBuchungBruttoIDsWithExistingDetailPositions = new List<int>(); // Liste mit KbBuchungBruttoIDs der Belege, die beim Laden schon Detailpositionen hatten, und bei denen RecreateDetailBuchungen() nicht aufgerufen wurde, d.h. die Detailpositionen noch dem ursprünglichen Beleg entsprechen und daher nicht neu angelegt werden müssen
        private string _umbuchungsGrund = "";
        private KiSS4.Gui.KissButton btnAusführen;
        private KissButton btnHaushalt;
        private KiSS4.Gui.KissCheckEdit chkQuoting;
        private DevExpress.XtraGrid.Columns.GridColumn colAnzahl;
        private DevExpress.XtraGrid.Columns.GridColumn colBaPersonID;
        private DevExpress.XtraGrid.Columns.GridColumn colBelegNr;
        private DevExpress.XtraGrid.Columns.GridColumn colBetrag;
        private DevExpress.XtraGrid.Columns.GridColumn colBetragDetail;
        private DevExpress.XtraGrid.Columns.GridColumn colBetragKorrektur;
        private DevExpress.XtraGrid.Columns.GridColumn colBetrifftBaPersonID;
        private DevExpress.XtraGrid.Columns.GridColumn colBuchungstext;
        private DevExpress.XtraGrid.Columns.GridColumn colDetBaPersonID;
        private DevExpress.XtraGrid.Columns.GridColumn colDetBetrag;
        private DevExpress.XtraGrid.Columns.GridColumn colDetBuchungstext;
        private DevExpress.XtraGrid.Columns.GridColumn colDetPerson;
        private DevExpress.XtraGrid.Columns.GridColumn colDetVerwPeriodeBis;
        private DevExpress.XtraGrid.Columns.GridColumn colDetVerwPeriodeVon;
        private DevExpress.XtraGrid.Columns.GridColumn colDetailAbtretung;
        private DevExpress.XtraGrid.Columns.GridColumn colDetailBetrag;
        private DevExpress.XtraGrid.Columns.GridColumn colDetailPerson;
        private DevExpress.XtraGrid.Columns.GridColumn colDetailText;
        private DevExpress.XtraGrid.Columns.GridColumn colDetailVerwPeriodeBis;
        private DevExpress.XtraGrid.Columns.GridColumn colDetailVerwPeriodeVon;
        private DevExpress.XtraGrid.Columns.GridColumn colEA;
        private DevExpress.XtraGrid.Columns.GridColumn colErfassungsDatum;
        private DevExpress.XtraGrid.Columns.GridColumn colFallNr;
        private DevExpress.XtraGrid.Columns.GridColumn colKbBuchungStatusCode;
        private DevExpress.XtraGrid.Columns.GridColumn colKlient;
        private DevExpress.XtraGrid.Columns.GridColumn colKlientDetail;
        private DevExpress.XtraGrid.Columns.GridColumn colKlientNr;
        private DevExpress.XtraGrid.Columns.GridColumn colKostenart;
        private DevExpress.XtraGrid.Columns.GridColumn colLA;
        private DevExpress.XtraGrid.Columns.GridColumn colQuoting;
        private DevExpress.XtraGrid.Columns.GridColumn colStatus;
        private DevExpress.XtraGrid.Columns.GridColumn colUmbuchungBelegNr;
        private DevExpress.XtraGrid.Columns.GridColumn colValuta;
        private DevExpress.XtraGrid.Columns.GridColumn colVerwPeriodeBis;
        private DevExpress.XtraGrid.Columns.GridColumn colVerwPeriodeBisDetail;
        private DevExpress.XtraGrid.Columns.GridColumn colVerwPeriodeVon;
        private DevExpress.XtraGrid.Columns.GridColumn colVerwPeriodeVonDetail;
        private DevExpress.XtraGrid.Columns.GridColumn colVerwPerioedBis;
        private System.ComponentModel.IContainer components;
        private KiSS4.Common.CtlGotoFall ctlGotoFall1;
        private KiSS4.Gui.KissCheckEdit edtAbtretung;
        private KiSS4.Gui.KissCalcEdit edtBetrag;
        private KiSS4.Gui.KissButtonEdit edtBetrifftPerson;
        private KiSS4.Gui.KissButtonEdit edtBgKostenartID;
        private KiSS4.Gui.KissCalcEdit edtFaFallID;
        private KiSS4.Gui.KissCalcEdit edtHauptvorgang;
        private KiSS4.Gui.KissButtonEdit edtLT;
        private KiSS4.Gui.KissTextEdit edtSplittingart;
        private KiSS4.Gui.KissTextEdit edtSucheBelegNr;
        private KiSS4.Gui.KissButtonEdit edtSucheBetrifftPerson;
        private KiSS4.Gui.KissDateEdit edtSucheBuchungsDatumBis;
        private KiSS4.Gui.KissDateEdit edtSucheBuchungsDatumVon;
        private KiSS4.Gui.KissTextEdit edtSucheBuchungstext;
        private KiSS4.Gui.KissCalcEdit edtSucheFaFallID;
        private KiSS4.Gui.KissButtonEdit edtSucheLA;
        private KiSS4.Gui.KissTextEdit edtSucheNummernkreis;
        private KiSS4.Gui.KissCheckEdit edtSucheNurKorrigierte;
        private KiSS4.Gui.KissCalcEdit edtTeilvorgang;
        private KiSS4.Gui.KissTextEdit edtTextFix;
        private KiSS4.Gui.KissTextEdit edtTextVariabel;
        private KiSS4.Gui.KissDateEdit edtValutaDatum;
        private KiSS4.Gui.KissGrid grdKbBuchungBrutto;
        private KissGrid grdKbBuchungBruttoPerson;
        private KiSS4.Gui.KissGrid grdKontoauszug;
        private DevExpress.XtraGrid.Columns.GridColumn gridColumn1;
        private DevExpress.XtraGrid.Columns.GridColumn gridColumn2;
        private DevExpress.XtraGrid.Columns.GridColumn gridColumn3;
        private DevExpress.XtraGrid.Views.Grid.GridView gridView1;
        private DevExpress.XtraGrid.Views.Grid.GridView gridView2;
        private DevExpress.XtraGrid.Views.Grid.GridView grvDetail;
        private DevExpress.XtraGrid.Views.Grid.GridView grvKbBuchungBruttoSuche;
        private DevExpress.XtraGrid.Views.Grid.GridView grvKbBuchungKostenartBrutto;
        private bool inserting = false;
        private KiSS4.Gui.KissLabel kissLabel1;
        private KiSS4.Gui.KissLabel kissLabel11;
        private KiSS4.Gui.KissLabel kissLabel13;
        private KiSS4.Gui.KissLabel kissLabel14;
        private KiSS4.Gui.KissLabel kissLabel2;
        private KiSS4.Gui.KissLabel kissLabel4;
        private KiSS4.Gui.KissLabel kissLabel5;
        private KiSS4.Gui.KissLabel kissLabel6;
        private KissLabel kissLabel7;
        private KissLabel kissLabel8;
        private System.Windows.Forms.Label label2;
        private System.Windows.Forms.Label label3;
        private KiSS4.Gui.KissLabel lblBetragKorr;
        private System.Windows.Forms.Label lblBetragstotal;
        private KiSS4.Gui.KissLabel lblBetrifftPerson;
        private KiSS4.Gui.KissLabel lblBuchungstextKorr;
        private KiSS4.Gui.KissLabel lblFallNr;
        private KiSS4.Gui.KissLabel lblHauptvorgang;
        private KiSS4.Gui.KissLabel lblKlient;
        private KiSS4.Gui.KissLabel lblKonto;
        private KiSS4.Gui.KissLabel lblKorrektur;
        private KiSS4.Gui.KissLabel lblLeistungsart;
        private System.Windows.Forms.Label lblRowCount;
        private KiSS4.Gui.KissLabel lblTitel;
        private KiSS4.Gui.KissLabel lblValutaDatum;
        private KiSS4.Gui.KissLabel lblVerwPerBisKorr;
        private KiSS4.Gui.KissLabel lblVerwPerVonKorr;
        private System.Windows.Forms.Panel panTitel;
        private System.Windows.Forms.PictureBox picTitel;
        private System.Windows.Forms.Panel pnlBuchungstext;
        private KiSS4.DB.SqlQuery qryKbBuchungBrutto;
        private SqlQuery qryKbBuchungBruttoPerson;
        private KiSS4.DB.SqlQuery qryMigDetailBuchung;
        private DevExpress.XtraEditors.Repository.RepositoryItemImageComboBox repositoryItemImageComboBox1;
        private DevExpress.XtraEditors.Repository.RepositoryItemImageComboBox repositoryItemImageComboBox2;
        private KiSS4.Gui.KissTabControlEx tabKorrektur;
        private SharpLibrary.WinControls.TabPageEx tabKorrekturDetailBuchungen;
        private KissDateEdit edtVerwPeriodeVon;
        private KissDateEdit edtVerwPeriodeBis;
        private KissCalcEdit edtFaLeistungID;
        private SharpLibrary.WinControls.TabPageEx tabKorrekturKopf;

        #endregion

        #endregion

        #region Constructors

        public CtlKbBelegKorrekturAltdaten()
        {
            this.InitializeComponent();
        }

        #endregion

        #region Windows Form Designer generated code

        /// <summary>
        /// Required method for Designer support - do not modify
        /// the contents of this method with the code editor.
        /// </summary>
        private void InitializeComponent()
        {
            this.components = new System.ComponentModel.Container();
            DevExpress.XtraGrid.GridLevelNode gridLevelNode1 = new DevExpress.XtraGrid.GridLevelNode();
            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(CtlKbBelegKorrekturAltdaten));
            DevExpress.Utils.SerializableAppearanceObject serializableAppearanceObject10 = new DevExpress.Utils.SerializableAppearanceObject();
            DevExpress.Utils.SerializableAppearanceObject serializableAppearanceObject9 = new DevExpress.Utils.SerializableAppearanceObject();
            DevExpress.Utils.SerializableAppearanceObject serializableAppearanceObject8 = new DevExpress.Utils.SerializableAppearanceObject();
            DevExpress.Utils.SerializableAppearanceObject serializableAppearanceObject7 = new DevExpress.Utils.SerializableAppearanceObject();
            DevExpress.Utils.SerializableAppearanceObject serializableAppearanceObject3 = new DevExpress.Utils.SerializableAppearanceObject();
            DevExpress.Utils.SerializableAppearanceObject serializableAppearanceObject4 = new DevExpress.Utils.SerializableAppearanceObject();
            DevExpress.Utils.SerializableAppearanceObject serializableAppearanceObject5 = new DevExpress.Utils.SerializableAppearanceObject();
            DevExpress.Utils.SerializableAppearanceObject serializableAppearanceObject6 = new DevExpress.Utils.SerializableAppearanceObject();
            DevExpress.Utils.SerializableAppearanceObject serializableAppearanceObject1 = new DevExpress.Utils.SerializableAppearanceObject();
            DevExpress.Utils.SerializableAppearanceObject serializableAppearanceObject2 = new DevExpress.Utils.SerializableAppearanceObject();
            this.grvKbBuchungBruttoSuche = new DevExpress.XtraGrid.Views.Grid.GridView();
            this.colDetailPerson = new DevExpress.XtraGrid.Columns.GridColumn();
            this.colDetailText = new DevExpress.XtraGrid.Columns.GridColumn();
            this.colDetailBetrag = new DevExpress.XtraGrid.Columns.GridColumn();
            this.colDetailVerwPeriodeVon = new DevExpress.XtraGrid.Columns.GridColumn();
            this.colDetailVerwPeriodeBis = new DevExpress.XtraGrid.Columns.GridColumn();
            this.grdKontoauszug = new KiSS4.Gui.KissGrid();
            this.qryMigDetailBuchung = new KiSS4.DB.SqlQuery(this.components);
            this.grvKbBuchungKostenartBrutto = new DevExpress.XtraGrid.Views.Grid.GridView();
            this.colValuta = new DevExpress.XtraGrid.Columns.GridColumn();
            this.colBelegNr = new DevExpress.XtraGrid.Columns.GridColumn();
            this.colKlient = new DevExpress.XtraGrid.Columns.GridColumn();
            this.colKlientNr = new DevExpress.XtraGrid.Columns.GridColumn();
            this.colLA = new DevExpress.XtraGrid.Columns.GridColumn();
            this.colBuchungstext = new DevExpress.XtraGrid.Columns.GridColumn();
            this.colBetrag = new DevExpress.XtraGrid.Columns.GridColumn();
            this.colKbBuchungStatusCode = new DevExpress.XtraGrid.Columns.GridColumn();
            this.colAnzahl = new DevExpress.XtraGrid.Columns.GridColumn();
            this.colFallNr = new DevExpress.XtraGrid.Columns.GridColumn();
            this.colEA = new DevExpress.XtraGrid.Columns.GridColumn();
            this.colVerwPeriodeVon = new DevExpress.XtraGrid.Columns.GridColumn();
            this.colVerwPerioedBis = new DevExpress.XtraGrid.Columns.GridColumn();
            this.grvDetail = new DevExpress.XtraGrid.Views.Grid.GridView();
            this.colVerwPeriodeVonDetail = new DevExpress.XtraGrid.Columns.GridColumn();
            this.colVerwPeriodeBisDetail = new DevExpress.XtraGrid.Columns.GridColumn();
            this.colBetragDetail = new DevExpress.XtraGrid.Columns.GridColumn();
            this.colKlientDetail = new DevExpress.XtraGrid.Columns.GridColumn();
            this.colErfassungsDatum = new DevExpress.XtraGrid.Columns.GridColumn();
            this.grdKbBuchungBrutto = new KiSS4.Gui.KissGrid();
            this.qryKbBuchungBrutto = new KiSS4.DB.SqlQuery(this.components);
            this.gridView1 = new DevExpress.XtraGrid.Views.Grid.GridView();
            this.gridColumn1 = new DevExpress.XtraGrid.Columns.GridColumn();
            this.colBaPersonID = new DevExpress.XtraGrid.Columns.GridColumn();
            this.colBetrifftBaPersonID = new DevExpress.XtraGrid.Columns.GridColumn();
            this.colKostenart = new DevExpress.XtraGrid.Columns.GridColumn();
            this.gridColumn2 = new DevExpress.XtraGrid.Columns.GridColumn();
            this.colBetragKorrektur = new DevExpress.XtraGrid.Columns.GridColumn();
            this.colStatus = new DevExpress.XtraGrid.Columns.GridColumn();
            this.repositoryItemImageComboBox1 = new DevExpress.XtraEditors.Repository.RepositoryItemImageComboBox();
            this.colUmbuchungBelegNr = new DevExpress.XtraGrid.Columns.GridColumn();
            this.gridColumn3 = new DevExpress.XtraGrid.Columns.GridColumn();
            this.colVerwPeriodeBis = new DevExpress.XtraGrid.Columns.GridColumn();
            this.colQuoting = new DevExpress.XtraGrid.Columns.GridColumn();
            this.colDetailAbtretung = new DevExpress.XtraGrid.Columns.GridColumn();
            this.panTitel = new System.Windows.Forms.Panel();
            this.lblBetragstotal = new System.Windows.Forms.Label();
            this.label3 = new System.Windows.Forms.Label();
            this.picTitel = new System.Windows.Forms.PictureBox();
            this.lblTitel = new KiSS4.Gui.KissLabel();
            this.edtSucheFaFallID = new KiSS4.Gui.KissCalcEdit();
            this.edtSucheNummernkreis = new KiSS4.Gui.KissTextEdit();
            this.lblKonto = new KiSS4.Gui.KissLabel();
            this.edtSucheBelegNr = new KiSS4.Gui.KissTextEdit();
            this.edtSucheBuchungsDatumVon = new KiSS4.Gui.KissDateEdit();
            this.edtSucheBuchungsDatumBis = new KiSS4.Gui.KissDateEdit();
            this.edtSucheBetrifftPerson = new KiSS4.Gui.KissButtonEdit();
            this.edtSucheLA = new KiSS4.Gui.KissButtonEdit();
            this.edtSucheBuchungstext = new KiSS4.Gui.KissTextEdit();
            this.edtSucheNurKorrigierte = new KiSS4.Gui.KissCheckEdit();
            this.lblLeistungsart = new KiSS4.Gui.KissLabel();
            this.kissLabel11 = new KiSS4.Gui.KissLabel();
            this.kissLabel2 = new KiSS4.Gui.KissLabel();
            this.kissLabel4 = new KiSS4.Gui.KissLabel();
            this.kissLabel1 = new KiSS4.Gui.KissLabel();
            this.kissLabel13 = new KiSS4.Gui.KissLabel();
            this.kissLabel14 = new KiSS4.Gui.KissLabel();
            this.edtValutaDatum = new KiSS4.Gui.KissDateEdit();
            this.chkQuoting = new KiSS4.Gui.KissCheckEdit();
            this.edtLT = new KiSS4.Gui.KissButtonEdit();
            this.edtBgKostenartID = new KiSS4.Gui.KissButtonEdit();
            this.edtBetrifftPerson = new KiSS4.Gui.KissButtonEdit();
            this.pnlBuchungstext = new System.Windows.Forms.Panel();
            this.edtTextVariabel = new KiSS4.Gui.KissTextEdit();
            this.edtTextFix = new KiSS4.Gui.KissTextEdit();
            this.qryKbBuchungBruttoPerson = new KiSS4.DB.SqlQuery(this.components);
            this.kissLabel6 = new KiSS4.Gui.KissLabel();
            this.edtBetrag = new KiSS4.Gui.KissCalcEdit();
            this.btnAusführen = new KiSS4.Gui.KissButton();
            this.ctlGotoFall1 = new KiSS4.Common.CtlGotoFall();
            this.lblKorrektur = new KiSS4.Gui.KissLabel();
            this.lblValutaDatum = new KiSS4.Gui.KissLabel();
            this.lblKlient = new KiSS4.Gui.KissLabel();
            this.lblBetrifftPerson = new KiSS4.Gui.KissLabel();
            this.kissLabel5 = new KiSS4.Gui.KissLabel();
            this.edtHauptvorgang = new KiSS4.Gui.KissCalcEdit();
            this.edtTeilvorgang = new KiSS4.Gui.KissCalcEdit();
            this.edtAbtretung = new KiSS4.Gui.KissCheckEdit();
            this.lblHauptvorgang = new KiSS4.Gui.KissLabel();
            this.lblBuchungstextKorr = new KiSS4.Gui.KissLabel();
            this.lblFallNr = new KiSS4.Gui.KissLabel();
            this.edtFaFallID = new KiSS4.Gui.KissCalcEdit();
            this.lblBetragKorr = new KiSS4.Gui.KissLabel();
            this.lblVerwPerVonKorr = new KiSS4.Gui.KissLabel();
            this.lblVerwPerBisKorr = new KiSS4.Gui.KissLabel();
            this.edtSplittingart = new KiSS4.Gui.KissTextEdit();
            this.label2 = new System.Windows.Forms.Label();
            this.lblRowCount = new System.Windows.Forms.Label();
            this.tabKorrektur = new KiSS4.Gui.KissTabControlEx();
            this.tabKorrekturKopf = new SharpLibrary.WinControls.TabPageEx();
            this.edtFaLeistungID = new KiSS4.Gui.KissCalcEdit();
            this.edtVerwPeriodeVon = new KiSS4.Gui.KissDateEdit();
            this.edtVerwPeriodeBis = new KiSS4.Gui.KissDateEdit();
            this.kissLabel8 = new KiSS4.Gui.KissLabel();
            this.kissLabel7 = new KiSS4.Gui.KissLabel();
            this.btnHaushalt = new KiSS4.Gui.KissButton();
            this.tabKorrekturDetailBuchungen = new SharpLibrary.WinControls.TabPageEx();
            this.grdKbBuchungBruttoPerson = new KiSS4.Gui.KissGrid();
            this.gridView2 = new DevExpress.XtraGrid.Views.Grid.GridView();
            this.colDetPerson = new DevExpress.XtraGrid.Columns.GridColumn();
            this.colDetBaPersonID = new DevExpress.XtraGrid.Columns.GridColumn();
            this.colDetBuchungstext = new DevExpress.XtraGrid.Columns.GridColumn();
            this.colDetBetrag = new DevExpress.XtraGrid.Columns.GridColumn();
            this.colDetVerwPeriodeVon = new DevExpress.XtraGrid.Columns.GridColumn();
            this.colDetVerwPeriodeBis = new DevExpress.XtraGrid.Columns.GridColumn();
            this.repositoryItemImageComboBox2 = new DevExpress.XtraEditors.Repository.RepositoryItemImageComboBox();
            this.tabControlSearch.SuspendLayout();
            this.tpgListe.SuspendLayout();
            this.tpgSuchen.SuspendLayout();
            ((System.ComponentModel.ISupportInitialize)(this.grvKbBuchungBruttoSuche)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(this.grdKontoauszug)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(this.qryMigDetailBuchung)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(this.grvKbBuchungKostenartBrutto)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(this.grvDetail)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(this.grdKbBuchungBrutto)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(this.qryKbBuchungBrutto)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(this.gridView1)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(this.repositoryItemImageComboBox1)).BeginInit();
            this.panTitel.SuspendLayout();
            ((System.ComponentModel.ISupportInitialize)(this.picTitel)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(this.lblTitel)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(this.edtSucheFaFallID.Properties)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(this.edtSucheNummernkreis.Properties)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(this.lblKonto)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(this.edtSucheBelegNr.Properties)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(this.edtSucheBuchungsDatumVon.Properties)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(this.edtSucheBuchungsDatumBis.Properties)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(this.edtSucheBetrifftPerson.Properties)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(this.edtSucheLA.Properties)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(this.edtSucheBuchungstext.Properties)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(this.edtSucheNurKorrigierte.Properties)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(this.lblLeistungsart)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(this.kissLabel11)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(this.kissLabel2)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(this.kissLabel4)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(this.kissLabel1)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(this.kissLabel13)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(this.kissLabel14)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(this.edtValutaDatum.Properties)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(this.chkQuoting.Properties)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(this.edtLT.Properties)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(this.edtBgKostenartID.Properties)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(this.edtBetrifftPerson.Properties)).BeginInit();
            this.pnlBuchungstext.SuspendLayout();
            ((System.ComponentModel.ISupportInitialize)(this.edtTextVariabel.Properties)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(this.edtTextFix.Properties)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(this.qryKbBuchungBruttoPerson)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(this.kissLabel6)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(this.edtBetrag.Properties)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(this.lblKorrektur)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(this.lblValutaDatum)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(this.lblKlient)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(this.lblBetrifftPerson)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(this.kissLabel5)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(this.edtHauptvorgang.Properties)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(this.edtTeilvorgang.Properties)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(this.edtAbtretung.Properties)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(this.lblHauptvorgang)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(this.lblBuchungstextKorr)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(this.lblFallNr)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(this.edtFaFallID.Properties)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(this.lblBetragKorr)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(this.lblVerwPerVonKorr)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(this.lblVerwPerBisKorr)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(this.edtSplittingart.Properties)).BeginInit();
            this.tabKorrektur.SuspendLayout();
            this.tabKorrekturKopf.SuspendLayout();
            ((System.ComponentModel.ISupportInitialize)(this.edtFaLeistungID.Properties)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(this.edtVerwPeriodeVon.Properties)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(this.edtVerwPeriodeBis.Properties)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(this.kissLabel8)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(this.kissLabel7)).BeginInit();
            this.tabKorrekturDetailBuchungen.SuspendLayout();
            ((System.ComponentModel.ISupportInitialize)(this.grdKbBuchungBruttoPerson)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(this.gridView2)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(this.repositoryItemImageComboBox2)).BeginInit();
            this.SuspendLayout();
            //
            // searchTitle
            //
            this.searchTitle.Location = new System.Drawing.Point(5, -1);
            this.searchTitle.Size = new System.Drawing.Size(887, 24);
            //
            // tabControlSearch
            //
            this.tabControlSearch.Location = new System.Drawing.Point(5, 31);
            this.tabControlSearch.SelectedTabIndex = 1;
            this.tabControlSearch.Size = new System.Drawing.Size(911, 210);
            this.tabControlSearch.SelectedTabChanging += new System.ComponentModel.CancelEventHandler(this.tabControlSearch_SelectedTabChanging);
            //
            // tpgListe
            //
            this.tpgListe.Controls.Add(this.grdKontoauszug);
            this.tpgListe.Size = new System.Drawing.Size(899, 172);
            this.tpgListe.Title = "Liste";
            //
            // tpgSuchen
            //
            this.tpgSuchen.Controls.Add(this.kissLabel14);
            this.tpgSuchen.Controls.Add(this.kissLabel13);
            this.tpgSuchen.Controls.Add(this.kissLabel1);
            this.tpgSuchen.Controls.Add(this.kissLabel4);
            this.tpgSuchen.Controls.Add(this.kissLabel2);
            this.tpgSuchen.Controls.Add(this.kissLabel11);
            this.tpgSuchen.Controls.Add(this.lblLeistungsart);
            this.tpgSuchen.Controls.Add(this.edtSucheNurKorrigierte);
            this.tpgSuchen.Controls.Add(this.edtSucheBuchungstext);
            this.tpgSuchen.Controls.Add(this.edtSucheLA);
            this.tpgSuchen.Controls.Add(this.edtSucheBetrifftPerson);
            this.tpgSuchen.Controls.Add(this.edtSucheBuchungsDatumBis);
            this.tpgSuchen.Controls.Add(this.edtSucheBuchungsDatumVon);
            this.tpgSuchen.Controls.Add(this.edtSucheBelegNr);
            this.tpgSuchen.Controls.Add(this.lblKonto);
            this.tpgSuchen.Controls.Add(this.edtSucheNummernkreis);
            this.tpgSuchen.Controls.Add(this.edtSucheFaFallID);
            this.tpgSuchen.Size = new System.Drawing.Size(899, 172);
            this.tpgSuchen.Title = "Suche";
            this.tpgSuchen.Controls.SetChildIndex(this.edtSucheFaFallID, 0);
            this.tpgSuchen.Controls.SetChildIndex(this.searchTitle, 0);
            this.tpgSuchen.Controls.SetChildIndex(this.edtSucheNummernkreis, 0);
            this.tpgSuchen.Controls.SetChildIndex(this.lblKonto, 0);
            this.tpgSuchen.Controls.SetChildIndex(this.edtSucheBelegNr, 0);
            this.tpgSuchen.Controls.SetChildIndex(this.edtSucheBuchungsDatumVon, 0);
            this.tpgSuchen.Controls.SetChildIndex(this.edtSucheBuchungsDatumBis, 0);
            this.tpgSuchen.Controls.SetChildIndex(this.edtSucheBetrifftPerson, 0);
            this.tpgSuchen.Controls.SetChildIndex(this.edtSucheLA, 0);
            this.tpgSuchen.Controls.SetChildIndex(this.edtSucheBuchungstext, 0);
            this.tpgSuchen.Controls.SetChildIndex(this.edtSucheNurKorrigierte, 0);
            this.tpgSuchen.Controls.SetChildIndex(this.lblLeistungsart, 0);
            this.tpgSuchen.Controls.SetChildIndex(this.kissLabel11, 0);
            this.tpgSuchen.Controls.SetChildIndex(this.kissLabel2, 0);
            this.tpgSuchen.Controls.SetChildIndex(this.kissLabel4, 0);
            this.tpgSuchen.Controls.SetChildIndex(this.kissLabel1, 0);
            this.tpgSuchen.Controls.SetChildIndex(this.kissLabel13, 0);
            this.tpgSuchen.Controls.SetChildIndex(this.kissLabel14, 0);
            //
            // grvKbBuchungBruttoSuche
            //
            this.grvKbBuchungBruttoSuche.Appearance.Empty.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(247)))), ((int)(((byte)(239)))), ((int)(((byte)(231)))));
            this.grvKbBuchungBruttoSuche.Appearance.Empty.Font = new System.Drawing.Font("Arial", 12F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Pixel);
            this.grvKbBuchungBruttoSuche.Appearance.Empty.Options.UseBackColor = true;
            this.grvKbBuchungBruttoSuche.Appearance.Empty.Options.UseFont = true;
            this.grvKbBuchungBruttoSuche.Appearance.EvenRow.Font = new System.Drawing.Font("Arial", 12F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Pixel);
            this.grvKbBuchungBruttoSuche.Appearance.EvenRow.Options.UseFont = true;
            this.grvKbBuchungBruttoSuche.Appearance.FocusedCell.BackColor = System.Drawing.SystemColors.Highlight;
            this.grvKbBuchungBruttoSuche.Appearance.FocusedCell.Font = new System.Drawing.Font("Arial", 12F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Pixel);
            this.grvKbBuchungBruttoSuche.Appearance.FocusedCell.ForeColor = System.Drawing.Color.White;
            this.grvKbBuchungBruttoSuche.Appearance.FocusedCell.Options.UseBackColor = true;
            this.grvKbBuchungBruttoSuche.Appearance.FocusedCell.Options.UseFont = true;
            this.grvKbBuchungBruttoSuche.Appearance.FocusedCell.Options.UseForeColor = true;
            this.grvKbBuchungBruttoSuche.Appearance.FocusedRow.BackColor = System.Drawing.SystemColors.Highlight;
            this.grvKbBuchungBruttoSuche.Appearance.FocusedRow.Font = new System.Drawing.Font("Arial", 12F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Pixel);
            this.grvKbBuchungBruttoSuche.Appearance.FocusedRow.ForeColor = System.Drawing.Color.White;
            this.grvKbBuchungBruttoSuche.Appearance.FocusedRow.Options.UseBackColor = true;
            this.grvKbBuchungBruttoSuche.Appearance.FocusedRow.Options.UseFont = true;
            this.grvKbBuchungBruttoSuche.Appearance.FocusedRow.Options.UseForeColor = true;
            this.grvKbBuchungBruttoSuche.Appearance.GroupPanel.BackColor = System.Drawing.Color.PeachPuff;
            this.grvKbBuchungBruttoSuche.Appearance.GroupPanel.Options.UseBackColor = true;
            this.grvKbBuchungBruttoSuche.Appearance.GroupRow.BackColor = System.Drawing.Color.PeachPuff;
            this.grvKbBuchungBruttoSuche.Appearance.GroupRow.Font = new System.Drawing.Font("Arial", 12F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Pixel);
            this.grvKbBuchungBruttoSuche.Appearance.GroupRow.ForeColor = System.Drawing.SystemColors.WindowText;
            this.grvKbBuchungBruttoSuche.Appearance.GroupRow.Options.UseBackColor = true;
            this.grvKbBuchungBruttoSuche.Appearance.GroupRow.Options.UseFont = true;
            this.grvKbBuchungBruttoSuche.Appearance.GroupRow.Options.UseForeColor = true;
            this.grvKbBuchungBruttoSuche.Appearance.HeaderPanel.BackColor = System.Drawing.Color.Tan;
            this.grvKbBuchungBruttoSuche.Appearance.HeaderPanel.BorderColor = System.Drawing.Color.Tan;
            this.grvKbBuchungBruttoSuche.Appearance.HeaderPanel.Font = new System.Drawing.Font("Arial", 11F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Pixel);
            this.grvKbBuchungBruttoSuche.Appearance.HeaderPanel.Options.UseBackColor = true;
            this.grvKbBuchungBruttoSuche.Appearance.HeaderPanel.Options.UseBorderColor = true;
            this.grvKbBuchungBruttoSuche.Appearance.HeaderPanel.Options.UseFont = true;
            this.grvKbBuchungBruttoSuche.Appearance.HideSelectionRow.BackColor = System.Drawing.Color.PowderBlue;
            this.grvKbBuchungBruttoSuche.Appearance.HideSelectionRow.Font = new System.Drawing.Font("Arial", 12F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Pixel);
            this.grvKbBuchungBruttoSuche.Appearance.HideSelectionRow.ForeColor = System.Drawing.SystemColors.WindowText;
            this.grvKbBuchungBruttoSuche.Appearance.HideSelectionRow.Options.UseBackColor = true;
            this.grvKbBuchungBruttoSuche.Appearance.HideSelectionRow.Options.UseFont = true;
            this.grvKbBuchungBruttoSuche.Appearance.HideSelectionRow.Options.UseForeColor = true;
            this.grvKbBuchungBruttoSuche.Appearance.HorzLine.BackColor = System.Drawing.Color.Silver;
            this.grvKbBuchungBruttoSuche.Appearance.HorzLine.Options.UseBackColor = true;
            this.grvKbBuchungBruttoSuche.Appearance.OddRow.Font = new System.Drawing.Font("Arial", 12F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Pixel);
            this.grvKbBuchungBruttoSuche.Appearance.OddRow.Options.UseFont = true;
            this.grvKbBuchungBruttoSuche.Appearance.Row.BackColor = System.Drawing.Color.BlanchedAlmond;
            this.grvKbBuchungBruttoSuche.Appearance.Row.Font = new System.Drawing.Font("Arial", 12F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Pixel);
            this.grvKbBuchungBruttoSuche.Appearance.Row.Options.UseBackColor = true;
            this.grvKbBuchungBruttoSuche.Appearance.Row.Options.UseFont = true;
            this.grvKbBuchungBruttoSuche.Appearance.SelectedRow.Font = new System.Drawing.Font("Arial", 12F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Pixel);
            this.grvKbBuchungBruttoSuche.Appearance.SelectedRow.Options.UseFont = true;
            this.grvKbBuchungBruttoSuche.Appearance.VertLine.BackColor = System.Drawing.Color.Silver;
            this.grvKbBuchungBruttoSuche.Appearance.VertLine.Options.UseBackColor = true;
            this.grvKbBuchungBruttoSuche.BorderStyle = DevExpress.XtraEditors.Controls.BorderStyles.UltraFlat;
            this.grvKbBuchungBruttoSuche.Columns.AddRange(new DevExpress.XtraGrid.Columns.GridColumn[] {
            this.colDetailPerson,
            this.colDetailText,
            this.colDetailBetrag,
            this.colDetailVerwPeriodeVon,
            this.colDetailVerwPeriodeBis});
            this.grvKbBuchungBruttoSuche.FocusRectStyle = DevExpress.XtraGrid.Views.Grid.DrawFocusRectStyle.None;
            this.grvKbBuchungBruttoSuche.GridControl = this.grdKontoauszug;
            this.grvKbBuchungBruttoSuche.Name = "grvKbBuchungBruttoSuche";
            this.grvKbBuchungBruttoSuche.OptionsBehavior.Editable = false;
            this.grvKbBuchungBruttoSuche.OptionsCustomization.AllowFilter = false;
            this.grvKbBuchungBruttoSuche.OptionsDetail.ShowDetailTabs = false;
            this.grvKbBuchungBruttoSuche.OptionsFilter.UseNewCustomFilterDialog = true;
            this.grvKbBuchungBruttoSuche.OptionsNavigation.AutoFocusNewRow = true;
            this.grvKbBuchungBruttoSuche.OptionsNavigation.UseTabKey = false;
            this.grvKbBuchungBruttoSuche.OptionsView.ColumnAutoWidth = false;
            this.grvKbBuchungBruttoSuche.OptionsView.ShowChildrenInGroupPanel = true;
            this.grvKbBuchungBruttoSuche.OptionsView.ShowFilterPanelMode = DevExpress.XtraGrid.Views.Base.ShowFilterPanelMode.Never;
            this.grvKbBuchungBruttoSuche.OptionsView.ShowGroupPanel = false;
            this.grvKbBuchungBruttoSuche.OptionsView.ShowIndicator = false;
            //
            // colDetailPerson
            //
            this.colDetailPerson.Caption = "Person";
            this.colDetailPerson.FieldName = "Person";
            this.colDetailPerson.Name = "colDetailPerson";
            this.colDetailPerson.Visible = true;
            this.colDetailPerson.VisibleIndex = 0;
            this.colDetailPerson.Width = 200;
            //
            // colDetailText
            //
            this.colDetailText.Caption = "Buchungstext";
            this.colDetailText.FieldName = "Buchungstext";
            this.colDetailText.Name = "colDetailText";
            this.colDetailText.Visible = true;
            this.colDetailText.VisibleIndex = 1;
            this.colDetailText.Width = 233;
            //
            // colDetailBetrag
            //
            this.colDetailBetrag.Caption = "Betrag";
            this.colDetailBetrag.DisplayFormat.FormatString = "n2";
            this.colDetailBetrag.DisplayFormat.FormatType = DevExpress.Utils.FormatType.Numeric;
            this.colDetailBetrag.FieldName = "Betrag";
            this.colDetailBetrag.Name = "colDetailBetrag";
            this.colDetailBetrag.Visible = true;
            this.colDetailBetrag.VisibleIndex = 2;
            //
            // colDetailVerwPeriodeVon
            //
            this.colDetailVerwPeriodeVon.Caption = "Verw.von";
            this.colDetailVerwPeriodeVon.FieldName = "VerwPeriodeVon";
            this.colDetailVerwPeriodeVon.Name = "colDetailVerwPeriodeVon";
            this.colDetailVerwPeriodeVon.Visible = true;
            this.colDetailVerwPeriodeVon.VisibleIndex = 3;
            this.colDetailVerwPeriodeVon.Width = 76;
            //
            // colDetailVerwPeriodeBis
            //
            this.colDetailVerwPeriodeBis.Caption = "Verw.bis";
            this.colDetailVerwPeriodeBis.FieldName = "VerwPeriodeBis";
            this.colDetailVerwPeriodeBis.Name = "colDetailVerwPeriodeBis";
            this.colDetailVerwPeriodeBis.Visible = true;
            this.colDetailVerwPeriodeBis.VisibleIndex = 4;
            this.colDetailVerwPeriodeBis.Width = 76;
            //
            // grdKontoauszug
            //
            this.grdKontoauszug.DataSource = this.qryMigDetailBuchung;
            this.grdKontoauszug.Dock = System.Windows.Forms.DockStyle.Fill;
            //
            //
            //
            this.grdKontoauszug.EmbeddedNavigator.Name = "";
            this.grdKontoauszug.GridStyle = KiSS4.Gui.GridStyleType.ReadOnly;
            gridLevelNode1.LevelTemplate = this.grvKbBuchungBruttoSuche;
            gridLevelNode1.RelationName = "BelegDetail";
            this.grdKontoauszug.LevelTree.Nodes.AddRange(new DevExpress.XtraGrid.GridLevelNode[] {
            gridLevelNode1});
            this.grdKontoauszug.Location = new System.Drawing.Point(0, 0);
            this.grdKontoauszug.MainView = this.grvKbBuchungKostenartBrutto;
            this.grdKontoauszug.Name = "grdKontoauszug";
            this.grdKontoauszug.Size = new System.Drawing.Size(899, 172);
            this.grdKontoauszug.TabIndex = 0;
            this.grdKontoauszug.ViewCollection.AddRange(new DevExpress.XtraGrid.Views.Base.BaseView[] {
            this.grvKbBuchungKostenartBrutto,
            this.grvDetail,
            this.grvKbBuchungBruttoSuche});
            //
            // qryMigDetailBuchung
            //
            this.qryMigDetailBuchung.FillTimeOut = 300;
            this.qryMigDetailBuchung.HostControl = this;
            this.qryMigDetailBuchung.SelectStatement = resources.GetString("qryMigDetailBuchung.SelectStatement");
            this.qryMigDetailBuchung.AfterFill += new System.EventHandler(this.qryMigDetailBuchung_AfterFill);
            this.qryMigDetailBuchung.PositionChanging += new System.EventHandler(this.qryMigDetailBuchung_PositionChanging);
            this.qryMigDetailBuchung.PositionChanged += new System.EventHandler(this.qryMigDetailBuchung_PositionChanged);
            //
            // grvKbBuchungKostenartBrutto
            //
            this.grvKbBuchungKostenartBrutto.Appearance.Empty.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(247)))), ((int)(((byte)(239)))), ((int)(((byte)(231)))));
            this.grvKbBuchungKostenartBrutto.Appearance.Empty.Font = new System.Drawing.Font("Arial", 12F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Pixel);
            this.grvKbBuchungKostenartBrutto.Appearance.Empty.Options.UseBackColor = true;
            this.grvKbBuchungKostenartBrutto.Appearance.Empty.Options.UseFont = true;
            this.grvKbBuchungKostenartBrutto.Appearance.EvenRow.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(236)))), ((int)(((byte)(227)))), ((int)(((byte)(215)))));
            this.grvKbBuchungKostenartBrutto.Appearance.EvenRow.Font = new System.Drawing.Font("Arial", 12F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Pixel);
            this.grvKbBuchungKostenartBrutto.Appearance.EvenRow.Options.UseBackColor = true;
            this.grvKbBuchungKostenartBrutto.Appearance.EvenRow.Options.UseFont = true;
            this.grvKbBuchungKostenartBrutto.Appearance.FocusedCell.BackColor = System.Drawing.SystemColors.Highlight;
            this.grvKbBuchungKostenartBrutto.Appearance.FocusedCell.Font = new System.Drawing.Font("Arial", 12F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Pixel);
            this.grvKbBuchungKostenartBrutto.Appearance.FocusedCell.ForeColor = System.Drawing.Color.White;
            this.grvKbBuchungKostenartBrutto.Appearance.FocusedCell.Options.UseBackColor = true;
            this.grvKbBuchungKostenartBrutto.Appearance.FocusedCell.Options.UseFont = true;
            this.grvKbBuchungKostenartBrutto.Appearance.FocusedCell.Options.UseForeColor = true;
            this.grvKbBuchungKostenartBrutto.Appearance.FocusedRow.BackColor = System.Drawing.SystemColors.Highlight;
            this.grvKbBuchungKostenartBrutto.Appearance.FocusedRow.Font = new System.Drawing.Font("Arial", 12F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Pixel);
            this.grvKbBuchungKostenartBrutto.Appearance.FocusedRow.ForeColor = System.Drawing.Color.White;
            this.grvKbBuchungKostenartBrutto.Appearance.FocusedRow.Options.UseBackColor = true;
            this.grvKbBuchungKostenartBrutto.Appearance.FocusedRow.Options.UseFont = true;
            this.grvKbBuchungKostenartBrutto.Appearance.FocusedRow.Options.UseForeColor = true;
            this.grvKbBuchungKostenartBrutto.Appearance.GroupPanel.BackColor = System.Drawing.Color.PeachPuff;
            this.grvKbBuchungKostenartBrutto.Appearance.GroupPanel.Options.UseBackColor = true;
            this.grvKbBuchungKostenartBrutto.Appearance.GroupRow.BackColor = System.Drawing.Color.PeachPuff;
            this.grvKbBuchungKostenartBrutto.Appearance.GroupRow.Font = new System.Drawing.Font("Arial", 12F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Pixel, ((byte)(0)));
            this.grvKbBuchungKostenartBrutto.Appearance.GroupRow.ForeColor = System.Drawing.SystemColors.WindowText;
            this.grvKbBuchungKostenartBrutto.Appearance.GroupRow.Options.UseBackColor = true;
            this.grvKbBuchungKostenartBrutto.Appearance.GroupRow.Options.UseFont = true;
            this.grvKbBuchungKostenartBrutto.Appearance.GroupRow.Options.UseForeColor = true;
            this.grvKbBuchungKostenartBrutto.Appearance.HeaderPanel.BackColor = System.Drawing.Color.Tan;
            this.grvKbBuchungKostenartBrutto.Appearance.HeaderPanel.BorderColor = System.Drawing.Color.Tan;
            this.grvKbBuchungKostenartBrutto.Appearance.HeaderPanel.Font = new System.Drawing.Font("Arial", 11F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Pixel, ((byte)(0)));
            this.grvKbBuchungKostenartBrutto.Appearance.HeaderPanel.Options.UseBackColor = true;
            this.grvKbBuchungKostenartBrutto.Appearance.HeaderPanel.Options.UseBorderColor = true;
            this.grvKbBuchungKostenartBrutto.Appearance.HeaderPanel.Options.UseFont = true;
            this.grvKbBuchungKostenartBrutto.Appearance.HideSelectionRow.BackColor = System.Drawing.Color.PowderBlue;
            this.grvKbBuchungKostenartBrutto.Appearance.HideSelectionRow.Font = new System.Drawing.Font("Arial", 12F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Pixel);
            this.grvKbBuchungKostenartBrutto.Appearance.HideSelectionRow.ForeColor = System.Drawing.SystemColors.WindowText;
            this.grvKbBuchungKostenartBrutto.Appearance.HideSelectionRow.Options.UseBackColor = true;
            this.grvKbBuchungKostenartBrutto.Appearance.HideSelectionRow.Options.UseFont = true;
            this.grvKbBuchungKostenartBrutto.Appearance.HideSelectionRow.Options.UseForeColor = true;
            this.grvKbBuchungKostenartBrutto.Appearance.HorzLine.BackColor = System.Drawing.Color.Silver;
            this.grvKbBuchungKostenartBrutto.Appearance.HorzLine.Options.UseBackColor = true;
            this.grvKbBuchungKostenartBrutto.Appearance.OddRow.Font = new System.Drawing.Font("Arial", 12F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Pixel);
            this.grvKbBuchungKostenartBrutto.Appearance.OddRow.Options.UseFont = true;
            this.grvKbBuchungKostenartBrutto.Appearance.Row.BackColor = System.Drawing.Color.BlanchedAlmond;
            this.grvKbBuchungKostenartBrutto.Appearance.Row.Font = new System.Drawing.Font("Arial", 12F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Pixel);
            this.grvKbBuchungKostenartBrutto.Appearance.Row.Options.UseBackColor = true;
            this.grvKbBuchungKostenartBrutto.Appearance.Row.Options.UseFont = true;
            this.grvKbBuchungKostenartBrutto.Appearance.SelectedRow.BackColor = System.Drawing.Color.AliceBlue;
            this.grvKbBuchungKostenartBrutto.Appearance.SelectedRow.Font = new System.Drawing.Font("Arial", 12F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Pixel);
            this.grvKbBuchungKostenartBrutto.Appearance.SelectedRow.ForeColor = System.Drawing.Color.Black;
            this.grvKbBuchungKostenartBrutto.Appearance.SelectedRow.Options.UseBackColor = true;
            this.grvKbBuchungKostenartBrutto.Appearance.SelectedRow.Options.UseFont = true;
            this.grvKbBuchungKostenartBrutto.Appearance.SelectedRow.Options.UseForeColor = true;
            this.grvKbBuchungKostenartBrutto.Appearance.VertLine.BackColor = System.Drawing.Color.Silver;
            this.grvKbBuchungKostenartBrutto.Appearance.VertLine.Options.UseBackColor = true;
            this.grvKbBuchungKostenartBrutto.BorderStyle = DevExpress.XtraEditors.Controls.BorderStyles.UltraFlat;
            this.grvKbBuchungKostenartBrutto.Columns.AddRange(new DevExpress.XtraGrid.Columns.GridColumn[] {
            this.colValuta,
            this.colBelegNr,
            this.colKlient,
            this.colKlientNr,
            this.colLA,
            this.colBuchungstext,
            this.colBetrag,
            this.colKbBuchungStatusCode,
            this.colAnzahl,
            this.colFallNr,
            this.colEA,
            this.colVerwPeriodeVon,
            this.colVerwPerioedBis});
            this.grvKbBuchungKostenartBrutto.FocusRectStyle = DevExpress.XtraGrid.Views.Grid.DrawFocusRectStyle.None;
            this.grvKbBuchungKostenartBrutto.GridControl = this.grdKontoauszug;
            this.grvKbBuchungKostenartBrutto.Name = "grvKbBuchungKostenartBrutto";
            this.grvKbBuchungKostenartBrutto.OptionsBehavior.Editable = false;
            this.grvKbBuchungKostenartBrutto.OptionsCustomization.AllowFilter = false;
            this.grvKbBuchungKostenartBrutto.OptionsDetail.ShowDetailTabs = false;
            this.grvKbBuchungKostenartBrutto.OptionsFilter.UseNewCustomFilterDialog = true;
            this.grvKbBuchungKostenartBrutto.OptionsNavigation.AutoFocusNewRow = true;
            this.grvKbBuchungKostenartBrutto.OptionsNavigation.UseTabKey = false;
            this.grvKbBuchungKostenartBrutto.OptionsView.ColumnAutoWidth = false;
            this.grvKbBuchungKostenartBrutto.OptionsView.ShowFilterPanelMode = DevExpress.XtraGrid.Views.Base.ShowFilterPanelMode.Never;
            this.grvKbBuchungKostenartBrutto.OptionsView.ShowGroupPanel = false;
            this.grvKbBuchungKostenartBrutto.OptionsView.ShowIndicator = false;
            //
            // colValuta
            //
            this.colValuta.Caption = "Belegdatum";
            this.colValuta.FieldName = "BuchungsDatum";
            this.colValuta.Name = "colValuta";
            this.colValuta.Visible = true;
            this.colValuta.VisibleIndex = 0;
            this.colValuta.Width = 87;
            //
            // colBelegNr
            //
            this.colBelegNr.Caption = "PL Beleg-Nr.";
            this.colBelegNr.FieldName = "BelegNr";
            this.colBelegNr.Name = "colBelegNr";
            this.colBelegNr.Visible = true;
            this.colBelegNr.VisibleIndex = 1;
            this.colBelegNr.Width = 79;
            //
            // colKlient
            //
            this.colKlient.Caption = "Betrifft Person";
            this.colKlient.FieldName = "BetrifftPerson";
            this.colKlient.Name = "colKlient";
            this.colKlient.Visible = true;
            this.colKlient.VisibleIndex = 2;
            this.colKlient.Width = 129;
            //
            // colKlientNr
            //
            this.colKlientNr.Caption = "Pers.-Nr.";
            this.colKlientNr.FieldName = "BaPersonID";
            this.colKlientNr.Name = "colKlientNr";
            this.colKlientNr.Visible = true;
            this.colKlientNr.VisibleIndex = 3;
            this.colKlientNr.Width = 60;
            //
            // colLA
            //
            this.colLA.Caption = "LA";
            this.colLA.FieldName = "LA";
            this.colLA.Name = "colLA";
            this.colLA.Visible = true;
            this.colLA.VisibleIndex = 4;
            this.colLA.Width = 35;
            //
            // colBuchungstext
            //
            this.colBuchungstext.Caption = "Buchungstext";
            this.colBuchungstext.FieldName = "Buchungstext";
            this.colBuchungstext.Name = "colBuchungstext";
            this.colBuchungstext.Visible = true;
            this.colBuchungstext.VisibleIndex = 5;
            this.colBuchungstext.Width = 131;
            //
            // colBetrag
            //
            this.colBetrag.Caption = "Betrag";
            this.colBetrag.DisplayFormat.FormatString = "n2";
            this.colBetrag.DisplayFormat.FormatType = DevExpress.Utils.FormatType.Numeric;
            this.colBetrag.FieldName = "Betrag";
            this.colBetrag.Name = "colBetrag";
            this.colBetrag.Visible = true;
            this.colBetrag.VisibleIndex = 6;
            this.colBetrag.Width = 70;
            //
            // colKbBuchungStatusCode
            //
            this.colKbBuchungStatusCode.AppearanceCell.Options.UseTextOptions = true;
            this.colKbBuchungStatusCode.AppearanceCell.TextOptions.HAlignment = DevExpress.Utils.HorzAlignment.Center;
            this.colKbBuchungStatusCode.Caption = "Stat";
            this.colKbBuchungStatusCode.FieldName = "KbBuchungStatusCode";
            this.colKbBuchungStatusCode.Name = "colKbBuchungStatusCode";
            this.colKbBuchungStatusCode.Visible = true;
            this.colKbBuchungStatusCode.VisibleIndex = 7;
            this.colKbBuchungStatusCode.Width = 37;
            //
            // colAnzahl
            //
            this.colAnzahl.Caption = "Anz.";
            this.colAnzahl.FieldName = "Anzahl";
            this.colAnzahl.Name = "colAnzahl";
            this.colAnzahl.Visible = true;
            this.colAnzahl.VisibleIndex = 8;
            this.colAnzahl.Width = 34;
            //
            // colFallNr
            //
            this.colFallNr.AppearanceCell.Options.UseTextOptions = true;
            this.colFallNr.AppearanceCell.TextOptions.HAlignment = DevExpress.Utils.HorzAlignment.Center;
            this.colFallNr.AppearanceHeader.Options.UseTextOptions = true;
            this.colFallNr.AppearanceHeader.TextOptions.HAlignment = DevExpress.Utils.HorzAlignment.Center;
            this.colFallNr.Caption = "KiSS-FallNr";
            this.colFallNr.FieldName = "FaFallID";
            this.colFallNr.Name = "colFallNr";
            this.colFallNr.Visible = true;
            this.colFallNr.VisibleIndex = 9;
            this.colFallNr.Width = 70;
            //
            // colEA
            //
            this.colEA.AppearanceCell.Options.UseTextOptions = true;
            this.colEA.AppearanceCell.TextOptions.HAlignment = DevExpress.Utils.HorzAlignment.Center;
            this.colEA.AppearanceHeader.Options.UseTextOptions = true;
            this.colEA.AppearanceHeader.TextOptions.HAlignment = DevExpress.Utils.HorzAlignment.Center;
            this.colEA.Caption = "EA";
            this.colEA.FieldName = "EA";
            this.colEA.Name = "colEA";
            this.colEA.Visible = true;
            this.colEA.VisibleIndex = 10;
            this.colEA.Width = 30;
            //
            // colVerwPeriodeVon
            //
            this.colVerwPeriodeVon.Caption = "Verw. von";
            this.colVerwPeriodeVon.FieldName = "VerwPeriodeVon";
            this.colVerwPeriodeVon.Name = "colVerwPeriodeVon";
            this.colVerwPeriodeVon.Visible = true;
            this.colVerwPeriodeVon.VisibleIndex = 11;
            //
            // colVerwPerioedBis
            //
            this.colVerwPerioedBis.Caption = "Verw. bis";
            this.colVerwPerioedBis.FieldName = "VerwPeriodeBis";
            this.colVerwPerioedBis.Name = "colVerwPerioedBis";
            this.colVerwPerioedBis.Visible = true;
            this.colVerwPerioedBis.VisibleIndex = 12;
            //
            // grvDetail
            //
            this.grvDetail.Appearance.Empty.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(247)))), ((int)(((byte)(239)))), ((int)(((byte)(231)))));
            this.grvDetail.Appearance.Empty.Options.UseBackColor = true;
            this.grvDetail.Appearance.FocusedCell.BackColor = System.Drawing.SystemColors.Highlight;
            this.grvDetail.Appearance.FocusedCell.Font = new System.Drawing.Font("Arial", 12F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Pixel);
            this.grvDetail.Appearance.FocusedCell.ForeColor = System.Drawing.Color.White;
            this.grvDetail.Appearance.FocusedCell.Options.UseBackColor = true;
            this.grvDetail.Appearance.FocusedCell.Options.UseFont = true;
            this.grvDetail.Appearance.FocusedCell.Options.UseForeColor = true;
            this.grvDetail.Appearance.FocusedRow.BackColor = System.Drawing.SystemColors.Highlight;
            this.grvDetail.Appearance.FocusedRow.Font = new System.Drawing.Font("Arial", 12F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Pixel);
            this.grvDetail.Appearance.FocusedRow.Options.UseBackColor = true;
            this.grvDetail.Appearance.FocusedRow.Options.UseFont = true;
            this.grvDetail.Appearance.HeaderPanel.BackColor = System.Drawing.Color.PaleTurquoise;
            this.grvDetail.Appearance.HeaderPanel.Font = new System.Drawing.Font("Arial", 11F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Pixel);
            this.grvDetail.Appearance.HeaderPanel.Options.UseBackColor = true;
            this.grvDetail.Appearance.HeaderPanel.Options.UseFont = true;
            this.grvDetail.Appearance.HorzLine.BackColor = System.Drawing.Color.Silver;
            this.grvDetail.Appearance.HorzLine.Options.UseBackColor = true;
            this.grvDetail.Appearance.Row.BackColor = System.Drawing.Color.LightCyan;
            this.grvDetail.Appearance.Row.Font = new System.Drawing.Font("Arial", 12F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Pixel);
            this.grvDetail.Appearance.Row.Options.UseBackColor = true;
            this.grvDetail.Appearance.Row.Options.UseFont = true;
            this.grvDetail.Appearance.VertLine.BackColor = System.Drawing.Color.Silver;
            this.grvDetail.Appearance.VertLine.Options.UseBackColor = true;
            this.grvDetail.Columns.AddRange(new DevExpress.XtraGrid.Columns.GridColumn[] {
            this.colVerwPeriodeVonDetail,
            this.colVerwPeriodeBisDetail,
            this.colBetragDetail,
            this.colKlientDetail,
            this.colErfassungsDatum});
            this.grvDetail.GridControl = this.grdKontoauszug;
            this.grvDetail.Name = "grvDetail";
            this.grvDetail.OptionsBehavior.Editable = false;
            this.grvDetail.OptionsCustomization.AllowFilter = false;
            this.grvDetail.OptionsView.ColumnAutoWidth = false;
            this.grvDetail.OptionsView.ShowGroupPanel = false;
            this.grvDetail.OptionsView.ShowIndicator = false;
            //
            // colVerwPeriodeVonDetail
            //
            this.colVerwPeriodeVonDetail.Caption = "Verw. von";
            this.colVerwPeriodeVonDetail.FieldName = "VerwPeriodeVon";
            this.colVerwPeriodeVonDetail.Name = "colVerwPeriodeVonDetail";
            this.colVerwPeriodeVonDetail.Visible = true;
            this.colVerwPeriodeVonDetail.VisibleIndex = 0;
            this.colVerwPeriodeVonDetail.Width = 70;
            //
            // colVerwPeriodeBisDetail
            //
            this.colVerwPeriodeBisDetail.Caption = "Verw. bis";
            this.colVerwPeriodeBisDetail.FieldName = "VerwPeriodeBis";
            this.colVerwPeriodeBisDetail.Name = "colVerwPeriodeBisDetail";
            this.colVerwPeriodeBisDetail.Visible = true;
            this.colVerwPeriodeBisDetail.VisibleIndex = 1;
            //
            // colBetragDetail
            //
            this.colBetragDetail.Caption = "Betrag";
            this.colBetragDetail.DisplayFormat.FormatString = "n2";
            this.colBetragDetail.DisplayFormat.FormatType = DevExpress.Utils.FormatType.Numeric;
            this.colBetragDetail.FieldName = "BetragSaldo";
            this.colBetragDetail.Name = "colBetragDetail";
            this.colBetragDetail.Visible = true;
            this.colBetragDetail.VisibleIndex = 3;
            this.colBetragDetail.Width = 70;
            //
            // colKlientDetail
            //
            this.colKlientDetail.Caption = "Person/in";
            this.colKlientDetail.FieldName = "Person";
            this.colKlientDetail.Name = "colKlientDetail";
            this.colKlientDetail.Visible = true;
            this.colKlientDetail.VisibleIndex = 2;
            this.colKlientDetail.Width = 300;
            //
            // colErfassungsDatum
            //
            this.colErfassungsDatum.Caption = "Erfassung";
            this.colErfassungsDatum.FieldName = "ErfassungsDatum";
            this.colErfassungsDatum.Name = "colErfassungsDatum";
            this.colErfassungsDatum.Visible = true;
            this.colErfassungsDatum.VisibleIndex = 4;
            //
            // grdKbBuchungBrutto
            //
            this.grdKbBuchungBrutto.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom)
                        | System.Windows.Forms.AnchorStyles.Left)
                        | System.Windows.Forms.AnchorStyles.Right)));
            this.grdKbBuchungBrutto.DataSource = this.qryKbBuchungBrutto;
            //
            //
            //
            this.grdKbBuchungBrutto.EmbeddedNavigator.Name = "";
            this.grdKbBuchungBrutto.GridStyle = KiSS4.Gui.GridStyleType.ReadOnly;
            this.grdKbBuchungBrutto.Location = new System.Drawing.Point(5, 274);
            this.grdKbBuchungBrutto.MainView = this.gridView1;
            this.grdKbBuchungBrutto.Name = "grdKbBuchungBrutto";
            this.grdKbBuchungBrutto.RepositoryItems.AddRange(new DevExpress.XtraEditors.Repository.RepositoryItem[] {
            this.repositoryItemImageComboBox1});
            this.grdKbBuchungBrutto.Size = new System.Drawing.Size(911, 112);
            this.grdKbBuchungBrutto.TabIndex = 0;
            this.grdKbBuchungBrutto.ViewCollection.AddRange(new DevExpress.XtraGrid.Views.Base.BaseView[] {
            this.gridView1});
            //
            // qryKbBuchungBrutto
            //
            this.qryKbBuchungBrutto.BatchUpdate = true;
            this.qryKbBuchungBrutto.CanDelete = true;
            this.qryKbBuchungBrutto.CanInsert = true;
            this.qryKbBuchungBrutto.CanUpdate = true;
            this.qryKbBuchungBrutto.HostControl = this;
            this.qryKbBuchungBrutto.SelectStatement = resources.GetString("qryKbBuchungBrutto.SelectStatement");
            this.qryKbBuchungBrutto.BeforeDeleteQuestion += new System.EventHandler(this.qryKbBuchungBrutto_BeforeDeleteQuestion);
            this.qryKbBuchungBrutto.AfterDelete += new System.EventHandler(this.qryKbBuchungBrutto_AfterDelete);
            this.qryKbBuchungBrutto.PositionChanging += new System.EventHandler(this.qryKbBuchungBrutto_PositionChanging);
            this.qryKbBuchungBrutto.PositionChanged += new System.EventHandler(this.qryKbBuchungBrutto_PositionChanged);
            //
            // gridView1
            //
            this.gridView1.Appearance.Empty.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(247)))), ((int)(((byte)(239)))), ((int)(((byte)(231)))));
            this.gridView1.Appearance.Empty.Font = new System.Drawing.Font("Arial", 12F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Pixel);
            this.gridView1.Appearance.Empty.Options.UseBackColor = true;
            this.gridView1.Appearance.Empty.Options.UseFont = true;
            this.gridView1.Appearance.EvenRow.Font = new System.Drawing.Font("Arial", 12F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Pixel);
            this.gridView1.Appearance.EvenRow.Options.UseFont = true;
            this.gridView1.Appearance.FocusedCell.BackColor = System.Drawing.SystemColors.Highlight;
            this.gridView1.Appearance.FocusedCell.Font = new System.Drawing.Font("Arial", 12F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Pixel);
            this.gridView1.Appearance.FocusedCell.ForeColor = System.Drawing.Color.White;
            this.gridView1.Appearance.FocusedCell.Options.UseBackColor = true;
            this.gridView1.Appearance.FocusedCell.Options.UseFont = true;
            this.gridView1.Appearance.FocusedCell.Options.UseForeColor = true;
            this.gridView1.Appearance.FocusedRow.BackColor = System.Drawing.SystemColors.Highlight;
            this.gridView1.Appearance.FocusedRow.Font = new System.Drawing.Font("Arial", 12F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Pixel);
            this.gridView1.Appearance.FocusedRow.ForeColor = System.Drawing.Color.White;
            this.gridView1.Appearance.FocusedRow.Options.UseBackColor = true;
            this.gridView1.Appearance.FocusedRow.Options.UseFont = true;
            this.gridView1.Appearance.FocusedRow.Options.UseForeColor = true;
            this.gridView1.Appearance.GroupPanel.BackColor = System.Drawing.Color.PeachPuff;
            this.gridView1.Appearance.GroupPanel.Options.UseBackColor = true;
            this.gridView1.Appearance.GroupRow.BackColor = System.Drawing.Color.PeachPuff;
            this.gridView1.Appearance.GroupRow.Font = new System.Drawing.Font("Arial", 12F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Pixel, ((byte)(0)));
            this.gridView1.Appearance.GroupRow.ForeColor = System.Drawing.SystemColors.WindowText;
            this.gridView1.Appearance.GroupRow.Options.UseBackColor = true;
            this.gridView1.Appearance.GroupRow.Options.UseFont = true;
            this.gridView1.Appearance.GroupRow.Options.UseForeColor = true;
            this.gridView1.Appearance.HeaderPanel.BackColor = System.Drawing.Color.Tan;
            this.gridView1.Appearance.HeaderPanel.BorderColor = System.Drawing.Color.Tan;
            this.gridView1.Appearance.HeaderPanel.Font = new System.Drawing.Font("Arial", 11F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Pixel, ((byte)(0)));
            this.gridView1.Appearance.HeaderPanel.Options.UseBackColor = true;
            this.gridView1.Appearance.HeaderPanel.Options.UseBorderColor = true;
            this.gridView1.Appearance.HeaderPanel.Options.UseFont = true;
            this.gridView1.Appearance.HideSelectionRow.BackColor = System.Drawing.Color.PowderBlue;
            this.gridView1.Appearance.HideSelectionRow.Font = new System.Drawing.Font("Arial", 12F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Pixel);
            this.gridView1.Appearance.HideSelectionRow.ForeColor = System.Drawing.SystemColors.WindowText;
            this.gridView1.Appearance.HideSelectionRow.Options.UseBackColor = true;
            this.gridView1.Appearance.HideSelectionRow.Options.UseFont = true;
            this.gridView1.Appearance.HideSelectionRow.Options.UseForeColor = true;
            this.gridView1.Appearance.HorzLine.BackColor = System.Drawing.Color.Silver;
            this.gridView1.Appearance.HorzLine.Options.UseBackColor = true;
            this.gridView1.Appearance.OddRow.Font = new System.Drawing.Font("Arial", 12F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Pixel);
            this.gridView1.Appearance.OddRow.Options.UseFont = true;
            this.gridView1.Appearance.Row.BackColor = System.Drawing.Color.BlanchedAlmond;
            this.gridView1.Appearance.Row.Font = new System.Drawing.Font("Arial", 12F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Pixel);
            this.gridView1.Appearance.Row.Options.UseBackColor = true;
            this.gridView1.Appearance.Row.Options.UseFont = true;
            this.gridView1.Appearance.SelectedRow.Font = new System.Drawing.Font("Arial", 12F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Pixel);
            this.gridView1.Appearance.SelectedRow.Options.UseFont = true;
            this.gridView1.Appearance.VertLine.BackColor = System.Drawing.Color.Silver;
            this.gridView1.Appearance.VertLine.Options.UseBackColor = true;
            this.gridView1.BorderStyle = DevExpress.XtraEditors.Controls.BorderStyles.UltraFlat;
            this.gridView1.Columns.AddRange(new DevExpress.XtraGrid.Columns.GridColumn[] {
            this.gridColumn1,
            this.colBaPersonID,
            this.colBetrifftBaPersonID,
            this.colKostenart,
            this.gridColumn2,
            this.colBetragKorrektur,
            this.colStatus,
            this.colUmbuchungBelegNr,
            this.gridColumn3,
            this.colVerwPeriodeBis,
            this.colQuoting,
            this.colDetailAbtretung});
            this.gridView1.FocusRectStyle = DevExpress.XtraGrid.Views.Grid.DrawFocusRectStyle.None;
            this.gridView1.GridControl = this.grdKbBuchungBrutto;
            this.gridView1.Name = "gridView1";
            this.gridView1.OptionsBehavior.Editable = false;
            this.gridView1.OptionsCustomization.AllowFilter = false;
            this.gridView1.OptionsFilter.UseNewCustomFilterDialog = true;
            this.gridView1.OptionsNavigation.AutoFocusNewRow = true;
            this.gridView1.OptionsNavigation.UseTabKey = false;
            this.gridView1.OptionsView.ColumnAutoWidth = false;
            this.gridView1.OptionsView.ShowFilterPanelMode = DevExpress.XtraGrid.Views.Base.ShowFilterPanelMode.Never;
            this.gridView1.OptionsView.ShowFooter = true;
            this.gridView1.OptionsView.ShowGroupPanel = false;
            this.gridView1.OptionsView.ShowIndicator = false;
            //
            // gridColumn1
            //
            this.gridColumn1.Caption = "LT";
            this.gridColumn1.FieldName = "LT";
            this.gridColumn1.Name = "gridColumn1";
            this.gridColumn1.Visible = true;
            this.gridColumn1.VisibleIndex = 0;
            this.gridColumn1.Width = 64;
            //
            // colBaPersonID
            //
            this.colBaPersonID.Caption = "Betrifft Person";
            this.colBaPersonID.FieldName = "BetrifftPerson";
            this.colBaPersonID.Name = "colBaPersonID";
            this.colBaPersonID.Visible = true;
            this.colBaPersonID.VisibleIndex = 1;
            this.colBaPersonID.Width = 92;
            //
            // colBetrifftBaPersonID
            //
            this.colBetrifftBaPersonID.Caption = "Betr.Nr";
            this.colBetrifftBaPersonID.FieldName = "BetrifftBaPersonID";
            this.colBetrifftBaPersonID.Name = "colBetrifftBaPersonID";
            this.colBetrifftBaPersonID.Visible = true;
            this.colBetrifftBaPersonID.VisibleIndex = 2;
            this.colBetrifftBaPersonID.Width = 57;
            //
            // colKostenart
            //
            this.colKostenart.Caption = "LA";
            this.colKostenart.FieldName = "KontoNr";
            this.colKostenart.Name = "colKostenart";
            this.colKostenart.Visible = true;
            this.colKostenart.VisibleIndex = 3;
            this.colKostenart.Width = 48;
            //
            // gridColumn2
            //
            this.gridColumn2.Caption = "Buchungstext";
            this.gridColumn2.FieldName = "Text";
            this.gridColumn2.Name = "gridColumn2";
            this.gridColumn2.Visible = true;
            this.gridColumn2.VisibleIndex = 4;
            this.gridColumn2.Width = 185;
            //
            // colBetragKorrektur
            //
            this.colBetragKorrektur.Caption = "Betrag";
            this.colBetragKorrektur.DisplayFormat.FormatString = "n2";
            this.colBetragKorrektur.DisplayFormat.FormatType = DevExpress.Utils.FormatType.Numeric;
            this.colBetragKorrektur.FieldName = "Betrag";
            this.colBetragKorrektur.Name = "colBetragKorrektur";
            this.colBetragKorrektur.SummaryItem.DisplayFormat = "{0:n2}";
            this.colBetragKorrektur.SummaryItem.SummaryType = DevExpress.Data.SummaryItemType.Sum;
            this.colBetragKorrektur.Visible = true;
            this.colBetragKorrektur.VisibleIndex = 5;
            this.colBetragKorrektur.Width = 91;
            //
            // colStatus
            //
            this.colStatus.Caption = "Stat";
            this.colStatus.ColumnEdit = this.repositoryItemImageComboBox1;
            this.colStatus.FieldName = "KbBuchungStatusCode";
            this.colStatus.Name = "colStatus";
            this.colStatus.Visible = true;
            this.colStatus.VisibleIndex = 6;
            this.colStatus.Width = 33;
            //
            // repositoryItemImageComboBox1
            //
            this.repositoryItemImageComboBox1.AutoHeight = false;
            this.repositoryItemImageComboBox1.Buttons.AddRange(new DevExpress.XtraEditors.Controls.EditorButton[] {
            new DevExpress.XtraEditors.Controls.EditorButton(DevExpress.XtraEditors.Controls.ButtonPredefines.Combo)});
            this.repositoryItemImageComboBox1.GlyphAlignment = DevExpress.Utils.HorzAlignment.Center;
            this.repositoryItemImageComboBox1.Name = "repositoryItemImageComboBox1";
            //
            // colUmbuchungBelegNr
            //
            this.colUmbuchungBelegNr.Caption = "BelegNr";
            this.colUmbuchungBelegNr.FieldName = "BelegNr";
            this.colUmbuchungBelegNr.Name = "colUmbuchungBelegNr";
            this.colUmbuchungBelegNr.Visible = true;
            this.colUmbuchungBelegNr.VisibleIndex = 7;
            this.colUmbuchungBelegNr.Width = 88;
            //
            // gridColumn3
            //
            this.gridColumn3.Caption = "Verw.  von";
            this.gridColumn3.FieldName = "VerwPeriodeVon";
            this.gridColumn3.Name = "gridColumn3";
            this.gridColumn3.Visible = true;
            this.gridColumn3.VisibleIndex = 8;
            //
            // colVerwPeriodeBis
            //
            this.colVerwPeriodeBis.Caption = "Verw. bis";
            this.colVerwPeriodeBis.FieldName = "VerwPeriodeBis";
            this.colVerwPeriodeBis.Name = "colVerwPeriodeBis";
            this.colVerwPeriodeBis.Visible = true;
            this.colVerwPeriodeBis.VisibleIndex = 9;
            //
            // colQuoting
            //
            this.colQuoting.Caption = "Qu.";
            this.colQuoting.FieldName = "Quoting";
            this.colQuoting.Name = "colQuoting";
            this.colQuoting.Visible = true;
            this.colQuoting.VisibleIndex = 10;
            this.colQuoting.Width = 28;
            //
            // colDetailAbtretung
            //
            this.colDetailAbtretung.Caption = "Ab";
            this.colDetailAbtretung.FieldName = "Abgetreten";
            this.colDetailAbtretung.Name = "colDetailAbtretung";
            this.colDetailAbtretung.ToolTip = "Abgetreten";
            this.colDetailAbtretung.Visible = true;
            this.colDetailAbtretung.VisibleIndex = 11;
            this.colDetailAbtretung.Width = 28;
            //
            // panTitel
            //
            this.panTitel.Controls.Add(this.lblBetragstotal);
            this.panTitel.Controls.Add(this.label3);
            this.panTitel.Controls.Add(this.picTitel);
            this.panTitel.Controls.Add(this.lblTitel);
            this.panTitel.Dock = System.Windows.Forms.DockStyle.Top;
            this.panTitel.Location = new System.Drawing.Point(0, 0);
            this.panTitel.Name = "panTitel";
            this.panTitel.Size = new System.Drawing.Size(919, 30);
            this.panTitel.TabIndex = 0;
            //
            // lblBetragstotal
            //
            this.lblBetragstotal.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Right)));
            this.lblBetragstotal.Location = new System.Drawing.Point(840, 8);
            this.lblBetragstotal.Name = "lblBetragstotal";
            this.lblBetragstotal.Size = new System.Drawing.Size(76, 18);
            this.lblBetragstotal.TabIndex = 577;
            this.lblBetragstotal.Text = "0";
            this.lblBetragstotal.UseCompatibleTextRendering = true;
            //
            // label3
            //
            this.label3.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Right)));
            this.label3.Location = new System.Drawing.Point(763, 8);
            this.label3.Name = "label3";
            this.label3.Size = new System.Drawing.Size(71, 18);
            this.label3.TabIndex = 576;
            this.label3.Text = "Betragstotal:";
            this.label3.UseCompatibleTextRendering = true;
            //
            // picTitel
            //
            this.picTitel.Image = ((System.Drawing.Image)(resources.GetObject("picTitel.Image")));
            this.picTitel.Location = new System.Drawing.Point(10, 5);
            this.picTitel.Name = "picTitel";
            this.picTitel.Size = new System.Drawing.Size(25, 20);
            this.picTitel.TabIndex = 1;
            this.picTitel.TabStop = false;
            //
            // lblTitel
            //
            this.lblTitel.LabelStyle = KiSS4.Gui.LabelStyleType.TitleLabel;
            this.lblTitel.Location = new System.Drawing.Point(35, 6);
            this.lblTitel.Name = "lblTitel";
            this.lblTitel.Size = new System.Drawing.Size(208, 20);
            this.lblTitel.TabIndex = 1;
            this.lblTitel.Text = "Belege korrigieren Altdaten";
            this.lblTitel.UseCompatibleTextRendering = true;
            //
            // edtSucheFaFallID
            //
            this.edtSucheFaFallID.Location = new System.Drawing.Point(102, 30);
            this.edtSucheFaFallID.Name = "edtSucheFaFallID";
            this.edtSucheFaFallID.Properties.AllowNullInput = DevExpress.Utils.DefaultBoolean.True;
            this.edtSucheFaFallID.Properties.Appearance.BackColor = System.Drawing.Color.AliceBlue;
            this.edtSucheFaFallID.Properties.Appearance.BorderColor = System.Drawing.Color.Linen;
            this.edtSucheFaFallID.Properties.Appearance.Font = new System.Drawing.Font("Arial", 13F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Pixel);
            this.edtSucheFaFallID.Properties.Appearance.Options.UseBackColor = true;
            this.edtSucheFaFallID.Properties.Appearance.Options.UseBorderColor = true;
            this.edtSucheFaFallID.Properties.Appearance.Options.UseFont = true;
            this.edtSucheFaFallID.Properties.BorderStyle = DevExpress.XtraEditors.Controls.BorderStyles.HotFlat;
            this.edtSucheFaFallID.Properties.ButtonsStyle = DevExpress.XtraEditors.Controls.BorderStyles.UltraFlat;
            this.edtSucheFaFallID.Size = new System.Drawing.Size(100, 24);
            this.edtSucheFaFallID.TabIndex = 0;
            //
            // edtSucheNummernkreis
            //
            this.edtSucheNummernkreis.Location = new System.Drawing.Point(102, 60);
            this.edtSucheNummernkreis.Name = "edtSucheNummernkreis";
            this.edtSucheNummernkreis.Properties.Appearance.BackColor = System.Drawing.Color.AliceBlue;
            this.edtSucheNummernkreis.Properties.Appearance.BorderColor = System.Drawing.Color.Linen;
            this.edtSucheNummernkreis.Properties.Appearance.Font = new System.Drawing.Font("Arial", 13F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Pixel);
            this.edtSucheNummernkreis.Properties.Appearance.Options.UseBackColor = true;
            this.edtSucheNummernkreis.Properties.Appearance.Options.UseBorderColor = true;
            this.edtSucheNummernkreis.Properties.Appearance.Options.UseFont = true;
            this.edtSucheNummernkreis.Properties.BorderStyle = DevExpress.XtraEditors.Controls.BorderStyles.HotFlat;
            this.edtSucheNummernkreis.Size = new System.Drawing.Size(100, 24);
            this.edtSucheNummernkreis.TabIndex = 1;
            //
            // lblKonto
            //
            this.lblKonto.Location = new System.Drawing.Point(368, 30);
            this.lblKonto.Name = "lblKonto";
            this.lblKonto.Size = new System.Drawing.Size(91, 24);
            this.lblKonto.TabIndex = 1;
            this.lblKonto.Text = "Betrifft Person";
            this.lblKonto.UseCompatibleTextRendering = true;
            //
            // edtSucheBelegNr
            //
            this.edtSucheBelegNr.Location = new System.Drawing.Point(102, 90);
            this.edtSucheBelegNr.Name = "edtSucheBelegNr";
            this.edtSucheBelegNr.Properties.Appearance.BackColor = System.Drawing.Color.AliceBlue;
            this.edtSucheBelegNr.Properties.Appearance.BorderColor = System.Drawing.Color.Linen;
            this.edtSucheBelegNr.Properties.Appearance.Font = new System.Drawing.Font("Arial", 13F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Pixel);
            this.edtSucheBelegNr.Properties.Appearance.Options.UseBackColor = true;
            this.edtSucheBelegNr.Properties.Appearance.Options.UseBorderColor = true;
            this.edtSucheBelegNr.Properties.Appearance.Options.UseFont = true;
            this.edtSucheBelegNr.Properties.BorderStyle = DevExpress.XtraEditors.Controls.BorderStyles.HotFlat;
            this.edtSucheBelegNr.Size = new System.Drawing.Size(100, 24);
            this.edtSucheBelegNr.TabIndex = 2;
            //
            // edtSucheBuchungsDatumVon
            //
            this.edtSucheBuchungsDatumVon.EditValue = null;
            this.edtSucheBuchungsDatumVon.Location = new System.Drawing.Point(102, 121);
            this.edtSucheBuchungsDatumVon.Name = "edtSucheBuchungsDatumVon";
            this.edtSucheBuchungsDatumVon.Properties.AllowNullInput = DevExpress.Utils.DefaultBoolean.True;
            this.edtSucheBuchungsDatumVon.Properties.Appearance.BackColor = System.Drawing.Color.AliceBlue;
            this.edtSucheBuchungsDatumVon.Properties.Appearance.BorderColor = System.Drawing.Color.Linen;
            this.edtSucheBuchungsDatumVon.Properties.Appearance.Font = new System.Drawing.Font("Arial", 13F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Pixel);
            this.edtSucheBuchungsDatumVon.Properties.Appearance.Options.UseBackColor = true;
            this.edtSucheBuchungsDatumVon.Properties.Appearance.Options.UseBorderColor = true;
            this.edtSucheBuchungsDatumVon.Properties.Appearance.Options.UseFont = true;
            this.edtSucheBuchungsDatumVon.Properties.BorderStyle = DevExpress.XtraEditors.Controls.BorderStyles.HotFlat;
            serializableAppearanceObject10.BackColor = System.Drawing.Color.Bisque;
            serializableAppearanceObject10.Options.UseBackColor = true;
            this.edtSucheBuchungsDatumVon.Properties.Buttons.AddRange(new DevExpress.XtraEditors.Controls.EditorButton[] {
            new DevExpress.XtraEditors.Controls.EditorButton(DevExpress.XtraEditors.Controls.ButtonPredefines.Glyph, "", 8, true, true, false, DevExpress.Utils.HorzAlignment.Center, ((System.Drawing.Image)(resources.GetObject("edtSucheBuchungsDatumVon.Properties.Buttons"))), new DevExpress.Utils.KeyShortcut(System.Windows.Forms.Keys.None), serializableAppearanceObject10)});
            this.edtSucheBuchungsDatumVon.Properties.ButtonsStyle = DevExpress.XtraEditors.Controls.BorderStyles.UltraFlat;
            this.edtSucheBuchungsDatumVon.Properties.ShowToday = false;
            this.edtSucheBuchungsDatumVon.Size = new System.Drawing.Size(100, 24);
            this.edtSucheBuchungsDatumVon.TabIndex = 3;
            //
            // edtSucheBuchungsDatumBis
            //
            this.edtSucheBuchungsDatumBis.EditValue = null;
            this.edtSucheBuchungsDatumBis.Location = new System.Drawing.Point(236, 121);
            this.edtSucheBuchungsDatumBis.Name = "edtSucheBuchungsDatumBis";
            this.edtSucheBuchungsDatumBis.Properties.AllowNullInput = DevExpress.Utils.DefaultBoolean.True;
            this.edtSucheBuchungsDatumBis.Properties.Appearance.BackColor = System.Drawing.Color.AliceBlue;
            this.edtSucheBuchungsDatumBis.Properties.Appearance.BorderColor = System.Drawing.Color.Linen;
            this.edtSucheBuchungsDatumBis.Properties.Appearance.Font = new System.Drawing.Font("Arial", 13F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Pixel);
            this.edtSucheBuchungsDatumBis.Properties.Appearance.Options.UseBackColor = true;
            this.edtSucheBuchungsDatumBis.Properties.Appearance.Options.UseBorderColor = true;
            this.edtSucheBuchungsDatumBis.Properties.Appearance.Options.UseFont = true;
            this.edtSucheBuchungsDatumBis.Properties.BorderStyle = DevExpress.XtraEditors.Controls.BorderStyles.HotFlat;
            serializableAppearanceObject9.BackColor = System.Drawing.Color.Bisque;
            serializableAppearanceObject9.Options.UseBackColor = true;
            this.edtSucheBuchungsDatumBis.Properties.Buttons.AddRange(new DevExpress.XtraEditors.Controls.EditorButton[] {
            new DevExpress.XtraEditors.Controls.EditorButton(DevExpress.XtraEditors.Controls.ButtonPredefines.Glyph, "", 8, true, true, false, DevExpress.Utils.HorzAlignment.Center, ((System.Drawing.Image)(resources.GetObject("edtSucheBuchungsDatumBis.Properties.Buttons"))), new DevExpress.Utils.KeyShortcut(System.Windows.Forms.Keys.None), serializableAppearanceObject9)});
            this.edtSucheBuchungsDatumBis.Properties.ButtonsStyle = DevExpress.XtraEditors.Controls.BorderStyles.UltraFlat;
            this.edtSucheBuchungsDatumBis.Properties.ShowToday = false;
            this.edtSucheBuchungsDatumBis.Size = new System.Drawing.Size(100, 24);
            this.edtSucheBuchungsDatumBis.TabIndex = 4;
            //
            // edtSucheBetrifftPerson
            //
            this.edtSucheBetrifftPerson.Location = new System.Drawing.Point(464, 30);
            this.edtSucheBetrifftPerson.Name = "edtSucheBetrifftPerson";
            this.edtSucheBetrifftPerson.Properties.Appearance.BackColor = System.Drawing.Color.AliceBlue;
            this.edtSucheBetrifftPerson.Properties.Appearance.BorderColor = System.Drawing.Color.Linen;
            this.edtSucheBetrifftPerson.Properties.Appearance.Font = new System.Drawing.Font("Arial", 13F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Pixel);
            this.edtSucheBetrifftPerson.Properties.Appearance.Options.UseBackColor = true;
            this.edtSucheBetrifftPerson.Properties.Appearance.Options.UseBorderColor = true;
            this.edtSucheBetrifftPerson.Properties.Appearance.Options.UseFont = true;
            this.edtSucheBetrifftPerson.Properties.BorderStyle = DevExpress.XtraEditors.Controls.BorderStyles.HotFlat;
            serializableAppearanceObject8.BackColor = System.Drawing.Color.Bisque;
            serializableAppearanceObject8.Options.UseBackColor = true;
            this.edtSucheBetrifftPerson.Properties.Buttons.AddRange(new DevExpress.XtraEditors.Controls.EditorButton[] {
            new DevExpress.XtraEditors.Controls.EditorButton(DevExpress.XtraEditors.Controls.ButtonPredefines.Ellipsis, "", -1, true, true, false, DevExpress.Utils.HorzAlignment.Center, null, new DevExpress.Utils.KeyShortcut(System.Windows.Forms.Keys.None), serializableAppearanceObject8)});
            this.edtSucheBetrifftPerson.Properties.ButtonsStyle = DevExpress.XtraEditors.Controls.BorderStyles.UltraFlat;
            this.edtSucheBetrifftPerson.Size = new System.Drawing.Size(257, 24);
            this.edtSucheBetrifftPerson.TabIndex = 5;
            this.edtSucheBetrifftPerson.UserModifiedFld += new KiSS4.Gui.UserModifiedFldEventHandler(this.edtSucheBetrifftPerson_UserModifiedFld);
            //
            // edtSucheLA
            //
            this.edtSucheLA.Location = new System.Drawing.Point(464, 60);
            this.edtSucheLA.Name = "edtSucheLA";
            this.edtSucheLA.Properties.Appearance.BackColor = System.Drawing.Color.AliceBlue;
            this.edtSucheLA.Properties.Appearance.BorderColor = System.Drawing.Color.Linen;
            this.edtSucheLA.Properties.Appearance.Font = new System.Drawing.Font("Arial", 13F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Pixel);
            this.edtSucheLA.Properties.Appearance.Options.UseBackColor = true;
            this.edtSucheLA.Properties.Appearance.Options.UseBorderColor = true;
            this.edtSucheLA.Properties.Appearance.Options.UseFont = true;
            this.edtSucheLA.Properties.BorderStyle = DevExpress.XtraEditors.Controls.BorderStyles.HotFlat;
            serializableAppearanceObject7.BackColor = System.Drawing.Color.Bisque;
            serializableAppearanceObject7.Options.UseBackColor = true;
            this.edtSucheLA.Properties.Buttons.AddRange(new DevExpress.XtraEditors.Controls.EditorButton[] {
            new DevExpress.XtraEditors.Controls.EditorButton(DevExpress.XtraEditors.Controls.ButtonPredefines.Ellipsis, "", -1, true, true, false, DevExpress.Utils.HorzAlignment.Center, null, new DevExpress.Utils.KeyShortcut(System.Windows.Forms.Keys.None), serializableAppearanceObject7)});
            this.edtSucheLA.Properties.ButtonsStyle = DevExpress.XtraEditors.Controls.BorderStyles.UltraFlat;
            this.edtSucheLA.Size = new System.Drawing.Size(257, 24);
            this.edtSucheLA.TabIndex = 6;
            this.edtSucheLA.UserModifiedFld += new KiSS4.Gui.UserModifiedFldEventHandler(this.edtSucheLA_UserModifiedFld);
            //
            // edtSucheBuchungstext
            //
            this.edtSucheBuchungstext.Location = new System.Drawing.Point(464, 90);
            this.edtSucheBuchungstext.Name = "edtSucheBuchungstext";
            this.edtSucheBuchungstext.Properties.Appearance.BackColor = System.Drawing.Color.AliceBlue;
            this.edtSucheBuchungstext.Properties.Appearance.BorderColor = System.Drawing.Color.Linen;
            this.edtSucheBuchungstext.Properties.Appearance.Font = new System.Drawing.Font("Arial", 13F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Pixel);
            this.edtSucheBuchungstext.Properties.Appearance.Options.UseBackColor = true;
            this.edtSucheBuchungstext.Properties.Appearance.Options.UseBorderColor = true;
            this.edtSucheBuchungstext.Properties.Appearance.Options.UseFont = true;
            this.edtSucheBuchungstext.Properties.BorderStyle = DevExpress.XtraEditors.Controls.BorderStyles.HotFlat;
            this.edtSucheBuchungstext.Size = new System.Drawing.Size(257, 24);
            this.edtSucheBuchungstext.TabIndex = 7;
            //
            // edtSucheNurKorrigierte
            //
            this.edtSucheNurKorrigierte.EditValue = false;
            this.edtSucheNurKorrigierte.Location = new System.Drawing.Point(462, 125);
            this.edtSucheNurKorrigierte.Name = "edtSucheNurKorrigierte";
            this.edtSucheNurKorrigierte.Properties.Appearance.BackColor = System.Drawing.Color.Transparent;
            this.edtSucheNurKorrigierte.Properties.Appearance.Options.UseBackColor = true;
            this.edtSucheNurKorrigierte.Properties.Caption = "nur stornierte";
            this.edtSucheNurKorrigierte.Size = new System.Drawing.Size(99, 19);
            this.edtSucheNurKorrigierte.TabIndex = 8;
            //
            // lblLeistungsart
            //
            this.lblLeistungsart.Location = new System.Drawing.Point(368, 60);
            this.lblLeistungsart.Name = "lblLeistungsart";
            this.lblLeistungsart.Size = new System.Drawing.Size(93, 24);
            this.lblLeistungsart.TabIndex = 10;
            this.lblLeistungsart.Text = "Leistungsart";
            this.lblLeistungsart.UseCompatibleTextRendering = true;
            //
            // kissLabel11
            //
            this.kissLabel11.Location = new System.Drawing.Point(368, 90);
            this.kissLabel11.Name = "kissLabel11";
            this.kissLabel11.Size = new System.Drawing.Size(84, 24);
            this.kissLabel11.TabIndex = 34;
            this.kissLabel11.Text = "Buchungstext";
            this.kissLabel11.UseCompatibleTextRendering = true;
            //
            // kissLabel2
            //
            this.kissLabel2.Location = new System.Drawing.Point(6, 30);
            this.kissLabel2.Name = "kissLabel2";
            this.kissLabel2.Size = new System.Drawing.Size(93, 24);
            this.kissLabel2.TabIndex = 37;
            this.kissLabel2.Text = "KiSS Fall-Nr.";
            this.kissLabel2.UseCompatibleTextRendering = true;
            //
            // kissLabel4
            //
            this.kissLabel4.Location = new System.Drawing.Point(210, 121);
            this.kissLabel4.Name = "kissLabel4";
            this.kissLabel4.Size = new System.Drawing.Size(22, 24);
            this.kissLabel4.TabIndex = 41;
            this.kissLabel4.Text = "bis";
            this.kissLabel4.UseCompatibleTextRendering = true;
            //
            // kissLabel1
            //
            this.kissLabel1.Location = new System.Drawing.Point(6, 121);
            this.kissLabel1.Name = "kissLabel1";
            this.kissLabel1.Size = new System.Drawing.Size(90, 24);
            this.kissLabel1.TabIndex = 42;
            this.kissLabel1.Text = "Belegdatum von";
            this.kissLabel1.UseCompatibleTextRendering = true;
            //
            // kissLabel13
            //
            this.kissLabel13.Location = new System.Drawing.Point(6, 90);
            this.kissLabel13.Name = "kissLabel13";
            this.kissLabel13.Size = new System.Drawing.Size(84, 24);
            this.kissLabel13.TabIndex = 44;
            this.kissLabel13.Text = "Beleg-Nr";
            this.kissLabel13.UseCompatibleTextRendering = true;
            //
            // kissLabel14
            //
            this.kissLabel14.Location = new System.Drawing.Point(6, 61);
            this.kissLabel14.Name = "kissLabel14";
            this.kissLabel14.Size = new System.Drawing.Size(84, 24);
            this.kissLabel14.TabIndex = 46;
            this.kissLabel14.Text = "Nummernkreis";
            this.kissLabel14.UseCompatibleTextRendering = true;
            //
            // edtValutaDatum
            //
            this.edtValutaDatum.EditValue = null;
            this.edtValutaDatum.Location = new System.Drawing.Point(112, 3);
            this.edtValutaDatum.Name = "edtValutaDatum";
            this.edtValutaDatum.Properties.AllowNullInput = DevExpress.Utils.DefaultBoolean.True;
            this.edtValutaDatum.Properties.Appearance.BackColor = System.Drawing.Color.AliceBlue;
            this.edtValutaDatum.Properties.Appearance.BorderColor = System.Drawing.Color.Linen;
            this.edtValutaDatum.Properties.Appearance.Font = new System.Drawing.Font("Arial", 13F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Pixel);
            this.edtValutaDatum.Properties.Appearance.Options.UseBackColor = true;
            this.edtValutaDatum.Properties.Appearance.Options.UseBorderColor = true;
            this.edtValutaDatum.Properties.Appearance.Options.UseFont = true;
            this.edtValutaDatum.Properties.BorderStyle = DevExpress.XtraEditors.Controls.BorderStyles.HotFlat;
            serializableAppearanceObject3.BackColor = System.Drawing.Color.Bisque;
            serializableAppearanceObject3.Options.UseBackColor = true;
            this.edtValutaDatum.Properties.Buttons.AddRange(new DevExpress.XtraEditors.Controls.EditorButton[] {
            new DevExpress.XtraEditors.Controls.EditorButton(DevExpress.XtraEditors.Controls.ButtonPredefines.Glyph, "", 8, true, true, false, DevExpress.Utils.HorzAlignment.Center, ((System.Drawing.Image)(resources.GetObject("edtValutaDatum.Properties.Buttons"))), new DevExpress.Utils.KeyShortcut(System.Windows.Forms.Keys.None), serializableAppearanceObject3)});
            this.edtValutaDatum.Properties.ButtonsStyle = DevExpress.XtraEditors.Controls.BorderStyles.UltraFlat;
            this.edtValutaDatum.Properties.ShowToday = false;
            this.edtValutaDatum.Size = new System.Drawing.Size(100, 24);
            this.edtValutaDatum.TabIndex = 0;
            //
            // chkQuoting
            //
            this.chkQuoting.DataMember = "Quoting";
            this.chkQuoting.DataSource = this.qryKbBuchungBrutto;
            this.chkQuoting.EditMode = Kiss.Interfaces.UI.EditModeType.ReadOnly;
            this.chkQuoting.Location = new System.Drawing.Point(360, 125);
            this.chkQuoting.Name = "chkQuoting";
            this.chkQuoting.Properties.Appearance.BackColor = System.Drawing.Color.Transparent;
            this.chkQuoting.Properties.Appearance.Options.UseBackColor = true;
            this.chkQuoting.Properties.Caption = "Quoting";
            this.chkQuoting.Properties.ReadOnly = true;
            this.chkQuoting.Size = new System.Drawing.Size(66, 19);
            this.chkQuoting.TabIndex = 7;
            this.chkQuoting.CheckedChanged += new System.EventHandler(this.chkQuoting_CheckedChanged);
            //
            // edtLT
            //
            this.edtLT.DataMember = "LT";
            this.edtLT.DataSource = this.qryKbBuchungBrutto;
            this.edtLT.Location = new System.Drawing.Point(112, 33);
            this.edtLT.Name = "edtLT";
            this.edtLT.Properties.Appearance.BackColor = System.Drawing.Color.AliceBlue;
            this.edtLT.Properties.Appearance.BorderColor = System.Drawing.Color.Linen;
            this.edtLT.Properties.Appearance.Font = new System.Drawing.Font("Arial", 13F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Pixel);
            this.edtLT.Properties.Appearance.Options.UseBackColor = true;
            this.edtLT.Properties.Appearance.Options.UseBorderColor = true;
            this.edtLT.Properties.Appearance.Options.UseFont = true;
            this.edtLT.Properties.BorderStyle = DevExpress.XtraEditors.Controls.BorderStyles.HotFlat;
            serializableAppearanceObject4.BackColor = System.Drawing.Color.Bisque;
            serializableAppearanceObject4.Options.UseBackColor = true;
            this.edtLT.Properties.Buttons.AddRange(new DevExpress.XtraEditors.Controls.EditorButton[] {
            new DevExpress.XtraEditors.Controls.EditorButton(DevExpress.XtraEditors.Controls.ButtonPredefines.Ellipsis, "", -1, true, true, false, DevExpress.Utils.HorzAlignment.Center, null, new DevExpress.Utils.KeyShortcut(System.Windows.Forms.Keys.None), serializableAppearanceObject4)});
            this.edtLT.Properties.ButtonsStyle = DevExpress.XtraEditors.Controls.BorderStyles.UltraFlat;
            this.edtLT.Size = new System.Drawing.Size(262, 24);
            this.edtLT.TabIndex = 1;
            this.edtLT.UserModifiedFld += new KiSS4.Gui.UserModifiedFldEventHandler(this.edtLT_UserModifiedFld);
            //
            // edtBgKostenartID
            //
            this.edtBgKostenartID.DataMember = "BgKostenart";
            this.edtBgKostenartID.DataSource = this.qryKbBuchungBrutto;
            this.edtBgKostenartID.Location = new System.Drawing.Point(112, 93);
            this.edtBgKostenartID.Name = "edtBgKostenartID";
            this.edtBgKostenartID.Properties.Appearance.BackColor = System.Drawing.Color.AliceBlue;
            this.edtBgKostenartID.Properties.Appearance.BorderColor = System.Drawing.Color.Linen;
            this.edtBgKostenartID.Properties.Appearance.Font = new System.Drawing.Font("Arial", 13F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Pixel);
            this.edtBgKostenartID.Properties.Appearance.Options.UseBackColor = true;
            this.edtBgKostenartID.Properties.Appearance.Options.UseBorderColor = true;
            this.edtBgKostenartID.Properties.Appearance.Options.UseFont = true;
            this.edtBgKostenartID.Properties.BorderStyle = DevExpress.XtraEditors.Controls.BorderStyles.HotFlat;
            serializableAppearanceObject5.BackColor = System.Drawing.Color.Bisque;
            serializableAppearanceObject5.Options.UseBackColor = true;
            this.edtBgKostenartID.Properties.Buttons.AddRange(new DevExpress.XtraEditors.Controls.EditorButton[] {
            new DevExpress.XtraEditors.Controls.EditorButton(DevExpress.XtraEditors.Controls.ButtonPredefines.Ellipsis, "", -1, true, true, false, DevExpress.Utils.HorzAlignment.Center, null, new DevExpress.Utils.KeyShortcut(System.Windows.Forms.Keys.None), serializableAppearanceObject5)});
            this.edtBgKostenartID.Properties.ButtonsStyle = DevExpress.XtraEditors.Controls.BorderStyles.UltraFlat;
            this.edtBgKostenartID.Size = new System.Drawing.Size(262, 24);
            this.edtBgKostenartID.TabIndex = 3;
            this.edtBgKostenartID.UserModifiedFld += new KiSS4.Gui.UserModifiedFldEventHandler(this.edtBgKostenartID_UserModifiedFld);
            //
            // edtBetrifftPerson
            //
            this.edtBetrifftPerson.AllowDrop = true;
            this.edtBetrifftPerson.DataMember = "BetrifftPerson";
            this.edtBetrifftPerson.DataSource = this.qryKbBuchungBrutto;
            this.edtBetrifftPerson.Location = new System.Drawing.Point(112, 63);
            this.edtBetrifftPerson.Name = "edtBetrifftPerson";
            this.edtBetrifftPerson.Properties.Appearance.BackColor = System.Drawing.Color.AliceBlue;
            this.edtBetrifftPerson.Properties.Appearance.BorderColor = System.Drawing.Color.Linen;
            this.edtBetrifftPerson.Properties.Appearance.Font = new System.Drawing.Font("Arial", 13F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Pixel);
            this.edtBetrifftPerson.Properties.Appearance.Options.UseBackColor = true;
            this.edtBetrifftPerson.Properties.Appearance.Options.UseBorderColor = true;
            this.edtBetrifftPerson.Properties.Appearance.Options.UseFont = true;
            this.edtBetrifftPerson.Properties.BorderStyle = DevExpress.XtraEditors.Controls.BorderStyles.HotFlat;
            serializableAppearanceObject6.BackColor = System.Drawing.Color.Bisque;
            serializableAppearanceObject6.Options.UseBackColor = true;
            this.edtBetrifftPerson.Properties.Buttons.AddRange(new DevExpress.XtraEditors.Controls.EditorButton[] {
            new DevExpress.XtraEditors.Controls.EditorButton(DevExpress.XtraEditors.Controls.ButtonPredefines.Ellipsis, "", -1, true, true, false, DevExpress.Utils.HorzAlignment.Center, null, new DevExpress.Utils.KeyShortcut(System.Windows.Forms.Keys.None), serializableAppearanceObject6)});
            this.edtBetrifftPerson.Properties.ButtonsStyle = DevExpress.XtraEditors.Controls.BorderStyles.UltraFlat;
            this.edtBetrifftPerson.Size = new System.Drawing.Size(262, 24);
            this.edtBetrifftPerson.TabIndex = 2;
            this.edtBetrifftPerson.UserModifiedFld += new KiSS4.Gui.UserModifiedFldEventHandler(this.edtBetrifftPerson_UserModifiedFld);
            //
            // pnlBuchungstext
            //
            this.pnlBuchungstext.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Left)
                        | System.Windows.Forms.AnchorStyles.Right)));
            this.pnlBuchungstext.Controls.Add(this.edtTextVariabel);
            this.pnlBuchungstext.Controls.Add(this.edtTextFix);
            this.pnlBuchungstext.Location = new System.Drawing.Point(496, 3);
            this.pnlBuchungstext.Name = "pnlBuchungstext";
            this.pnlBuchungstext.Size = new System.Drawing.Size(397, 28);
            this.pnlBuchungstext.TabIndex = 9;
            //
            // edtTextVariabel
            //
            this.edtTextVariabel.DataMember = "TextVariabel";
            this.edtTextVariabel.DataSource = this.qryKbBuchungBrutto;
            this.edtTextVariabel.Dock = System.Windows.Forms.DockStyle.Fill;
            this.edtTextVariabel.Location = new System.Drawing.Point(117, 0);
            this.edtTextVariabel.Name = "edtTextVariabel";
            this.edtTextVariabel.Properties.Appearance.BackColor = System.Drawing.Color.AliceBlue;
            this.edtTextVariabel.Properties.Appearance.BorderColor = System.Drawing.Color.Linen;
            this.edtTextVariabel.Properties.Appearance.Font = new System.Drawing.Font("Arial", 13F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Pixel);
            this.edtTextVariabel.Properties.Appearance.Options.UseBackColor = true;
            this.edtTextVariabel.Properties.Appearance.Options.UseBorderColor = true;
            this.edtTextVariabel.Properties.Appearance.Options.UseFont = true;
            this.edtTextVariabel.Properties.BorderStyle = DevExpress.XtraEditors.Controls.BorderStyles.HotFlat;
            this.edtTextVariabel.Size = new System.Drawing.Size(280, 24);
            this.edtTextVariabel.TabIndex = 1;
            this.edtTextVariabel.Leave += new System.EventHandler(this.edtTextVariabel_Leave);
            //
            // edtTextFix
            //
            this.edtTextFix.DataMember = "TextFix";
            this.edtTextFix.DataSource = this.qryKbBuchungBrutto;
            this.edtTextFix.Dock = System.Windows.Forms.DockStyle.Left;
            this.edtTextFix.EditMode = Kiss.Interfaces.UI.EditModeType.ReadOnly;
            this.edtTextFix.Location = new System.Drawing.Point(0, 0);
            this.edtTextFix.Name = "edtTextFix";
            this.edtTextFix.Properties.Appearance.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(247)))), ((int)(((byte)(239)))), ((int)(((byte)(231)))));
            this.edtTextFix.Properties.Appearance.BorderColor = System.Drawing.Color.Linen;
            this.edtTextFix.Properties.Appearance.Font = new System.Drawing.Font("Arial", 13F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Pixel);
            this.edtTextFix.Properties.Appearance.Options.UseBackColor = true;
            this.edtTextFix.Properties.Appearance.Options.UseBorderColor = true;
            this.edtTextFix.Properties.Appearance.Options.UseFont = true;
            this.edtTextFix.Properties.BorderStyle = DevExpress.XtraEditors.Controls.BorderStyles.HotFlat;
            this.edtTextFix.Properties.ReadOnly = true;
            this.edtTextFix.Size = new System.Drawing.Size(117, 24);
            this.edtTextFix.TabIndex = 0;
            this.edtTextFix.TabStop = false;
            //
            // qryKbBuchungBruttoPerson
            //
            this.qryKbBuchungBruttoPerson.BatchUpdate = true;
            this.qryKbBuchungBruttoPerson.CanDelete = true;
            this.qryKbBuchungBruttoPerson.CanInsert = true;
            this.qryKbBuchungBruttoPerson.CanUpdate = true;
            this.qryKbBuchungBruttoPerson.HostControl = this;
            this.qryKbBuchungBruttoPerson.SelectStatement = resources.GetString("qryKbBuchungBruttoPerson.SelectStatement");
            //
            // kissLabel6
            //
            this.kissLabel6.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Left)
                        | System.Windows.Forms.AnchorStyles.Right)));
            this.kissLabel6.DataMember = "ZusatzText";
            this.kissLabel6.DataSource = this.qryMigDetailBuchung;
            this.kissLabel6.Font = new System.Drawing.Font("Arial", 12F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Pixel);
            this.kissLabel6.LabelStyle = KiSS4.Gui.LabelStyleType.Custom;
            this.kissLabel6.Location = new System.Drawing.Point(115, 218);
            this.kissLabel6.Name = "kissLabel6";
            this.kissLabel6.Size = new System.Drawing.Size(642, 15);
            this.kissLabel6.TabIndex = 7;
            this.kissLabel6.UseCompatibleTextRendering = true;
            //
            // edtBetrag
            //
            this.edtBetrag.DataMember = "Betrag";
            this.edtBetrag.DataSource = this.qryKbBuchungBrutto;
            this.edtBetrag.Location = new System.Drawing.Point(496, 33);
            this.edtBetrag.Name = "edtBetrag";
            this.edtBetrag.Properties.AllowNullInput = DevExpress.Utils.DefaultBoolean.True;
            this.edtBetrag.Properties.Appearance.BackColor = System.Drawing.Color.AliceBlue;
            this.edtBetrag.Properties.Appearance.BorderColor = System.Drawing.Color.Linen;
            this.edtBetrag.Properties.Appearance.Font = new System.Drawing.Font("Arial", 13F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Pixel);
            this.edtBetrag.Properties.Appearance.Options.UseBackColor = true;
            this.edtBetrag.Properties.Appearance.Options.UseBorderColor = true;
            this.edtBetrag.Properties.Appearance.Options.UseFont = true;
            this.edtBetrag.Properties.BorderStyle = DevExpress.XtraEditors.Controls.BorderStyles.HotFlat;
            this.edtBetrag.Properties.ButtonsStyle = DevExpress.XtraEditors.Controls.BorderStyles.UltraFlat;
            this.edtBetrag.Properties.DisplayFormat.FormatString = "N2";
            this.edtBetrag.Properties.DisplayFormat.FormatType = DevExpress.Utils.FormatType.Numeric;
            this.edtBetrag.Properties.EditFormat.FormatString = "N2";
            this.edtBetrag.Properties.EditFormat.FormatType = DevExpress.Utils.FormatType.Numeric;
            this.edtBetrag.Size = new System.Drawing.Size(100, 24);
            this.edtBetrag.TabIndex = 10;
            this.edtBetrag.Leave += new System.EventHandler(this.edtBetrag_Leave);
            //
            // btnAusführen
            //
            this.btnAusführen.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Right)));
            this.btnAusführen.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
            this.btnAusführen.Location = new System.Drawing.Point(810, 552);
            this.btnAusführen.Name = "btnAusführen";
            this.btnAusführen.Size = new System.Drawing.Size(100, 24);
            this.btnAusführen.TabIndex = 0;
            this.btnAusführen.Text = "Ausführen";
            this.btnAusführen.UseCompatibleTextRendering = true;
            this.btnAusführen.UseVisualStyleBackColor = false;
            this.btnAusführen.Click += new System.EventHandler(this.btnAusführen_Click);
            //
            // ctlGotoFall1
            //
            this.ctlGotoFall1.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Right)));
            this.ctlGotoFall1.BaPersonID = ((object)(resources.GetObject("ctlGotoFall1.BaPersonID")));
            this.ctlGotoFall1.DataMember = "FallBaPersonID";
            this.ctlGotoFall1.DataSource = this.qryMigDetailBuchung;
            this.ctlGotoFall1.Location = new System.Drawing.Point(802, 247);
            this.ctlGotoFall1.Name = "ctlGotoFall1";
            this.ctlGotoFall1.Size = new System.Drawing.Size(111, 25);
            this.ctlGotoFall1.TabIndex = 424;
            //
            // lblKorrektur
            //
            this.lblKorrektur.LabelStyle = KiSS4.Gui.LabelStyleType.TitleLabel;
            this.lblKorrektur.Location = new System.Drawing.Point(5, 253);
            this.lblKorrektur.Name = "lblKorrektur";
            this.lblKorrektur.Size = new System.Drawing.Size(388, 19);
            this.lblKorrektur.TabIndex = 425;
            this.lblKorrektur.Text = "STO / NEU-Buchungen";
            this.lblKorrektur.UseCompatibleTextRendering = true;
            //
            // lblValutaDatum
            //
            this.lblValutaDatum.Location = new System.Drawing.Point(6, 3);
            this.lblValutaDatum.Name = "lblValutaDatum";
            this.lblValutaDatum.Size = new System.Drawing.Size(100, 23);
            this.lblValutaDatum.TabIndex = 449;
            this.lblValutaDatum.Text = "Valutadatum";
            this.lblValutaDatum.UseCompatibleTextRendering = true;
            //
            // lblKlient
            //
            this.lblKlient.Location = new System.Drawing.Point(6, 33);
            this.lblKlient.Name = "lblKlient";
            this.lblKlient.Size = new System.Drawing.Size(100, 23);
            this.lblKlient.TabIndex = 452;
            this.lblKlient.Text = "LT";
            this.lblKlient.UseCompatibleTextRendering = true;
            //
            // lblBetrifftPerson
            //
            this.lblBetrifftPerson.Location = new System.Drawing.Point(6, 63);
            this.lblBetrifftPerson.Name = "lblBetrifftPerson";
            this.lblBetrifftPerson.Size = new System.Drawing.Size(99, 24);
            this.lblBetrifftPerson.TabIndex = 455;
            this.lblBetrifftPerson.Text = "Betrifft Person";
            this.lblBetrifftPerson.UseCompatibleTextRendering = true;
            //
            // kissLabel5
            //
            this.kissLabel5.Location = new System.Drawing.Point(6, 93);
            this.kissLabel5.Name = "kissLabel5";
            this.kissLabel5.Size = new System.Drawing.Size(99, 24);
            this.kissLabel5.TabIndex = 456;
            this.kissLabel5.Text = "Leistungsart";
            this.kissLabel5.UseCompatibleTextRendering = true;
            //
            // edtHauptvorgang
            //
            this.edtHauptvorgang.DataMember = "Hauptvorgang";
            this.edtHauptvorgang.DataSource = this.qryKbBuchungBrutto;
            this.edtHauptvorgang.EditMode = Kiss.Interfaces.UI.EditModeType.ReadOnly;
            this.edtHauptvorgang.Location = new System.Drawing.Point(112, 123);
            this.edtHauptvorgang.Name = "edtHauptvorgang";
            this.edtHauptvorgang.Properties.AllowNullInput = DevExpress.Utils.DefaultBoolean.True;
            this.edtHauptvorgang.Properties.Appearance.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(247)))), ((int)(((byte)(239)))), ((int)(((byte)(231)))));
            this.edtHauptvorgang.Properties.Appearance.BorderColor = System.Drawing.Color.Linen;
            this.edtHauptvorgang.Properties.Appearance.Font = new System.Drawing.Font("Arial", 13F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Pixel);
            this.edtHauptvorgang.Properties.Appearance.Options.UseBackColor = true;
            this.edtHauptvorgang.Properties.Appearance.Options.UseBorderColor = true;
            this.edtHauptvorgang.Properties.Appearance.Options.UseFont = true;
            this.edtHauptvorgang.Properties.BorderStyle = DevExpress.XtraEditors.Controls.BorderStyles.HotFlat;
            this.edtHauptvorgang.Properties.ButtonsStyle = DevExpress.XtraEditors.Controls.BorderStyles.UltraFlat;
            this.edtHauptvorgang.Properties.ReadOnly = true;
            this.edtHauptvorgang.Size = new System.Drawing.Size(73, 24);
            this.edtHauptvorgang.TabIndex = 4;
            this.edtHauptvorgang.TabStop = false;
            //
            // edtTeilvorgang
            //
            this.edtTeilvorgang.DataMember = "Teilvorgang";
            this.edtTeilvorgang.DataSource = this.qryKbBuchungBrutto;
            this.edtTeilvorgang.EditMode = Kiss.Interfaces.UI.EditModeType.ReadOnly;
            this.edtTeilvorgang.Location = new System.Drawing.Point(191, 123);
            this.edtTeilvorgang.Name = "edtTeilvorgang";
            this.edtTeilvorgang.Properties.AllowNullInput = DevExpress.Utils.DefaultBoolean.True;
            this.edtTeilvorgang.Properties.Appearance.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(247)))), ((int)(((byte)(239)))), ((int)(((byte)(231)))));
            this.edtTeilvorgang.Properties.Appearance.BorderColor = System.Drawing.Color.Linen;
            this.edtTeilvorgang.Properties.Appearance.Font = new System.Drawing.Font("Arial", 13F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Pixel);
            this.edtTeilvorgang.Properties.Appearance.Options.UseBackColor = true;
            this.edtTeilvorgang.Properties.Appearance.Options.UseBorderColor = true;
            this.edtTeilvorgang.Properties.Appearance.Options.UseFont = true;
            this.edtTeilvorgang.Properties.BorderStyle = DevExpress.XtraEditors.Controls.BorderStyles.HotFlat;
            this.edtTeilvorgang.Properties.ButtonsStyle = DevExpress.XtraEditors.Controls.BorderStyles.UltraFlat;
            this.edtTeilvorgang.Properties.ReadOnly = true;
            this.edtTeilvorgang.Size = new System.Drawing.Size(73, 24);
            this.edtTeilvorgang.TabIndex = 5;
            this.edtTeilvorgang.TabStop = false;
            //
            // edtAbtretung
            //
            this.edtAbtretung.DataMember = "Abgetreten";
            this.edtAbtretung.DataSource = this.qryKbBuchungBrutto;
            this.edtAbtretung.Location = new System.Drawing.Point(270, 125);
            this.edtAbtretung.Name = "edtAbtretung";
            this.edtAbtretung.Properties.Appearance.BackColor = System.Drawing.Color.Transparent;
            this.edtAbtretung.Properties.Appearance.Options.UseBackColor = true;
            this.edtAbtretung.Properties.Caption = "Abgetreten";
            this.edtAbtretung.Size = new System.Drawing.Size(84, 19);
            this.edtAbtretung.TabIndex = 6;
            this.edtAbtretung.TabStop = false;
            this.edtAbtretung.EditValueChanged += new System.EventHandler(this.edtAbretung_EditValueChanged);
            //
            // lblHauptvorgang
            //
            this.lblHauptvorgang.Location = new System.Drawing.Point(6, 125);
            this.lblHauptvorgang.Name = "lblHauptvorgang";
            this.lblHauptvorgang.Size = new System.Drawing.Size(100, 23);
            this.lblHauptvorgang.TabIndex = 460;
            this.lblHauptvorgang.Text = "Haupt-/Teilvorgang";
            this.lblHauptvorgang.UseCompatibleTextRendering = true;
            //
            // lblBuchungstextKorr
            //
            this.lblBuchungstextKorr.Location = new System.Drawing.Point(389, 3);
            this.lblBuchungstextKorr.Name = "lblBuchungstextKorr";
            this.lblBuchungstextKorr.Size = new System.Drawing.Size(100, 23);
            this.lblBuchungstextKorr.TabIndex = 462;
            this.lblBuchungstextKorr.Text = "Buchungstext";
            this.lblBuchungstextKorr.UseCompatibleTextRendering = true;
            //
            // lblFallNr
            //
            this.lblFallNr.Location = new System.Drawing.Point(389, 93);
            this.lblFallNr.Name = "lblFallNr";
            this.lblFallNr.Size = new System.Drawing.Size(78, 24);
            this.lblFallNr.TabIndex = 465;
            this.lblFallNr.Text = "KiSS Fall-Nr.";
            this.lblFallNr.UseCompatibleTextRendering = true;
            //
            // edtFaFallID
            //
            this.edtFaFallID.DataMember = "FaFallID";
            this.edtFaFallID.DataSource = this.qryKbBuchungBrutto;
            this.edtFaFallID.EditMode = Kiss.Interfaces.UI.EditModeType.ReadOnly;
            this.edtFaFallID.Location = new System.Drawing.Point(496, 93);
            this.edtFaFallID.Name = "edtFaFallID";
            this.edtFaFallID.Properties.AllowNullInput = DevExpress.Utils.DefaultBoolean.True;
            this.edtFaFallID.Properties.Appearance.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(247)))), ((int)(((byte)(239)))), ((int)(((byte)(231)))));
            this.edtFaFallID.Properties.Appearance.BorderColor = System.Drawing.Color.Linen;
            this.edtFaFallID.Properties.Appearance.Font = new System.Drawing.Font("Arial", 13F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Pixel);
            this.edtFaFallID.Properties.Appearance.Options.UseBackColor = true;
            this.edtFaFallID.Properties.Appearance.Options.UseBorderColor = true;
            this.edtFaFallID.Properties.Appearance.Options.UseFont = true;
            this.edtFaFallID.Properties.BorderStyle = DevExpress.XtraEditors.Controls.BorderStyles.HotFlat;
            this.edtFaFallID.Properties.ButtonsStyle = DevExpress.XtraEditors.Controls.BorderStyles.UltraFlat;
            this.edtFaFallID.Properties.ReadOnly = true;
            this.edtFaFallID.Size = new System.Drawing.Size(73, 24);
            this.edtFaFallID.TabIndex = 14;
            this.edtFaFallID.TabStop = false;
            //
            // lblBetragKorr
            //
            this.lblBetragKorr.Location = new System.Drawing.Point(389, 33);
            this.lblBetragKorr.Name = "lblBetragKorr";
            this.lblBetragKorr.Size = new System.Drawing.Size(100, 23);
            this.lblBetragKorr.TabIndex = 467;
            this.lblBetragKorr.Text = "Betrag";
            this.lblBetragKorr.UseCompatibleTextRendering = true;
            //
            // lblVerwPerVonKorr
            //
            this.lblVerwPerVonKorr.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left)));
            this.lblVerwPerVonKorr.Location = new System.Drawing.Point(391, 529);
            this.lblVerwPerVonKorr.Name = "lblVerwPerVonKorr";
            this.lblVerwPerVonKorr.Size = new System.Drawing.Size(137, 24);
            this.lblVerwPerVonKorr.TabIndex = 468;
            this.lblVerwPerVonKorr.Text = "Verwendungsperiode von";
            this.lblVerwPerVonKorr.UseCompatibleTextRendering = true;
            //
            // lblVerwPerBisKorr
            //
            this.lblVerwPerBisKorr.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left)));
            this.lblVerwPerBisKorr.Location = new System.Drawing.Point(634, 529);
            this.lblVerwPerBisKorr.Name = "lblVerwPerBisKorr";
            this.lblVerwPerBisKorr.Size = new System.Drawing.Size(18, 24);
            this.lblVerwPerBisKorr.TabIndex = 469;
            this.lblVerwPerBisKorr.Text = "bis";
            this.lblVerwPerBisKorr.UseCompatibleTextRendering = true;
            //
            // edtSplittingart
            //
            this.edtSplittingart.DataMember = "Splittingart";
            this.edtSplittingart.DataSource = this.qryKbBuchungBrutto;
            this.edtSplittingart.EditMode = Kiss.Interfaces.UI.EditModeType.ReadOnly;
            this.edtSplittingart.Location = new System.Drawing.Point(740, 63);
            this.edtSplittingart.Name = "edtSplittingart";
            this.edtSplittingart.Properties.Appearance.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(247)))), ((int)(((byte)(239)))), ((int)(((byte)(231)))));
            this.edtSplittingart.Properties.Appearance.BorderColor = System.Drawing.Color.Linen;
            this.edtSplittingart.Properties.Appearance.Font = new System.Drawing.Font("Arial", 13F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Pixel);
            this.edtSplittingart.Properties.Appearance.Options.UseBackColor = true;
            this.edtSplittingart.Properties.Appearance.Options.UseBorderColor = true;
            this.edtSplittingart.Properties.Appearance.Options.UseFont = true;
            this.edtSplittingart.Properties.BorderStyle = DevExpress.XtraEditors.Controls.BorderStyles.HotFlat;
            this.edtSplittingart.Properties.ReadOnly = true;
            this.edtSplittingart.Size = new System.Drawing.Size(20, 24);
            this.edtSplittingart.TabIndex = 13;
            this.edtSplittingart.TabStop = false;
            this.edtSplittingart.ToolTip = "Splittingart";
            //
            // label2
            //
            this.label2.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Right)));
            this.label2.Location = new System.Drawing.Point(763, 218);
            this.label2.Name = "label2";
            this.label2.Size = new System.Drawing.Size(115, 23);
            this.label2.TabIndex = 574;
            this.label2.Text = "Anzahl Datensätze:";
            this.label2.UseCompatibleTextRendering = true;
            //
            // lblRowCount
            //
            this.lblRowCount.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Right)));
            this.lblRowCount.Location = new System.Drawing.Point(875, 218);
            this.lblRowCount.Name = "lblRowCount";
            this.lblRowCount.Size = new System.Drawing.Size(41, 15);
            this.lblRowCount.TabIndex = 575;
            this.lblRowCount.Text = "0";
            this.lblRowCount.UseCompatibleTextRendering = true;
            //
            // tabKorrektur
            //
            this.tabKorrektur.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left)
                        | System.Windows.Forms.AnchorStyles.Right)));
            this.tabKorrektur.Controls.Add(this.tabKorrekturKopf);
            this.tabKorrektur.Controls.Add(this.tabKorrekturDetailBuchungen);
            this.tabKorrektur.FixedWidth = 150;
            this.tabKorrektur.Location = new System.Drawing.Point(5, 385);
            this.tabKorrektur.Name = "tabKorrektur";
            this.tabKorrektur.ShowClose = false;
            this.tabKorrektur.ShowFixedWidthTooltip = true;
            this.tabKorrektur.Size = new System.Drawing.Size(911, 189);
            this.tabKorrektur.TabIndex = 576;
            this.tabKorrektur.TabPages.AddRange(new SharpLibrary.WinControls.TabPageEx[] {
            this.tabKorrekturKopf,
            this.tabKorrekturDetailBuchungen});
            this.tabKorrektur.TabsFitting = SharpLibrary.WinControls.TabsFitting.FixedWidth;
            this.tabKorrektur.TabsLineColor = System.Drawing.Color.Black;
            this.tabKorrektur.TabsStyle = SharpLibrary.WinControls.TabsStyle.Flat;
            this.tabKorrektur.Text = "tabKorrektur";
            //
            // tabKorrekturKopf
            //
            this.tabKorrekturKopf.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Left)
                        | System.Windows.Forms.AnchorStyles.Right)));
            this.tabKorrekturKopf.Controls.Add(this.edtFaLeistungID);
            this.tabKorrekturKopf.Controls.Add(this.edtVerwPeriodeVon);
            this.tabKorrekturKopf.Controls.Add(this.edtVerwPeriodeBis);
            this.tabKorrekturKopf.Controls.Add(this.kissLabel8);
            this.tabKorrekturKopf.Controls.Add(this.kissLabel7);
            this.tabKorrekturKopf.Controls.Add(this.btnHaushalt);
            this.tabKorrekturKopf.Controls.Add(this.lblValutaDatum);
            this.tabKorrekturKopf.Controls.Add(this.edtValutaDatum);
            this.tabKorrekturKopf.Controls.Add(this.chkQuoting);
            this.tabKorrekturKopf.Controls.Add(this.edtLT);
            this.tabKorrekturKopf.Controls.Add(this.edtBgKostenartID);
            this.tabKorrekturKopf.Controls.Add(this.edtBetrifftPerson);
            this.tabKorrekturKopf.Controls.Add(this.edtSplittingart);
            this.tabKorrekturKopf.Controls.Add(this.lblVerwPerBisKorr);
            this.tabKorrekturKopf.Controls.Add(this.pnlBuchungstext);
            this.tabKorrekturKopf.Controls.Add(this.lblBetragKorr);
            this.tabKorrekturKopf.Controls.Add(this.edtBetrag);
            this.tabKorrekturKopf.Controls.Add(this.edtFaFallID);
            this.tabKorrekturKopf.Controls.Add(this.lblKlient);
            this.tabKorrekturKopf.Controls.Add(this.lblFallNr);
            this.tabKorrekturKopf.Controls.Add(this.lblBetrifftPerson);
            this.tabKorrekturKopf.Controls.Add(this.lblBuchungstextKorr);
            this.tabKorrekturKopf.Controls.Add(this.kissLabel5);
            this.tabKorrekturKopf.Controls.Add(this.lblHauptvorgang);
            this.tabKorrekturKopf.Controls.Add(this.edtHauptvorgang);
            this.tabKorrekturKopf.Controls.Add(this.edtAbtretung);
            this.tabKorrekturKopf.Controls.Add(this.edtTeilvorgang);
            this.tabKorrekturKopf.Location = new System.Drawing.Point(6, 6);
            this.tabKorrekturKopf.Name = "tabKorrekturKopf";
            this.tabKorrekturKopf.Padding = new System.Windows.Forms.Padding(3);
            this.tabKorrekturKopf.Size = new System.Drawing.Size(899, 151);
            this.tabKorrekturKopf.TabIndex = 0;
            this.tabKorrekturKopf.Title = "STO/NEU Belegkopf";
            //
            // edtFaLeistungID
            //
            this.edtFaLeistungID.DataMember = "FaLeistungID";
            this.edtFaLeistungID.DataSource = this.qryKbBuchungBrutto;
            this.edtFaLeistungID.EditMode = Kiss.Interfaces.UI.EditModeType.ReadOnly;
            this.edtFaLeistungID.Location = new System.Drawing.Point(575, 93);
            this.edtFaLeistungID.Name = "edtFaLeistungID";
            this.edtFaLeistungID.Properties.AllowNullInput = DevExpress.Utils.DefaultBoolean.True;
            this.edtFaLeistungID.Properties.Appearance.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(247)))), ((int)(((byte)(239)))), ((int)(((byte)(231)))));
            this.edtFaLeistungID.Properties.Appearance.BorderColor = System.Drawing.Color.Linen;
            this.edtFaLeistungID.Properties.Appearance.Font = new System.Drawing.Font("Arial", 13F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Pixel);
            this.edtFaLeistungID.Properties.Appearance.Options.UseBackColor = true;
            this.edtFaLeistungID.Properties.Appearance.Options.UseBorderColor = true;
            this.edtFaLeistungID.Properties.Appearance.Options.UseFont = true;
            this.edtFaLeistungID.Properties.BorderStyle = DevExpress.XtraEditors.Controls.BorderStyles.HotFlat;
            this.edtFaLeistungID.Properties.ButtonsStyle = DevExpress.XtraEditors.Controls.BorderStyles.UltraFlat;
            this.edtFaLeistungID.Properties.ReadOnly = true;
            this.edtFaLeistungID.Size = new System.Drawing.Size(100, 24);
            this.edtFaLeistungID.TabIndex = 577;
            this.edtFaLeistungID.TabStop = false;
            //
            // edtVerwPeriodeVon
            //
            this.edtVerwPeriodeVon.DataMember = "VerwPeriodeVon";
            this.edtVerwPeriodeVon.DataSource = this.qryKbBuchungBrutto;
            this.edtVerwPeriodeVon.EditValue = null;
            this.edtVerwPeriodeVon.Location = new System.Drawing.Point(496, 63);
            this.edtVerwPeriodeVon.Name = "edtVerwPeriodeVon";
            this.edtVerwPeriodeVon.Properties.AllowNullInput = DevExpress.Utils.DefaultBoolean.True;
            this.edtVerwPeriodeVon.Properties.Appearance.BackColor = System.Drawing.Color.AliceBlue;
            this.edtVerwPeriodeVon.Properties.Appearance.BorderColor = System.Drawing.Color.Linen;
            this.edtVerwPeriodeVon.Properties.Appearance.Font = new System.Drawing.Font("Arial", 13F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Pixel);
            this.edtVerwPeriodeVon.Properties.Appearance.Options.UseBackColor = true;
            this.edtVerwPeriodeVon.Properties.Appearance.Options.UseBorderColor = true;
            this.edtVerwPeriodeVon.Properties.Appearance.Options.UseFont = true;
            this.edtVerwPeriodeVon.Properties.BorderStyle = DevExpress.XtraEditors.Controls.BorderStyles.HotFlat;
            serializableAppearanceObject1.BackColor = System.Drawing.Color.Bisque;
            serializableAppearanceObject1.Options.UseBackColor = true;
            this.edtVerwPeriodeVon.Properties.Buttons.AddRange(new DevExpress.XtraEditors.Controls.EditorButton[] {
            new DevExpress.XtraEditors.Controls.EditorButton(DevExpress.XtraEditors.Controls.ButtonPredefines.Glyph, "", 8, true, true, false, DevExpress.Utils.HorzAlignment.Center, ((System.Drawing.Image)(resources.GetObject("edtVerwPeriodeVon.Properties.Buttons"))), new DevExpress.Utils.KeyShortcut(System.Windows.Forms.Keys.None), serializableAppearanceObject1)});
            this.edtVerwPeriodeVon.Properties.ButtonsStyle = DevExpress.XtraEditors.Controls.BorderStyles.UltraFlat;
            this.edtVerwPeriodeVon.Properties.ShowToday = false;
            this.edtVerwPeriodeVon.Size = new System.Drawing.Size(100, 24);
            this.edtVerwPeriodeVon.TabIndex = 11;
            this.edtVerwPeriodeVon.Leave += new System.EventHandler(this.edtVerwPeriodeVon_Leave);
            //
            // edtVerwPeriodeBis
            //
            this.edtVerwPeriodeBis.DataMember = "VerwPeriodeBis";
            this.edtVerwPeriodeBis.DataSource = this.qryKbBuchungBrutto;
            this.edtVerwPeriodeBis.EditValue = null;
            this.edtVerwPeriodeBis.Location = new System.Drawing.Point(623, 63);
            this.edtVerwPeriodeBis.Name = "edtVerwPeriodeBis";
            this.edtVerwPeriodeBis.Properties.AllowNullInput = DevExpress.Utils.DefaultBoolean.True;
            this.edtVerwPeriodeBis.Properties.Appearance.BackColor = System.Drawing.Color.AliceBlue;
            this.edtVerwPeriodeBis.Properties.Appearance.BorderColor = System.Drawing.Color.Linen;
            this.edtVerwPeriodeBis.Properties.Appearance.Font = new System.Drawing.Font("Arial", 13F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Pixel);
            this.edtVerwPeriodeBis.Properties.Appearance.Options.UseBackColor = true;
            this.edtVerwPeriodeBis.Properties.Appearance.Options.UseBorderColor = true;
            this.edtVerwPeriodeBis.Properties.Appearance.Options.UseFont = true;
            this.edtVerwPeriodeBis.Properties.BorderStyle = DevExpress.XtraEditors.Controls.BorderStyles.HotFlat;
            serializableAppearanceObject2.BackColor = System.Drawing.Color.Bisque;
            serializableAppearanceObject2.Options.UseBackColor = true;
            this.edtVerwPeriodeBis.Properties.Buttons.AddRange(new DevExpress.XtraEditors.Controls.EditorButton[] {
            new DevExpress.XtraEditors.Controls.EditorButton(DevExpress.XtraEditors.Controls.ButtonPredefines.Glyph, "", 8, true, true, false, DevExpress.Utils.HorzAlignment.Center, ((System.Drawing.Image)(resources.GetObject("edtVerwPeriodeBis.Properties.Buttons"))), new DevExpress.Utils.KeyShortcut(System.Windows.Forms.Keys.None), serializableAppearanceObject2)});
            this.edtVerwPeriodeBis.Properties.ButtonsStyle = DevExpress.XtraEditors.Controls.BorderStyles.UltraFlat;
            this.edtVerwPeriodeBis.Properties.ShowToday = false;
            this.edtVerwPeriodeBis.Size = new System.Drawing.Size(100, 24);
            this.edtVerwPeriodeBis.TabIndex = 12;
            this.edtVerwPeriodeBis.Leave += new System.EventHandler(this.edtVerwPeriodeBis_Leave);
            //
            // kissLabel8
            //
            this.kissLabel8.Location = new System.Drawing.Point(602, 63);
            this.kissLabel8.Name = "kissLabel8";
            this.kissLabel8.Size = new System.Drawing.Size(26, 24);
            this.kissLabel8.TabIndex = 580;
            this.kissLabel8.Text = "bis";
            this.kissLabel8.UseCompatibleTextRendering = true;
            //
            // kissLabel7
            //
            this.kissLabel7.Location = new System.Drawing.Point(389, 64);
            this.kissLabel7.Name = "kissLabel7";
            this.kissLabel7.Size = new System.Drawing.Size(100, 23);
            this.kissLabel7.TabIndex = 579;
            this.kissLabel7.Text = "Verw. Per. von";
            this.kissLabel7.UseCompatibleTextRendering = true;
            //
            // btnHaushalt
            //
            this.btnHaushalt.Enabled = false;
            this.btnHaushalt.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
            this.btnHaushalt.Location = new System.Drawing.Point(429, 123);
            this.btnHaushalt.Name = "btnHaushalt";
            this.btnHaushalt.Size = new System.Drawing.Size(80, 24);
            this.btnHaushalt.TabIndex = 15;
            this.btnHaushalt.Text = "Haushalt...";
            this.btnHaushalt.UseCompatibleTextRendering = true;
            this.btnHaushalt.UseVisualStyleBackColor = false;
            this.btnHaushalt.Click += new System.EventHandler(this.btnHaushalt_Click);
            //
            // tabKorrekturDetailBuchungen
            //
            this.tabKorrekturDetailBuchungen.Controls.Add(this.grdKbBuchungBruttoPerson);
            this.tabKorrekturDetailBuchungen.Location = new System.Drawing.Point(6, 6);
            this.tabKorrekturDetailBuchungen.Name = "tabKorrekturDetailBuchungen";
            this.tabKorrekturDetailBuchungen.Padding = new System.Windows.Forms.Padding(3);
            this.tabKorrekturDetailBuchungen.Size = new System.Drawing.Size(899, 151);
            this.tabKorrekturDetailBuchungen.TabIndex = 1;
            this.tabKorrekturDetailBuchungen.Title = "STO/NEU Positionen";
            //
            // grdKbBuchungBruttoPerson
            //
            this.grdKbBuchungBruttoPerson.DataSource = this.qryKbBuchungBruttoPerson;
            this.grdKbBuchungBruttoPerson.Dock = System.Windows.Forms.DockStyle.Fill;
            //
            //
            //
            this.grdKbBuchungBruttoPerson.EmbeddedNavigator.Name = "";
            this.grdKbBuchungBruttoPerson.GridStyle = KiSS4.Gui.GridStyleType.ReadOnly;
            this.grdKbBuchungBruttoPerson.Location = new System.Drawing.Point(3, 3);
            this.grdKbBuchungBruttoPerson.MainView = this.gridView2;
            this.grdKbBuchungBruttoPerson.Name = "grdKbBuchungBruttoPerson";
            this.grdKbBuchungBruttoPerson.RepositoryItems.AddRange(new DevExpress.XtraEditors.Repository.RepositoryItem[] {
            this.repositoryItemImageComboBox2});
            this.grdKbBuchungBruttoPerson.Size = new System.Drawing.Size(893, 145);
            this.grdKbBuchungBruttoPerson.TabIndex = 1;
            this.grdKbBuchungBruttoPerson.ViewCollection.AddRange(new DevExpress.XtraGrid.Views.Base.BaseView[] {
            this.gridView2});
            //
            // gridView2
            //
            this.gridView2.Appearance.Empty.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(247)))), ((int)(((byte)(239)))), ((int)(((byte)(231)))));
            this.gridView2.Appearance.Empty.Font = new System.Drawing.Font("Arial", 12F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Pixel);
            this.gridView2.Appearance.Empty.Options.UseBackColor = true;
            this.gridView2.Appearance.Empty.Options.UseFont = true;
            this.gridView2.Appearance.EvenRow.Font = new System.Drawing.Font("Arial", 12F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Pixel);
            this.gridView2.Appearance.EvenRow.Options.UseFont = true;
            this.gridView2.Appearance.FocusedCell.BackColor = System.Drawing.SystemColors.Highlight;
            this.gridView2.Appearance.FocusedCell.Font = new System.Drawing.Font("Arial", 12F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Pixel);
            this.gridView2.Appearance.FocusedCell.ForeColor = System.Drawing.Color.White;
            this.gridView2.Appearance.FocusedCell.Options.UseBackColor = true;
            this.gridView2.Appearance.FocusedCell.Options.UseFont = true;
            this.gridView2.Appearance.FocusedCell.Options.UseForeColor = true;
            this.gridView2.Appearance.FocusedRow.BackColor = System.Drawing.SystemColors.Highlight;
            this.gridView2.Appearance.FocusedRow.Font = new System.Drawing.Font("Arial", 12F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Pixel);
            this.gridView2.Appearance.FocusedRow.ForeColor = System.Drawing.Color.White;
            this.gridView2.Appearance.FocusedRow.Options.UseBackColor = true;
            this.gridView2.Appearance.FocusedRow.Options.UseFont = true;
            this.gridView2.Appearance.FocusedRow.Options.UseForeColor = true;
            this.gridView2.Appearance.GroupPanel.BackColor = System.Drawing.Color.PeachPuff;
            this.gridView2.Appearance.GroupPanel.Options.UseBackColor = true;
            this.gridView2.Appearance.GroupRow.BackColor = System.Drawing.Color.PeachPuff;
            this.gridView2.Appearance.GroupRow.Font = new System.Drawing.Font("Arial", 12F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Pixel, ((byte)(0)));
            this.gridView2.Appearance.GroupRow.ForeColor = System.Drawing.SystemColors.WindowText;
            this.gridView2.Appearance.GroupRow.Options.UseBackColor = true;
            this.gridView2.Appearance.GroupRow.Options.UseFont = true;
            this.gridView2.Appearance.GroupRow.Options.UseForeColor = true;
            this.gridView2.Appearance.HeaderPanel.BackColor = System.Drawing.Color.Tan;
            this.gridView2.Appearance.HeaderPanel.BorderColor = System.Drawing.Color.Tan;
            this.gridView2.Appearance.HeaderPanel.Font = new System.Drawing.Font("Arial", 11F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Pixel, ((byte)(0)));
            this.gridView2.Appearance.HeaderPanel.Options.UseBackColor = true;
            this.gridView2.Appearance.HeaderPanel.Options.UseBorderColor = true;
            this.gridView2.Appearance.HeaderPanel.Options.UseFont = true;
            this.gridView2.Appearance.HideSelectionRow.BackColor = System.Drawing.Color.PowderBlue;
            this.gridView2.Appearance.HideSelectionRow.Font = new System.Drawing.Font("Arial", 12F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Pixel);
            this.gridView2.Appearance.HideSelectionRow.ForeColor = System.Drawing.SystemColors.WindowText;
            this.gridView2.Appearance.HideSelectionRow.Options.UseBackColor = true;
            this.gridView2.Appearance.HideSelectionRow.Options.UseFont = true;
            this.gridView2.Appearance.HideSelectionRow.Options.UseForeColor = true;
            this.gridView2.Appearance.HorzLine.BackColor = System.Drawing.Color.Silver;
            this.gridView2.Appearance.HorzLine.Options.UseBackColor = true;
            this.gridView2.Appearance.OddRow.Font = new System.Drawing.Font("Arial", 12F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Pixel);
            this.gridView2.Appearance.OddRow.Options.UseFont = true;
            this.gridView2.Appearance.Row.BackColor = System.Drawing.Color.BlanchedAlmond;
            this.gridView2.Appearance.Row.Font = new System.Drawing.Font("Arial", 12F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Pixel);
            this.gridView2.Appearance.Row.Options.UseBackColor = true;
            this.gridView2.Appearance.Row.Options.UseFont = true;
            this.gridView2.Appearance.SelectedRow.Font = new System.Drawing.Font("Arial", 12F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Pixel);
            this.gridView2.Appearance.SelectedRow.Options.UseFont = true;
            this.gridView2.Appearance.VertLine.BackColor = System.Drawing.Color.Silver;
            this.gridView2.Appearance.VertLine.Options.UseBackColor = true;
            this.gridView2.BorderStyle = DevExpress.XtraEditors.Controls.BorderStyles.UltraFlat;
            this.gridView2.Columns.AddRange(new DevExpress.XtraGrid.Columns.GridColumn[] {
            this.colDetPerson,
            this.colDetBaPersonID,
            this.colDetBuchungstext,
            this.colDetBetrag,
            this.colDetVerwPeriodeVon,
            this.colDetVerwPeriodeBis});
            this.gridView2.FocusRectStyle = DevExpress.XtraGrid.Views.Grid.DrawFocusRectStyle.None;
            this.gridView2.GridControl = this.grdKbBuchungBruttoPerson;
            this.gridView2.Name = "gridView2";
            this.gridView2.OptionsBehavior.Editable = false;
            this.gridView2.OptionsCustomization.AllowFilter = false;
            this.gridView2.OptionsFilter.UseNewCustomFilterDialog = true;
            this.gridView2.OptionsNavigation.AutoFocusNewRow = true;
            this.gridView2.OptionsNavigation.UseTabKey = false;
            this.gridView2.OptionsView.ColumnAutoWidth = false;
            this.gridView2.OptionsView.ShowFilterPanelMode = DevExpress.XtraGrid.Views.Base.ShowFilterPanelMode.Never;
            this.gridView2.OptionsView.ShowGroupPanel = false;
            this.gridView2.OptionsView.ShowIndicator = false;
            //
            // colDetPerson
            //
            this.colDetPerson.Caption = "Person";
            this.colDetPerson.FieldName = "Person";
            this.colDetPerson.Name = "colDetPerson";
            this.colDetPerson.Visible = true;
            this.colDetPerson.VisibleIndex = 0;
            this.colDetPerson.Width = 184;
            //
            // colDetBaPersonID
            //
            this.colDetBaPersonID.Caption = "Pers-Nr.";
            this.colDetBaPersonID.FieldName = "BaPersonID";
            this.colDetBaPersonID.Name = "colDetBaPersonID";
            this.colDetBaPersonID.Visible = true;
            this.colDetBaPersonID.VisibleIndex = 1;
            this.colDetBaPersonID.Width = 57;
            //
            // colDetBuchungstext
            //
            this.colDetBuchungstext.Caption = "Buchungstext";
            this.colDetBuchungstext.FieldName = "Text";
            this.colDetBuchungstext.Name = "colDetBuchungstext";
            this.colDetBuchungstext.Visible = true;
            this.colDetBuchungstext.VisibleIndex = 2;
            this.colDetBuchungstext.Width = 204;
            //
            // colDetBetrag
            //
            this.colDetBetrag.Caption = "Betrag";
            this.colDetBetrag.DisplayFormat.FormatString = "n2";
            this.colDetBetrag.DisplayFormat.FormatType = DevExpress.Utils.FormatType.Numeric;
            this.colDetBetrag.FieldName = "Betrag";
            this.colDetBetrag.Name = "colDetBetrag";
            this.colDetBetrag.SummaryItem.DisplayFormat = "{0:n2}";
            this.colDetBetrag.SummaryItem.SummaryType = DevExpress.Data.SummaryItemType.Sum;
            this.colDetBetrag.Visible = true;
            this.colDetBetrag.VisibleIndex = 3;
            this.colDetBetrag.Width = 91;
            //
            // colDetVerwPeriodeVon
            //
            this.colDetVerwPeriodeVon.Caption = "Verw.  von";
            this.colDetVerwPeriodeVon.FieldName = "VerwPeriodeVon";
            this.colDetVerwPeriodeVon.Name = "colDetVerwPeriodeVon";
            this.colDetVerwPeriodeVon.Visible = true;
            this.colDetVerwPeriodeVon.VisibleIndex = 4;
            //
            // colDetVerwPeriodeBis
            //
            this.colDetVerwPeriodeBis.Caption = "Verw. bis";
            this.colDetVerwPeriodeBis.FieldName = "VerwPeriodeBis";
            this.colDetVerwPeriodeBis.Name = "colDetVerwPeriodeBis";
            this.colDetVerwPeriodeBis.Visible = true;
            this.colDetVerwPeriodeBis.VisibleIndex = 5;
            //
            // repositoryItemImageComboBox2
            //
            this.repositoryItemImageComboBox2.AutoHeight = false;
            this.repositoryItemImageComboBox2.Buttons.AddRange(new DevExpress.XtraEditors.Controls.EditorButton[] {
            new DevExpress.XtraEditors.Controls.EditorButton(DevExpress.XtraEditors.Controls.ButtonPredefines.Combo)});
            this.repositoryItemImageComboBox2.GlyphAlignment = DevExpress.Utils.HorzAlignment.Center;
            this.repositoryItemImageComboBox2.Name = "repositoryItemImageComboBox2";
            //
            // CtlKbBelegKorrekturAltdaten
            //
            this.ActiveSQLQuery = this.qryMigDetailBuchung;
            this.Controls.Add(this.btnAusführen);
            this.Controls.Add(this.tabKorrektur);
            this.Controls.Add(this.lblRowCount);
            this.Controls.Add(this.ctlGotoFall1);
            this.Controls.Add(this.label2);
            this.Controls.Add(this.kissLabel6);
            this.Controls.Add(this.panTitel);
            this.Controls.Add(this.grdKbBuchungBrutto);
            this.Controls.Add(this.lblKorrektur);
            this.Name = "CtlKbBelegKorrekturAltdaten";
            this.Size = new System.Drawing.Size(919, 584);
            this.Load += new System.EventHandler(this.CtlKbBelegKorrekturAltdaten_Load);
            this.Controls.SetChildIndex(this.tabControlSearch, 0);
            this.Controls.SetChildIndex(this.lblKorrektur, 0);
            this.Controls.SetChildIndex(this.grdKbBuchungBrutto, 0);
            this.Controls.SetChildIndex(this.panTitel, 0);
            this.Controls.SetChildIndex(this.kissLabel6, 0);
            this.Controls.SetChildIndex(this.label2, 0);
            this.Controls.SetChildIndex(this.ctlGotoFall1, 0);
            this.Controls.SetChildIndex(this.lblRowCount, 0);
            this.Controls.SetChildIndex(this.tabKorrektur, 0);
            this.Controls.SetChildIndex(this.btnAusführen, 0);
            this.tabControlSearch.ResumeLayout(false);
            this.tpgListe.ResumeLayout(false);
            this.tpgSuchen.ResumeLayout(false);
            ((System.ComponentModel.ISupportInitialize)(this.grvKbBuchungBruttoSuche)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(this.grdKontoauszug)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(this.qryMigDetailBuchung)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(this.grvKbBuchungKostenartBrutto)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(this.grvDetail)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(this.grdKbBuchungBrutto)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(this.qryKbBuchungBrutto)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(this.gridView1)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(this.repositoryItemImageComboBox1)).EndInit();
            this.panTitel.ResumeLayout(false);
            ((System.ComponentModel.ISupportInitialize)(this.picTitel)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(this.lblTitel)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(this.edtSucheFaFallID.Properties)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(this.edtSucheNummernkreis.Properties)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(this.lblKonto)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(this.edtSucheBelegNr.Properties)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(this.edtSucheBuchungsDatumVon.Properties)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(this.edtSucheBuchungsDatumBis.Properties)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(this.edtSucheBetrifftPerson.Properties)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(this.edtSucheLA.Properties)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(this.edtSucheBuchungstext.Properties)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(this.edtSucheNurKorrigierte.Properties)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(this.lblLeistungsart)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(this.kissLabel11)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(this.kissLabel2)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(this.kissLabel4)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(this.kissLabel1)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(this.kissLabel13)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(this.kissLabel14)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(this.edtValutaDatum.Properties)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(this.chkQuoting.Properties)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(this.edtLT.Properties)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(this.edtBgKostenartID.Properties)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(this.edtBetrifftPerson.Properties)).EndInit();
            this.pnlBuchungstext.ResumeLayout(false);
            ((System.ComponentModel.ISupportInitialize)(this.edtTextVariabel.Properties)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(this.edtTextFix.Properties)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(this.qryKbBuchungBruttoPerson)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(this.kissLabel6)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(this.edtBetrag.Properties)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(this.lblKorrektur)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(this.lblValutaDatum)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(this.lblKlient)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(this.lblBetrifftPerson)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(this.kissLabel5)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(this.edtHauptvorgang.Properties)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(this.edtTeilvorgang.Properties)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(this.edtAbtretung.Properties)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(this.lblHauptvorgang)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(this.lblBuchungstextKorr)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(this.lblFallNr)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(this.edtFaFallID.Properties)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(this.lblBetragKorr)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(this.lblVerwPerVonKorr)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(this.lblVerwPerBisKorr)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(this.edtSplittingart.Properties)).EndInit();
            this.tabKorrektur.ResumeLayout(false);
            this.tabKorrekturKopf.ResumeLayout(false);
            ((System.ComponentModel.ISupportInitialize)(this.edtFaLeistungID.Properties)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(this.edtVerwPeriodeVon.Properties)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(this.edtVerwPeriodeBis.Properties)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(this.kissLabel8)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(this.kissLabel7)).EndInit();
            this.tabKorrekturDetailBuchungen.ResumeLayout(false);
            ((System.ComponentModel.ISupportInitialize)(this.grdKbBuchungBruttoPerson)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(this.gridView2)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(this.repositoryItemImageComboBox2)).EndInit();
            this.ResumeLayout(false);
        }

        #endregion

        #region Dispose

        /// <summary>
        /// Clean up any resources being used.
        /// </summary>
        protected override void Dispose(bool disposing)
        {
            if (disposing)
            {
                if ((components != null))
                {
                    components.Dispose();
                }
            }
            base.Dispose(disposing);
        }

        #endregion

        #region EventHandlers

        private void CtlKbBelegKorrekturAltdaten_Load(object sender, System.EventArgs e)
        {
            //Buchungsstati laden
            repositoryItemImageComboBox1.SmallImages = KissImageList.SmallImageList;
            SqlQuery qryStati = DBUtil.OpenSQL("select * from XLOVCode where LOVName = 'KbBuchungsStatus' order by SortKey");
            foreach (DataRow R in qryStati.DataTable.Rows)
            {
                repositoryItemImageComboBox1.Items.Add(new DevExpress.XtraEditors.Controls.ImageComboBoxItem(
                    R["Text"].ToString(),
                    (int)R["Code"],
                    KissImageList.GetImageIndex(Convert.ToInt32(R["Value1"]))));
            }
            colKbBuchungStatusCode.ColumnEdit = repositoryItemImageComboBox1;

            BelegeKorrigierenTemporaryTableHelper.InitTemporaryKbBuchungBruttoPersonTable();

            tabControlSearch.SelectTab(tpgSuchen);
        }

        private void btnHaushalt_Click(object sender, EventArgs e)
        {
            if (SelectHaushalt(false))
            {
                RecreateDetailBuchungen(true);
            }
        }

        private void edtBetrag_Leave(object sender, EventArgs e)
        {
            CheckBetrag();
        }

        private void CheckBetrag()
        {
            if (edtBetrag.EditMode != EditModeType.ReadOnly
                && !DBUtil.IsEmpty(edtBetrag.EditValue)
                && (DBUtil.IsEmpty(qryKbBuchungBrutto["Betrag"]) || (decimal)edtBetrag.EditValue != (decimal)qryKbBuchungBrutto["Betrag"]))
            {
                // Das Feld ist editierbar, und der Betrag wurde verändert
                qryKbBuchungBrutto["Betrag"] = edtBetrag.EditValue;
                RecreateDetailBuchungen(true);
            }
        }

        private void edtBetrifftPerson_UserModifiedFld(object sender, KiSS4.Gui.UserModifiedFldEventArgs e)
        {
            string SearchString = edtBetrifftPerson.Text.Replace("*", "%").Replace("?", "_").Replace(" ", "%");

            if (DBUtil.IsEmpty(SearchString))
            {
                if (e.ButtonClicked)
                {
                    SearchString = "%";
                }
                else
                {
                    qryKbBuchungBrutto["BetrifftPerson"] = DBNull.Value;
                    qryKbBuchungBrutto["BetrifftBaPersonID"] = DBNull.Value;
                    return;
                }
            }

            KissLookupDialog dlg = new KissLookupDialog();
            e.Cancel = !dlg.SearchData(@"
                SELECT DISTINCT
                    ID = PRS.BaPersonID,
                    PRS.Name,
                    PRS.Vorname,
                    BaPersonID$ = PRS.BaPersonID,
                    NameVorname$ = PRS.NameVorname + ' (' + convert(varchar,PRS.BaPersonID) + ')'
                FROM vwPerson           PRS
                    INNER JOIN BgFinanzplan_BaPerson FPP ON FPP.BaPersonID = PRS.BaPersonID
                    INNER JOIN BgFinanzplan  FPL ON FPL.BgFinanzplanID = FPP.BgFinanzplanID
                    INNER JOIN FaLeistung    LEI ON LEI.FaLeistungID = FPL.FaLeistungID
                WHERE LEI.FaProzessCode = 300 AND IstUnterstuetzt = 1 AND LEI.BaPersonID = {1}
                ORDER BY PRS.Name, PRS.Vorname
                ", "", e.ButtonClicked, qryKbBuchungBrutto["LTBaPersonID"]);

            if (!e.Cancel)
            {
                qryKbBuchungBrutto["BetrifftPerson"] = dlg["NameVorname$"];
                qryKbBuchungBrutto["BetrifftBaPersonID"] = dlg["BaPersonID$"];
                RecreateDetailBuchungen(true);
            }
        }

        private void edtBgKostenartID_UserModifiedFld(object sender, KiSS4.Gui.UserModifiedFldEventArgs e)
        {
            string SearchString = edtBgKostenartID.Text.Replace("*", "%").Replace("?", "_").Replace(" ", "%");

            if (DBUtil.IsEmpty(SearchString))
            {
                if (e.ButtonClicked)
                {
                    SearchString = "%";
                }
                else
                {
                    edtBgKostenartID.EditValue = DBNull.Value;
                    edtBgKostenartID.LookupID = DBNull.Value;
                    return;
                }
            }

            KissLookupDialog dlg = new KissLookupDialog();
            e.Cancel = !dlg.SearchData(@"
                SELECT KontoNr, Name,
                  BgKostenartID$      = BgKostenartID,
                  KontoNrName$        = KontoNr + ' ' + Name,
                  Hauptvorgang$       = Hauptvorgang,
                  Teilvorgang$        = Teilvorgang,
                  HauptvorgangAbgetreten$       = HauptvorgangAbtretung,
                  TeilvorgangAbgetreten$        = TeilvorgangAbtretung,
                  Belegart$           = Belegart,
                  BgSplittingArtCode$ = BgSplittingArtCode,
                  SplittingArt$       = SPL.ShortText,
                  Weiterverrechenbar$ = Weiterverrechenbar,
                  Quoting             = Quoting
                FROM BgKostenart     BKA
                  LEFT JOIN XLOVCode SPL ON SPL.LOVName = 'BgSplittingart' AND SPL.Code = BKA.BgSplittingartCode
                WHERE ModulID = 3
                  AND ((Hauptvorgang IS NOT NULL AND Teilvorgang IS NOT NULL) OR (HauptvorgangAbtretung IS NOT NULL AND TeilvorgangAbtretung IS NOT NULL))
                  AND (KontoNr LIKE '%' + {0} + '%' OR Name LIKE '%' + {0} + '%')

                ORDER BY 1, 2
                ", SearchString, e.ButtonClicked);

            if (!e.Cancel)
            {
                qryKbBuchungBrutto["BgKostenartID"] = dlg["BgKostenartID$"];
                qryKbBuchungBrutto["KontoNr"] = dlg["KontoNr"];
                qryKbBuchungBrutto["BgKostenart"] = dlg["KontoNrName$"];
                if (qryKbBuchungBrutto["Abgetreten"] as bool? ?? false)
                {
                    qryKbBuchungBrutto["Hauptvorgang"] = dlg["HauptvorgangAbgetreten$"];
                    qryKbBuchungBrutto["Teilvorgang"] = dlg["TeilvorgangAbgetreten$"];
                }
                else
                {
                    qryKbBuchungBrutto["Hauptvorgang"] = dlg["Hauptvorgang$"];
                    qryKbBuchungBrutto["Teilvorgang"] = dlg["Teilvorgang$"];
                }
                qryKbBuchungBrutto["BgKostenartHauptvorgang"] = dlg["Hauptvorgang$"];
                qryKbBuchungBrutto["BgKostenartTeilvorgang"] = dlg["Teilvorgang$"];
                qryKbBuchungBrutto["BgKostenartHauptvorgangAbtretung"] = dlg["HauptvorgangAbgetreten$"];
                qryKbBuchungBrutto["BgKostenartTeilvorgangAbtretung"] = dlg["TeilvorgangAbgetreten$"];

                qryKbBuchungBrutto["Belegart"] = dlg["Belegart$"];
                qryKbBuchungBrutto["BgSplittingArtCode"] = dlg["BgSplittingArtCode$"];
                qryKbBuchungBrutto["Weiterverrechenbar"] = dlg["Weiterverrechenbar$"];
                qryKbBuchungBrutto["Quoting"] = dlg["Quoting"];
                qryKbBuchungBrutto["SplittingArt"] = dlg["SplittingArt$"];
                SetSplittingArt(dlg["BgSplittingArtCode$"]);

                if ((bool)qryKbBuchungBrutto["Quoting"])
                {
                    // Stelle sicher, dass der Haushalt nochmals gewählt wird
                    qryKbBuchungBrutto["BgFinanzplanID"] = DBNull.Value;
                    qryKbBuchungBrutto["SelectedHaushaltProleistPersonenIDs"] = DBNull.Value;
                }

                RecreateDetailBuchungen(true);

                EnableHaushaltButton();
            }
        }

        private void edtLT_UserModifiedFld(object sender, KiSS4.Gui.UserModifiedFldEventArgs e)
        {
            string SearchString = edtLT.Text.Replace("*", "%").Replace("?", "_").Replace(" ", "%");

            if (DBUtil.IsEmpty(SearchString))
            {
                if (e.ButtonClicked)
                {
                    SearchString = "%";
                }
                else
                {
                    edtLT.EditValue = DBNull.Value;
                    edtLT.LookupID = DBNull.Value;
                    return;
                }
            }

            KissLookupDialog dlg = new KissLookupDialog();

            if (SearchString == "." && !DBUtil.IsEmpty(qryMigDetailBuchung["FaFallID"]))
            {
                // Zeige alle W-LT dieses Falles an
                e.Cancel = !dlg.SearchData(@"
                    SELECT DISTINCT
                      ID = PRS.BaPersonID,
                      PRS.Name,
                      PRS.Vorname,
                      LeistungID = LEI.FaLeistungID,
                      DatumVon = LEI.DatumVon,
                      DatumBis = LEI.DatumBis,
                      BaPersonID$ = PRS.BaPersonID,
                      NameVorname$ = PRS.NameVorname + ' (' + convert(varchar,PRS.BaPersonID) + ')'
                    FROM FaLeistung LEI
                      INNER JOIN vwPerson PRS ON PRS.BaPersonID = LEI.BaPersonID
                    WHERE LEI.FaFallID = {1} AND LEI.FaProzessCode = 300    -- 300=W-Leistungen
                    ORDER BY PRS.Name, PRS.Vorname
                    ", SearchString, e.ButtonClicked, qryMigDetailBuchung["FaFallID"]);

                if (e.Cancel) return;

                qryKbBuchungBrutto["Kostenstelle"] = qryMigDetailBuchung["Kostenstelle"];
                qryKbBuchungBrutto["FaLeistungID"] = dlg["LeistungID"];
                qryKbBuchungBrutto["FaFallID"] = qryMigDetailBuchung["FaFallID"];
            }
            else
            {
                // Irgendeinen LT auswählen
                e.Cancel = !dlg.SearchData(@"
                    SELECT DISTINCT
                        ID = PRS.BaPersonID,
                        PRS.Name,
                        PRS.Vorname,
                        LeistungID = LEI.FaLeistungID,
                        DatumVon = LEI.DatumVon,
                        DatumBis = LEI.DatumBis,
                        BaPersonID$ = PRS.BaPersonID,
                        NameVorname$ = PRS.NameVorname + ' (' + convert(varchar,PRS.BaPersonID) + ')',
                        Fall = LEI.FaFallID
                    FROM FaLeistung LEI
                        INNER JOIN vwPerson PRS ON PRS.BaPersonID = LEI.BaPersonID
                        INNER JOIN BgFinanzplan FIP ON FIP.FaLeistungID = LEI.FaLeistungID
                    WHERE (PRS.NameVorname LIKE '%' + {0} + '%' OR CAST(PRS.BaPersonID as varchar) = {0})
                        AND LEI.FaProzessCode = 300
                    ORDER BY PRS.Name, PRS.Vorname
                    ", SearchString, e.ButtonClicked);

                if (e.Cancel) return;

                qryKbBuchungBrutto["FaLeistungID"] = dlg["LeistungID"];
                qryKbBuchungBrutto["FaFallID"] = dlg["Fall"];
                qryKbBuchungBrutto["BetrifftPerson"] = DBNull.Value;
                qryKbBuchungBrutto["BetrifftBaPersonID"] = DBNull.Value;
            }

            qryKbBuchungBrutto["LTBaPersonID"] = dlg["BaPersonID$"];
            qryKbBuchungBrutto["LT"] = dlg["NameVorname$"];

            // Haushalt auswählen
            if (chkQuoting.Checked)
            {
                SelectHaushalt(false);
            }

            RecreateDetailBuchungen(true);
        }

        private void edtSucheBetrifftPerson_UserModifiedFld(object sender, KiSS4.Gui.UserModifiedFldEventArgs e)
        {
            string SearchString = edtSucheBetrifftPerson.Text.Replace("*", "%").Replace("?", "_").Replace(" ", "%");

            if (DBUtil.IsEmpty(SearchString))
            {
                if (e.ButtonClicked)
                {
                    SearchString = "%";
                }
                else
                {
                    qryKbBuchungBrutto["BetrifftPerson"] = DBNull.Value;
                    qryKbBuchungBrutto["BetrifftBaPersonID"] = DBNull.Value;
                    return;
                }
            }
            KissLookupDialog dlg = new KissLookupDialog();
            e.Cancel = !dlg.SearchData(@"
                SELECT DISTINCT ID = PRS.BaPersonID, PRS.Name, PRS.Vorname,
                  BaPersonID$ = PRS.BaPersonID, NrNameVorname$ = CONVERT(varchar,PRS.BaPersonID) + ' ' + PRS.NameVorname
                FROM vwPerson           PRS
                     inner join dbo.MigDetailBuchung BUC on BUC.BaPersonID = PRS.BaPersonID
                WHERE (PRS.NameVorname LIKE '%' + {0} + '%' OR CAST(PRS.BaPersonID as varchar) = {0})
                ORDER BY PRS.Name, PRS.Vorname
                ", SearchString, e.ButtonClicked);

            if (!e.Cancel)
            {
                edtSucheBetrifftPerson.EditValue = dlg["NrNameVorname$"];
                edtSucheBetrifftPerson.LookupID = dlg["BaPersonID$"];
            }
        }

        private void edtSucheLA_UserModifiedFld(object sender, KiSS4.Gui.UserModifiedFldEventArgs e)
        {
            string SearchString = edtSucheLA.Text.Replace("*", "%").Replace("?", "_").Replace(" ", "%");

            KissLookupDialog dlg = new KissLookupDialog();
            if (e.ButtonClicked || !DBUtil.IsEmpty(SearchString))
            {
                if (DBUtil.IsEmpty(SearchString))
                    SearchString = "%";

                e.Cancel = !dlg.SearchData(@"
                    select Nr                  = BKA.KontoNr,
                           Leistungsart        = BKA.Name,
                           Splitting           = SPL.Text,
                           Quoting             = BKA.Quoting,
                           WV                  = BKA.Weiterverrechenbar,
                           BgKostenartID$      = BKA.BgKostenartID,
                           LAText$             = BKA.KontoNr + ' ' + BKA.Name,
                           BgSplittingartCode$ = BKA.BgSplittingartCode
                    from   BgKostenart BKA
                           left  join XLOVCode    SPL on SPL.LOVName = 'BgSplittingart' AND SPL.Code = BKA.BgSplittingArtCode
                    where  BKA.ModulID = 3 and
                           (BKA.Name like '%' + {0} + '%' or
                            BKA.KontoNr like {0} + '%')
                    order by Nr",
                    SearchString, e.ButtonClicked);
            }

            edtSucheLA.EditValue = dlg["LAText$"];
            edtSucheLA.LookupID = dlg["Nr"];
        }

        private void edtTextVariabel_Leave(object sender, EventArgs e)
        {
            CheckTextVariabel();
        }

        private void CheckTextVariabel()
        {
            if (edtTextVariabel.EditMode != EditModeType.ReadOnly && !DBUtil.IsEmpty(edtTextVariabel.EditValue) && edtTextVariabel.EditValue != (string)qryKbBuchungBrutto["TextVariabel"])
            {
                // Das Feld ist editierbar, und es wurde verändert
                qryKbBuchungBrutto["TextVariabel"] = edtTextVariabel.Text;
                qryKbBuchungBrutto["Text"] = string.Format("{0} {1}", qryKbBuchungBrutto["TextFix"], edtTextVariabel.Text);

                if (!DBUtil.IsEmpty(qryKbBuchungBrutto["KbBuchungBruttoID"]))
                {
                    int id = (int)qryKbBuchungBrutto["KbBuchungBruttoID"];

                    // Entferne die ID aus der Liste, da nun die Detailpositionen neu aufgebaut werden
                    if (_KbBuchungBruttoIDsWithExistingDetailPositions.Contains(id))
                    {
                        _KbBuchungBruttoIDsWithExistingDetailPositions.Remove(id);
                    }

                    BelegeKorrigierenTemporaryTableHelper.UpdateBuchungstextOfTemporaryKbBuchungBruttoPersonTable(id, (string)qryKbBuchungBrutto["Text"]);
                    qryKbBuchungBruttoPerson.Refresh();
                }
            }
        }

        private void edtVerwPeriodeVon_Leave(object sender, EventArgs e)
        {
            CheckVerwPeriodeVon();
        }

        private void CheckVerwPeriodeVon()
        {
            if (edtVerwPeriodeVon.EditMode != EditModeType.ReadOnly && !DBUtil.IsEmpty(edtVerwPeriodeVon.EditValue) && (DateTime)edtVerwPeriodeVon.EditValue != (DateTime)qryKbBuchungBrutto["VerwPeriodeVon"])
            {
                // Das Feld ist editierbar, und es wurde verändert
                if (!DBUtil.IsEmpty(qryKbBuchungBrutto["BgSplittingartCode"]))
                {
                    int splittingArtCode = (int)qryKbBuchungBrutto["BgSplittingartCode"];
                    bool storno = (bool)qryKbBuchungBrutto["Storno"];

                    if (!storno && splittingArtCode == 3 || splittingArtCode == 4)  // Valuta oder Entscheid
                    {
                        edtVerwPeriodeBis.DateTime = edtVerwPeriodeVon.DateTime;
                    }
                }

                // Ändere auch die VerwendungsperiodeVon der Detailpositionen
                UpdateVerwPeriodeOfDetailPositionen();
            }
        }

        private void edtVerwPeriodeBis_Leave(object sender, EventArgs e)
        {
            CheckVerwPeriodeBis();
        }

        private void CheckVerwPeriodeBis()
        {
            if (edtVerwPeriodeBis.EditMode != EditModeType.ReadOnly && !DBUtil.IsEmpty(edtVerwPeriodeBis.EditValue) && (DateTime)edtVerwPeriodeBis.EditValue != (DateTime)qryKbBuchungBrutto["VerwPeriodeBis"])
            {
                // Das Feld ist editierbar, und es wurde verändert

                // Ändere auch die VerwendungsperiodeVon der Detailpositionen
                UpdateVerwPeriodeOfDetailPositionen();
            }
        }

        private void UpdateVerwPeriodeOfDetailPositionen()
        {
            if (!DBUtil.IsEmpty(qryKbBuchungBrutto["KbBuchungBruttoID"]))
            {
                int id = (int)qryKbBuchungBrutto["KbBuchungBruttoID"];

                // Entferne die ID aus der Liste, da nun die Detailpositionen neu aufgebaut werden
                if (_KbBuchungBruttoIDsWithExistingDetailPositions.Contains(id))
                {
                    _KbBuchungBruttoIDsWithExistingDetailPositions.Remove(id);
                }

                // Ändere auch die VerwendungsperiodeVon der Detailpositionen
                BelegeKorrigierenTemporaryTableHelper.UpdateVerwPeriodeOfTemporaryKbBuchungBruttoPersonTable(id, edtVerwPeriodeVon.DateTime, edtVerwPeriodeBis.DateTime);

                qryKbBuchungBruttoPerson.Refresh();
            }
        }

        private void qryKbBuchungBrutto_BeforeDeleteQuestion(object sender, EventArgs e)
        {
            if ((int)qryKbBuchungBrutto["KbBuchungStatusCode"] != 1 || (bool)qryKbBuchungBrutto["Storno"])
            {
                // Nur graue NEU-Belege können gelöscht werden. Dies ist entweder ein Status <> 1 oder ein Storno-Beleg
                throw new KissInfoException("Nur graue NEU-Belege können gelöscht werden.");
            }
        }

        private void qryKbBuchungBrutto_PositionChanged(object sender, System.EventArgs e)
        {
            if (inserting) return;

            if (qryKbBuchungBrutto.DataTable.Rows.Count == 0) return;

            if (DBUtil.IsEmpty(qryKbBuchungBrutto["KbBuchungBruttoID"])) return;

            qryKbBuchungBruttoPerson.Fill((int)qryKbBuchungBrutto["KbBuchungBruttoID"]);

            if ((bool)qryKbBuchungBrutto["Storno"])
            {
                tabKorrekturKopf.Title = "STO Belegkopf";
                tabKorrekturDetailBuchungen.Title = "STO Belegpositionen";
            }
            else
            {
                tabKorrekturKopf.Title = "NEU Belegkopf";
                tabKorrekturDetailBuchungen.Title = "NEU Belegpositionen";
            }

            EnableControls();
        }

        private void qryKbBuchungBrutto_PositionChanging(object sender, System.EventArgs e)
        {
            if (qryKbBuchungBrutto.DataTable.Rows.Count == 0) return;

            bool checkSuccessfull = true;

            try
            {
                checkSuccessfull = CheckRow();
            }
            catch (KissCancelException ex)
            {
                ex.ShowMessage();
                throw new Exception();
            }

            if (!checkSuccessfull)
            {
                throw new Exception();
            }
        }

        private void qryMigDetailBuchung_AfterFill(object sender, System.EventArgs e)
        {
            lblRowCount.Text = qryMigDetailBuchung.Count.ToString();

            decimal total = decimal.Zero;
            foreach (DataRow R in qryMigDetailBuchung.DataTable.Rows) total += (decimal)R["Betrag"];
            lblBetragstotal.Text = total.ToString("n2");

            DataSet ds = qryMigDetailBuchung.DataSet;
            ds.Relations.Clear();
            ds.Relations.Add("BelegDetail",
                new DataColumn[] { ds.Tables[0].Columns["BelegNr"], ds.Tables[0].Columns["LA"], ds.Tables[0].Columns["BaPersonID"] },
                new DataColumn[] { ds.Tables[1].Columns["BelegNr"], ds.Tables[1].Columns["LA"], ds.Tables[1].Columns["BetrifftPersonID"] });
            grvKbBuchungKostenartBrutto.CollapseAllDetails();
        }

        private void qryMigDetailBuchung_PositionChanged(object sender, System.EventArgs e)
        {
            try
            {
                _ChangingData = true;

                grdKbBuchungBrutto.DataSource = null;
                qryKbBuchungBrutto.Fill(qryMigDetailBuchung["MigDetailBuchungID"]);
                grdKbBuchungBrutto.DataSource = qryKbBuchungBrutto;

                _KbBuchungBruttoIDsWithExistingDetailPositions = new List<int>();

                bool detailDataLoaded = false;
                foreach (DataRow row in qryKbBuchungBrutto.DataTable.Rows)
                {
                    if (!DBUtil.IsEmpty(row["KbBuchungBruttoID"]))
                    {
                        int id = (int)row["KbBuchungBruttoID"];
                        if (BelegeKorrigierenTemporaryTableHelper.LoadDetailsIntoTemporaryKbBuchungBruttoPersonTable(id) > 0)
                        {
                            // Es wurde mind. eine Detailposition geladen, d.h. es gibt OriginalPositionen. Füge die ID in die Liste der noch nicht geänderten Belege ein
                            detailDataLoaded = true;
                            _KbBuchungBruttoIDsWithExistingDetailPositions.Add(id);
                        }
                    }
                }

                if (!detailDataLoaded)
                {
                    qryKbBuchungBruttoPerson.DataTable.Clear();
                }
                else
                {
                    qryKbBuchungBruttoPerson.Fill((int)qryKbBuchungBrutto["KbBuchungBruttoID"]);
                }
            }
            finally
            {
                _ChangingData = false;
            }

            //DataSource-Toggle
            //in der Vorschau nach dem Kompilieren funktioniert die Betrags-Summenanzeige ohne Toggle
            //als UserControl im Fenster PSCD-Schnittstelle funktionierts nur mit dem Toggle
        }

        private void qryMigDetailBuchung_PositionChanging(object sender, System.EventArgs e)
        {
            bool buchungBereitsStorniert = (int)qryMigDetailBuchung["KbBuchungstatusCode"] == 8; // Storno

            if (!buchungBereitsStorniert && qryKbBuchungBrutto.DataTable.Rows.Count > 0 && !KissMsg.ShowQuestion("CtlKbBelegKorrekturAltdaten", "DatensatzWechseln", "Wollen Sie die gemachten Änderungen verwerfen?"))
            {
                throw new Exception();
            }
        }

        #endregion

        #region Methods

        #region Public Methods

        public override bool OnAddData()
        {
            if (qryMigDetailBuchung.Count == 0)
            {
                KissMsg.ShowInfo("Es ist keine Originalbuchung ausgewählt, für welche Korrekturbelege erfasst werden können");
                return false;
            }

            // Solange noch mind. eine der Buchungen grau, grün oder fehlerhaft ist, kann noch eine weitere NEU-Buchung zugefügt werden
            bool addAllowed = true;
            foreach (DataRow row in qryKbBuchungBrutto.DataTable.Rows)
            {
                int status = (int)row["KbBuchungStatusCode"];

                if (status != 1 && status != 2 && status != 5)   // Ist nicht grau, grün oder fehlerhaft
                {
                    addAllowed = false;
                    break;
                }
            }

            if (!addAllowed)
            {
                KissMsg.ShowInfo("Es können keine Neubuchungen mehr erfasst werden, da die NEU-Belege bereits verarbeitet sind");
                return false;
            }

            qryKbBuchungBrutto.EndCurrentEdit();

            try
            {
                inserting = true;
                if (qryKbBuchungBrutto.Count == 0)
                {
                    edtValutaDatum.EditValue = DateTime.Today;

                    // Stornobuchung erstellen
                    try
                    {
                        _ChangingData = true;
                        qryKbBuchungBrutto.Insert();
                        CopyBelegFields(true);
                        qryKbBuchungBrutto.Post();
                    }
                    finally
                    {
                        _ChangingData = false;
                    }

                    RecreateDetailBuchungen(false);
                }

                //Neubuchung
                try
                {
                    _ChangingData = true;
                    qryKbBuchungBrutto.Insert();
                    CopyBelegFields(false);
                    qryKbBuchungBrutto.Post();
                }
                finally
                {
                    _ChangingData = false;
                }

                RecreateDetailBuchungen(false);
                // Setze nochmals die SplittingArt => Falls die Verwendungsperiode angepasst wird, wird dies auch in den eben erst erstellten Detailpositionen der NEU-Belege reflektiert
                SetSplittingArt(qryKbBuchungBrutto["BgSplittingartCode"]);
            }
            finally
            {
                inserting = false;
            }

            qryKbBuchungBrutto_PositionChanged(null, EventArgs.Empty);
            edtValutaDatum.Focus();

            return true;
        }

        public override bool OnDeleteData()
        {
            if (qryKbBuchungBrutto.Row.RowState == DataRowState.Added)
            {
                if (qryKbBuchungBrutto["textFix"].ToString().StartsWith("STO"))
                {
                    KissMsg.ShowInfo("Der STO-Beleg kann nicht gelöscht werden.");
                    return false;
                }
            }
            else if (!DBUtil.IsEmpty(qryKbBuchungBrutto["TransferDatum"]))
            {
                KissMsg.ShowInfo("Dieser Korrekturbeleg kann nicht mehr gelöscht werden, da er bereits ins PSCD transferiert wurde.");
                return false;
            }

            return qryKbBuchungBrutto.Delete();
        }

        public override bool OnSaveData()
        {
            if (qryMigDetailBuchung.Count == 0 || qryKbBuchungBrutto.Row == null)
                return true;

            try
            {
                CheckBetrag();
                CheckTextVariabel();
                CheckVerwPeriodeVon();
                CheckVerwPeriodeBis();

                qryKbBuchungBrutto.EndCurrentEdit();
                CheckRow();
            }
            catch (KissCancelException ex)
            {
                ex.ShowMessage();
                return false;
            }

            qryKbBuchungBrutto.DataTable.AcceptChanges();
            return true;
        }

        #endregion

        #region Private Methods

        private bool CheckRow()
        {
            if (inserting) return true;

            bool storno = (bool)qryKbBuchungBrutto["Storno"];
            bool buchungBereitsStorniert = (int)qryMigDetailBuchung["KbBuchungstatusCode"] == 8; // Storno
            if (buchungBereitsStorniert || storno || qryKbBuchungBrutto.Count == 0)
                return true;

            DBUtil.CheckNotNullField(edtVerwPeriodeVon, "Verwendungsperiode von");
            DBUtil.CheckNotNullField(edtVerwPeriodeBis, "Verwendungsperiode bis");
            DBUtil.CheckNotNullField(edtBetrag, "Betrag");
            DBUtil.CheckNotNullField(edtValutaDatum, "Valuta");
            DBUtil.CheckNotNullField(edtBgKostenartID, "Kostenart");
            DBUtil.CheckNotNullField(edtLT, "Leistungsträger");
            if (!(bool)qryKbBuchungBrutto["Quoting"])
                DBUtil.CheckNotNullField(edtBetrifftPerson, "Betrifft Person");

            if(DBUtil.IsEmpty(qryKbBuchungBrutto["Hauptvorgang"]) || DBUtil.IsEmpty(qryKbBuchungBrutto["Teilvorgang"]))
            {
                throw new KissInfoException(string.Format(
                    "Neu-Beleg: Es wurden keine Haupt/Teilvorgänge für die Leistungsart {0} gefunden. Bitte wählen Sie eine neue Leistungsart aus.",
                    qryKbBuchungBrutto["BgKostenart"]));
            }

            if (edtValutaDatum.DateTime > DateTime.Today)
            {
                throw new KissInfoException("Das Valutadatum darf nicht in der Zukunft liegen");
            }

            int splittingart = (int)qryKbBuchungBrutto["BgSplittingArtCode"];
            DateTime vpVon = (DateTime)qryKbBuchungBrutto["VerwPeriodeVon"];
            DateTime vpBis = (DateTime)qryKbBuchungBrutto["VerwPeriodeBis"];
            if (vpVon > vpBis)
                throw new KissInfoException("'Verwendungsperiode von' muss vor 'Verwendungsperiode bis' liegen");
            if (splittingart == 2) // Monat
            {
                if (vpVon != new DateTime(vpVon.Year, vpVon.Month, 1))
                    throw new KissInfoException("'Verwendungsperiode von' muss bei Monats-Splitting der erste eines Monats sein");
                if (vpBis != new DateTime(vpBis.Year, vpBis.Month, DateTime.DaysInMonth(vpBis.Year, vpBis.Month)))
                    throw new KissInfoException("'Verwendungsperiode bis' muss bei Monats-Splitting der letzte eines Monats sein");
            }

            // Prüfe, falls ein Quoting nötig ist, dass der Haushalt definiert ist (entweder durch BgFinanzplanID, oder durch die Liste der Proleist-PersonenIDs)
            if ((bool)qryKbBuchungBrutto["Quoting"])
            {
                if ((DBUtil.IsEmpty(qryKbBuchungBrutto["BgFinanzplanID"]) || (int)qryKbBuchungBrutto["BgFinanzplanID"] == 0) && (DBUtil.IsEmpty(qryKbBuchungBrutto["SelectedHaushaltProleistPersonenIDs"]) || ((string)qryKbBuchungBrutto["SelectedHaushaltProleistPersonenIDs"]).Length == 0))
                {
                    // Der Haushalt ist nicht definiert
                    throw new KissInfoException("Für das Quoting muss ein gültiger Haushalt definiert sein.");
                }
            }

            // Prüfe die Detailpositionen: Betrag und Text muss definiert sein für jeden Detailbeleg, Prüfe Summe der Beträge
            decimal totalKopf = (decimal.Parse(qryKbBuchungBrutto["Betrag"].ToString()));
            decimal totalDetails = 0;

            foreach (DataRow row in qryKbBuchungBruttoPerson.DataTable.Rows)
            {
                if (DBUtil.IsEmpty(row["Betrag"]))
                {
                    throw new KissInfoException("'Betrag' einer Detailbuchung darf nicht leer sein.");
                }

                if (DBUtil.IsEmpty(row["Text"]))
                {
                    throw new KissInfoException("'Buchungstext' einer Detailbuchung darf nicht leer sein.");
                }

                totalDetails += (decimal.Parse(row["Betrag"].ToString()));
            }

            if (Math.Truncate(totalKopf * 100) != Math.Truncate(totalDetails * 100))
            {
                // Die Detailbeträge sind falsch => Baue die Detailbuchungen nochmals auf
                if (!RecreateDetailBuchungen(true))
                {
                    return false;
                }
            }

            return true;
        }

        private void CopyBelegFields(bool storno)
        {
            try
            {
                _ChangingData = true;

                bool quoting = (bool)qryMigDetailBuchung["Quoting"];
                string praefix = storno ? "STO" : "NEU";
                qryKbBuchungBrutto["KbBuchungBruttoID"] = _tempKbBuchungBruttoIDCounter--;
                qryKbBuchungBrutto["Storno"] = storno;
                qryKbBuchungBrutto["KbBuchungStatusCode"] = 1; //anfangs immer grau,  vorher: storno ? 8 : 1; //storniert:grau
                qryKbBuchungBrutto["BgKostenartID"] = qryMigDetailBuchung["BgKostenartID"];
                qryKbBuchungBrutto["KontoNr"] = qryMigDetailBuchung["KontoNr"];
                qryKbBuchungBrutto["BgKostenart"] = qryMigDetailBuchung["BgKostenart"];
                qryKbBuchungBrutto["Kostenstelle"] = qryMigDetailBuchung["Kostenstelle"];
                qryKbBuchungBrutto["Hauptvorgang"] = qryMigDetailBuchung["Hauptvorgang"];
                qryKbBuchungBrutto["Teilvorgang"] = qryMigDetailBuchung["Teilvorgang"];
                qryKbBuchungBrutto["BgKostenartHauptvorgang"] = qryMigDetailBuchung["BgKostenartHauptvorgang"];
                qryKbBuchungBrutto["BgKostenartTeilvorgang"] = qryMigDetailBuchung["BgKostenartTeilvorgang"];
                qryKbBuchungBrutto["BgKostenartHauptvorgangAbtretung"] = qryMigDetailBuchung["BgKostenartHauptvorgangAbtretung"];
                qryKbBuchungBrutto["BgKostenartTeilvorgangAbtretung"] = qryMigDetailBuchung["BgKostenartTeilvorgangAbtretung"];
                qryKbBuchungBrutto["Belegart"] = qryMigDetailBuchung["Belegart"];
                qryKbBuchungBrutto["Weiterverrechenbar"] = qryMigDetailBuchung["Weiterverrechenbar"];
                qryKbBuchungBrutto["Quoting"] = quoting;
                qryKbBuchungBrutto["FaLeistungID"] = qryMigDetailBuchung["FaLeistungID"];
                qryKbBuchungBrutto["Text"] = string.Format(praefix + " {0} {1}", qryMigDetailBuchung["BelegNr"], qryMigDetailBuchung["BuchungsText"]);
                qryKbBuchungBrutto["TextFix"] = string.Format(praefix + " {0}", qryMigDetailBuchung["BelegNr"]);
                qryKbBuchungBrutto["TextVariabel"] = qryMigDetailBuchung["BuchungsText"];
                qryKbBuchungBrutto["Abgetreten"] = qryMigDetailBuchung["Abgetreten"];
                qryKbBuchungBrutto["LT"] = string.Format("{0} ({1})", qryMigDetailBuchung["LT"], qryMigDetailBuchung["LTBaPersonID"]);
                qryKbBuchungBrutto["LTBaPersonID"] = qryMigDetailBuchung["LTBaPersonID"];
                qryKbBuchungBrutto["BetrifftPerson"] = quoting ? DBNull.Value : (object)string.Format("{0} ({1})", qryMigDetailBuchung["BetrifftPerson"], qryMigDetailBuchung["BaPersonID"]);
                qryKbBuchungBrutto["BetrifftBaPersonID"] = quoting ? DBNull.Value : qryMigDetailBuchung["BaPersonID"];
                qryKbBuchungBrutto["Betrag"] = storno ? -((decimal)qryMigDetailBuchung["Betrag"]) : qryMigDetailBuchung["Betrag"];
                qryKbBuchungBrutto["VerwPeriodeVon"] = qryMigDetailBuchung["VerwPeriodeVon"];
                qryKbBuchungBrutto["VerwPeriodeBis"] = qryMigDetailBuchung["VerwPeriodeBis"];
                qryKbBuchungBrutto["Splittingart"] = qryMigDetailBuchung["Splittingart"];
                if (storno)
                {
                    // In ProLeist gab es nur Splittingart Taggenau (T), daher wird auch beim STO-Beleg konsequent nur Splittingart T gesetzt
                    qryKbBuchungBrutto["BgSplittingartCode"] = 1;
                }
                else
                {
                    qryKbBuchungBrutto["BgSplittingartCode"] = qryMigDetailBuchung["BgSplittingartCode"];
                }

                SetSplittingArt(qryKbBuchungBrutto["BgSplittingartCode"]);
                qryKbBuchungBrutto["FaFallID"] = qryMigDetailBuchung["FaFallID"];

                // Da ev. der Kontenplan geändert wurde seit der Original-Beleg erstellt wurde,
                // müssen wir hier proaktiv die aktuellen Haupt/Teilvorgänge und andere Kostenart-abhängige Daten neu laden
                if (!FindAndSetKostenart((bool)qryMigDetailBuchung["Abgetreten"]))
                {
                    if (KissMsg.ShowQuestion(string.Format("Es wurden keine Haupt/Teilvorgänge für die {1}Leistungsart {0} gefunden. Soll die analoge {2}Leistungsart {0} verwendet werden?",
                        qryMigDetailBuchung["BgKostenart"], (bool)qryMigDetailBuchung["Abgetreten"] ? "abgetretene " : "", (bool)qryMigDetailBuchung["Abgetreten"] ? "nicht abgetretene " : "abgetretene ")))
                    {
                        if (!FindAndSetKostenart(!(bool)qryMigDetailBuchung["Abgetreten"]))
                        {
                            KissMsg.ShowInfo(string.Format("Neu-Beleg: Es wurden keine Haupt/Teilvorgänge für die Leistungsart {0} gefunden. Bitte wählen Sie eine neue Leistungsart aus.", qryMigDetailBuchung["BgKostenart"]));
                            qryKbBuchungBrutto["BgKostenartID"] = DBNull.Value;
                            qryKbBuchungBrutto["BgKostenart"] = "";
                        }
                    }
                    else
                    {
                        KissMsg.ShowInfo(string.Format("Neu-Beleg: Es wurden keine Haupt/Teilvorgänge für die Leistungsart {0} gefunden. Bitte wählen Sie eine neue Leistungsart aus.", qryMigDetailBuchung["BgKostenart"]));
                        qryKbBuchungBrutto["BgKostenartID"] = DBNull.Value;
                        qryKbBuchungBrutto["BgKostenart"] = "";
                    }
                }

                if ((bool)qryMigDetailBuchung["Quoting"])
                {
                    // Dies ist der Storno-Beleg, und der Original-Beleg ist gequotet => Lade den Proleist-Haushalt, damit wir die STO-Buchung korrekt machen können später
                    SelectHaushalt(true);   // Dies lädt den Proleist-Haushalt direkt in die dafür vorgesehenen Felder in qryKbBuchungBrutto
                }
            }
            catch (Exception ex)
            {
                KissMsg.ShowInfo(ex.Message);
            }
            finally
            {
                _ChangingData = false;
            }
        }

        private void EnableControls()
        {
            bool storno = (bool)qryKbBuchungBrutto["Storno"];
            int status = (int)qryKbBuchungBrutto["KbBuchungstatusCode"];
            bool buchungReadonly = true;
            if (status == 1 || status == 2 || status == 5)	// Grau, Grün oder Fehlerhaft
            {
                buchungReadonly = false;
            }

            bool quoting = (bool)qryKbBuchungBrutto["Quoting"];
            EditModeType mode = storno || buchungReadonly ? EditModeType.ReadOnly : EditModeType.Normal;

            foreach (Control ctrl in UtilsGui.AllControls(this))
            {
                if (ctrl is IKissEditable &&
                    (ctrl.Parent == tabKorrekturKopf || ctrl.Parent == tabKorrekturDetailBuchungen) &&
                    ctrl != edtHauptvorgang &&
                    ctrl != edtTeilvorgang &&
                    ctrl != edtAbtretung &&
                    ctrl != edtValutaDatum &&
                    ctrl != edtSplittingart &&
                    ctrl != edtTextFix &&
                    ctrl != edtFaFallID &&
                    ctrl != edtFaLeistungID)
                {
                    ((IKissEditable)ctrl).EditMode = mode;
                }
            }
            edtTextVariabel.EditMode = mode;

            btnAusführen.Enabled = !buchungReadonly;

            int art = (int)qryKbBuchungBrutto["BgSplittingartCode"];
            int originalArt = 0;
            if (!DBUtil.IsEmpty(qryMigDetailBuchung["BgSplittingArtCode"]))
            {
                originalArt = (int)qryMigDetailBuchung["BgSplittingArtCode"];
            }
            edtVerwPeriodeVon.EditMode = storno || buchungReadonly || (art == 3 && originalArt == 3) ? EditModeType.ReadOnly : EditModeType.Normal;
            edtVerwPeriodeBis.EditMode = storno || buchungReadonly || (art == 3) || (art == 4) ? EditModeType.ReadOnly : EditModeType.Normal;

            // Spezialfall Quoting
            edtBetrifftPerson.EditMode = storno || buchungReadonly || quoting ? EditModeType.ReadOnly : EditModeType.Normal;
            edtValutaDatum.EditMode = buchungReadonly ? EditModeType.ReadOnly : EditModeType.Normal;

            edtTextFix.Visible = !buchungReadonly;

            if (buchungReadonly)
                edtValutaDatum.EditValue = qryKbBuchungBrutto["ValutaDatum"];

            EnableHaushaltButton();

            //edtAbtretung.EditMode analog edtBetrag aber nie Editierbar für Storno-Buchungen
            edtAbtretung.EditMode = storno ? EditModeType.ReadOnly : mode;
        }

        private void EnableHaushaltButton()
        {
            // Der Haushalt kann definiert werden, wenn quoting enabled und gesetzt ist
            btnHaushalt.Enabled = (edtTextVariabel.EditMode == EditModeType.Normal) && chkQuoting.Checked;
        }

        private bool FindAndSetKostenart(bool abgetreten)
        {
            SqlQuery qryKostenart = DBUtil.OpenSQL(@"
                SELECT
                  KontoNr,
                  Name,
                  BgKostenartID$      = BgKostenartID,
                  KontoNrName$        = KontoNr + ' ' + Name,
                  Hauptvorgang$       = Hauptvorgang,
                  Teilvorgang$        = Teilvorgang,
                  HauptvorgangAbtretung$ = HauptvorgangAbtretung,
                  TeilvorgangAbtretung$ = TeilvorgangAbtretung,
                  Belegart$           = Belegart,
                  BgSplittingArtCode$ = BgSplittingArtCode,
                  SplittingArt$       = SPL.ShortText,
                  Weiterverrechenbar$ = Weiterverrechenbar,
                  Quoting             = Quoting
                FROM BgKostenart     BKA
                  LEFT JOIN XLOVCode SPL ON SPL.LOVName = 'BgSplittingart' AND SPL.Code = BKA.BgSplittingartCode
                WHERE ModulID = 3
                  AND ((Hauptvorgang IS NOT NULL AND Teilvorgang IS NOT NULL) OR (HauptvorgangAbtretung IS NOT NULL AND TeilvorgangAbtretung IS NOT NULL))
                  AND BgKostenartID = {0}
                ORDER BY 1, 2
                ", qryMigDetailBuchung["BgKostenartID"]);

            if (qryKostenart.Count == 1)
            {
                // Ok, wir haben die Kostenart gefunden, kopiere nun die aktuellen Daten hierzu
                qryKbBuchungBrutto["BgKostenartID"] = qryKostenart["BgKostenartID$"];
                qryKbBuchungBrutto["KontoNr"] = qryKostenart["KontoNr"];
                qryKbBuchungBrutto["BgKostenart"] = qryKostenart["KontoNrName$"];
                qryKbBuchungBrutto["Abgetreten"] = abgetreten;

                if (abgetreten)
                {
                    qryKbBuchungBrutto["Hauptvorgang"] = qryKostenart["HauptvorgangAbtretung$"];
                    qryKbBuchungBrutto["Teilvorgang"] = qryKostenart["TeilvorgangAbtretung$"];
                }
                else
                {
                    qryKbBuchungBrutto["Hauptvorgang"] = qryKostenart["Hauptvorgang$"];
                    qryKbBuchungBrutto["Teilvorgang"] = qryKostenart["Teilvorgang$"];
                }

                qryKbBuchungBrutto["BgKostenartHauptvorgang"] = qryKostenart["Hauptvorgang$"];
                qryKbBuchungBrutto["BgKostenartTeilvorgang"] = qryKostenart["Teilvorgang$"];
                qryKbBuchungBrutto["BgKostenartHauptvorgangAbtretung"] = qryKostenart["HauptvorgangAbtretung$"];
                qryKbBuchungBrutto["BgKostenartTeilvorgangAbtretung"] = qryKostenart["TeilvorgangAbtretung$"];
                qryKbBuchungBrutto["Belegart"] = qryKostenart["Belegart$"];
                qryKbBuchungBrutto["BgSplittingArtCode"] = qryKostenart["BgSplittingArtCode$"];
                qryKbBuchungBrutto["SplittingArt"] = qryKostenart["SplittingArt$"];
                qryKbBuchungBrutto["Quoting"] = qryKostenart["Quoting"];
                SetSplittingArt(qryKostenart["BgSplittingArtCode$"]);
                qryKbBuchungBrutto["Weiterverrechenbar"] = qryKostenart["Weiterverrechenbar$"];

                if ((bool)qryKostenart["Quoting"] == true)
                {
                    edtBetrifftPerson.EditMode = EditModeType.ReadOnly;
                    qryKbBuchungBrutto["BetrifftBaPersonID"] = DBNull.Value;
                    qryKbBuchungBrutto["BetrifftPerson"] = DBNull.Value;
                }
                else
                {
                    edtBetrifftPerson.EditMode = EditModeType.Normal;
                }

                return true;
            }

            // Wenn wir hierhin kommen, haben wir keine Kostenart gefunden
            return false;
        }

        private long GetBelegNr(object belegart)
        {
            return (long)DBUtil.ExecuteScalarSQLThrowingException(@"
                  DECLARE @BelegNr bigint
                  EXEC spKbGetBelegNr_out {0}, @BelegNr OUT
                  SELECT @BelegNr", belegart);
        }

        private object GetKbPeriodeID(DateTime Valuta)
        {
            return DBUtil.ExecSQLThrowingException(@"
                select KbPeriodeID
                from   KbPeriode
                where  KbMandantCode = 1 and /*für ZH nur Mandant 1*/
                       PeriodeStatusCode = 1 and /*offen*/
                       {0} between PeriodeVon and PeriodeBis",
                Valuta);
        }

        private object GetKostenstelle(int FaLeistungID)
        {
            return DBUtil.ExecSQLThrowingException(@"
                select ORG.Kostenstelle
                from   FaLeistung LEI
                       left  join XOrgUnit_User O2U ON LEI.UserID = O2U.UserID and O2U.OrgUnitMemberCode = 2 /*Mitglied*/
                       left  join XOrgUnit      ORG ON ORG.OrgUnitID = O2U.OrgUnitID
                where  LEI.FaLeistungID = {0}",
                FaLeistungID);
        }

        private bool IsSiLeiAuszahlung(int? teilvorgang)
        {
            return teilvorgang.HasValue && (teilvorgang.Value == 5320 ||
                                            teilvorgang.Value == 5321);
        }

        private void btnAusführen_Click(object sender, System.EventArgs e)
        {
            if (qryMigDetailBuchung.Count == 0) return;

            if (!OnSaveData()) return;

            qryKbBuchungBrutto.DataTable.AcceptChanges();

            // Gehe nochmals alle Belege durch und prüfe sie
            try
            {
                qryKbBuchungBrutto.First();
                do
                {
                    CheckRow();
                } while (qryKbBuchungBrutto.Next());
            }
            catch (KissCancelException ex)
            {
                ex.ShowMessage();
                return;
            }

            // Prüfe übergreifende Daten
            decimal betrag = 0;

            foreach (DataRow row in qryKbBuchungBrutto.DataTable.Rows)
            {
                betrag += (decimal)row["Betrag"];
            }

            if (betrag != 0)
            {
                KissMsg.ShowInfo(string.Format("Die Betrags-Summe der NEU-Buchung(en) entspricht nicht dem STO-Betrag.\r\nDie Differenz beträgt {0}", betrag));
                return;
            }

            if (DBUtil.IsEmpty(edtValutaDatum.EditValue))
            {
                KissMsg.ShowInfo("CtlKbBelegKorrekturAltdaten", "BelegDatumLeer", "Valutadatum muss ausgefüllt sein.");
                return;
            }

            // Hier stellen wir sicher, dass ein Finanzplan bekannt ist, in dem der Haushalt resp. die betroffene Person der STO- resp. NEU-Buchungen existiert
            foreach (DataRow row in qryKbBuchungBrutto.DataTable.Rows)
            {
                bool quoting = (bool)row["Quoting"];

                // Prüfe zuerst, ob die gequoteten entweder einen Finanzplan oder einen Haushalt selektiert haben
                // Falls dies ein gequoteter Beleg ist, muss ein Haushalt existieren oder ausgewählt worden sein
                if (quoting && ((!DBUtil.IsEmpty(row["BgFinanzplanID"]) && (int)row["BgFinanzplanID"] > 0) || !DBUtil.IsEmpty(row["SelectedHaushaltProleistPersonenIDs"])))
                {
                    // Der Beleg ist gequotet, und entweder ist ein Finanzplan gesetzt, oder ein Proleist-Haushalt wurde selektiert, d.h. dieser Beleg ist OK
                    continue;
                }

                // Ist Finanzplan bekannt?
                if (!DBUtil.IsEmpty(row["BgFinanzplanID"]))
                {
                    // Ja, FP bekant
                    if (DBUtil.IsEmpty(row["FaLeistungID"]))
                    {
                        // Aber Leistung nicht, d.h. wir holen uns die LeistungsID gleich vom FP ab
                        row["FaLeistungID"] = DBUtil.ExecuteScalarSQL("SELECT TOP 1 FaLeistungID FROM BgFinanzplan WHERE BgFinanzplanID = {0}", row["BgFinanzplanID"]);
                    }

                    if (!quoting)
                    {
                        // nicht gequotet => Prüfe, ob Person im FP unterstützt ist
                        object count = DBUtil.ExecuteScalarSQL(@"
                        SELECT TOP 1 1 FROM BgFinanzplan_BaPerson FPP
                        WHERE FPP.IstUnterstuetzt = 1 AND FPP.BaPersonID = {0} AND FPP.BgFinanzplanID = {1}
                        ", row["BetrifftBaPersonID"], row["BgFinanzplanID"]);

                        if (count == null || (int)count != 1)
                        {
                            // Person ist in dieser Leistung nicht unterstützt => Lösche die Leistung, so dass sie unten wieder korrekt gefüllt wird
                            row["FaLeistungID"] = DBNull.Value;
                            row["BgFinanzplanID"] = DBNull.Value;
                        }
                    }
                }

                if (!quoting)
                {
                    // Nicht gequoteter Beleg
                    if (DBUtil.IsEmpty(row["BgFinanzplanID"]))
                    {
                        // Finanzplan noch nicht bekannt, suche weiter
                        if (!DBUtil.IsEmpty(row["FaLeistungID"]))
                        {
                            // Leistung ist bekannt und Beleg ist nicht gequotet => Suche den neuesten FP mit der unterstützen Person in dieser Leistung
                            object fp = DBUtil.ExecuteScalarSQL(@"
                            SELECT TOP 1 FPL.BgFinanzplanID FROM FaLeistung LEI
                                INNER JOIN BgFinanzplan FPL ON FPL.FaLeistungID = LEI.FaLeistungID
                                INNER JOIN BgFinanzplan_BaPerson FPP ON FPP.BgFinanzplanID = FPL.BgFinanzplanID
                            WHERE LEI.FaProzessCode = 300 AND FPP.IstUnterstuetzt = 1
                                AND FPP.BaPersonID = {0}
                                AND LEI.FaLeistungID = {1}
                            ORDER BY FPL.GeplantVon desc
                            ", row["BetrifftBaPersonID"], row["FaLeistungID"]);

                            if (fp != null)
                            {
                                row["BgFinanzplanID"] = fp;
                            }
                        }
                    }

                    if (DBUtil.IsEmpty(row["BgFinanzplanID"]))
                    {
                        // Finanzplan immer noch nicht bekannt, suche weiter

                        // Hole die neueste Leistung des Original-Falls, in der die Person unterstützt ist und mit dem richtigen LT
                        SqlQuery sql = DBUtil.OpenSQL(@"
                                                SELECT TOP 1 LEI.FaLeistungID, FPL.BgFinanzplanID FROM FaLeistung LEI
                                                    INNER JOIN BgFinanzplan FPL ON FPL.FaLeistungID = LEI.FaLeistungID
                                                    INNER JOIN BgFinanzplan_BaPerson FPP ON FPP.BgFinanzplanID = FPL.BgFinanzplanID
                                                WHERE LEI.FaProzessCode = 300 AND FPP.IstUnterstuetzt = 1
                                                    AND FPP.BaPersonID = {0}
                                                    AND LEI.FaFallID = {1}
                                                    AND LEI.BaPersonID = {2}
                                                ORDER BY LEI.DatumVon Desc, FPL.GeplantVon desc
                                                ", row["BetrifftBaPersonID"], row["FaFallID"], row["LTBaPersonID"]);
                        if (sql.Count == 1)
                        {
                            // Ok, Leistung/FP gefunden
                            row["FaLeistungID"] = sql["FaLeistungID"];
                            row["BgFinanzplanID"] = sql["BgFinanzplanID"];
                        }
                    }
                }

                if (DBUtil.IsEmpty(row["BgFinanzplanID"]))
                {
                    // Finanzplan immer noch nicht bekannt, d.h. wir müssen einen Dummy-Finanzplan erstellen, und zwar in der ältesten Leistung mit dem richtigen LT

                    // Hole die älteste Leistung des Original-Falls
                    SqlQuery sql = DBUtil.OpenSQL(@"
                    SELECT TOP 1 LEI.FaLeistungID, LEI.DatumVon, LEI.DatumBis FROM FaLeistung LEI
                    WHERE LEI.FaProzessCode = 300 AND LEI.FaFallID = {0} AND LEI.BaPersonID = {1}
                    ORDER BY LEI.DatumVon
                    ", row["FaFallID"], row["LTBaPersonID"]);

                    row["FaLeistungID"] = sql["FaLeistungID"];

                    if (!quoting)
                    {
                        // Der Beleg ist nicht gequotet => Wir setzen SelectedHaushaltProleistPersonenIDs = BetrifftBaPersonID => Damit wird ein neuer FP mit dieser Person erstellt werden in der Methode ProgressStart()
                        row["SelectedHaushaltProleistPersonenIDs"] = row["BetrifftBaPersonID"];
                        row["SelectedHaushaltDatumVon"] = sql["DatumVon"];
                        row["SelectedHaushaltDatumBis"] = sql["DatumBis"];
                    }
                }

                if (DBUtil.IsEmpty(row["FaLeistungID"]))
                {
                    // Hmm, scheint hartnäckig zu sein, wir haben keine Leistung gefunden
                    if (quoting)
                    {
                        KissMsg.ShowError(string.Format("Keine gültige Leistung. Bitte wählen Sie einen gültigen Haushalt aus"));
                    }
                    else
                    {
                        KissMsg.ShowError(string.Format("Keine gültige Leistung gefunden für BetrifftPerson {0}", row["BetrifftBaPersonID"]));
                    }
                    return;
                }
            }

            // Fortschrittsanzeige (ohne Cancel-Möglichkeit)
            DlgProgressLog.Show("Altdaten-Beleg umbuchen", false, 700, 500, new ProgressEventHandler(ProgressStart), new ProgressEventHandler(ProgressEnd), Session.MainForm);
        }

        private void ProgressStart()
        {
            try
            {
                Cursor = Cursors.WaitCursor;
                ApplicationFacade.DoEvents();

                _updateWasSuccessfull = false;

                DlgProgressLog.AddLine("Start der Umbuchung");
                ApplicationFacade.DoEvents();

                SqlQuery qryUpdateBuchungBrutto = DBUtil.OpenSQL("SELECT * FROM KbBuchungBrutto WHERE 1 = 0");
                SqlQuery qryUpdateBuchungBruttoPerson = DBUtil.OpenSQL("SELECT * FROM KbBuchungBruttoPerson WHERE 1 = 0");

                int CountNeuBuchungen = 0;
                List<int> kbBuchungBruttoIDsForTransfer = new List<int>();
                Dictionary<string, int> mapAlreadyCreatedProleistHaushalteToBgFinanzplanID = new Dictionary<string, int>();
                List<int> listFaelleMitNeuenProleistHaushalten = new List<int>();

                try
                {
                    Session.BeginTransaction();

                    object valutaDatum = edtValutaDatum.EditValue;
                    SqlQuery qryKbPeriode = DBUtil.OpenSQL(@"
                        SELECT *
                        FROM   KbPeriode
                        WHERE  KbMandantCode = 1 /*für ZH nur Mandant 1*/
                          AND PeriodeStatusCode = 1 /*offen*/
                          AND GetDate() BETWEEN PeriodeVon AND PeriodeBis");

                    string gruppierungUmbuchung = string.Format("UA{0}", GetBelegNr("PYGRP").ToString("00000000"));

                    DlgProgressLog.AddLine("Storno-/Neubuchungen erzeugen...");

                    foreach (DataRow row in qryKbBuchungBrutto.DataTable.Rows)
                    {
                        bool stornoRow = (bool)row["Storno"];

                        if (stornoRow)
                        {
                            // Prüfe, ob die Original-Buchung nicht schon umgebucht wurde in der Zwischenzeit.
                            // Dies wäre der Fall, falls wir eine STO-Buchung finden würden, deren KbBuchungBruttoID nicht der KbBuchungBruttoID dieses Belegs entspricht
                            object nrOfSTO = DBUtil.ExecuteScalarSQLThrowingException(@"
                                SELECT COUNT(KbBuchungBruttoID) FROM KbBuchungBrutto
                                    WHERE MigDetailBuchungID = {0} and Text like 'STO %' and KbBuchungBruttoID <> {1}",
                                qryMigDetailBuchung["MigDetailBuchungID"], row["KbBuchungBruttoID"]);

                            if (nrOfSTO is int && (int)nrOfSTO > 0)
                            {
                                _updateWasSuccessfull = true;   // Wir setzen dies hier auf True, weil dies den Reload der Originalbelege auslöst, und das ist hier gewünscht.
                                throw new Exception("Der Originalbeleg wurde in der Zwischenzeit bereits umgebucht, es existiert bereits eine STO-Buchung.");
                            }
                        }

                        int status = (int)row["KbBuchungStatusCode"];

                        if (status == 2 || status == 5)  //grün/fehlerhaft, nochmals an PSCD senden
                        {
                            kbBuchungBruttoIDsForTransfer.Add((int)row["KbBuchungBruttoID"]);

                            qryUpdateBuchungBrutto = DBUtil.OpenSQL("SELECT * FROM KbBuchungBrutto WHERE KbBuchungBruttoID = {0}", row["KbBuchungBruttoID"]);
                            gruppierungUmbuchung = (string)qryUpdateBuchungBrutto["GruppierungUmbuchung"];  // Hole die GruppierungUmbuchung der pendenten Umbuchung
                        }
                        else if (status == 1)   // grau, noch nicht erstellt und übermittelt
                        {
                            qryUpdateBuchungBrutto.Insert("KbBuchungBrutto");
                        }
                        else
                        {
                            continue;
                        }
                        qryUpdateBuchungBrutto["KbPeriodeID"] = qryKbPeriode["KbPeriodeID"];
                        qryUpdateBuchungBrutto["BgKostenartID"] = row["BgKostenartID"];
                        qryUpdateBuchungBrutto["FaLeistungID"] = row["FaLeistungID"];
                        qryUpdateBuchungBrutto["MigDetailBuchungID"] = qryMigDetailBuchung["MigDetailBuchungID"];

                        qryUpdateBuchungBrutto["KbBuchungTypCode"] = 5; // Umbuchung
                        qryUpdateBuchungBrutto["ValutaDatum"] = valutaDatum;
                        qryUpdateBuchungBrutto["BelegDatum"] = valutaDatum;
                        qryUpdateBuchungBrutto["Text"] = row["Text"];

                        qryUpdateBuchungBrutto["Kostenstelle"] = row["Kostenstelle"];
                        qryUpdateBuchungBrutto["Hauptvorgang"] = row["Hauptvorgang"];
                        qryUpdateBuchungBrutto["Teilvorgang"] = row["Teilvorgang"];

                        object belegart = stornoRow ? "UB" : row["Belegart"];
                        qryUpdateBuchungBrutto["Belegart"] = belegart;
                        qryUpdateBuchungBrutto["BelegNr"] = DBUtil.IsEmpty(row["BelegNr"]) ? GetBelegNr(belegart) : row["BelegNr"];
                        qryUpdateBuchungBrutto["Abgetreten"] = row["Abgetreten"];
                        qryUpdateBuchungBrutto["GruppierungUmbuchung"] = gruppierungUmbuchung;
                        qryUpdateBuchungBrutto["PscdKennzeichen"] = "U";

                        qryUpdateBuchungBrutto["BgSplittingArtCode"] = row["BgSplittingArtCode"];
                        qryUpdateBuchungBrutto["Weiterverrechenbar"] = row["Weiterverrechenbar"];

                        bool quoting = (bool)row["Quoting"];
                        qryUpdateBuchungBrutto["Quoting"] = quoting;

                        qryUpdateBuchungBrutto["KbBuchungStatusCode"] = 2;
                        qryUpdateBuchungBrutto["ErfassungsDatum"] = DateTime.Today;
                        qryUpdateBuchungBrutto["UserID"] = Session.User.UserID;
                        qryUpdateBuchungBrutto["ModulID"] = 3;

                        qryUpdateBuchungBrutto["BetragEffektiv"] = (decimal)0;

                        decimal belegBetrag = (decimal)row["Betrag"];
                        qryUpdateBuchungBrutto["Betrag"] = belegBetrag;
                        qryUpdateBuchungBrutto.Post("KbBuchungBrutto");

                        if (status == 1)
                        {
                            CountNeuBuchungen++;
                            kbBuchungBruttoIDsForTransfer.Add((int)qryUpdateBuchungBrutto["KbBuchungBruttoID"]);
                        }

                        // Die Detailpositionen müssen nur (neu) aufgebaut werden, wenn der Beleg nicht schon noch korrekte Detailpositionen besitzt
                        if (!_KbBuchungBruttoIDsWithExistingDetailPositions.Contains((int)qryUpdateBuchungBrutto["KbBuchungBruttoID"]))
                        {
                            // Prüfe, ob der Finanzplan resp. der Haushalt/BetrifftPerson bekannt oder selektiert wurden
                            if (DBUtil.IsEmpty(row["BgFinanzplanID"]) || (int)row["BgFinanzplanID"] == 0)
                            {
                                // Es gibt kein KiSS-Finanzplan
                                if (DBUtil.IsEmpty(row["SelectedHaushaltProleistPersonenIDs"]))
                                {
                                    if (quoting)
                                    {
                                        // Problem, es wurde kein Haushalt ausgewählt (dürfte eigentlich gar nicht vorkommen, das wird schon vorher überprüft)
                                        throw new Exception("Bitte wählen Sie einen gültigen Haushalt aus, die Umbuchung kann sonst nicht verarbeitet werden.");
                                    }
                                    else
                                    {
                                        // Für die BetrifftPerson konnte offensichlich keine Leistung gefunden werden, in dem der Dummy-Haushalt erstellt werden könnte
                                        throw new Exception(string.Format("Keine gültige Leistung gefunden für BetrifftPerson {0}", row["BetrifftBaPersonID"]));
                                    }
                                }

                                string personenIDs = (string)row["SelectedHaushaltProleistPersonenIDs"];
                                int finanzplanID = 0;

                                if (mapAlreadyCreatedProleistHaushalteToBgFinanzplanID.TryGetValue(personenIDs, out finanzplanID) && finanzplanID > 0)
                                {
                                    // Speichere die FinanzplanID
                                    row["BgFinanzplanID"] = finanzplanID;
                                }
                                else
                                {
                                    // Der Proleist-Haushalt wurde noch nicht erstellt, d.h. es muss ein Proleist-Haushalt im KiSS nachgebildet werden

                                    // Erstelle einen Dummy-Haushalt in der Leistung des Belegs

                                    // Erstelle dazu zuerst einen neuen Finanzplan
                                    object objfinanzplanID = DBUtil.ExecuteScalarSQLThrowingException(@"
                                        DECLARE @BgFinanzplanID int

                                        INSERT INTO [dbo].[BgFinanzplan]
                                                   ([FaLeistungID]
                                                   ,[BgBewilligungStatusCode]
                                                   ,[WhHilfeTypCode]
                                                   ,[GeplantVon]
                                                   ,[GeplantBis]
                                                   ,[DatumVon]
                                                   ,[DatumBis]
                                                   ,[Bemerkung])
                                             VALUES
                                                   ({0}
                                                   ,9 -- Gesperrt
                                                   ,2 -- Normale WH
                                                   ,{1}
                                                   ,{2}
                                                   ,{1}
                                                   ,{2}
                                                   ,'Automatisch generierter Finanzplan, einzig um den Proleist-Haushalt abzubilden')

                                        SELECT SCOPE_IDENTITY()", qryUpdateBuchungBrutto["FaLeistungID"], row["SelectedHaushaltDatumVon"], row["SelectedHaushaltDatumBis"]);

                                    finanzplanID = int.Parse(objfinanzplanID.ToString());

                                    // Speichere die neue Finanzplan-ID
                                    row["BgFinanzplanID"] = finanzplanID;

                                    // Erstelle nun ein Masterbudget
                                    DBUtil.ExecSQLThrowingException(@"
                                        INSERT INTO [dbo].[BgBudget]
                                               ([BgFinanzplanID]
                                               ,[MasterBudget]
                                               ,[BgBewilligungStatusCode]
                                               ,[Jahr]
                                               ,[Monat])
                                            VALUES
                                               ({0}
                                               ,1
                                               ,9
                                               ,YEAR({1})
                                               ,MONTH({1}))", finanzplanID, row["SelectedHaushaltDatumVon"]);

                                    // Füge nun alle Personen im Haushalt zum Finanzplan dazu
                                    foreach (string id in personenIDs.Split(','))
                                    {
                                        int personID = int.Parse(id);

                                        DBUtil.ExecSQLThrowingException(@"
                                            INSERT INTO [dbo].[BgFinanzplan_BaPerson]
                                                       ([BgFinanzplanID]
                                                       ,[BaPersonID]
                                                       ,[IstUnterstuetzt])
                                                 VALUES
                                                       ({0}
                                                       ,{1}
                                                       ,1)", finanzplanID, personID);
                                    }

                                    // Speichere den erstellen Proleist-Haushalt, falls nochmals eine Buchung mit dem gleichen Proleist-Haushalt vorkommt
                                    mapAlreadyCreatedProleistHaushalteToBgFinanzplanID.Add(personenIDs, finanzplanID);

                                    // Hier merken wir uns alle FallIDs, die neue Haushalte bekommen haben, damit wir weiter unten die WV-Einheiten nachbilden können
                                    if (!listFaelleMitNeuenProleistHaushalten.Contains((int)row["FaFallID"]))
                                    {
                                        listFaelleMitNeuenProleistHaushalten.Add((int)row["FaFallID"]);
                                    }
                                }
                            }

                            // Detailpositionen erstellen
                            if (status != 1)
                            {
                                // Der Status ist grün oder fehlerhaft, d.h. es gibt bereits einen Detailbeleg
                                // Da wir die Detailbelege neu aufbauen, müssen wir zuerst die existierenden Detailbelege löschen
                                DBUtil.ExecSQLThrowingException("DELETE FROM KbBuchungBruttoPerson WHERE KbBuchungBruttoID = {0}", row["KbBuchungBruttoID"]);
                            }

                            int positionImBeleg = 1;
                            SqlQuery qryDetailPositionen = DBUtil.OpenSQL("SELECT * FROM #TempKbBuchungBruttoPerson WHERE KbBuchungBruttoID = {0}", row["KbBuchungBruttoID"]);

                            foreach (DataRow detailRow in qryDetailPositionen.DataTable.Rows)
                            {
                                // Erstelle eine neuen Detailposition
                                qryUpdateBuchungBruttoPerson.Insert("KbBuchungBruttoPerson");

                                // Kopiere die Detailpositions-Daten
                                qryUpdateBuchungBruttoPerson["BaPersonID"] = detailRow["BaPersonID"];
                                qryUpdateBuchungBruttoPerson["Buchungstext"] = detailRow["Buchungstext"];
                                qryUpdateBuchungBruttoPerson["Betrag"] = detailRow["Betrag"];
                                qryUpdateBuchungBruttoPerson["VerwPeriodeVon"] = detailRow["VerwPeriodeVon"];
                                qryUpdateBuchungBruttoPerson["VerwPeriodeBis"] = detailRow["VerwPeriodeBis"];
                                qryUpdateBuchungBruttoPerson["KbBuchungBruttoID"] = qryUpdateBuchungBrutto["KbBuchungBruttoID"];

                                // Stelle sicher, dass nur Belege ans PSCD gesendet werden, bei denen die Beträge <> 0.00 sind.
                                if ((decimal)qryUpdateBuchungBruttoPerson["Betrag"] == 0)
                                {
                                    qryUpdateBuchungBruttoPerson["PositionImBeleg"] = 0;	// Dieser Beleg soll nicht ans PSCD geschickt werden, da der Betrag = 0.00 ist
                                }
                                else
                                {
                                    qryUpdateBuchungBruttoPerson["PositionImBeleg"] = positionImBeleg++;
                                }

                                qryUpdateBuchungBruttoPerson.Post("KbBuchungBruttoPerson");
                            }
                        }

                        // Bei einer Neubuchung auf SiLei-LA muss eine neue SiLei erstellt werden
                        if (status == 1 && !stornoRow && IsSiLeiAuszahlung(row["Teilvorgang"] as int?))
                        {
                            string kontoNr = row["KontoNr"] as string;
                            int? baMieteSicherheitsleistungArtCode = null;
                            if (kontoNr == "320")
                                baMieteSicherheitsleistungArtCode = 3; //AS
                            else if (kontoNr == "321")
                                baMieteSicherheitsleistungArtCode = 2; //MD
                            DBUtil.ExecSQLThrowingException(@"
                              INSERT INTO dbo.BaSicherheitsleistung(BaPersonID, AuszahlungAm, BaMieteSicherheitsleistungArtCode)
                              VALUES ({0}, {1}, {2})

                              INSERT INTO BaSicherheitsleistungPosition(BaSicherheitsleistungID, KbBuchungBruttoID)
                              VALUES (SCOPE_IDENTITY(), {3})", row["LTBaPersonID"], valutaDatum, baMieteSicherheitsleistungArtCode, qryUpdateBuchungBrutto["KbBuchungBruttoID"]);
                        }
                    }

                    // Falls Proleist-Haushalte im KiSS nachgebildet wurden, müssen die WV-Einheiten neu gebildet werden
                    foreach (int fallID in listFaelleMitNeuenProleistHaushalten)
                    {
                        DBUtil.ExecuteScalarSQLThrowingException("EXEC spWhWVModifyUnits {0}", fallID);
                    }

                    Session.Commit();

                    _updateWasSuccessfull = true;

                    DlgProgressLog.AddLine(string.Format("{0} Storno-/Neubuchung(en) erzeugt", CountNeuBuchungen));
                }
                catch (Exception ex)
                {
                    Session.Rollback();
                    DlgProgressLog.AddError(string.Format("Neubuchungen erzeugen fehlgeschlagen: {0}", ex.Message));
                    DlgProgressLog.EndProgress();
                    DlgProgressLog.ShowTopMost();
                    Cursor = Cursors.Default;
                    return;
                }

                if (kbBuchungBruttoIDsForTransfer.Count == 0)
                {
                    DlgProgressLog.AddLine("Keine Buchungen an PSCD zu übertragen");
                }
                else
                {
                    try
                    {
                        //Neubuchungen übertragen
                        DlgProgressLog.AddLine("Buchungen an PSCD übertragen...");
                        KiSS4.FAMOZ.PSCDServices.PSCDInterface.SubmitWhBuchungsstoff(null, kbBuchungBruttoIDsForTransfer.ToArray(), edtValutaDatum.DateTime);
                        DlgProgressLog.AddLine("Buchungen erfolgreich an PSCD übertragen");
                    }
                    catch (Exception ex)
                    {
                        DlgProgressLog.AddError(string.Format("Buchungen an PSCD übertragen fehlgeschlagen: {0}", ex.Message));

                        // Setze den Status der Belege, die nicht korrekt übermittelt wurden, auf Status 5 (Fehlerhaft)
                        foreach (int id in kbBuchungBruttoIDsForTransfer)
                        {
                            try
                            {
                                DBUtil.ExecSQL(@"
                                    UPDATE KbBuchungBrutto
                                        SET    KbBuchungStatusCode = 5
                                        WHERE  KbBuchungBruttoID = {0} and
                           	                   KbBuchungStatusCode = 2", id);
                            }
                            catch (Exception ex2)
                            {
                                DlgProgressLog.AddError(string.Format("Problem beim Setzen des Status von Beleg {0} auf status 'Fehlerhaft': {1}", id, ex2.Message));
                            }
                        }

                        DlgProgressLog.EndProgress();
                        DlgProgressLog.ShowTopMost();
                        return;
                    }
                }

                // Update von Buchungs-Stati
                //==========================

                // Bei Altdaten ist der Status der Originalbuchung by Definition auf Ausgeglichen, d.h. wir setzen auch die NEU-Buchungen auf ausgeglichen
                DBUtil.ExecSQL(@"
                    UPDATE KbBuchungBrutto
                        SET    KbBuchungStatusCode = 6
                        WHERE  MigDetailBuchungID = {0} and
                               TransferDatum is not null and
                           	   Text like 'NEU%'",
                    qryMigDetailBuchung["MigDetailBuchungID"]);

                //Der Status der Stornobuchung wurde durch die Übermittlung ans PSCD auf 3 (ZahlauftragErstellt) gesetzt
                //Er sollte 8 (storniert) sein
                //Auch als Nachbereinigung für Status 6
                DBUtil.ExecSQL(@"
                    UPDATE KbBuchungBrutto
                    SET    KbBuchungStatusCode = 8
                    WHERE  MigDetailBuchungID = {0} and
                           KbBuchungStatusCode in (3,6) and
                           Text like 'STO %'",
                    qryMigDetailBuchung["MigDetailBuchungID"]);

                DlgProgressLog.AddLine("");
                DlgProgressLog.AddLine("Folgende Belege wurden übermittelt:");

                foreach (DataRow row in qryUpdateBuchungBrutto.DataTable.Rows)
                {
                    DlgProgressLog.AddLine(string.Format("{0} ({1})", row["BelegNr"], row["Text"]));
                }

                DlgProgressLog.EndProgress();
                DlgProgressLog.ShowTopMost();
            }
            finally
            {
                Cursor = Cursors.Default;
            }
        }

        private void ProgressEnd()
        {
            if (_updateWasSuccessfull)
            {
                qryMigDetailBuchung.Refresh();

                try
                {
                    DataSet ds = qryMigDetailBuchung.DataSet;
                    ds.Relations.Clear();
                    qryMigDetailBuchung.Refresh();
                    ds.Relations.Add("BelegDetail",
                        new DataColumn[] { ds.Tables[0].Columns["BelegNr"], ds.Tables[0].Columns["LA"], ds.Tables[0].Columns["BaPersonID"] },
                        new DataColumn[] { ds.Tables[1].Columns["BelegNr"], ds.Tables[1].Columns["LA"], ds.Tables[1].Columns["BetrifftPersonID"] });
                }
                catch { }

                qryMigDetailBuchung_PositionChanged(null, EventArgs.Empty);
            }
        }

        private bool RecreateDetailBuchungen(bool forceRecreate)
        {
            if (_ChangingData) return true;    // Keine Buchungen erstellen, wärend noch Daten zugefügt werden

            if ((int)qryKbBuchungBrutto["KbBuchungStatusCode"] == 3 || (int)qryKbBuchungBrutto["KbBuchungStatusCode"] == 8) return true; // Buchungen, die bereits übermittelt oder storniert sind, können nicht mehr geändert werden

            try
            {
                Session.BeginTransaction();

                bool storno = (bool)qryKbBuchungBrutto["Storno"];
                bool quoting = chkQuoting.Checked;
                decimal neuBetrag = (decimal)qryKbBuchungBrutto["Betrag"];
                bool useOriginalDetailBelege = false;
                decimal sign = storno ? -1 : 1;
                List<int> personen = new List<int>();

                int kbBuchungBruttoID = (int)qryKbBuchungBrutto["KbBuchungBruttoID"];

                // Entferne die ID aus der Liste, da nun die Detailpositionen neu aufgebaut werden
                if (_KbBuchungBruttoIDsWithExistingDetailPositions.Contains(kbBuchungBruttoID))
                {
                    _KbBuchungBruttoIDsWithExistingDetailPositions.Remove(kbBuchungBruttoID);
                }

                // Entferne zuerst alle Detail-Rows für die Kopf-Buchung
                BelegeKorrigierenTemporaryTableHelper.RemoveDetailsFromTemporaryKbBuchungBruttoPersonTable(kbBuchungBruttoID);

                if (!forceRecreate && (storno || !quoting || DBUtil.IsEmpty(qryKbBuchungBrutto["BgFinanzplanID"])))
                {
                    // Wenn das Flag forceRecreate nicht gesetzt ist, oder wenn dies ein STO-Beleg ist, oder wenn der NEU-Beleg nicht gequotet ist, oder wenn der Finanzplan noch nicht definiert ist vom NEU-Beleg,
                    // dann übernehme die Detailbelege vom Originalbeleg
                    useOriginalDetailBelege = true;
                }

                if (useOriginalDetailBelege)
                {
                    // übernehme die Detailbelege vom Originalbeleg (quoting & splitting)
                    DataTable origDetailTable = qryMigDetailBuchung.DataSet.Tables[1];
                    foreach (DataRow origRow in origDetailTable.Rows)
                    {
                        if (origRow["BelegNr"].Equals(qryMigDetailBuchung["BelegNr"]) && origRow["LA"].Equals(qryMigDetailBuchung["LA"]) & origRow["BetrifftPersonID"].Equals(qryMigDetailBuchung["BaPersonID"]))
                        {
                            // Kopiere diese Detail-Zeile
                            int baPersonID = DBUtil.IsEmpty(origRow["BaPersonID"]) ? 0 : (int)origRow["BaPersonID"];
                            BelegeKorrigierenTemporaryTableHelper.AddDetailToTemporaryKbBuchungBruttoPersonTable(kbBuchungBruttoID, (string)origRow["Person"], baPersonID, (string)qryKbBuchungBrutto["Text"], (decimal)sign * decimal.Parse(origRow["Betrag"].ToString()), (DateTime)origRow["VerwPeriodeVon"], (DateTime)origRow["VerwPeriodeBis"]);
                        }
                    }
                }
                else
                {
                    if (quoting)
                    {
                        // Quoting
                        if (!DBUtil.IsEmpty(qryKbBuchungBrutto["BgFinanzplanID"]) && (int)qryKbBuchungBrutto["BgFinanzplanID"] > 0)
                        {
                            // Der Finanzplan des NEU-Belegs ist definiert => verwende den Haushalt aus dem Finanzplan fürs quoting
                            SqlQuery haushalt = DBUtil.OpenSQL("SELECT DISTINCT BaPersonID FROM BgFinanzplan_BaPerson WHERE BgFinanzplanID = {0} AND IstUnterstuetzt = 1", qryKbBuchungBrutto["BgFinanzplanID"]);

                            foreach (DataRow row in haushalt.DataTable.Rows)
                            {
                                personen.Add((int)row["BaPersonID"]);
                            }
                        }
                        else if (!DBUtil.IsEmpty(qryKbBuchungBrutto["SelectedHaushaltProleistPersonenIDs"]) && ((string)qryKbBuchungBrutto["SelectedHaushaltProleistPersonenIDs"]).Length > 0)
                        {
                            // Ein Proleist-Haushalt wurde selektiert
                            foreach (string id in ((string)qryKbBuchungBrutto["SelectedHaushaltProleistPersonenIDs"]).Split(','))
                            {
                                personen.Add(int.Parse(id));
                            }
                        }
                        else
                        {
                            // Weder der Proleist-Haushalt noch ein KiSS-Finanzplan ist definiert => Fehler
                            throw new Exception("Bitte selektieren Sie einen gültigen Haushalt.");
                        }
                    }
                    else
                    {
                        // Kein Quoting, d.h. wir erstellen nur einen Detailbeleg für BetrifftPerson (falls definiert) und sonst für LT
                        personen.Add(DBUtil.IsEmpty(qryKbBuchungBrutto["BetrifftBaPersonID"]) ? (int)qryKbBuchungBrutto["LTBaPersonID"] : (int)qryKbBuchungBrutto["BetrifftBaPersonID"]);
                    }

                    // Nun erstelle die Detailbelege
                    int anzahlPersonen = personen.Count;

                    // runden
                    decimal teilbetrag = neuBetrag / anzahlPersonen;
                    teilbetrag = Math.Floor(teilbetrag * 20m + 0.5m) / 20m;
                    int counter = 0;
                    decimal summe = 0m;
                    decimal betrag = 0;

                    SqlQuery person = DBUtil.OpenSQL("SELECT Person=NameVorname + ' (' + convert(varchar,BaPersonID) + ')' FROM vwPerson WHERE BaPersonID = {0}", 0);

                    foreach (int personID in personen)
                    {
                        if (++counter == anzahlPersonen)
                            betrag = neuBetrag - summe;
                        else
                            betrag = teilbetrag;

                        person.Fill(personID);

                        BelegeKorrigierenTemporaryTableHelper.AddDetailToTemporaryKbBuchungBruttoPersonTable(kbBuchungBruttoID, (string)person["Person"], personID, (string)qryKbBuchungBrutto["Text"], betrag, (DateTime)qryKbBuchungBrutto["VerwPeriodeVon"], (DateTime)qryKbBuchungBrutto["VerwPeriodeBis"]);

                        summe += teilbetrag;
                    }
                }

                Session.Commit();

                qryKbBuchungBruttoPerson.Fill(kbBuchungBruttoID);
            }
            catch (Exception ex)
            {
                Session.Rollback();
                KissMsg.ShowInfo(ex.Message);

                return false;
            }

            return true;
        }

        /// <summary>
        /// Lässt den Benutzer aus den möglichen KiSS- und dem Proleist-Haushalt wählen.
        /// Der selektierte Haushalt wird direkt in den dafür vorgesehenen Felder in qryKbBuchungBrutto abgelegt
        /// Wenn der Parameter selectProleistHaushaltSilently= true ist, wird ohne Dialog der Original-Proleist-Haushalt gesucht und im STO-Beleg gespeichert.
        /// Gibt false zurück, wenn der Benutzer Cancel gedrückt hat
        /// </summary>
        /// <param name="selectProleistHaushaltSilently"></param>
        private bool SelectHaushalt(bool selectProleistHaushaltSilently)
        {
            bool cancel = false;

            KissLookupDialog dlgHaushalt = new KissLookupDialog("Selektieren Sie einen Haushalt des gewählten LT", "OrigHH = 1");
            cancel = !dlgHaushalt.SearchData(@"
                DECLARE @Haushalte TABLE
                (
                    OrigHH bit,
                    FaLeistungID int,
                    FaFallID int,
                    DatVonKiSS datetime NULL,
                    DatBisKiSS datetime NULL,
                    DatVonProLei datetime NULL,
                    DatBisProLei datetime NULL,
                    AnzPers int,
                    PersonenIDs$ varchar(200),
                    Personen varchar(1000),
                    Bemerkung varchar(100),
                    BgFinanzplanID$ int,
                    EntsprichtProleistHaushalt$ bit,
                    HHVomLT$ bit         -- Haushalt einer Leistung des Leistungsträgers
                )

                -- Suche alle KiSS-Haushalte des Leistungsträgers (Gruppiert nach Personenzusammensetzung, Finanzpläne mit gleicher Zusammensetzung werden zusammengezogen in einen Eintrag)
                INSERT INTO @Haushalte
                    SELECT
                    Max(OH),
                    Max(FaLeistungID),
                    Max(FaFallID),
                    Min(DatVonKiSS),
                    Max(DatBisKiSS),
                    NULL,
                    NULL,
                    AnzPers,
                    PersonenIDs$,
                    Personen,
                    T,
                    Max(BgFinanzplanID),
                    Max(EntsprichtProleistHaushalt),
                    HHVomLT$ = MAX(T.HHVomLT$)          -- Falls der HH mind. einmal für den LT vorkommt, dann wollen wir ihn behalten
                     FROM (
                    SELECT
                        OH = 0,    -- Dies ist sicher nicht der Original-Haushalt
                        LEI.FaLeistungID,
                        LEI.FaFallID,
                        DatVonKiSS=FIP.DatumVon,
                        DatBisKiSS=FIP.DatumBis,
                        AnzPers=Count(PER.BaPersonID),
                        PersonenIDs$=dbo.ConcDistinctOrder(PER.BaPersonID),
                        Personen=dbo.Conc(PER.DisplayText),
                        T = 'KiSS-Haushalt',
                        FIP.BgFinanzplanID,
                        EntsprichtProleistHaushalt = 0,   -- Dies ist ein KiSS-Haushalt, kein Proleist-Haushalt,
                        HHVomLT$ = CASE WHEN LEI.BaPersonID = {2} THEN 1 ELSE 0 END
                    FROM FaLeistung LEI
                    INNER JOIN BgFinanzplan FIP ON FIP.FaLeistungID = LEI.FaLeistungID
                    INNER JOIN BgFinanzplan_BaPerson FPP ON FPP.BgFinanzplanID = FIP.BgFinanzplanID AND FPP.IstUnterstuetzt = 1
                    INNER JOIN vwPerson PER ON PER.BaPersonID = FPP.BaPersonID
                    WHERE LEI.FaFallID = {1}
                    GROUP BY LEI.FaFallID, LEI.FaLeistungID, FIP.DatumVon, FIP.DatumBis, FIP.BgFinanzplanID, CASE WHEN LEI.BaPersonID = {2} THEN 1 ELSE 0 END
                    ) T
                    GROUP BY AnzPers, PersonenIDs$, Personen, T

                -- Füge alle Proleist-Haushalte dazu
                INSERT INTO @Haushalte
                    SELECT
                        OrigHH = Max(T2.OrigHH),
                        FaLeistungID=T2.FaLeistungID,
                        FaFallID=T2.FaFallID,
                        Null,
                        Null,
                        DatVonProLei=Min(T2.DatVonProLei),
                        DatBisProLei=Max(T2.DatBisProLei),
                        AnzPers=T2.AnzPers,
                        PersonenIDs$=T2.PersonenIDs$,
                        Personen=Max(T2.Personen),
                        'Proleist-Haushalt',
                        0,
                        1,   -- Dies ist ein Proleist-Haushalt
                        HHVomLT$ = 1        -- Wir wollen alle Proleist-Haushalte für den LT anzeigen
                    FROM
                    (
	                    SELECT DISTINCT
                            OrigHH = Max(T.OrigHH),
		                    FaLeistungID=T.FaLeistungID,
		                    FaFallID=T.FaFallID,
		                    DatVonProLei=Min(T.DatVonProLei),
		                    DatBisProLei=Max(T.DatBisProLei),
		                    AnzPers=Count(T.BaPersonID),
		                    PersonenIDs$=dbo.ConcDistinctOrder(T.BaPersonID),
		                    Personen=dbo.Conc(T.Person)
	                    FROM
	                    (	Select DISTINCT
                                OrigHH = CASE WHEN MIG.NummernKreis + '-' + convert(varchar(20),MIG.BelegNummer) = {3}
                                                             AND (CASE WHEN ISNULL(BKA.Quoting,0) = 0 THEN MIG.BaPersonID ELSE 0 END) = {4}
                                                             AND (CASE WHEN MIG.LeistungsArtNrProLeist BETWEEN 9000 AND 9999 THEN 'V' ELSE '' END + MIG.KissLeistungsart) = {5} THEN 1 ELSE 0 END,
			                    LEI.FaLeistungID,
			                    LEI.FaFallID,
			                    DatVonProLei=Min(MIG.VerwendungVon),
			                    DatBisProLei=Max(MIG.VerwendungBis),
			                    BaPersonID=PER.BaPersonID,
			                    Person=PER.DisplayText,
			                    Beleg = MIG.NummernKreis + '-' + convert(varchar(20),MIG.BelegNummer),
			                    Quoting = CASE WHEN ISNULL(BKA.Quoting,0) = 0 THEN MIG.BaPersonID ELSE 0 END,
			                    LA = CASE WHEN MIG.LeistungsArtNrProLeist BETWEEN 9000 AND 9999 THEN 'V' ELSE '' END + MIG.KissLeistungsart
		                    FROM MigDetailBuchung MIG
			                    INNER JOIN dbo.vwPerson PER ON PER.BaPersonID = MIG.BaPersonID
			                    INNER JOIN dbo.FaLeistung LEI ON LEI.FaLeistungID = MIG.FaLeistungID
			                    LEFT  JOIN dbo.BgKostenart BKA (READUNCOMMITTED)ON BKA.KontoNr = MIG.KissLeistungsart
			                    WHERE LEI.FaFallID = {1}
								    AND IsNull(BKA.Quoting, 0) <> 0
                                    AND ({6} = 0 OR
                                    (
                                        (MIG.NummernKreis + '-' + convert(varchar(20),MIG.BelegNummer)) = {3}  -- Schränke die Suche des Proleist-Haushalts auf den Haushalt des Belegs ein
                                        AND (CASE WHEN ISNULL(BKA.Quoting,0) = 0 THEN MIG.BaPersonID ELSE 0 END) = {4}
                                        AND (CASE WHEN MIG.LeistungsArtNrProLeist BETWEEN 9000 AND 9999 THEN 'V' ELSE '' END + MIG.KissLeistungsart) = {5}
                                    ))
		                    GROUP BY LEI.FaLeistungID, LEI.FaFallID, PER.BaPersonID, PER.DisplayText,
                                    MIG.NummernKreis + '-' + convert(varchar(20),MIG.BelegNummer),
                                    CASE WHEN ISNULL(BKA.Quoting,0) = 0 THEN MIG.BaPersonID ELSE 0 END,
                                    CASE WHEN MIG.LeistungsArtNrProLeist BETWEEN 9000 AND 9999 THEN 'V' ELSE '' END + MIG.KissLeistungsart
		                    ) T
	                    GROUP BY T.FaFallID, T.FaLeistungID, T.Beleg, T.Quoting, T.LA
	                    ) T2
                    GROUP BY T2.FaFallID, T2.FaLeistungID, T2.AnzPers, T2.PersonenIDs$

                -- Prüfe, ob einer der KiSS-Haushalte die gleiche Personenkonstellation wir der Proleist-Haushalt hat, und wenn ja, markiere Ihn als 'EntsprichtProleistHaushalt'
                UPDATE H SET
                        DatVonProLei = HTemp.DatVonProLei,
                        DatBisProLei = HTemp.DatBisProLei,
                        EntsprichtProleistHaushalt$ = 1,
                        Bemerkung='Proleist-Haushalt, im KiSS nacherfasst',
                        OrigHH = CASE WHEN H.OrigHH = 1 OR HTemp.OrigHH = 1 THEN 1 ELSE 0 END,
                        HHVomLT$ = 1        -- Nacherfasste Proleist-Haushalte wollen wir auf jeden Fall anzeigen
                FROM @Haushalte H
                INNER JOIN (SELECT DISTINCT PersonenIDs$, OrigHH, DatVonProLei, DatBisProLei FROM @Haushalte  WHERE BgFinanzplanID$ = 0) HTemp ON HTemp.PersonenIDs$ = H.PersonenIDs$
                WHERE H.BgFinanzplanID$ > 0

                -- Lösche den Proleist-Haushalt wieder, falls die gleiche Personenkonstellation schon in den echten KiSS-Haushalten vorkommt (Proleist-Haushalte haben keine BgFinanzplanID)
                DELETE FROM @Haushalte
                WHERE BgFinanzplanID$ = 0 AND PersonenIDs$ IN (SELECT DISTINCT PersonenIDs$ FROM @Haushalte WHERE BgFinanzplanID$ <> 0)

                -- Lösche alle Haushalte, die nicht für den LT markiert sind
                DELETE FROM @Haushalte WHERE HHVomLT$ = 0

                IF {6} = 1 BEGIN
                    -- Gib nur den Proleist-Haushalt zurück (d.h. entweder den effektiven Proleist-Haushalt, oder den KiSS-Haushalt, der dem Proleist-Haushalt entspricht)
                    SELECT TOP 1 * FROM @Haushalte WHERE EntsprichtProleistHaushalt$ = 1 ORDER BY IsNull(DatVonKiSS, DatVonProLei)  DESC
                END ELSE BEGIN
                    -- Gib alle gefundenen Haushalte zurück
                    SELECT * FROM @Haushalte ORDER BY IsNull(DatVonKiSS, DatVonProLei) DESC
                END", "", !selectProleistHaushaltSilently,
                    DBUtil.IsEmpty(qryKbBuchungBrutto["FaFallID"]) ? qryMigDetailBuchung["FaLeistungID"] : qryKbBuchungBrutto["FaFallID"],
                                qryKbBuchungBrutto["LTBaPersonID"],
                                qryMigDetailBuchung["BelegNr"],
                                DBUtil.IsEmpty(qryMigDetailBuchung["BaPersonID"]) ? 0 : qryMigDetailBuchung["BaPersonID"],
                                qryMigDetailBuchung["LA"],
                                selectProleistHaushaltSilently);

            if (cancel) return false;

            // Speichere hier die Finanzplan-ID, die Leistungs-ID und die Eckdaten des selektierten Haushalts ab
            qryKbBuchungBrutto["SelectedHaushaltDatumVon"] = DBUtil.IsEmpty(dlgHaushalt["DatVonProLei"]) ? dlgHaushalt["DatVonKiSS"] : dlgHaushalt["DatVonProLei"];
            qryKbBuchungBrutto["SelectedHaushaltDatumBis"] = DBUtil.IsEmpty(dlgHaushalt["DatBisProLei"]) ? dlgHaushalt["DatBisKiSS"] : dlgHaushalt["DatBisProLei"];
            qryKbBuchungBrutto["SelectedHaushaltProleistPersonenIDs"] = dlgHaushalt["PersonenIDs$"];
            qryKbBuchungBrutto["BgFinanzplanID"] = dlgHaushalt["BgFinanzplanID$"];
            qryKbBuchungBrutto["FaLeistungID"] = dlgHaushalt["FaLeistungID"];

            return true;
        }

        private void SetSplittingArt(object splittingartCode)
        {
            if (!(splittingartCode is int))
                return;
            int art = (int)splittingartCode;
            int originalArt = 0;

            if (!DBUtil.IsEmpty(qryMigDetailBuchung["BgSplittingArtCode"]))
            {
                originalArt = (int)qryMigDetailBuchung["BgSplittingArtCode"];
            }

            bool storno = (bool)qryKbBuchungBrutto["Storno"];
            bool verwPeriodeChanged = false;

            if (!storno && art == 2) // Monatssplitting
            {
                // Gewisse Altbuchungen haben für das Monatssplitting noch ungültige Verwendungsperioden
                DateTime von = (DateTime)qryKbBuchungBrutto["VerwPeriodeVon"];
                DateTime bis = (DateTime)qryKbBuchungBrutto["VerwPeriodeBis"];

                if (von.Day != 1)
                {
                    // VerwendungsperiodeVon ist nicht am Anfang des Monats => Korrigiere dies auf Anfang des Monats
                    qryKbBuchungBrutto["VerwPeriodeVon"] = new DateTime(von.Year, von.Month, 1);
                    verwPeriodeChanged = true;
                }

                if (bis.AddDays(1).Day != 1)
                {
                    // VerwendungsperiodeBis ist nicht am Ende des Monats => Korrigiere dies auf Ende des Monats
                    qryKbBuchungBrutto["VerwPeriodeBis"] = new DateTime(bis.Year, bis.Month, 1).AddMonths(1).AddDays(-1);
                    verwPeriodeChanged = true;
                }
            }

            if (!storno && art == 3) // Valuta
            {
                qryKbBuchungBrutto["VerwPeriodeVon"] = qryMigDetailBuchung["ValutaDatum"];
                qryKbBuchungBrutto["VerwPeriodeBis"] = qryMigDetailBuchung["ValutaDatum"];
                verwPeriodeChanged = true;
            }

            if (!storno && art == 4) // Entscheid
            {
                qryKbBuchungBrutto["VerwPeriodeBis"] = qryKbBuchungBrutto["VerwPeriodeVon"];
                verwPeriodeChanged = true;
            }

            if (verwPeriodeChanged)
            {
                UpdateVerwPeriodeOfDetailPositionen();
            }

            EnableControls();   // Das Ändern der Splittinart hat ev. Auswirkungen auf das Control-Enabling
        }

        #endregion

        #endregion

        private void chkQuoting_CheckedChanged(object sender, EventArgs e)
        {
            if (_ChangingData) return;

            try
            {
                qryKbBuchungBrutto["Quoting"] = chkQuoting.Checked;

                // Prüfe den vorherigen Zustand (vor dem Click)
                if (chkQuoting.Checked)
                {
                    // War nicht gecheckt, d.h. nun ist er gecheckt
                    edtBetrifftPerson.EditMode = EditModeType.ReadOnly;
                    edtBetrifftPerson.EditValue = "";
                    qryKbBuchungBrutto["BetrifftBaPersonID"] = DBNull.Value;
                    qryKbBuchungBrutto["BetrifftPerson"] = DBNull.Value;
                }
                else
                {
                    edtBetrifftPerson.EditMode = EditModeType.Normal;
                }

                RecreateDetailBuchungen(true);
                EnableHaushaltButton();
            }
            catch (Exception ex)
            {
                System.Diagnostics.Trace.WriteLine("CtlKbBelegKorrekturAltdaten.chkQuoting_CheckedChanged: Exception abgefangen: " + ex.Message);
            }
        }

        private void edtAbretung_EditValueChanged(object sender, EventArgs e)
        {
            qryKbBuchungBrutto["Abgetreten"] = edtAbtretung.EditValue as bool? ?? false;

            if (qryKbBuchungBrutto["Abgetreten"] as bool? ?? false)
            {
                qryKbBuchungBrutto["Hauptvorgang"] = qryKbBuchungBrutto["BgKostenartHauptvorgangAbtretung"];
                qryKbBuchungBrutto["Teilvorgang"] = qryKbBuchungBrutto["BgKostenartTeilvorgangAbtretung"];
            }
            else
            {
                qryKbBuchungBrutto["Hauptvorgang"] = qryKbBuchungBrutto["BgKostenartHauptvorgang"];
                qryKbBuchungBrutto["Teilvorgang"] = qryKbBuchungBrutto["BgKostenartTeilvorgang"];
            }

            RecreateDetailBuchungen(true);
        }

        private void qryKbBuchungBrutto_AfterDelete(object sender, EventArgs e)
        {
            qryKbBuchungBrutto.DataTable.AcceptChanges();
        }

        private void tabControlSearch_SelectedTabChanging(object sender, System.ComponentModel.CancelEventArgs e)
        {
            if (tabControlSearch.SelectedTab == tpgSuchen)
            {
                // Wir wechseln von Suchen zur Liste => Validiere Suchkriterien

                // Prüfe, ob mind. ein genügendes Suchkriterium eingegeben wurde
                if (DBUtil.IsEmpty(edtSucheFaFallID.EditValue) &&
                    DBUtil.IsEmpty(edtSucheNummernkreis.EditValue) &&
                    DBUtil.IsEmpty(edtSucheBelegNr.EditValue) &&
                    DBUtil.IsEmpty(edtSucheBetrifftPerson.EditValue))
                {
                    KissMsg.ShowInfo("Um die Suche genügend einzuschränken, müssen Sie mind. den Fall, den Nummernkreis & Beleg oder BetrifftPerson angeben");
                    e.Cancel = true;
                }

                try
                {
                    _ChangingData = true;
                }
                finally
                {
                    _ChangingData = false;
                }
                tabKorrekturKopf.Title = "STO/NEU Belegkopf";
                tabKorrekturDetailBuchungen.Title = "STO/NEU Positionen";
            }
        }
    }
}
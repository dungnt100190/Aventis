SET ANSI_NULLS ON;
GO
SET QUOTED_IDENTIFIER OFF;
GO

EXECUTE spDropObject spXTask_Create;
GO
/*===============================================================================================
  $Revision: 14 $
=================================================================================================
  Description
-------------------------------------------------------------------------------------------------
  SUMMARY: .
    @Param1   .
    @Param20: .
  -
  RETURNS: .
=================================================================================================
  TEST:    EXEC dbo.spXTask_Create 'testing';
=================================================================================================*/

CREATE PROCEDURE dbo.spXTask_Create
(
  @CreatorModifier VARCHAR(50) = 'unknown'
)
AS
BEGIN
  -------------------------------------------------------------------------------
  -- start call
  -------------------------------------------------------------------------------
  SET NOCOUNT ON;
  
  -- init start
  DECLARE @StartTimeOfCode DATETIME;
  SET @StartTimeOfCode = GETDATE();
  
  PRINT ('start call: ' + CONVERT(VARCHAR(50), (GETDATE() - @StartTimeOfCode), 114));

  -----------------------------------------------------------------------------
  -- Temp Tabelle initialisieren
  -----------------------------------------------------------------------------
  DECLARE @tmpXTask TABLE
  (
    TaskSenderCode INT NOT NULL,
    TaskReceiverCode INT NOT NULL,
    TaskTypeCode INT NULL,
    TaskStatusCode INT NOT NULL,
    CreateDate DATETIME NOT NULL,
    StartDate DATETIME NULL,
    ExpirationDate DATETIME NULL,
    Subject VARCHAR(100) NULL,
    TaskDescription VARCHAR(2500) NULL,
    FaLeistungID INT NULL,
    BaPersonID INT NULL,
    SenderID INT NULL,
    ReceiverID INT NULL,
    ReferenceTable VARCHAR(100) NULL,
    ReferenceID INT NULL,
    XTaskAutoGeneratedTypeCode INT NULL  -- store the type of the autogenerated task
  );
  
  DECLARE @Aktiv BIT;
  DECLARE @AnzahlTage INT;
  
  -- info
  PRINT ('done init: ' + CONVERT(VARCHAR(50), (GETDATE() - @StartTimeOfCode), 114));

  -----------------------------------------------------------------------------
  -- SOSTAT Pendenz (Anfangszustand)
  -----------------------------------------------------------------------------
  EXEC dbo.spBFSCheckAndCreateAnfangsdossiers 1	-- 1 = Nur Pendenzen erstellen, das Erstellen der Anfangsdossier wird dann vom Sozi ausgelöst
  
  -- info
  PRINT ('done "SOSTAT Pendenz (Anfangszustand)": ' + CONVERT(VARCHAR(50), (GETDATE() - @StartTimeOfCode), 114));

  
  -----------------------------------------------------------------------------
  -- getting other tasks
  -----------------------------------------------------------------------------
  -- Ende eines Finanzplans
  SET @Aktiv = CONVERT(BIT, dbo.fnXConfig('System\Pendenzen\WarnungVorEndeFinanzplan\Aktiv', GETDATE()))
  
  IF (@Aktiv = 1)
  BEGIN
    SET @AnzahlTage = CONVERT(INT, dbo.fnXConfig('System\Pendenzen\WarnungVorEndeFinanzplan\AnzahlTage', GETDATE()));

    -- fill temporary table
    INSERT INTO @tmpXTask (TaskSenderCode, TaskReceiverCode, TaskTypeCode, TaskStatusCode, CreateDate,
                           StartDate, ExpirationDate, Subject, TaskDescription, FaLeistungID, 
                           BaPersonID, SenderID, ReceiverID, ReferenceTable, ReferenceID, XTaskAutoGeneratedTypeCode)
      EXEC dbo.spPendenzCheck_WarnungVorEndeFinanzplan @AnzahlTage;
    
    -- info
    PRINT ('done "Ende eines Finanzplans": ' + CONVERT(VARCHAR(50), (GETDATE() - @StartTimeOfCode), 114));
  END;

  -- Person wird 1
  SET @Aktiv = CONVERT(BIT, dbo.fnXConfig('System\Pendenzen\Person1\Aktiv', GETDATE()));
  
  IF (@Aktiv = 1)
  BEGIN
    SET @AnzahlTage = CONVERT(INT, dbo.fnXConfig('System\Pendenzen\Person1\AnzahlTage', GETDATE()));

    INSERT INTO @tmpXTask (TaskSenderCode, TaskReceiverCode, TaskTypeCode, TaskStatusCode, CreateDate,
                           StartDate, ExpirationDate, Subject, TaskDescription, FaLeistungID,
                           BaPersonID, SenderID, ReceiverID, ReferenceTable, ReferenceID, XTaskAutoGeneratedTypeCode)
      EXEC dbo.spPendenzCheck_Person1 @AnzahlTage;
    
    -- info
    PRINT ('done "Person wird 1": ' + CONVERT(VARCHAR(50), (GETDATE() - @StartTimeOfCode), 114));
  END;

  -- Person wird 14
  SET @Aktiv = CONVERT(BIT, dbo.fnXConfig('System\Pendenzen\Person14\Aktiv', GETDATE()));
  
  IF (@Aktiv = 1)
  BEGIN
    SET @AnzahlTage = CONVERT(INT, dbo.fnXConfig('System\Pendenzen\Person14\AnzahlTage', GETDATE()));

    INSERT INTO @tmpXTask (TaskSenderCode, TaskReceiverCode, TaskTypeCode, TaskStatusCode, CreateDate,
                           StartDate, ExpirationDate, Subject, TaskDescription, FaLeistungID,
                           BaPersonID, SenderID, ReceiverID, ReferenceTable, ReferenceID, XTaskAutoGeneratedTypeCode)
      EXEC dbo.spPendenzCheck_Person14 @AnzahlTage;
    
    -- info
    PRINT ('done "Person wird 14": ' + CONVERT(VARCHAR(50), (GETDATE() - @StartTimeOfCode), 114));
  END;
  
  -- Person wird 18
  SET @Aktiv = CONVERT(BIT, dbo.fnXConfig('System\Pendenzen\Person18\Aktiv', GETDATE()));
  
  IF (@Aktiv = 1)
  BEGIN
    SET @AnzahlTage = CONVERT(INT, dbo.fnXConfig('System\Pendenzen\Person18\AnzahlTage', GETDATE()));

    INSERT INTO @tmpXTask (TaskSenderCode, TaskReceiverCode, TaskTypeCode, TaskStatusCode, CreateDate,
                           StartDate, ExpirationDate, Subject, TaskDescription, FaLeistungID,
                           BaPersonID, SenderID, ReceiverID, ReferenceTable, ReferenceID, XTaskAutoGeneratedTypeCode)
      EXEC dbo.spPendenzCheck_Person18 @AnzahlTage;
    
    -- info
    PRINT ('done "Person wird 18": ' + CONVERT(VARCHAR(50), (GETDATE() - @StartTimeOfCode), 114));
  END;
  
  -- Person wird 25
  SET @Aktiv = CONVERT(BIT, dbo.fnXConfig('System\Pendenzen\Person25\Aktiv', GETDATE()));
  
  IF (@Aktiv = 1)
  BEGIN
    SET @AnzahlTage = CONVERT(INT, dbo.fnXConfig('System\Pendenzen\Person25\AnzahlTage', GETDATE()));

    INSERT INTO @tmpXTask (TaskSenderCode, TaskReceiverCode, TaskTypeCode, TaskStatusCode, CreateDate,
                           StartDate, ExpirationDate, Subject, TaskDescription, FaLeistungID,
                           BaPersonID, SenderID, ReceiverID, ReferenceTable, ReferenceID, XTaskAutoGeneratedTypeCode)
      EXEC dbo.spPendenzCheck_Person25 @AnzahlTage;
    
    -- info
    PRINT ('done "Person wird 25": ' + CONVERT(VARCHAR(50), (GETDATE() - @StartTimeOfCode), 114));
  END;

  -- Frau wird pensioniert
  SET @Aktiv = CONVERT(BIT, dbo.fnXConfig('System\Pendenzen\PensionsalterFrau\Aktiv', GETDATE()));
  
  IF (@Aktiv = 1)
  BEGIN
    SET @AnzahlTage = CONVERT(INT, dbo.fnXConfig('System\Pendenzen\PensionsalterFrau\AnzahlTage', GETDATE()));
    
    DECLARE @PensionsalterFrau INT;
    SET @PensionsalterFrau = CONVERT(INT, dbo.fnXConfig('System\Basis\PensionsalterFrau', GETDATE()));
    
    INSERT INTO @tmpXTask (TaskSenderCode, TaskReceiverCode, TaskTypeCode, TaskStatusCode, CreateDate,
                           StartDate, ExpirationDate, Subject, TaskDescription, FaLeistungID,
                           BaPersonID, SenderID, ReceiverID, ReferenceTable, ReferenceID, XTaskAutoGeneratedTypeCode)
      EXEC dbo.spPendenzCheck_PensionsalterFrau @AnzahlTage, @PensionsalterFrau;
    
    -- info
    PRINT ('done "Frau wird pensioniert": ' + CONVERT(VARCHAR(50), (GETDATE() - @StartTimeOfCode), 114));
  END

  -- Frau erreicht AHV-Vorbezug-Alter
  SET @Aktiv = CONVERT(BIT, dbo.fnXConfig('System\Pendenzen\AHVVorbezugPensionFrau\Aktiv', GETDATE()));
  
  IF (@Aktiv = 1)
  BEGIN
    SET @AnzahlTage = CONVERT(INT, dbo.fnXConfig('System\Pendenzen\AHVVorbezugPensionFrau\AnzahlTage', GETDATE()));
    
    DECLARE @VorbezugPensionFrau INT;
    SET @VorbezugPensionFrau = CONVERT(INT, dbo.fnXConfig('System\Basis\VorbezugPensionFrau', GETDATE()));
    
    INSERT INTO @tmpXTask (TaskSenderCode, TaskReceiverCode, TaskTypeCode, TaskStatusCode, CreateDate,
                           StartDate, ExpirationDate, Subject, TaskDescription, FaLeistungID, 
                           BaPersonID, SenderID, ReceiverID, ReferenceTable, ReferenceID, XTaskAutoGeneratedTypeCode)
      EXEC dbo.spPendenzCheck_AHVVorbezugPensionFrau @AnzahlTage, @VorbezugPensionFrau;
    
    -- info
    PRINT ('done "Frau erreicht AHV-Vorbezug-Alter": ' + CONVERT(VARCHAR(50), (GETDATE() - @StartTimeOfCode), 114));
  END;

  -- Mann wird pensioniert
  SET @Aktiv = CONVERT(BIT, dbo.fnXConfig('System\Pendenzen\PensionsalterMann\Aktiv', GETDATE()));
  
  IF (@Aktiv = 1)
  BEGIN
    SET @AnzahlTage = CONVERT(INT, dbo.fnXConfig('System\Pendenzen\PensionsalterMann\AnzahlTage', GETDATE()));
    
    DECLARE @PensionsalterMann INT;
    SET @PensionsalterMann = CONVERT(INT, dbo.fnXConfig('System\Basis\PensionsalterMann', GETDATE()));
    
    INSERT INTO @tmpXTask (TaskSenderCode, TaskReceiverCode, TaskTypeCode, TaskStatusCode, CreateDate,
                           StartDate, ExpirationDate, Subject, TaskDescription, FaLeistungID,
                           BaPersonID, SenderID, ReceiverID, ReferenceTable, ReferenceID, XTaskAutoGeneratedTypeCode)
      EXEC dbo.spPendenzCheck_PensionsalterMann @AnzahlTage, @PensionsalterMann;
    
    -- info
    PRINT ('done "Mann wird pensioniert": ' + CONVERT(VARCHAR(50), (GETDATE() - @StartTimeOfCode), 114));
  END;

  -- Mann erreicht AHV-Vorbezug-Alter
  SET @Aktiv = CONVERT(BIT, dbo.fnXConfig('System\Pendenzen\AHVVorbezugPensionMann\Aktiv', GETDATE()));
 
  IF (@Aktiv = 1)
  BEGIN
    SET @AnzahlTage = CONVERT(INT, dbo.fnXConfig('System\Pendenzen\AHVVorbezugPensionMann\AnzahlTage', GETDATE()));
    
    DECLARE @VorbezugPensionMann INT;
    SET @VorbezugPensionMann = CONVERT(INT, dbo.fnXConfig('System\Basis\VorbezugPensionMann', GETDATE()));
    
    INSERT INTO @tmpXTask (TaskSenderCode, TaskReceiverCode, TaskTypeCode, TaskStatusCode, CreateDate,
                           StartDate, ExpirationDate, Subject, TaskDescription, FaLeistungID,
                           BaPersonID, SenderID, ReceiverID, ReferenceTable, ReferenceID, XTaskAutoGeneratedTypeCode)
      EXEC dbo.spPendenzCheck_AHVVorbezugPensionMann @AnzahlTage, @VorbezugPensionMann;
    
    -- info
    PRINT ('done "Mann erreicht AHV-Vorbezug-Alter": ' + CONVERT(VARCHAR(50), (GETDATE() - @StartTimeOfCode), 114));
  END;


  -- #7737 Fallsteuerung: Pendenz für Kontrolle der DLP-Erfassung bei Phasen
  SET @Aktiv = CONVERT(BIT, dbo.fnXConfig('System\Pendenzen\AblaufDienstleistungspaket\Aktiv', GETDATE()));
 
  IF (@Aktiv = 1)
  BEGIN
    INSERT INTO @tmpXTask (
    TaskSenderCode, TaskReceiverCode, TaskTypeCode, TaskStatusCode, CreateDate,
    StartDate, ExpirationDate, Subject, TaskDescription, FaLeistungID,
    BaPersonID, SenderID, ReceiverID, ReferenceTable, ReferenceID, XTaskAutoGeneratedTypeCode)
    EXEC dbo.spPendenzCheck_FallsteuerungDLP;
  
    -- info
    PRINT ('done "Pendenz Fallsteuerung DLP-Kontrolle": ' + CONVERT(VARCHAR(50), (GETDATE() - @StartTimeOfCode), 114));
  END;

    -- #7943 CAR: Pendenz Ausstattung Vertrag Auswertung Am geplant (DynaMask)
  SET @Aktiv = CONVERT(BIT, dbo.fnXConfig('System\Pendenzen\IntakeAusstattungVertragAuswertungAm\Aktiv', GETDATE()));
 
  IF (@Aktiv = 1)
  BEGIN
    INSERT INTO @tmpXTask (
    TaskSenderCode, TaskReceiverCode, TaskTypeCode, TaskStatusCode, CreateDate,
    StartDate, ExpirationDate, Subject, TaskDescription, FaLeistungID,
    BaPersonID, SenderID, ReceiverID, ReferenceTable, ReferenceID, XTaskAutoGeneratedTypeCode)
    EXEC dbo.spPendenzCheck_IntakeAusstattungVertragAuswertungAm;
  
    -- info
    PRINT ('done "Pendenz Intake Ausstattung Vertrag Auswertung Am": ' + CONVERT(VARCHAR(50), (GETDATE() - @StartTimeOfCode), 114));
  END;

    SET @Aktiv = CONVERT(BIT, dbo.fnXConfig('System\Pendenzen\BeratungAusstattungVertragAuswertungAm\Aktiv', GETDATE()));
 
  IF (@Aktiv = 1)
  BEGIN
    INSERT INTO @tmpXTask (
    TaskSenderCode, TaskReceiverCode, TaskTypeCode, TaskStatusCode, CreateDate,
    StartDate, ExpirationDate, Subject, TaskDescription, FaLeistungID,
    BaPersonID, SenderID, ReceiverID, ReferenceTable, ReferenceID, XTaskAutoGeneratedTypeCode)
    EXEC dbo.spPendenzCheck_BeratungAusstattungVertragAuswertungAm;
  
    -- info
    PRINT ('done "Pendenz Beratung Ausstattung Vertrag Auswertung Am": ' + CONVERT(VARCHAR(50), (GETDATE() - @StartTimeOfCode), 114));
  END;
  
  -- Frist Kategorisierung läuft ab
  SET @Aktiv = CONVERT(BIT, dbo.fnXConfig('System\Pendenzen\Kategorisierung\Aktiv', GETDATE()));
  
  IF (@Aktiv = 1)
  BEGIN
    SET @AnzahlTage = CONVERT(INT, dbo.fnXConfig('System\Pendenzen\Kategorisierung\AnzahlTage', GETDATE()));

    INSERT INTO @tmpXTask (TaskSenderCode, TaskReceiverCode, TaskTypeCode, TaskStatusCode, CreateDate,
                           StartDate, ExpirationDate, Subject, TaskDescription, FaLeistungID,
                           BaPersonID, SenderID, ReceiverID, ReferenceTable, ReferenceID, XTaskAutoGeneratedTypeCode)
      EXEC dbo.spPendenzCheck_FristKategorisierung @AnzahlTage;
    
    -- info
    PRINT ('done "Frist Kategorisierung": ' + CONVERT(VARCHAR(50), (GETDATE() - @StartTimeOfCode), 114));
  END;

  
  -- info
  PRINT ('done getting tasks: ' + CONVERT(VARCHAR(50), (GETDATE() - @StartTimeOfCode), 114));

  -----------------------------------------------------------------------------
  -- Insert entries into XTask and XTaskAutoGenerated tables
  -----------------------------------------------------------------------------
  -- setup vars
  DECLARE @TaskSenderCode INT;
  DECLARE @TaskReceiverCode INT;
  DECLARE @TaskTypeCode INT;
  DECLARE @TaskStatusCode INT;
  DECLARE @CreateDate DATETIME;
  DECLARE @StartDate DATETIME;
  DECLARE @ExpirationDate DATETIME;
  DECLARE @Subject VARCHAR(100);
  DECLARE @TaskDescription VARCHAR(2500);
  DECLARE @FaLeistungID INT;
  DECLARE @BaPersonID INT;
  DECLARE @SenderID INT;
  DECLARE @ReceiverID INT;
  DECLARE @ReferenceTable VARCHAR(100);
  DECLARE @ReferenceID INT;
  DECLARE @XTaskAutoGeneratedTypeCode INT;

  -- setup cursor
  DECLARE curXTask CURSOR FAST_FORWARD FOR
    SELECT TMP.TaskSenderCode, 
           TMP.TaskReceiverCode, 
           TMP.TaskTypeCode, 
           TMP.TaskStatusCode, 
           TMP.CreateDate,
           TMP.StartDate, 
           TMP.ExpirationDate, 
           TMP.Subject, 
           TMP.TaskDescription, 
           TMP.FaLeistungID, 
           TMP.BaPersonID, 
           TMP.SenderID, 
           TMP.ReceiverID,
           TMP.ReferenceTable,
           TMP.ReferenceID,
           TMP.XTaskAutoGeneratedTypeCode
    FROM @tmpXTask TMP;

  -- iterate through cursor
  OPEN curXTask;
  WHILE (1 = 1)
  BEGIN
    -- read next row and check if we have one
    FETCH NEXT 
    FROM curXTask 
    INTO @TaskSenderCode, @TaskReceiverCode, @TaskTypeCode, @TaskStatusCode, @CreateDate, @StartDate,
         @ExpirationDate, @Subject, @TaskDescription, @FaLeistungID, @BaPersonID, @SenderID,
         @ReceiverID, @ReferenceTable, @ReferenceID, @XTaskAutoGeneratedTypeCode;
    
    IF (@@FETCH_STATUS != 0)
    BEGIN
      BREAK;
    END;

    -- insert task into XTask table
    INSERT INTO dbo.XTask (TaskSenderCode, TaskReceiverCode, TaskTypeCode, TaskStatusCode, CreateDate,
                           StartDate, ExpirationDate, Subject, TaskDescription, FaLeistungID,
                           BaPersonID, FaFallID, SenderID, ReceiverID)
      SELECT TaskSenderCode   = @TaskSenderCode,
             TaskReceiverCode = @TaskReceiverCode,
             TaskTypeCode     = @TaskTypeCode,
             TaskStatusCode   = @TaskStatusCode,
             CreateDate       = @CreateDate,
             StartDate        = @StartDate,
             ExpirationDate   = @ExpirationDate,
             Subject          = @Subject,
             TaskDescription  = @TaskDescription,
             FaLeistungID     = @FaLeistungID,
             BaPersonID       = @BaPersonID,
             FaFallID         = @BaPersonID,
             SenderID         = @SenderID,
             ReceiverID       = @ReceiverID;
    
    -- insert entry into XTaskAutoGenerated table
    INSERT INTO dbo.XTaskAutoGenerated (XTaskID, ReferenceTable, ReferenceID, XTaskAutoGeneratedTypeCode,
                                        Creator, Modifier)
      SELECT XTaskID           = SCOPE_IDENTITY(),
             ReferenceTable    = @ReferenceTable,
             ReferenceID       = @ReferenceID,
             AutoGeneratedType = @XTaskAutoGeneratedTypeCode,
             Creator           = @CreatorModifier,
             Modifier          = @CreatorModifier;
  END; -- [WHILE cursor]

  -- clean up cursor
  CLOSE curXTask;
  DEALLOCATE curXTask;
  
  -----------------------------------------------------------------------------
  -- done
  -----------------------------------------------------------------------------
  -- info
  PRINT ('done creating tasks: ' + CONVERT(VARCHAR(50), (GETDATE() - @StartTimeOfCode), 114));
  SET NOCOUNT OFF;
END;
GO

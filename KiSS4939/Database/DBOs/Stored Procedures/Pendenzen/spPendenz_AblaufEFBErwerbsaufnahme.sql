SET QUOTED_IDENTIFIER OFF;
GO
SET ANSI_NULLS ON;
GO
EXECUTE dbo.spDropObject spPendenz_AblaufEFBErwerbsaufnahme;
GO
/*===============================================================================================
  $Revision: 9 $
=================================================================================================
  Description
-------------------------------------------------------------------------------------------------
  SUMMARY:            Erstellt eine Pendenz nach dem Grünstellen eines Budgets mit EFB-Erwerbsaufnahme,
                      falls das Budget des Vormonats keine EFB-Erwerbsaufnahme beinhaltet
    @BgBudgetID:      Die ID des grünzustellenden Budgets
    @CreatorModifier: CreatorModifier-String (dbo.fnGetDBRowCreatorModifier(<UserID>))
    @RefDate:         Referenzdatum
    @AnzahlTage:      Die Pendenz wird AnzahlTage vor Ablauf der Maximalen Dauer der EFB Erwerbsaufnahme generiert
    @MaximaleDauer:   Die maximale Anzahl Monate für EFB Erwerbsaufnahme
  -
  RETURNS: .
  -
  TEST: EXEC dbo.spPendenz_AblaufEFBErwerbsaufnahme <ValidBgBudgetID>
=================================================================================================*/

CREATE PROCEDURE dbo.spPendenz_AblaufEFBErwerbsaufnahme
( 
  @BgBudgetID INT,
  @CreatorModifier VARCHAR(50) = 'unknown',
  @RefDate DATETIME = NULL,
  @AnzahlTage INT = NULL,
  @MaximaleDauer INT = NULL
)
AS
BEGIN
  -- SET NOCOUNT ON added to prevent extra result sets from
  -- interfering with SELECT statements.
  SET NOCOUNT ON;

  -- Referenzdatum bestimmen
  SET @RefDate = ISNULL(@RefDate, GETDATE());

  -- Keine Pendenzen generieren, wenn nicht aktiv
  DECLARE @Aktiv BIT
  SET @Aktiv = CONVERT(BIT, dbo.fnXConfig('System\Pendenzen\EFBErwerbsaufnahme\Aktiv', @RefDate));

  IF (@Aktiv = 0)
  BEGIN
    RETURN;
  END;

  -- Konfigurationswerte aus Config lesen
  SET @AnzahlTage    = ISNULL(@AnzahlTage, CONVERT(INT, dbo.fnXConfig('System\Pendenzen\EFBErwerbsaufnahme\AnzahlTage', @RefDate)));
  SET @MaximaleDauer = ISNULL(@MaximaleDauer, CONVERT(INT, dbo.fnXConfig('System\Sozialhilfe\SKOS2005\EFB_ErwAufn\MaximaleDauer', @RefDate)));

  /*
  -- debug only
  PRINT ('@RefDate=' + ISNULL(CONVERT(VARCHAR, @RefDate, 104), ''));
  PRINT ('@AnzahlTage=' + ISNULL(CONVERT(VARCHAR, @AnzahlTage, 104), ''));
  PRINT ('@MaximaleDauer=' + ISNULL(CONVERT(VARCHAR, @MaximaleDauer, 104), ''));
  -- */

  -- XTaskAutoGenerated-Variablen
  DECLARE @ReferenceTable VARCHAR(100)
  DECLARE @AutoGeneratedType INT
  DECLARE @Code INT
  SET @ReferenceTable = 'BgBudget'
  SET @AutoGeneratedType = 7  -- AblaufEFBErwerbsaufnahme
  SET @Code = 25 --Ablauf EFB Erwerbsaufnahme

  -- Create temp table
  DECLARE @tmpXTask TABLE
  (
    TaskSenderCode INT NOT NULL,
    TaskReceiverCode INT NOT NULL,
    TaskTypeCode INT NULL,
    TaskStatusCode INT NOT NULL,
    CreateDate DATETIME NOT NULL,
    StartDate DATETIME NULL,
    ExpirationDate DATETIME NULL,
    Subject VARCHAR(100) NULL,
    TaskDescription VARCHAR(2500) NULL,
    FaLeistungID INT NULL,
    FaFallID INT NULL,
    BaPersonID INT NULL,
    SenderID INT NULL,
    ReceiverID INT NULL,
    ReferenceID INT NULL
  )
  
  
  INSERT INTO @tmpXTask (TaskSenderCode, TaskReceiverCode, TaskTypeCode, TaskStatusCode, CreateDate, StartDate,
                         ExpirationDate, Subject, TaskDescription, FaLeistungID, FaFallID, BaPersonID, SenderID,
                         ReceiverID, ReferenceID)
  SELECT
    TaskSenderCode   = 3,  -- Regel
    TaskReceiverCode = 1,  -- Person
    TaskTypeCode     = @Code,  -- Ablauf EFB Erwerbsaufnahme
    TaskStatusCode   = 1,  -- Pendent
    -- Create date from year, month and day only: DATEADD(MONTH, ((@Year - 1900) * 12) + @Month - 1, @Day)
    CreateDate       = GETDATE(),
    StartDate        = NULL,
    ExpirationDate    = DATEADD(MONTH, ((BDG.Jahr - 1900) * 12) + BDG.Monat - 1 + @MaximaleDauer, -@AnzahlTage - 1),
    Subject          = (SELECT dbo.fnStringReplace(Value1, CONVERT(VARCHAR, DATEADD(MONTH, ((BDG.Jahr - 1900) * 12) + BDG.Monat - 1 + @MaximaleDauer, -1), 104)) FROM XLOVCode WHERE LOVName ='TaskType' AND Code = @Code),
    TaskDescription  = (SELECT Value2 FROM XLOVCode WHERE LOVName ='TaskType' AND Code = @Code),
    FaLeistungID      = FPL.FaLeistungID,
    FaFallID	        = LEI.FaFallID,
    BaPersonID        = LEI.BaPersonID,
    SenderID          = NULL,
    ReceiverID        = LEI.UserID,
    ReferenceID       = BDG.BgBudgetID
  FROM dbo.BgBudget             BDG WITH (READUNCOMMITTED)
    INNER JOIN dbo.BgFinanzplan FPL WITH (READUNCOMMITTED) ON FPL.BgFinanzplanID = BDG.BgFinanzplanID
    INNER JOIN dbo.FaLeistung   LEI WITH (READUNCOMMITTED) ON LEI.FaLeistungID = FPL.FaLeistungID
  WHERE BDG.BgBudgetID = @BgBudgetID
    AND NOT EXISTS (SELECT TOP 1 1
                    FROM dbo.BgBudget              SUB1 WITH (READUNCOMMITTED)
                      INNER JOIN dbo.BgPosition     POS WITH (READUNCOMMITTED) ON POS.BgBudgetID = SUB1.BgBudgetID
                      INNER JOIN dbo.BgPositionsart POA WITH (READUNCOMMITTED) ON POA.BgPositionsartID = POS.BgPositionsartID
                    WHERE SUB1.MasterBudget <> 1
                      AND SUB1.BgFinanzplanID = BDG.BgFinanzplanID
                      AND (DATEDIFF(MONTH, DATEADD(MONTH, ((SUB1.Jahr - 1900) * 12) + SUB1.Monat - 1, 0),
                                    DATEADD(MONTH, ((BDG.Jahr - 1900) * 12) + BDG.Monat - 1, 0)) = 1)
                      AND POA.BgGruppeCode IN (39100, 39110))
    AND NOT EXISTS (SELECT TOP 1 1
                    FROM dbo.XTaskAutoGenerated TAG
                    WHERE TAG.XTaskAutoGeneratedTypeCode = @AutoGeneratedType
                      AND TAG.ReferenceTable = @ReferenceTable
                      AND TAG.ReferenceID = BDG.BgBudgetID)


  -----------------------------------------------------------------------------
  -- Insert entries into XTask and XTaskAutoGenerated tables
  -----------------------------------------------------------------------------
  -- setup vars
  DECLARE @TaskSenderCode INT
  DECLARE @TaskReceiverCode INT
  DECLARE @TaskTypeCode INT
  DECLARE @TaskStatusCode INT
  DECLARE @CreateDate DATETIME
  DECLARE @StartDate DATETIME
  DECLARE @ExpirationDate DATETIME
  DECLARE @Subject VARCHAR(100)
  DECLARE @TaskDescription VARCHAR(2500)
  DECLARE @FaLeistungID INT
  DECLARE @FaFallID INT
  DECLARE @BaPersonID INT
  DECLARE @SenderID INT
  DECLARE @ReceiverID INT
  DECLARE @ReferenceID INT

  -- setup cursor
  DECLARE curXTask CURSOR FAST_FORWARD FOR
    SELECT TMP.TaskSenderCode,
           TMP.TaskReceiverCode,
           TMP.TaskTypeCode,
           TMP.TaskStatusCode,
           TMP.CreateDate,
           TMP.StartDate,
           TMP.ExpirationDate,
           TMP.Subject,
           TMP.TaskDescription,
           TMP.FaLeistungID,
           TMP.FaFallID,
           TMP.BaPersonID,
           TMP.SenderID,
           TMP.ReceiverID,
           TMP.ReferenceID
    FROM @tmpXTask TMP

  -- iterate through cursor
  OPEN curXTask;
  WHILE (1 = 1)
  BEGIN
    -- read next row and check if we have one
    FETCH NEXT 
    FROM curXTask 
    INTO @TaskSenderCode, @TaskReceiverCode, @TaskTypeCode, @TaskStatusCode, @CreateDate, @StartDate,
         @ExpirationDate, @Subject, @TaskDescription, @FaLeistungID, @FaFallID, @BaPersonID, @SenderID,
         @ReceiverID, @ReferenceID;
    
    IF (@@FETCH_STATUS != 0)
    BEGIN
      BREAK;
    END;

    -- insert task into XTask table
    INSERT INTO dbo.XTask (TaskSenderCode, TaskReceiverCode, TaskTypeCode, TaskStatusCode, CreateDate,
                           StartDate, ExpirationDate, Subject, TaskDescription, FaLeistungID, FaFallID,
                           BaPersonID, SenderID, ReceiverID)
      SELECT TaskSenderCode   = @TaskSenderCode,
             TaskReceiverCode = @TaskReceiverCode,
             TaskTypeCode     = @TaskTypeCode,
             TaskStatusCode   = @TaskStatusCode,
             CreateDate       = @CreateDate,
             StartDate        = @StartDate,
             ExpirationDate   = @ExpirationDate,
             Subject          = @Subject,
             TaskDescription  = @TaskDescription,
             FaLeistungID     = @FaLeistungID,
             FaFallID         = @FaFallID,
             BaPersonID       = @BaPersonID,
             SenderID         = @SenderID,
             ReceiverID       = @ReceiverID
    
    -- insert entry into XTaskAutoGenerated table
    INSERT INTO dbo.XTaskAutoGenerated (XTaskID, ReferenceTable, ReferenceID, XTaskAutoGeneratedTypeCode,
                                        Creator, Modifier)
      SELECT XTaskID                    = SCOPE_IDENTITY(),
             ReferenceTable             = @ReferenceTable,
             ReferenceID                = @ReferenceID,
             XTaskAutoGeneratedTypeCode = @AutoGeneratedType,
             Creator                    = @CreatorModifier,
             Modifier                   = @CreatorModifier
  END; -- [WHILE cursor]

  -- clean up cursor
  CLOSE curXTask;
  DEALLOCATE curXTask;

END;

GO

SET QUOTED_IDENTIFIER OFF;
GO
SET ANSI_NULLS ON;
GO
EXECUTE dbo.spDropObject spPendenzCheck_FristKategorisierung;
GO
/*===============================================================================================
  $Revision: 4 $
=================================================================================================
  Description
-------------------------------------------------------------------------------------------------
  SUMMARY:  Sucht nach Kategorisierungseinträgen, die in Kürze eintreten werden
    @AnzahlTage: Wie viele Tage die Pendenz vor dem Eintreten des Ereignisses erstellt wird.
  -
  RETURNS: Ein Datensatz mit anzulegenden Pendenzen
=================================================================================================
  TEST:    EXEC dbo.spPendenzCheck_FristKategorisierung 1, 30;
=================================================================================================*/

CREATE PROCEDURE dbo.spPendenzCheck_FristKategorisierung
(
  @AnzahlTage INT
)
AS 
BEGIN
  -- SET NOCOUNT ON added to prevent extra result sets from interfering with SELECT statements.
  SET NOCOUNT ON;
  
  DECLARE @AutoGeneratedType INT;
  DECLARE @ReferenceTable    VARCHAR(100);
  DECLARE @Today             DATETIME;
  DECLARE @Frist             DATETIME;
  DECLARE @Code              INT;

  SET @AutoGeneratedType = (SELECT LOC.Code
                            FROM dbo.XLOVCode LOC WITH (READUNCOMMITTED)
                            WHERE Text = 'FristKategorisierung');
  SET @ReferenceTable = 'FaKategorisierung';
  SET @Today = GETDATE();
  SET @Code = 29 -- Frist Kategorisierung

  ;WITH KategorisierungCte (Frist, BaPersonID, ReceiverID, ReferenceID, Datum)
    AS
    (
        SELECT Frist       = CASE FKP.FaKategorisierungEksProduktFristTypCode
                               WHEN 1 THEN DATEADD(DAY, FKP.Frist, FKA.Datum)
                               WHEN 2 THEN DATEADD(MONTH, FKP.Frist, FKA.Datum)
                               WHEN 3 THEN DATEADD(YEAR, FKP.Frist, FKA.Datum)
                             END,
               BaPersonID  = FKA.BaPersonID,
               ReceiverID  = (SELECT TOP 1 UserID 
                              FROM dbo.FaLeistung LEI WITH (READUNCOMMITTED)
                              WHERE LEI.BaPersonID = FKA.BaPersonID
	                              AND LEI.ModulID = 2
	                              AND GETDATE() BETWEEN ISNULL(LEI.DatumVon, '17530101') AND ISNULL(LEI.DatumBis, '99991231')
                              ORDER BY LEI.DatumVon DESC),
               ReferenceID = FKA.FaKategorisierungID,
               Datum       = FKA.Datum
        FROM dbo.FaKategorisierung                   FKA WITH (READUNCOMMITTED)
          INNER JOIN dbo.FaKategorisierungEksProdukt FKP WITH (READUNCOMMITTED) ON FKP.FaKategorisierungEksProduktID = FKA.FaKategorisierungEksProduktID
        WHERE FKA.Abschlussdatum IS NULL
    )

  SELECT
      TaskSenderCode    = 5,  -- DbScript
      TaskReceiverCode  = 1,  -- Person
      TaskTypeCode      = @Code,  -- Frist Kategorisierung
      TaskStatusCode    = 1,  -- Pendent
      CreateDate        = DATEADD(DAY, -@AnzahlTage, CTE.Frist),
      StartDate         = NULL,
      ExpirationDate    = CTE.Frist,
      Subject           = (SELECT Value1 FROM XLOVCode WHERE LOVName ='TaskType' AND Code = @Code),
      TaskDescription   = (SELECT dbo.fnStringReplace2(Value2, CONVERT(VARCHAR(20), CTE.Datum, 104), CONVERT(VARCHAR(20), CTE.Frist, 104)) FROM XLOVCode WHERE LOVName ='TaskType' AND Code = @Code),
      FaLeistungID      = NULL,
      BaPersonID        = CTE.BaPersonID,
      SenderID          = NULL,
      ReceiverID        = CTE.ReceiverID,
      ReferenceTable    = @ReferenceTable,
      ReferenceID       = CTE.ReferenceID,
      AutoGeneratedType = @AutoGeneratedType
  FROM KategorisierungCte CTE
  WHERE CTE.Frist BETWEEN @Today AND DATEADD(DAY, @AnzahlTage, @Today)
    -- die Pendenz muss nicht vorhanden sein
    AND NOT EXISTS (SELECT TOP 1 1 
                    FROM dbo.XTaskAutoGenerated TAG WITH (READUNCOMMITTED)
                    WHERE TAG.XTaskAutoGeneratedTypeCode = @AutoGeneratedType
                      AND TAG.ReferenceTable = @ReferenceTable
                      AND TAG.ReferenceID = CTE.ReferenceID);
END;
GO

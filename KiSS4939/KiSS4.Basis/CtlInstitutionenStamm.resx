<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <metadata name="qryBaInstitution.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>139, 17</value>
  </metadata>
  <metadata name="$this.TrayHeight" type="System.Int32, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
    <value>75</value>
  </metadata>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="edtGeburtsdatum.Properties.Buttons" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        iVBORw0KGgoAAAANSUhEUgAAAAwAAAAQCAYAAAAiYZ4HAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8
        YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAABMSURBVDhPYwABY2Pj/8RgsGIQgHFQBKEAqxyIQwyGKsdu
        MjrAqaGhgQErG6sGkAKYInSaOhpAYERrAAFkNk4NuACGBmIwVDkpgIEBAO2ojyYwtBe7AAAAAElFTkSu
        QmCC
</value>
  </data>
  <metadata name="qryBaAdresse.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>17, 17</value>
  </metadata>
  <data name="qryBaAdresse.SelectStatement" xml:space="preserve">
    <value>SELECT
  ADR.BaAdresseID,
  ADR.BaPersonID,
  ADR.BaInstitutionID,
  ADR.PlatzierungInstID,
  ADR.DatumVon,
  ADR.DatumBis,
  ADR.AdresseCode,
  ADR.Zusatz,
  ADR.Strasse,
  ADR.HausNr,
  ADR.Postfach,
  ADR.PostfachOhneNr,
  ADR.PLZ,
  ADR.Ort,
  ADR.Kanton,
  ADR.BaLandID,
  ADR.OrtschaftCode,
  ADR.Bemerkung,
  ADR.PlatzierungsartCode,
  ADR.Gesperrt,
  ADR.VerID,
  ADR.VmMandantID,
  ADR.VmPriMaID,
  ADR.KaBetriebID,
  ADR.MigrationKA,
  ADR.Bezirk,
  ADR.Creator,
  ADR.Created,
  ADR.Modifier,
  ADR.Modified,
  ADR.BaAdresseTS
FROM dbo.BaAdresse ADR WITH (READUNCOMMITTED)
WHERE ADR.BaInstitutionID = {0}</value>
  </data>
  <data name="btnDatenblatt.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8
        YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAAH1SURBVDhPlZJNTxpRFIb5M7Lvwu7KGt11g6u6wO5M2Lgw
        aRfWpCWNMdqPYGKiJFpQA0qLNShojSXRprZqiwQUwY/hu9bSRhuBgb49544D6JRFb/LkJjf3fc6bO6Nr
        XPPBPXjfR/FmLQLPahhz70JwB77C5d/BjG8LU75PcC5s4up6fZnNZphMpqacX/4RnF1UMeZew+32+3UJ
        hy0WC4LB4D9hwQWFmQIJbA4/AuvhuoQvqJej9+4CRiPQ0YJCfyfCSdTge4XfVbycXBRhFSGw2+0CEU6G
        FUhi7KEjho655TNPBPlfVThX4nAsJ5oIKKgK1OktHUqDzI+K4OibjIlAAq1tXYrAarUKRNB1JXDp0D1c
        F6gNGBaMLx0qAoPBAH5IIeAwhggSEEnijl8nuNlg1Hd8XcA0CuIvlCBLdCO3rjWIZWTY3kqKQK/XQ0WE
        ScJhbHTXwgw3kL5XEM/JiKTKGPYmFUHj4ks8qdmuNgidlDHgSWkFozOryP2sIk/wni1UkD6r4ORUFpOj
        6TJ2pTK2D0t4MpvRCkamlqmmXJvUjM2DIh5NZ7UC/k35gWJZGfu079HESEqmqTK+HJfwOVHEx4MSPsSK
        eOjIawX8m4aoon3pSHwm24KE514Jg69TeDqXxmN3Bn00+YEzh95Xp1oBH/wfXfgLWcOMMSwkI+QAAAAA
        SUVORK5CYII=
</value>
  </data>
  <metadata name="qryBaInstitutionKontakt.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>276, 17</value>
  </metadata>
  <data name="qryBaInstitutionKontakt.SelectStatement" xml:space="preserve">
    <value>SELECT 
  KON.BaInstitutionKontaktID,
  KON.BaInstitutionID,
  KON.ManuelleAnrede,
  KON.Anrede,
  KON.Briefanrede,
  KON.Titel,
  KON.Name,
  KON.Vorname,
  KON.Aktiv,
  KON.GeschlechtCode,
  KON.Telefon,
  KON.Fax,
  KON.EMail,
  KON.SprachCode,
  KON.Bemerkung,
  KON.Creator,
  KON.Created,
  KON.Modifier,
  KON.Modified,
  KON.BaInstitutionKontaktTS
FROM dbo.BaInstitutionKontakt KON WITH (READUNCOMMITTED)
WHERE BaInstitutionID = {0}
  AND (Aktiv = 1 OR 0 = {1})
ORDER BY KON.Name, KON.Vorname;</value>
  </data>
  <data name="edtDokumentDatum.Properties.Buttons" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        iVBORw0KGgoAAAANSUhEUgAAAAwAAAAQCAYAAAAiYZ4HAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8
        YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAABMSURBVDhPYwABY2Pj/8RgsGIQgHFQBKEAqxyIQwyGKsdu
        MjrAqaGhgQErG6sGkAKYInSaOhpAYERrAAFkNk4NuACGBmIwVDkpgIEBAO2ojyYwtBe7AAAAAElFTkSu
        QmCC
</value>
  </data>
  <data name="docDokument.Properties.Buttons" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        iVBORw0KGgoAAAANSUhEUgAAAAwAAAAQCAYAAAAiYZ4HAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8
        YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAABfSURBVDhPrY7RDYAwCESZgkXYqTs5LeYqRFsBNfaS98W9
        cISIiGb0whwcVLcbzNyx2hkXWqMBlF206pGnD2CYlwlXQmGe5KRCxRohmgNSoWKNEM0BqVDxX3iD1b+E
        aAfWfHr9nSYTxgAAAABJRU5ErkJggg==
</value>
  </data>
  <data name="docDokument.Properties.Buttons1" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        iVBORw0KGgoAAAANSUhEUgAAAAwAAAAQCAYAAAAiYZ4HAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8
        YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAABYSURBVDhPnY3BDQAgCAPZyf1nw6DWGC2gXuID2wMxtIja
        a8MNEL6kMR4cGQQmuYuY4C2ZrIW0bKB0VQZPZePpwlpOhb0USix0BQQspP9eGUQZJVtI6YJIBeu5cfV3
        tfQcAAAAAElFTkSuQmCC
</value>
  </data>
  <data name="docDokument.Properties.Buttons2" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        iVBORw0KGgoAAAANSUhEUgAAAAwAAAAQCAYAAAAiYZ4HAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8
        YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAABBSURBVDhPYwABY2Pj/7gwWAE6AEn8/z8TA4uJiYExVBkC
        4NMAo6FKIYCQDSCM4jxcGpDxqIbhooEYDFVOCmBgAADnY6JvpgSjlwAAAABJRU5ErkJggg==
</value>
  </data>
  <data name="docDokument.Properties.Buttons3" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        iVBORw0KGgoAAAANSUhEUgAAAAwAAAAQCAYAAAAiYZ4HAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8
        YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAABdSURBVDhPxY6LCcAwCESdwkWcNtNaLlUam5oPBHrwCJJ7
        KCEiohm18A4+VEsHM1es9mQk+GvVO7MNIJyXCS1nhSIUZpAKKC8LXh4RhFby2UlPAtvCFz8IK1h9J0QX
        DTKNHhU9EmkAAAAASUVORK5CYII=
</value>
  </data>
  <metadata name="qryDokumente.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>17, 56</value>
  </metadata>
  <data name="qryDokumente.SelectStatement" xml:space="preserve">
    <value>SELECT
  BID.BaInstitutionDokumentID,
  BID.BaInstitutionID,
  BID.UserID,
  BID.BaPersonID_Adressat,
  BID.BaInstitutionID_Adressat,
  BID.DocumentID,
  BID.BaInstitutionDokumentKontaktartCode,
  BID.BaInstitutionDokumentDienstleistungCode,
  BID.FaDauerCode,
  BID.Datum,
  BID.Stichwort,
  BID.Inhalt,
  BID.Creator,
  BID.Created,
  BID.Modifier,
  BID.Modified,
  Verfasser = dbo.fnGetLastFirstName(NULL, USR.LastName, USR.FirstName),
  Adressat = CASE 
               WHEN BID.BaInstitutionID_Adressat IS NOT NULL THEN dbo.fnGetLastFirstName(NULL, INS.Name, INS.Vorname)
               WHEN BID.BaPersonID_Adressat IS NOT NULL THEN dbo.fnGetLastFirstName(NULL, PRS.Name, PRS.Vorname)
               ELSE ''
             END
FROM dbo.BaInstitutionDokument BID WITH(READUNCOMMITTED)
  LEFT JOIN dbo.XUser          USR WITH(READUNCOMMITTED) ON USR.UserID = BID.UserID
  LEFT JOIN dbo.BaPerson       PRS WITH(READUNCOMMITTED) ON PRS.BaPersonID = BID.BaPersonID_Adressat
  LEFT JOIN dbo.BaInstitution  INS WITH(READUNCOMMITTED) ON INS.BaInstitutionID = BID.BaInstitutionID_Adressat
WHERE BID.BaInstitutionID = {0}
ORDER BY BID.Datum;</value>
  </data>
  <data name="qryBaInstitution.SelectStatement" xml:space="preserve">
    <value>DECLARE @IdList VARCHAR(255);
DECLARE @IsAND BIT;
DECLARE @UserID INT;
DECLARE @LanguageCode INT;
DECLARE @AuchKontakte BIT;

SET @UserID = {0};
SET @LanguageCode = {1};

--- SET @IdList = {pklSucheInstTypen.SelectedIds};
--- SET @IsAND = {chkSucheInstitutionenMitAllenTypen.Checked};
--- SET @AuchKontakte = {chkSucheAuchKontakte.Checked};

SELECT
  INS.[BaInstitutionID],
  INS.[OrgUnitID],
  INS.[InstitutionNr],
  INS.[BaInstitutionArtCode],
  INS.[Aktiv],
  INS.[Debitor],
  INS.[Kreditor],
  INS.[KeinSerienbrief],
  INS.[ManuelleAnrede],
  INS.[Anrede],
  INS.[Briefanrede],
  INS.[Titel],
  INS.[Name],
  INS.[Vorname],
  INS.[GeschlechtCode],
  INS.[Geburtsdatum],
  INS.[Versichertennummer],
  INS.[Telefon],
  INS.[Telefon2],
  INS.[Telefon3],
  INS.[Fax],
  INS.[EMail],
  INS.[Homepage],
  INS.[SprachCode],
  INS.[Bemerkung],
  INS.[Creator],
  INS.[Created],
  INS.[Modifier],
  INS.[Modified],
  INS.[BaInstitutionTS],
  --
  [ItemName]   = ORG.[ItemName],
  --
  [Zusatz]     = ADR.[Zusatz],
  [StrasseNr]  = ISNULL(ADR.[Strasse], '') + ISNULL(' ' + ADR.[HausNr], ''),
  [Postfach]   = dbo.fnBaGetPostfachText(NULL, ADR.[Postfach], ADR.[PostfachOhneNr], @LanguageCode),
  [PLZ]        = ADR.[PLZ],
  [Ort]        = ADR.[Ort],
  [PLZOrt]     = ISNULL(ADR.[PLZ] + ' ', '') + ISNULL(ADR.[Ort], ''),
  [BaLandID]   = ADR.BaLandID,
  [Land]       = dbo.fnLandMLText(ADR.BaLandID, @LanguageCode),
  --
  [Typen]      = dbo.fnBaGetBaInstitutionTypen(INS.[BaInstitutionID], 0, '; ', @UserID, @LanguageCode)
FROM dbo.fnGetBaInstitutionByBaInstitutionTypList(@IdList, @IsAND) INS 
  LEFT JOIN dbo.XOrgUnit             ORG WITH (READUNCOMMITTED) ON ORG.OrgUnitID = INS.OrgUnitID
  LEFT JOIN dbo.BaAdresse            ADR WITH (READUNCOMMITTED) ON ADR.BaAdresseID = dbo.fnBaGetBaAdresseID('BaInstitutionID', INS.BaInstitutionID, NULL, NULL)
  LEFT JOIN dbo.BaInstitutionKontakt KTP WITH (READUNCOMMITTED) ON KTP.BaInstitutionID = INS.BaInstitutionID 
                                                               AND @AuchKontakte = CONVERT(BIT, 1)
WHERE 1 = 1
  AND (INS.OrgUnitID IS NULL OR INS.OrgUnitID IN (SELECT ORG.OrgUnitID
                                                  FROM dbo.fnGetInstStammUserORGList(@UserID) ORG)) -- only institutions the user is allowed to see
--- AND INS.BaInstitutionID = {edtSucheBaInstitutionId}
--- AND REPLACE(INS.InstitutionNr, ' ', '') LIKE dbo.fnReplaceWildcard({edtInstitutionNrX})
--- AND INS.OrgUnitID = {edtSucheOrgEinheit}
--- AND ((INS.Name LIKE '%' + dbo.fnReplaceWildcard({edtNameX})) OR ((KTP.Name LIKE '%' + dbo.fnReplaceWildcard({edtNameX})) AND (@AuchKontakte = CONVERT(BIT, 1))))
--- AND INS.EMail LIKE dbo.fnReplaceWildcard({edtEMailX})
--- AND INS.Telefon LIKE dbo.fnReplaceWildcard({edtTelefonX})
--- AND INS.InstitutionTypCode = {edtOrganisationTypX}
--- AND ADR.PLZ LIKE dbo.fnReplaceWildcard({edtPLZX})
--- AND ADR.Ort LIKE dbo.fnReplaceWildcard({edtOrtX})
--- AND ((INS.Bemerkung LIKE '%' + dbo.fnReplaceWildcard({edtSucheBemerkung})) OR ((KTP.Bemerkung LIKE '%' + dbo.fnReplaceWildcard({edtSucheBemerkung})) AND (@AuchKontakte = CONVERT(BIT, 1))))
--- AND (INS.Aktiv = {chkSucheNurAktive.Checked} OR INS.Aktiv = CONVERT(BIT,1) OR EXISTS(SELECT TOP 1 1 FROM dbo.BaInstitutionKontakt WITH (READUNCOMMITTED) WHERE BaInstitutionID = INS.BaInstitutionID AND Aktiv = CONVERT(BIT,1)))
--- AND (INS.KeinSerienbrief &lt;&gt; {edtSucheKeinSerienbrief} OR {edtSucheKeinSerienbrief} = 0)
ORDER BY INS.Name, PLZOrt;</value>
  </data>
  <metadata name="qryInstTypen.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>456, 17</value>
  </metadata>
  <data name="qryInstTypen.SelectStatement" xml:space="preserve">
    <value>DECLARE @UserID INT;
DECLARE @LanguageCode INT;

SET @UserID = {0};
SET @LanguageCode = {1};

SELECT ITY.BaInstitutionTypID,
       TypName = ISNULL(dbo.fnGetMLText(ITY.NameTID, @LanguageCode), ITY.[Name])
FROM dbo.BaInstitutionTyp ITY
WHERE ITY.Aktiv = 1
  AND (ITY.OrgUnitID IS NULL OR ITY.OrgUnitID IN (SELECT ORG.OrgUnitID
                                                  FROM dbo.fnGetInstStammUserORGList(@UserID) ORG)) -- only types the user is allowed to see
ORDER BY TypName</value>
  </data>
  <metadata name="qryZugeordneteInstTypen.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>578, 17</value>
  </metadata>
  <data name="qryZugeordneteInstTypen.SelectStatement" xml:space="preserve">
    <value>DECLARE @UserID INT;
DECLARE @LanguageCode INT;
DECLARE @BaInstitutionID INT;

SET @UserID = {0};
SET @LanguageCode = {1};
SET @BaInstitutionID = {2};

SELECT IIT.BaInstitution_BaInstitutionTypID,
       IIT.BaInstitutionTypID,
       IIT.BaInstitutionID,
       IIT.Creator,
       IIT.Created,
       IIT.Modifier,
       IIT.Modified,
       IIT.BaInstitution_BaInstitutionTypTS,
       --
       ITY.Name,
       TypName = ISNULL(dbo.fnGetMLText(ITY.NameTID, @LanguageCode), ITY.[Name])
FROM dbo.BaInstitution_BaInstitutionTyp IIT WITH (READUNCOMMITTED)
  INNER JOIN dbo.BaInstitutionTyp       ITY WITH (READUNCOMMITTED) ON ITY.BaInstitutionTypID = IIT.BaInstitutionTypID
                                                                  AND ITY.Aktiv = 1  -- only active types
                                                                  AND (ITY.OrgUnitID IS NULL OR ITY.OrgUnitID IN (SELECT ORG.OrgUnitID
                                                                                                                  FROM dbo.fnGetInstStammUserORGList(@UserID) ORG)) -- only types the user is allowed to see
WHERE IIT.BaInstitutionID = @BaInstitutionID
ORDER BY TypName;</value>
  </data>
  <metadata name="qrySucheInstTypen.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>771, 17</value>
  </metadata>
  <data name="qrySucheInstTypen.SelectStatement" xml:space="preserve">
    <value>DECLARE @UserID INT;
DECLARE @LanguageCode INT;

SET @UserID = {0};
SET @LanguageCode = {1};

SELECT ITY.BaInstitutionTypID,
       TypName = ISNULL(dbo.fnGetMLText(ITY.NameTID, @LanguageCode), [Name])
FROM dbo.BaInstitutionTyp ITY WITH (READUNCOMMITTED)
WHERE ITY.Aktiv = 1
  AND (ITY.OrgUnitID IS NULL OR ITY.OrgUnitID IN (SELECT ORG.OrgUnitID
                                                  FROM dbo.fnGetInstStammUserORGList(@UserID) ORG)) -- only types the user is allowed to see
ORDER BY TypName;</value>
  </data>
  <metadata name="qrySucheSelectedInstTypen.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>926, 17</value>
  </metadata>
</root>
<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <metadata name="qryBaSicherheitsleistung.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>17, 17</value>
  </metadata>
  <metadata name="qrySpesen.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>473, 17</value>
  </metadata>
  <data name="qrySpesen.SelectStatement" xml:space="preserve">
    <value>--Migrierte Buchungen aus ProLeist
select SIP.BaSicherheitsleistungPositionID,
       SIP.BaSicherheitsleistungID,
       BelegDatum = MIG.BuchungsDatum,
       BelegNr    = CAST(MIG.BelegNummer as varchar),
       LA         = BKA.KontoNr,
       LAText     = BKA.Name,
       Text       = BKA.Name,
       Betrag     = MIG.Betrag,
       Saldo      = convert(money,null),
       Budget     = null,
       Tool       = 'P',
       KbBuchungStatusCode = NULL,
       KbBuchungBruttoID,
       MIG.Zinsperiode,
       MIG.MigDetailBuchungID,
       Stornierbar = CAST(0 as bit),
       SortKey     = 1
from   BaSicherheitsleistungPosition SIP
       inner join MigDetailBuchung MIG on MIG.MigDetailBuchungID = SIP.MigDetailBuchungID
       left  join BgKostenart      BKA on BKA.KontoNr = MIG.KissLeistungsart
where  SIP.BaSicherheitsleistungID = {0} and
       MIG.KissLeistungsart in ('031','032','033','034','041')

UNION ALL

select SIP.BaSicherheitsleistungPositionID,
       SIP.BaSicherheitsleistungID,
       BelegDatum = KBB.BelegDatum,
       BelegNr    = IsNull(CAST(KBB.BelegNr as varchar), '('+CAST(KBB.KbBuchungBruttoID as varchar)+')'),
       LA         = BKA.KontoNr,
       LAText     = BKA.Name,
       Text       = KBP.Buchungstext,
       Betrag     = -KBP.Betrag,
       Saldo      = convert(money,null),
       Budget     = null,
       Tool       = 'K',
       KBB.KbBuchungStatusCode,
       KBP.KbBuchungBruttoID,
       KBP.Zinsperiode,
       NULL,
       Stornierbar = CAST(CASE WHEN KBB.PscdKennzeichen = 'S' AND TransferDatum IS NOT NULL AND KBB.KbBuchungStatusCode &lt;&gt; 8 THEN 1 ELSE 0 END as bit),
       SortKey     = 1
from   BaSicherheitsleistungPosition  SIP
  inner join KbBuchungBrutto          KBB on KBB.KbBuchungBruttoID = SIP.KbBuchungBruttoID
  inner join KbBuchungBruttoPerson    KBP on KBP.KbBuchungBruttoID = SIP.KbBuchungBruttoID
  inner join BgKostenart              BKA on BKA.BgKostenartID     = KBP.SpezBgKostenartID
where  SIP.BaSicherheitsleistungID = {0} and
       BKA.KontoNr in ('031','032','033','034','041')
       --and KBB.KbBuchungStatusCode NOT IN (8)

UNION ALL

SELECT BSP.BaSicherheitsleistungPositionID,
       BSP.BaSicherheitsleistungID,
       BelegDatum = KBB.BelegDatum,
       BelegNr    = IsNull(CAST(KBB.BelegNr as varchar), '('+CAST(KBB.KbBuchungBruttoID as varchar)+')'),
       LA         = BKA.KontoNr,
       LAText     = BKA.Name,
       Text       = KBP.Buchungstext,
       Betrag     = -KBP.Betrag,
       Saldo      = convert(money,null),
       Budget     = null,
       Tool       = 'K',
       KBB.KbBuchungStatusCode,
       KBP.KbBuchungBruttoID,
       KBP.Zinsperiode,
       null,
       Stornierbar = CAST(0 as bit),
       SortKey     = 2
FROM BaSicherheitsleistungPosition BSP
  LEFT  JOIN (SELECT DISTINCT ORP.KbBuchungBruttoID, KBK.KbBuchungID
              FROM KbBuchungBruttoPerson      ORP
                INNER JOIN KbBuchungKostenart KBK ON KBK.BgPositionID = ORP.BgPositionID) KBK ON BSP.KbBuchungID = KBK.KbBuchungID
  INNER JOIN KbBuchungBrutto       ORB ON BSP.KbBuchungBruttoID = ORB.KbBuchungBruttoID OR
                                          KBK.KbBuchungBruttoID = ORB.KbBuchungBruttoID
  INNER JOIN KbBuchungBrutto       KBB ON ORB.KbBuchungBruttoID = KBB.StorniertKbBuchungBruttoID
  INNER JOIN KbBuchungBruttoPerson KBP ON KBP.KbBuchungBruttoID = KBB.KbBuchungBruttoID
  INNER JOIN BgKostenart           BKA ON BKA.BgKostenartID     = IsNull(KBB.BgKostenartID,KBP.SpezBgKostenartID)
WHERE BSP.BaSicherheitsleistungID = {0}
  AND (KBB.StorniertKbBuchungBruttoID IS NOT NULL)-- OR KBB.NeubuchungVonKbBuchungBruttoID IS NOT NULL)
  AND BKA.KontoNr in ('031','032','033','034','041')

ORDER BY BelegDatum, Zinsperiode, SortKey, LA</value>
  </data>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="edtBuchungsdatum.Properties.Buttons" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        iVBORw0KGgoAAAANSUhEUgAAAAwAAAAQCAYAAAAiYZ4HAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8
        YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAABMSURBVDhPYwABY2Pj/8RgsGIQgHFQBKEAqxyIQwyGKsdu
        MjrAqaGhgQErG6sGkAKYInSaOhpAYERrAAFkNk4NuACGBmIwVDkpgIEBAO2ojyYwtBe7AAAAAElFTkSu
        QmCC
</value>
  </data>
  <metadata name="qryKontostand.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>342, 17</value>
  </metadata>
  <data name="qryKontostand.SelectStatement" xml:space="preserve">
    <value>select SIP.BaSicherheitsleistungPositionID,
       SIP.BaSicherheitsleistungID,
       BelegDatum = MIG.BuchungsDatum,
       BelegNr    = CAST(MIG.BelegNummer as varchar),
       LA         = BKA.KontoNr,
       LAText     = BKA.Name,
       Text       = BKA.Name,
       Betrag     = MIG.Betrag,
       Saldo      = convert(money,null),
       Budget     = null,
       Tool       = 'P',
       KbBuchungStatusCode = NULL,
       KbBuchungBruttoID,
       MIG.MigDetailBuchungID,
       Stornierbar = CAST(0 as bit),
       SortKey     = 1,
       ValutaDatum = MIG.Buchungsdatum
from   BaSicherheitsleistungPosition SIP
       inner join MigDetailBuchung MIG on MIG.MigDetailBuchungID = SIP.MigDetailBuchungID
       left  join BgKostenart      BKA on BKA.KontoNr = MIG.KissLeistungsart
where  SIP.BaSicherheitsleistungID = {0} and
       MIG.KissLeistungsart in ('320','321','860','861','862')
--order by BelegDatum

UNION ALL

select SIP.BaSicherheitsleistungPositionID,
       SIP.BaSicherheitsleistungID,
       BelegDatum = KBB.BelegDatum,
       BelegNr    = IsNull(CAST(KBB.BelegNr as varchar), '('+CAST(KBB.KbBuchungBruttoID as varchar)+')'),
       LA         = BKA.KontoNr,
       LAText     = BKA.Name,
       Text       = KBP.Buchungstext,
       Betrag     = -KBP.Betrag,
       Saldo      = convert(money,null),
       Budget     = null,
       Tool       = 'K',
       KBB.KbBuchungStatusCode,
       KBP.KbBuchungBruttoID,
       null,
       Stornierbar = CAST(CASE WHEN KBB.PscdKennzeichen = 'S' AND TransferDatum IS NOT NULL AND KBB.KbBuchungStatusCode &lt;&gt; 8 THEN 1 ELSE 0 END as bit),
       SortKey     = CASE WHEN KBB.NeubuchungVonKbBuchungBruttoID IS NOT NULL THEN 3 ELSE 1 END,
       ValutaDatum = KBB.ValutaDatum
from   BaSicherheitsleistungPosition  SIP
  inner join KbBuchungBrutto          KBB on KBB.KbBuchungBruttoID = SIP.KbBuchungBruttoID
  inner join KbBuchungBruttoPerson    KBP on KBP.KbBuchungBruttoID = SIP.KbBuchungBruttoID
  inner join BgKostenart              BKA on BKA.BgKostenartID     = IsNull(KBP.SpezBgKostenartID,KBB.BgKostenartID)
where  SIP.BaSicherheitsleistungID = {0} and
       BKA.KontoNr in ('320','321','860','861','862')
       -- and KBB.KbBuchungStatusCode NOT IN (8)
--order by BelegDatum

UNION ALL

--Umbuchungen
SELECT NULL,
       NULL,
       BelegDatum = KBB.BelegDatum,
       BelegNr    = IsNull(CAST(KBB.BelegNr as varchar), '('+CAST(KBB.KbBuchungBruttoID as varchar)+')'),
       LA         = BKA.KontoNr,
       LAText     = BKA.Name,
       Text       = KBP.Buchungstext,
       Betrag     = -KBP.Betrag,
       Saldo      = convert(money,null),
       Budget     = null,
       Tool       = 'K',
       KBB.KbBuchungStatusCode,
       KBP.KbBuchungBruttoID,
       null,
       Stornierbar = CAST(0 as bit),
       SortKey     = 2,
       ValutaDatum = KBB.ValutaDatum
FROM BaSicherheitsleistung BSL
  INNER JOIN (SELECT DISTINCT BSP.BaSicherheitsleistungID, KbBuchungBruttoID = ISNULL(BSP.KbBuchungBruttoID,ORP.KbBuchungBruttoID)
              FROM BaSicherheitsleistungPosition BSP
                LEFT JOIN KbBuchungKostenart KBK ON BSP.KbBuchungID = KBK.KbBuchungID
                LEFT JOIN KbBuchungBruttoPerson ORP ON KBK.BgPositionID = ORP.BgPositionID) S2B ON S2B.BaSicherheitsleistungID = BSL.BaSicherheitsleistungID
  INNER JOIN KbBuchungBrutto ORB ON ORB.KbBuchungBruttoID = S2B.KbBuchungBruttoID
  INNER JOIN KbBuchungBrutto KBB ON ORB.KbBuchungBruttoID = KBB.StorniertKbBuchungBruttoID
  INNER JOIN KbBuchungBruttoPerson KBP ON KBP.KbBuchungBruttoID = KBB.KbBuchungBruttoID
  INNER JOIN BgKostenart BKA ON BKA.BgKostenartID = IsNull(KBB.BgKostenartID,KBP.SpezBgKostenartID)
WHERE BSL.BaSicherheitsleistungID = {0} 
  AND (KBB.StorniertKbBuchungBruttoID IS NOT NULL)-- OR KBB.NeubuchungVonKbBuchungBruttoID IS NOT NULL)
  AND BKA.KontoNr in ('320','321','860','861','862')

UNION ALL

--Umbuchungen Altdaten
SELECT BSP.BaSicherheitsleistungPositionID,
       BSP.BaSicherheitsleistungID,
       BelegDatum = KBB.BelegDatum,
       BelegNr    = IsNull(CAST(KBB.BelegNr as varchar), '('+CAST(KBB.KbBuchungBruttoID as varchar)+')'),
       LA         = BKA.KontoNr,
       LAText     = BKA.Name,
       Text       = KBP.Buchungstext,
       Betrag     = -KBP.Betrag,
       Saldo      = convert(money,null),
       Budget     = null,
       Tool       = 'K',
       KBB.KbBuchungStatusCode,
       KBP.KbBuchungBruttoID,
       null,
       Stornierbar = CAST(0 as bit),
       SortKey     = 2,
       ValutaDatum = KBB.ValutaDatum
FROM BaSicherheitsleistungPosition BSP
  INNER JOIN KbBuchungBrutto       KBB ON BSP.MigDetailbuchungID = KBB.MigDetailbuchungID
  INNER JOIN KbBuchungBruttoPerson KBP ON KBP.KbBuchungBruttoID  = KBB.KbBuchungBruttoID
  INNER JOIN BgKostenart           BKA ON BKA.BgKostenartID      = KBB.BgKostenartID
where  BSP.BaSicherheitsleistungID = {0}
  AND BKA.KontoNr in ('320','321','860','861','862')
  AND KBB.Belegart = 'UB' -- Nur die Stornobuchung, nicht die Neubuchung

UNION ALL

select SIP.BaSicherheitsleistungPositionID,
       SIP.BaSicherheitsleistungID,
       BelegDatum = KBU.BelegDatum,
       BelegNr    = IsNull(CAST(KBU.BelegNr as varchar), '('+CAST(KBU.KbBuchungID as varchar)+')'),
       LA         = BKA.KontoNr,
       LAText     = BKA.Name,
       Text       = KBK.Buchungstext,
       Betrag     = KBK.Betrag,
       Saldo      = convert(money,null),
       Budget     = null,
       Tool       = 'K',
       KBU.KbBuchungStatusCode,
       NULL, --KBK.KbBuchungID
       NULL,
       Stornierbar = CAST(0 as bit),
       SortKey     = 1,
       ValutaDatum = KBU.ValutaDatum
from   BaSicherheitsleistungPosition  SIP
  inner join KbBuchung                KBU on KBU.KbBuchungID   = SIP.KbBuchungID
  inner join KbBuchungKostenart       KBK on KBK.KbBuchungID   = SIP.KbBuchungID
  inner join BgKostenart              BKA on BKA.BgKostenartID = KBK.BgKostenartID
where  SIP.BaSicherheitsleistungID = {0} and
       BKA.KontoNr in ('320','321','860','861','862')
       -- and KBU.KbBuchungStatusCode NOT IN (8)
order by BelegDatum, SortKey</value>
  </data>
  <data name="kissDateEdit3.Properties.Buttons" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        iVBORw0KGgoAAAANSUhEUgAAAAwAAAAQCAYAAAAiYZ4HAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8
        YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAABMSURBVDhPYwABY2Pj/8RgsGIQgHFQBKEAqxyIQwyGKsdu
        MjrAqaGhgQErG6sGkAKYInSaOhpAYERrAAFkNk4NuACGBmIwVDkpgIEBAO2ojyYwtBe7AAAAAElFTkSu
        QmCC
</value>
  </data>
  <data name="kissDateEdit2.Properties.Buttons" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        iVBORw0KGgoAAAANSUhEUgAAAAwAAAAQCAYAAAAiYZ4HAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8
        YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAABMSURBVDhPYwABY2Pj/8RgsGIQgHFQBKEAqxyIQwyGKsdu
        MjrAqaGhgQErG6sGkAKYInSaOhpAYERrAAFkNk4NuACGBmIwVDkpgIEBAO2ojyYwtBe7AAAAAElFTkSu
        QmCC
</value>
  </data>
  <data name="kissDateEdit1.Properties.Buttons" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        iVBORw0KGgoAAAANSUhEUgAAAAwAAAAQCAYAAAAiYZ4HAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8
        YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAABMSURBVDhPYwABY2Pj/8RgsGIQgHFQBKEAqxyIQwyGKsdu
        MjrAqaGhgQErG6sGkAKYInSaOhpAYERrAAFkNk4NuACGBmIwVDkpgIEBAO2ojyYwtBe7AAAAAElFTkSu
        QmCC
</value>
  </data>
  <data name="qryBaSicherheitsleistung.SelectStatement" xml:space="preserve">
    <value>EXECUTE dbo.spDropObject 'tempdb..#SiLeiSum';
CREATE TABLE #SiLeiSum(
  BaSicherheitsleistungID INT      PRIMARY KEY CLUSTERED, 
  SaldoPer                DATETIME NOT NULL, 
  Betrag                  MONEY    NOT NULL
)
EXECUTE dbo.spDropObject 'tempdb..#SumUmbuchungen';
CREATE TABLE #SumUmbuchungen(
  BaSicherheitsleistungID INT      PRIMARY KEY CLUSTERED, 
  Summe                   MONEY    NOT NULL,
  SaldoPer                DATETIME NOT NULL
)


INSERT INTO #SiLeiSum (BaSicherheitsleistungID, SaldoPer, Betrag)
SELECT SIP.BaSicherheitsleistungID,
       CASE WHEN (MAX(KBB.ValutaDatum)   IS NULL OR MAX(KBU.ValutaDatum) &gt;= MAX(KBB.ValutaDatum  )) AND 
                 (MAX(MIG.Buchungsdatum) IS NULL OR MAX(KBU.ValutaDatum) &gt;= MAX(MIG.Buchungsdatum)) THEN MAX(KBU.ValutaDatum) 
            WHEN (MAX(MIG.Buchungsdatum) IS NULL OR MAX(KBB.ValutaDatum) &gt;= MAX(MIG.Buchungsdatum)) THEN MAX(KBB.ValutaDatum)
            ELSE                                                                                         MAX(MIG.Buchungsdatum)
       END,
       isNull(SUM(MIG.Betrag), 0) + isNull(SUM(KBK.Betrag), 0) - isNull(SUM(KBP.Betrag), 0)

FROM dbo.BaSicherheitsleistung                      SIC  WITH(READUNCOMMITTED)
  INNER JOIN      dbo.vwPerson                      PRS  WITH(READUNCOMMITTED) ON PRS.BaPersonID         = SIC.BaPersonID
  INNER JOIN      dbo.BaSicherheitsleistungPosition SIP  WITH(READUNCOMMITTED) ON SIP.BaSicherheitsleistungID = SIC.BaSicherheitsleistungID
--mig
  LEFT OUTER JOIN dbo.MigDetailBuchung              MIG  WITH(READUNCOMMITTED) ON MIG.MigDetailBuchungID = SIP.MigDetailBuchungID
--netto (ausgaben)
  LEFT OUTER JOIN dbo.KbBuchung                     KBU  WITH(READUNCOMMITTED) ON KBU.KbBuchungID        = SIP.KbBuchungID AND
													                              KBU.KbBuchungStatusCode NOT IN (9) -- Rückläufer ausschliessen
  LEFT OUTER JOIN dbo.KbBuchungKostenart            KBK  WITH(READUNCOMMITTED) ON KBK.KbBuchungID        = KBU.KbBuchungID
  LEFT OUTER JOIN dbo.BgKostenart                   BKAN WITH(READUNCOMMITTED) ON BKAN.BgKostenartID     = KBK.BgKostenartID
--brutto (einnahmen)
  LEFT OUTER JOIN dbo.KbBuchungBrutto               KBB  WITH(READUNCOMMITTED) ON KBB.KbBuchungBruttoID  = SIP.KbBuchungBruttoID AND /*KBB.Betrag &gt;= 0 AND*/ SIP.KbBuchungID IS NULL
  LEFT OUTER JOIN dbo.KbBuchungBruttoPerson         KBP  WITH(READUNCOMMITTED) ON KBP.KbBuchungBruttoID  = KBB.KbBuchungBruttoID
  LEFT OUTER JOIN dbo.BgKostenart                   BKAB WITH(READUNCOMMITTED) ON BKAB.BgKostenartID     = IsNull(KBP.SpezBgKostenartID,KBB.BgKostenartID)
WHERE SIC.Geloescht = 0 AND
      (MIG.KissLeistungsart in ('320','321','860','861','862')
       OR BKAN.KontoNr      in ('320','321','860','861','862')
       OR BKAB.KontoNr      in ('320','321','860','861','862'))
--- and SIC.BaMieteSicherheitsleistungArtCode = {edtSucheArt}
--- and SIC.BaPersonID = {edtSucheBaPersonID}
--- and PRS.NameVorname like '%' + replace({edtSucheKlient},' ','%') + '%' 
--- and SIC.AuszahlungAm &gt;= {edtSucheAuszahlungVon}
--- and SIC.AuszahlungAm &lt;= {edtSucheAuszahlungBis}
--- and (({edtSucheMigriert} = 1 and SIC.MigDarlehenID is not null) or
---      ({edtSucheLaufend} = 1 and SIC.MigDarlehenID is null and SIC.neu = 0) or
---      ({edtSucheNeu} = 1 and SIC.neu = 1))
--- and SIC.KontoNummer like '%' + replace({edtSucheKontoNr},' ','%') + '%'
--- and SIC.ObjektStrasse like '%' + replace({edtSucheStrasse},' ','%') + '%' 
--- and SIC.ObjektHausNr = {edtSucheHausNr}
--- and SIC.ObjektPLZ = {edtSuchePLZ}
--- and SIC.ObjektOrt like '%' + replace({edtSucheOrt},' ','%') + '%' 
--- AND SIC.BaPersonID in (select distinct BaPersonID from BaAlteFallNr where PersonNrAlt = convert(varchar(50),{edtSucheAltePNr}))
GROUP BY SIP.BaSicherheitsleistungID

INSERT INTO #SumUmbuchungen
SELECT BSL.BaSicherheitsleistungID, Summe = SUM(KBP.Betrag), SaldoPer = MAX(KBB.ValutaDatum)
FROM BaSicherheitsleistung BSL
  INNER JOIN (SELECT DISTINCT BSP.BaSicherheitsleistungID, KbBuchungBruttoID = ISNULL(BSP.KbBuchungBruttoID,ORP.KbBuchungBruttoID)
              FROM BaSicherheitsleistungPosition BSP
                LEFT JOIN KbBuchungKostenart KBK ON BSP.KbBuchungID = KBK.KbBuchungID
                LEFT JOIN KbBuchungBruttoPerson ORP ON KBK.BgPositionID = ORP.BgPositionID) S2B ON S2B.BaSicherheitsleistungID = BSL.BaSicherheitsleistungID
  INNER JOIN KbBuchungBrutto ORB ON ORB.KbBuchungBruttoID = S2B.KbBuchungBruttoID
  INNER JOIN KbBuchungBrutto KBB ON ORB.KbBuchungBruttoID = KBB.StorniertKbBuchungBruttoID
  INNER JOIN KbBuchungBruttoPerson KBP ON KBP.KbBuchungBruttoID = KBB.KbBuchungBruttoID
  INNER JOIN BgKostenart BKA ON BKA.BgKostenartID = IsNull(KBB.BgKostenartID,KBP.SpezBgKostenartID)
WHERE (KBB.StorniertKbBuchungBruttoID IS NOT NULL)-- OR KBB.NeubuchungVonKbBuchungBruttoID IS NOT NULL)
   AND BKA.KontoNr in ('320','321','860','861','862')
   AND BSL.BaSicherheitsleistungID IN (SELECT BaSicherheitsleistungID FROM #SiLeiSum)
GROUP BY BSL.BaSicherheitsleistungID


--Umbuchungen
UPDATE SME
SET Betrag   = SME.Betrag - UMB.Summe,
    SaldoPer = CASE WHEN SME.SaldoPer &lt; UMB.SaldoPer THEN UMB.SaldoPer ELSE SME.SaldoPer END
FROM #SiLeiSum               SME
  INNER JOIN #SumUmbuchungen UMB ON UMB.BaSicherheitsleistungID = SME.BaSicherheitsleistungID

-- Umbuchungen Altdaten
UPDATE SME
SET Betrag   = Betrag - BUC.Summe,
    SaldoPer = CASE WHEN SME.SaldoPer &lt; BUC.SaldoPer THEN BUC.SaldoPer ELSE SME.SaldoPer END
FROM #SiLeiSum SME
  INNER JOIN (SELECT BSP.BaSicherheitsleistungID, Summe = SUM(KBP.Betrag), SaldoPer = MAX(KBB.ValutaDatum)
              FROM BaSicherheitsleistungPosition BSP
                INNER JOIN KbBuchungBrutto       KBB ON BSP.MigDetailbuchungID = KBB.MigDetailbuchungID
                INNER JOIN KbBuchungBruttoPerson KBP ON KBP.KbBuchungBruttoID  = KBB.KbBuchungBruttoID
                INNER JOIN BgKostenart           BKA ON BKA.BgKostenartID      = KBB.BgKostenartID
              WHERE BKA.KontoNr in ('320','321','860','861','862')
                AND KBB.Belegart = 'UB' -- Nur die Stornobuchung, nicht die Neubuchung
              GROUP BY BSP.BaSicherheitsleistungID ) BUC ON BUC.BaSicherheitsleistungID = SME.BaSicherheitsleistungID


-- Output in KiSS
select SIC.*,
       Art            = ART.ShortText,
       KlientLine     = PRS.NameVorname,
       Klient         = PRS.NameVorname + CHAR(13) + CHAR(10) + PRS.WohnsitzMehrzeilig,
       MA             = USR.DisplayText,
       Institution    = isnull(INS.Name,BNK.Name),
       ZusatzInfo     = isNull(INS.AdresseMehrzeilig,
                                   isNull(BNK.Strasse + char(13) + char(10),'') + BNK.PLZ + ' ' + BNK.Ort),
       SaldoPer       = SLD.SaldoPer,
       Saldo          = IsNull(SLD.Betrag,0),
       Typ            = case 
                        when SIC.MigDarlehenID is not null then 'alt'
                        when neu = 1 then 'neu'
                        else 'lauf.'
                        end,
       FaLeistungID = coalesce(LEI.FaLeistungID,LEI2.FaLeistungID,LEI3.FaLeistungID),
       FaFallID     = coalesce(LEI.FaFallID,LEI2.FaFallID,LEI3.FaFallID),
       ST = SIC.BaPersonID,
       FallBaPersonID = isNull(FAL.BaPersonID,SIC.BaPersonID)
from   dbo.BaSicherheitsleistung    SIC WITH(READUNCOMMITTED)
       inner join dbo.vwPerson      PRS WITH(READUNCOMMITTED) ON PRS.BaPersonID = SIC.BaPersonID
       left join #SiLeiSum          SLD                       ON SLD.BaSicherheitsleistungID = SIC.BaSicherheitsleistungID
       -- 1. Variante, um FaLeistung zu bestimmen: Klient als LT in aktivem W
       left join dbo.FaLeistung     LEI WITH(READUNCOMMITTED) ON LEI.BaPersonID = SIC.BaPersonID and
                                       LEI.FaProzessCode = 300 and
                                       LEI.DatumBis is null and
                                       LEI.FaLeistungID = (select top 1 FaLeistungID
                                                           from   dbo.FaLeistung WITH(READUNCOMMITTED)
                                                           where  BaPersonID = SIC.BaPersonID and
                                                                  FaProzessCode = 300 and
                                                                  DatumBis is null
                                                           order by DatumVon desc)
       -- 2. Variante, um FaLeistung zu bestimmen: Klient als Mitgied UE
       left join dbo.BgFinanzplan_BaPerson FPP WITH(READUNCOMMITTED) ON FPP.BaPersonID = SIC.BaPersonID AND
                                                                        FPP.IstUnterstuetzt = 1 AND
                                                                        FPP.BgFinanzplan_BaPersonID = (select top 1 P.BgFinanzplan_BaPersonID
                                                                                                       from   BgFinanzplan_BaPerson P
                                                                                                              inner join BgFinanzplan F on F.BgFinanzplanID = P.BgFinanzplanID
                                                                                                       where  P.BaPersonID = SIC.BaPersonID and
                                                                                                              P.IstUnterstuetzt = 1
                                                                                                       order by F.DatumVon desc)
       left join dbo.BgFinanzplan   FPL  WITH(READUNCOMMITTED) ON FPL.BgFinanzplanID = FPP.BgFinanzplanID
       left join dbo.FaLeistung     LEI2 WITH(READUNCOMMITTED) ON LEI2.FaLeistungID = FPL.FaLeistungID

       -- 3. Variante, um FaLeistung zu bestimmen: Klient als LT in inaktivem W
       left join dbo.FaLeistung     LEI3 WITH(READUNCOMMITTED) ON LEI3.BaPersonID = SIC.BaPersonID and
                                       LEI3.FaProzessCode = 300 and
                                       LEI3.DatumBis is not null and
                                       LEI3.FaLeistungID = (select top 1 FaLeistungID
                                                           from   dbo.FaLeistung WITH(READUNCOMMITTED)
                                                           where  BaPersonID = SIC.BaPersonID and
                                                                  FaProzessCode = 300 and
                                                                  DatumBis is not null
                                                           order by DatumVon desc)
       left join dbo.FaFall         FAL  WITH(READUNCOMMITTED) ON FAL.FaFallID = coalesce(LEI.FaFallID,LEI2.FaFallID,LEI3.FaFallID)

       left join dbo.vwUser         USR WITH(READUNCOMMITTED) ON USR.UserID = coalesce(LEI.UserID,LEI2.UserID,LEI3.UserID)

       left join dbo.vwInstitution  INS WITH(READUNCOMMITTED) ON INS.BaInstitutionID = SIC.BaInstitutionID
       left join dbo.BaBank         BNK WITH(READUNCOMMITTED) ON BNK.BaBankID = SIC.BaBankID
       left join dbo.XLOVCode       ART WITH(READUNCOMMITTED) ON ART.LOVName = 'BaMieteSicherheitsleistungArt' and ART.Code = SIC.BaMieteSicherheitsleistungArtCode
where SIC.Geloescht = 0
--- and ({edtSucheSaldoNichtNull} = 0 or (SLD.Betrag is not null and SLD.Betrag &lt;&gt; 0))
--- and PRS.NameVorname like '%' + replace({edtSucheKlient},' ','%') + '%' 
--- and SIC.BaMieteSicherheitsleistungArtCode = {edtSucheArt}
--- and SIC.BaPersonID = {edtSucheBaPersonID}
--- and SIC.AuszahlungAm &gt;= {edtSucheAuszahlungVon}
--- and SIC.AuszahlungAm &lt;= {edtSucheAuszahlungBis}
--- and (({edtSucheMigriert} = 1 and SIC.MigDarlehenID is not null) or
---      ({edtSucheLaufend} = 1 and SIC.MigDarlehenID is null and SIC.neu = 0) or
---      ({edtSucheNeu} = 1 and SIC.neu = 1))
--- and INS.Name like '%' + replace({edtSucheInstitution},' ','%') + '%' 
--- and SIC.KontoNummer like '%' + replace({edtSucheKontoNr},' ','%') + '%'
--- and SIC.ObjektStrasse like '%' + replace({edtSucheStrasse},' ','%') + '%' 
--- and SIC.ObjektHausNr = {edtSucheHausNr}
--- and SIC.ObjektPLZ = {edtSuchePLZ}
--- and SIC.ObjektOrt like '%' + replace({edtSucheOrt},' ','%') + '%' 
--- and LEI.FaFallID = {edtSucheFaFallID}
--- AND SIC.BaPersonID in (select distinct BaPersonID from BaAlteFallNr where PersonNrAlt = convert(varchar(50),{edtSucheAltePNr}))
order by PRS.NameVorname

DROP TABLE #SiLeiSum;
DROP TABLE #SumUmbuchungen;</value>
  </data>
  <data name="edtReportInventarBis.Properties.Buttons" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        iVBORw0KGgoAAAANSUhEUgAAAAwAAAAQCAYAAAAiYZ4HAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8
        YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAABMSURBVDhPYwABY2Pj/8RgsGIQgHFQBKEAqxyIQwyGKsdu
        MjrAqaGhgQErG6sGkAKYInSaOhpAYERrAAFkNk4NuACGBmIwVDkpgIEBAO2ojyYwtBe7AAAAAElFTkSu
        QmCC
</value>
  </data>
  <data name="edtReportBelegeBis.Properties.Buttons" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        iVBORw0KGgoAAAANSUhEUgAAAAwAAAAQCAYAAAAiYZ4HAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8
        YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAABMSURBVDhPYwABY2Pj/8RgsGIQgHFQBKEAqxyIQwyGKsdu
        MjrAqaGhgQErG6sGkAKYInSaOhpAYERrAAFkNk4NuACGBmIwVDkpgIEBAO2ojyYwtBe7AAAAAElFTkSu
        QmCC
</value>
  </data>
  <data name="edtReportBelegeVon.Properties.Buttons" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        iVBORw0KGgoAAAANSUhEUgAAAAwAAAAQCAYAAAAiYZ4HAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8
        YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAABMSURBVDhPYwABY2Pj/8RgsGIQgHFQBKEAqxyIQwyGKsdu
        MjrAqaGhgQErG6sGkAKYInSaOhpAYERrAAFkNk4NuACGBmIwVDkpgIEBAO2ojyYwtBe7AAAAAElFTkSu
        QmCC
</value>
  </data>
  <data name="edtSucheJahrBis.Properties.Buttons" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        iVBORw0KGgoAAAANSUhEUgAAAAwAAAAQCAYAAAAiYZ4HAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8
        YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAABMSURBVDhPYwABY2Pj/8RgsGIQgHFQBKEAqxyIQwyGKsdu
        MjrAqaGhgQErG6sGkAKYInSaOhpAYERrAAFkNk4NuACGBmIwVDkpgIEBAO2ojyYwtBe7AAAAAElFTkSu
        QmCC
</value>
  </data>
  <data name="edtSucheJahrVon.Properties.Buttons" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        iVBORw0KGgoAAAANSUhEUgAAAAwAAAAQCAYAAAAiYZ4HAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8
        YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAABMSURBVDhPYwABY2Pj/8RgsGIQgHFQBKEAqxyIQwyGKsdu
        MjrAqaGhgQErG6sGkAKYInSaOhpAYERrAAFkNk4NuACGBmIwVDkpgIEBAO2ojyYwtBe7AAAAAElFTkSu
        QmCC
</value>
  </data>
  <data name="edtSucheAuszahlungBis.Properties.Buttons" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        iVBORw0KGgoAAAANSUhEUgAAAAwAAAAQCAYAAAAiYZ4HAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8
        YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAABMSURBVDhPYwABY2Pj/8RgsGIQgHFQBKEAqxyIQwyGKsdu
        MjrAqaGhgQErG6sGkAKYInSaOhpAYERrAAFkNk4NuACGBmIwVDkpgIEBAO2ojyYwtBe7AAAAAElFTkSu
        QmCC
</value>
  </data>
  <data name="edtSucheAuszahlungVon.Properties.Buttons" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        iVBORw0KGgoAAAANSUhEUgAAAAwAAAAQCAYAAAAiYZ4HAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8
        YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAABMSURBVDhPYwABY2Pj/8RgsGIQgHFQBKEAqxyIQwyGKsdu
        MjrAqaGhgQErG6sGkAKYInSaOhpAYERrAAFkNk4NuACGBmIwVDkpgIEBAO2ojyYwtBe7AAAAAElFTkSu
        QmCC
</value>
  </data>
  <metadata name="qryBgKostenart.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>205, 17</value>
  </metadata>
</root>
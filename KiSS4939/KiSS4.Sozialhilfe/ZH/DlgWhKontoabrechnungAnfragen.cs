#region Header

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3053
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#endregion

using System;
using System.Windows.Forms;

using KiSS.DBScheme;

using KiSS4.Common;
using KiSS4.DB;

namespace KiSS4.Sozialhilfe.ZH
{
    public class DlgWhKontoabrechnungAnfragen : DlgBewilligungAnfragen
    {
        private int _whAbrechnungID;

        #region Fields

        #endregion

        #region Constructors

        //int whAbrechnungID = 0;
        public DlgWhKontoabrechnungAnfragen(int whAbrechnungID)
            : base(false) //TODO: eventuell doch mit openTransaction?
        {
            InitializeComponent();
            _whAbrechnungID = whAbrechnungID;
        }


        public DlgWhKontoabrechnungAnfragen()
        {
            this.InitializeComponent();
        }

        #endregion

        #region Windows Form Designer generated code

        /// <summary>
        /// Required method for Designer support - do not modify
        /// the contents of this method with the code editor.
        /// </summary>
        private void InitializeComponent()
        {
            this.SuspendLayout();

            this.ResumeLayout(false);
        }

        #endregion

        #region Dispose

        /// <summary>
        /// Clean up any resources being used.
        /// </summary>
        protected override void Dispose(bool disposing)
        {
            base.Dispose(disposing);
        }

        #endregion

        #region Private Methods

        protected override void DetermineLeistungUndLeistungsverantwortlicher(out int userID, out string nameVorname)
        {
            var qryLeistung =
                DBUtil.OpenSQL(
                    @"
                    SELECT TOP 1
                      FAL.UserID,
                      Name = USR.NameVorname
                    FROM dbo.WhAbrechnung   ABR WITH (READUNCOMMITTED)
                      INNER JOIN dbo.FaFall FAL WITH (READUNCOMMITTED) ON FAL.FaFallID = ABR.FaFallID
                      INNER JOIN dbo.vwUser USR WITH (READUNCOMMITTED) ON USR.UserID = FAL.UserID
                    WHERE ABR.WhAbrechnungID = {0};",
                    _whAbrechnungID);

            if (qryLeistung.IsEmpty)
            {
                throw new KissErrorException(
                    KissMsg.GetMLMessage(
                        this.Name,
                        "LVKonnteNichtErmitteltWerden",
                        "Der Leistungsverantwortliche konnte nicht ermittelt werden"));
            }

            userID = Utils.ConvertToInt(qryLeistung[DBO.FaLeistung.UserID]);
            nameVorname = Utils.ConvertToString(qryLeistung["Name"]);
        }

        protected override void PrepareBewilligungQuery(SqlQuery query, out string tableName)
        {
            query.Fill(@"
                SELECT
                 ABR.WhAbrechnungID,
                 ABR.UserID_AnfrageVon,
                 ABR.UserID_AnfrageAn,
                 ABR.DatumAnfrage,
                 ABR.WhAbrechnungVisumCode,
                 ABR.Bemerkung,
                 ABR.WhAbrechnungTS
                FROM WhAbrechnung ABR
                WHERE WhAbrechnungID = {0}", _whAbrechnungID);

            tableName = "WhAbrechnung";
        }

        protected override void SetValuesInBewilligungQuery(SqlQuery query)
        {
            query["UserID_AnfrageVon"] = Session.User.UserID;
            query["UserID_AnfrageAn"] = _userIdSelected;
            query["DatumAnfrage"] = DateTime.Now;

            query["WhAbrechnungVisumCode"] = 2; // angefragt
        }

        #endregion

        protected override bool HasUserKompetenz(int userID)
        {
            return !WhUtil.IsSachbearbeiter(userID);
        }
    }
}
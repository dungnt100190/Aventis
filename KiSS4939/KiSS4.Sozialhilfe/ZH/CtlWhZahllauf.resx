<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <metadata name="qryKbBuchung.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>156, 17</value>
  </metadata>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="dateBuchungsdatum.Properties.Buttons" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        iVBORw0KGgoAAAANSUhEUgAAAAwAAAAQCAYAAAAiYZ4HAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8
        YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAABMSURBVDhPYwABY2Pj/8RgsGIQgHFQBKEAqxyIQwyGKsdu
        MjrAqaGhgQErG6sGkAKYInSaOhpAYERrAAFkNk4NuACGBmIwVDkpgIEBAO2ojyYwtBe7AAAAAElFTkSu
        QmCC
</value>
  </data>
  <data name="picTitel.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8
        YQUAAAAgY0hSTQAAeiYAAICEAAD6AAAAgOgAAHUwAADqYAAAOpgAABdwnLpRPAAAAIhJREFUOE+tTgkO
        wCAM8un+3IUqk3YaazIS0sOCFEWttZFjlccQKe8gBq7PwI4XCTI0NIAGrfX5VHE7NFjMBB3zqONbg8E3
        wSlRMPAJ0HNmHxkMfk6wmmMNBncJsAfFwP+InrP2pOwMJlITFfBnziok3iNUzGRGDNiRmrDijdyJAXcY
        CeFeXMoDgGnIDRgG11UAAAAASUVORK5CYII=
</value>
  </data>
  <metadata name="qryBgDokumente.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>17, 17</value>
  </metadata>
  <data name="qryBgDokumente.SelectStatement" xml:space="preserve">
    <value>SELECT DISTINCT BDO.*, DOC.DateLastSave, DOC.DateCreation
FROM   KbBuchungKostenart BKA
       INNER JOIn BgPosition   POS ON POS.BgPositionID = BKA.BgPositionID
       INNER JOIN BgBudget     BDG ON BDG.BgBudgetID = POS.BgBudgetID
       INNER JOIN BgDokument   BDO ON BDO.BgPositionID = POS.BgPositionID
       INNER JOIN XDocument    DOC ON DOC.DocumentID = BDO.DocumentID
WHERE  BKA.KbBuchungID = {0}
UNION
SELECT DISTINCT BDO.*, DOC.DateLastSave, DOC.DateCreation
FROM   KbBuchungKostenart BKA
       INNER JOIn BgPosition   POS ON POS.BgPositionID = BKA.BgPositionID
       INNER JOIN BgBudget     BDG ON BDG.BgBudgetID = POS.BgBudgetID
       INNER JOIN BgDokument   BDO ON BDO.BgBudgetID = POS.BgBudgetID
       INNER JOIN XDocument    DOC ON DOC.DocumentID = BDO.DocumentID
WHERE  BKA.KbBuchungID = {0}
UNION
SELECT DISTINCT BDO.*, DOC.DateLastSave, DOC.DateCreation
FROM   KbBuchungKostenart BKA
       INNER JOIn BgPosition   POS ON POS.BgPositionID = BKA.BgPositionID
       INNER JOIN BgBudget     BDG ON BDG.BgBudgetID = POS.BgBudgetID
       INNER JOIN BgDokument   BDO ON BDO.BgFinanzplanID = BDG.BgFinanzplanID
       INNER JOIN XDocument    DOC ON DOC.DocumentID = BDO.DocumentID
WHERE  BKA.KbBuchungID = {0}
ORDER BY BDO.BgDokumentTypCode, Stichwort</value>
  </data>
  <data name="edtDocument.Properties.Buttons" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        iVBORw0KGgoAAAANSUhEUgAAAAwAAAAQCAYAAAAiYZ4HAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8
        YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAABfSURBVDhPrY7RDYAwCESZgkXYqTs5LeYqRFsBNfaS98W9
        cISIiGb0whwcVLcbzNyx2hkXWqMBlF206pGnD2CYlwlXQmGe5KRCxRohmgNSoWKNEM0BqVDxX3iD1b+E
        aAfWfHr9nSYTxgAAAABJRU5ErkJggg==
</value>
  </data>
  <metadata name="qryKbBuchungKostenart.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>289, 17</value>
  </metadata>
  <data name="qryKbBuchungKostenart.SelectStatement" xml:space="preserve">
    <value>select BKA.*,
       BetragAbs = abs(BKA.Betrag),
       Person = PRS.NameVorname
from   KbBuchungKostenart BKA
       left join vwPerson PRS on PRS.BaPersonID = BKA.BaPersonID
where  KbBuchungID = {0}
order by PositionImBeleg</value>
  </data>
  <data name="edtErfassungDatum.Properties.Buttons" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        iVBORw0KGgoAAAANSUhEUgAAAAwAAAAQCAYAAAAiYZ4HAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8
        YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAABMSURBVDhPYwABY2Pj/8RgsGIQgHFQBKEAqxyIQwyGKsdu
        MjrAqaGhgQErG6sGkAKYInSaOhpAYERrAAFkNk4NuACGBmIwVDkpgIEBAO2ojyYwtBe7AAAAAElFTkSu
        QmCC
</value>
  </data>
  <data name="qryKbBuchung.SelectStatement" xml:space="preserve">
    <value>select
       BUC.KbBuchungID,
       BUC.PscdFehlermeldung,
       BUC.BelegDatum,
       BUC.[Text],
       BUC.Betrag,
       BUC.ValutaDatum,
       BUC.KbBuchungStatusCode,
       BUC.KbBuchungTS,
       AuszahlungsArtCode = ISNULL(BUC.KbAuszahlungsArtCode, 0),
       BetragAbs         = abs(BUC.Betrag),
       Tage              = datediff(d,GetDate(),BUC.ValutaDatum),
       Doc               = case when exists (select 1 
                                             from KbBuchungKostenart A
                                                  inner join BgDokument B on B.BgPositionID = A.BgPositionID
                                             where A.KbBuchungID = BUC.KbBuchungID) then 'x' else '' end,
       Kreditor          = case when KTS.KbKontoID is not null
                           then -- Debitor
                                IsNull(DEBP.NameVorname + CHAR(13) + CHAR(10) + DEBP.WohnsitzMehrzeilig,
                                       DEBI.Name + CHAR(13) + CHAR(10) + DEBI.AdresseMehrzeilig)
                           else -- Kreditor
                                IsNull(BUC.BeguenstigtName + CHAR(13) + CHAR(10),'') +
                                IsNull(BUC.BeguenstigtName2 + CHAR(13) + CHAR(10),'') +
                                IsNull(BUC.BeguenstigtPostfach + char(13) + char(10), '') +
                                IsNull(BUC.BeguenstigtStrasse + IsNull(' ' + BUC.BeguenstigtHausNr, '') + char(13) + char(10), '') +
                                IsNull(IsNull(BUC.BeguenstigtPLZ + ' ', '') + IsNull(BUC.BeguenstigtOrt, '') + char(13) + char(10), '') +
                                '** ' + EIZ.ShortText + ' **' + CHAR(13) + CHAR(10) + 
                                IsNull(IsNull(dbo.fnTnToPc(BUC.PCKontoNr),'') + ISNULL(', ' + BUC.BankName,'') + CHAR(13) + CHAR(10),'') + 
                                IsNull(BUC.BankKontoNr + CHAR(13) + CHAR(10), '') +
                                IsNull(BUC.ReferenzNummer,'')
                           end,
       KD                = case when KTS.KbKontoID is not null then 'D' else 'K' end,
       LAs               = DET.LAs,
       KreditorLinie     = case when KTS.KbKontoID is not null
                           then Coalesce(DEBP.NameVorname,DEBI.Name,'') -- Debitor
                           else BUC.BeguenstigtName -- Kreditor
                           end,
       Klient            = PRS.NameVorname,
       BaPersonID        = PRS.BaPersonID,
       Zahlart           = ART.Text,
       Sel               = convert(bit,0),
       FallBaPersonID    = FAL.BaPersonID,
       JumpToMBPfad      = 'CtlWhFinanzplan' + convert(varchar, FPL.BgFinanzplanID) +
                           '\BBG' + convert(varchar, BDG.BgBudgetID),
       ZahlungForderung  = case 
                           when KTS.KbKontoID is not null then 'F'
                           when KTH.KbKontoID is not null then 'Z'
                           end,
       KbBuchungBruttoID = case when KTS.KbKontoID is not null
                           then (select top 1 B.KbBuchungBruttoID
                                 from   KbBuchungKostenart A 
                                        left join KbBuchungBruttoPerson B on B.BgPositionID = A.BgPositionID
                                 where  A.KbBuchungID = BUC.KbBuchungID)
                           end
from   KbBuchung BUC2
       inner join KbBuchung     BUC  on BUC.KbBuchungID = BUC2.KbBuchungID
       left  join (SELECT KbBuchungID, LAs = dbo.ConcDistinctOrder(KontoNr)
                   FROM   KbBuchungKostenart
                   WHERE Betrag &lt;&gt; 0
                   GROUP BY KbBuchungID) DET on DET.KbBuchungID = BUC2.KbBuchungID
       inner join BgBudget      BDG  on BDG.BgBudgetID = BUC.BgBudgetID
       inner join BgFinanzplan  FPL  on FPL.BgFinanzplanID = BDG.BgFinanzplanID
       inner join FaLeistung    LEI  on LEI.FaLeistungID = FPL.FaLeistungID
       inner join FaFall        FAL  on FAL.FaFallID = LEI.FaFallID
       inner join vwPersonSimple      PRS  on PRS.BaPersonID = LEI.BaPersonID
       left  join KbKonto       KTS  on KTS.KbPeriodeID = BUC.KbPeriodeID and
                                        KTS.KontoNr = BUC.SollKtoNr and
                                        KTS.KbKontoartCodes = 20
       left  join KbKonto       KTH  on KTH.KbPeriodeID = BUC.KbPeriodeID and
                                        KTH.KontoNr = BUC.HabenKtoNr and
                                        KTH.KbKontoartCodes = 30
       left  join vwPerson2      DEBP on DEBP.BaPersonID = BUC.Schuldner_BaPersonID
       left  join vwInstitution2 DEBI on DEBI.BaInstitutionID = BUC.Schuldner_BaInstitutionID
       left  join XLOVCode      ART  on ART.LOVName = 'KbAuszahlungsArt' and
                                        ART.Code = BUC.KbAuszahlungsArtCode
       left  join BaZahlungsweg ZAH  on ZAH.BaZahlungswegID = BUC.BaZahlungswegID
       left  join XLOVCode      EIZ  on EIZ.LOVName = 'BgEinzahlungsschein' AND
                                        EIZ.Code = ZAH.EinzahlungsscheinCode

where  BUC.KbBuchungStatusCode in (2,4,5,16) -- freigegeben + ausgedruckt +  Zahlauftrag fehlerhaft + Rückläufer korrigiert
       AND BUC.ValutaDatum is not null
       AND LEI.FaProzessCode = 300 -- nur Wirtschaftliche Hilfe
       -- AND BUC.Betrag &lt;&gt; 0 -- 0er-Belege müssen an den KiSS-Server gesendet werden, an PSCD werden dann nur die betroffenen Bruttobelege übertragen
       AND (BUC.KbAuszahlungsArtCode IS NULL OR BUC.KbAuszahlungsArtCode != 103 OR BUC.KbBuchungStatusCode != 2	-- Entweder dies ist keine Zahlung, oder es ist kein Barbeleg oder der Barbeleg ist bereits gedruckt (d.h. nicht mehr freigegeben)
				OR DATEDIFF(day, BUC.ValutaDatum, GetDate()) &lt;= 4	-- Oder es ist ein noch nicht gedruckter Barbeleg, und in diesem Fall darf das Valutadatum nicht älter als 4 Tage sein
		 )	
--- and BUC.ValutaDatum &lt;= {edtSucheValutaBis}
--- and BUC.KbAuszahlungsArtCode = {edtSucheAuszahlungsArt}
--- and BUC.PscdFehlermeldung like '%' + {edtSucheFehlermeldung} + '%'
--- and ({edtSucheZahlungForderung} &lt;&gt; 1 or KTH.KbKontoID is not null)  -- nur Zahlungen
--- and ({edtSucheZahlungForderung} &lt;&gt; 2 or KTS.KbKontoID is not null)  -- nur Forderungen
order by ValutaDatum, Klient
</value>
  </data>
  <data name="edtSucheValutaBis.Properties.Buttons" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        iVBORw0KGgoAAAANSUhEUgAAAAwAAAAQCAYAAAAiYZ4HAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8
        YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAABMSURBVDhPYwABY2Pj/8RgsGIQgHFQBKEAqxyIQwyGKsdu
        MjrAqaGhgQErG6sGkAKYInSaOhpAYERrAAFkNk4NuACGBmIwVDkpgIEBAO2ojyYwtBe7AAAAAElFTkSu
        QmCC
</value>
  </data>
</root>
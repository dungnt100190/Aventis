<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <metadata name="qryQuery.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>17, 17</value>
  </metadata>
  <data name="qryQuery.SelectStatement" xml:space="preserve">
    <value>SELECT BBW.*,
  Sel                   = CASE WHEN BPO.BgPositionID IS NOT NULL
---                                   AND dbo.fnWhPosition_Permission(BPO.BgPositionID,{edtUserID}) = 1
---                                   AND dbo.fnKompetenzstufe({edtUserID}) &gt;=  dbo.fnKompetenzstufe(BBW.UserID_An)           
---                                   AND (dbo.fnKompetenzstufe({edtUserID}) &gt; 1 OR dbo.fnUserInGleicherOrgUnit({edtUserID}, BBW.UserID_An) = 1)
                            THEN CONVERT(BIT,0) ELSE NULL END,
  BewilligungTyp          = CASE
                            WHEN BPO.BgPositionID is null THEN 'Finanzplan'
                            WHEN BPO.BgPositionID is not null AND BDG2.MasterBudget = 1 then 'FP-Anpassung'
                            WHEN BPO.BgPositionID is not null AND BDG2.MasterBudget = 0 then 'zus. Leistung'
                            END,
  FaLeistungID            = LEI.FaLeistungID, 
  FaFallID                = LEI.FaFallID, 
  FAL_BaPersonID          = FAL.BaPersonID,
  SA                      = SAR.LastName + IsNull(', ' + SAR.FirstName, ''), 
  BaPersonID              = PRS.BaPersonID, 
  NameVorname             = PRS.NameVorname,
  Typ                     = dbo.fnLOVText('WhHilfeTyp', FIN.WhHilfeTypCode),
  Info                    = CASE WHEN BBW.BgPositionID is null 
                            THEN 'geplant ' + convert(varchar,FIN.GeplantVon,104) + ' - ' + convert(varchar,FIN.GeplantBis,104)
                            ELSE isnull(GRP.Text + ', ','') + isnull(POA.Name,'')
                            END,
  GeplantVon              = FIN.GeplantVon, 
  GeplantBis              = FIN.GeplantBis,
  MasterBudget            = BBG.MasterBudget, 
  BgBewilligungStatusCode = BBG.BgBewilligungStatusCode,
  DatumVon                = BPO.DatumVon,
  Buchungstext            = BPO.Buchungstext, 
  BetragBudget            = BPO.BetragBudget + 
                               CASE WHEN BPO.BgKategorieCode = 100
                               THEN (SELECT ISNULL(SUM(Betrag),0) FROM dbo.BgPosition WITH (READUNCOMMITTED) WHERE BgPositionID_Parent = BPO.BgPositionID)
                               ELSE 0
                               END, 
  LA                      = KOA.KontoNr + 
                            ISNULL(CASE WHEN BPO.BgKategorieCode = 100 AND EXISTS(SELECT 1 FROM dbo.BgPosition WITH (READUNCOMMITTED) 
                                                                                  WHERE BgPositionID_Parent = BPO.BgPositionID)
                                   THEN '+' END,''),
  Betrifft                = BTR.NameVorname,
  Absender                = ABS.LastName + IsNull(', ' + ABS.FirstName, ''),
  Empfaenger              = EMP.LastName + IsNull(', ' + EMP.FirstName, ''),
  BgGruppeCode            = POA.BgGruppeCode,
  BgGruppeValue1          = GRP.Value1,
  Gruppe                  = GRP.Text,
  Position                = IsNull(POA.Name, ''),
  Doc                     = CONVERT(varchar, CASE WHEN DOC.BgDokumentID IS NOT NULL THEN 'x' ELSE '' END), 
  Stichwort               = DOC.Stichwort,
  DocumentID              = DOC.DocumentID,
  KbBuchungErzeugen       = convert(bit, case when BPO.BgPositionID is not null and 
                                                   BBG.MasterBudget = 0 and 
                                                   BBG.BgBewilligungStatusCode = 5 
                                         then 1 else 0 end),  -- bei roten Monatsbudgets?
  BgFinanzplanID2         = FIN2.BgFinanzplanID,
  BgBudgetID2             = BDG2.BgBudgetID,
  Bemerkung               = BBW.Bemerkung,
  BgPositionsartID        = BPO.BgPositionsartID,
  BgKategorieCode         = BPO.BgKategorieCode
FROM dbo.BgBewilligung           BBW WITH (READUNCOMMITTED)
  INNER JOIN dbo.XUser           ABS WITH (READUNCOMMITTED) ON ABS.UserID = BBW.UserID_Erstellt
  LEFT  JOIN dbo.XUser           EMP WITH (READUNCOMMITTED) ON EMP.UserID = BBW.UserID_An
  LEFT  JOIN dbo.BgFinanzplan    FIN WITH (READUNCOMMITTED) ON FIN.BgFinanzPlanID = BBW.BgFinanzPlanID
  LEFT  JOIN dbo.FaLeistung      LEI WITH (READUNCOMMITTED) ON LEI.FaLeistungID = FIN.FaLeistungID
  LEFT  JOIN dbo.FaFall          FAL WITH (READUNCOMMITTED) ON FAL.FaFallID = LEI.FaFallID
  LEFT  JOIN dbo.XUser           SAR WITH (READUNCOMMITTED) ON SAR.UserID = LEI.UserID
  LEFT  JOIN dbo.vwPerson        PRS ON PRS.BaPersonID = LEI.BaPersonID
  LEFT  JOIN dbo.vwBgPosition    BPO ON BPO.BgPositionID = BBW.BgPositionID
  LEFT  JOIN dbo.BgDokument      DOC WITH (READUNCOMMITTED) ON DOC.BgPositionID = BPO.BgPositionID AND
                                    BgDokumentID = (SELECT TOP 1 BgDokumentID
                                                    FROM   dbo.BgDokument WITH (READUNCOMMITTED)
                                                    WHERE  BgPositionID = BPO.BgPositionID
                                                    ORDER BY DocumentID DESC)
  LEFT  JOIN dbo.BgBudget        BBG WITH (READUNCOMMITTED) ON BBG.BgBudgetID = BPO.BgBudgetID
  LEFT  JOIN dbo.BgPositionsart  POA WITH (READUNCOMMITTED) ON POA.BgPositionsartID = BPO.BgPositionsartID
  LEFT  JOIN dbo.BgKostenart     KOA WITH (READUNCOMMITTED) ON KOA.BgKostenartID = POA.BgKostenartID
  LEFT  JOIN dbo.vwPerson        BTR ON BTR.BaPersonID = BPO.BaPersonID
  LEFT  JOIN dbo.XLOVCode        GRP WITH (READUNCOMMITTED) ON GRP.LOVName = 'BgGruppe' AND
                                    GRP.Code = POA.BgGruppeCode
  LEFT  JOIN dbo.vwBgPosition    ALT ON ALT.BgPositionID = BPO.BgPositionID_CopyOf
  LEFT  JOIN dbo.BgBudget        BDG2 WITH (READUNCOMMITTED) ON BDG2.BgBudgetID = BPO.BgBudgetID
  LEFT  JOIN dbo.BgFinanzplan    FIN2 WITH (READUNCOMMITTED) ON FIN2.BgFinanzPlanID = BDG2.BgFinanzPlanID


WHERE (BBW.BgPositionID IS NULL     OR NOT EXISTS (SELECT 1 FROM dbo.BgBewilligung WITH (READUNCOMMITTED) WHERE BgPositionID = BBW.BgPositionID     AND BgBewilligungID &gt; BBW.BgBewilligungID))
      AND (BBW.BgPositionID IS NOT NULL OR NOT EXISTS (SELECT 1 FROM dbo.BgBewilligung WITH (READUNCOMMITTED) WHERE BgFinanzPlanID = BBW.BgFinanzPlanID AND BgBewilligungID &gt; BBW.BgBewilligungID))
      AND BBW.BgBewilligungCode = 1  -- angefragt
      AND ISNULL(BPO.BgBewilligungStatusCode,3) = 3  -- angefragt
--- AND LEI.UserID = {edtWhSucheSARX.LookupID}
--- AND LEI.BaPersonID = {edtWhSucheKlientX.LookupID}
--- AND FIN.WhHilfeTypCode = {edtWhSucheTypX}
--- AND FIN.WhGrundbedarfTypCode = {edtWhSucheGrundbedarfX}
--- AND BBW.UserID_Erstellt = {edtWhSucheAbsenderX.LookupID}
--- AND BBW.UserID_An = {edtWhSucheEmpfX.LookupID}
ORDER BY BewilligungTyp, SA, NameVorname</value>
  </data>
  <metadata name="qryBgDokumente.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>119, 17</value>
  </metadata>
  <metadata name="$this.TrayHeight" type="System.Int32, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
    <value>57</value>
  </metadata>
  <data name="qryBgDokumente.SelectStatement" xml:space="preserve">
    <value>SELECT
	  BgDokumentID,
	  BgFinanzplanID,
	  BgBudgetID,
	  BgPositionID,
	  BgDokumentTypCode,
	  DocumentID,
	  Stichwort,
       BgDocumentTS,
	  DateCreation,
	  UserID_Creator,
	  DateLastSave,
	  UserID_LastSave,
	  FileBinary,
	  DocFormatCode,
	  FileExtension
FROM   fnBgGetDokumente({0})
ORDER BY Stichwort</value>
  </data>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="edtDocument.Properties.Buttons" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        iVBORw0KGgoAAAANSUhEUgAAAAwAAAAQCAYAAAAiYZ4HAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8
        YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAABfSURBVDhPrY7RDYAwCESZgkXYqTs5LeYqRFsBNfaS98W9
        cISIiGb0whwcVLcbzNyx2hkXWqMBlF206pGnD2CYlwlXQmGe5KRCxRohmgNSoWKNEM0BqVDxX3iD1b+E
        aAfWfHr9nSYTxgAAAABJRU5ErkJggg==
</value>
  </data>
  <data name="edtWhSucheKlientX.LookupSQL" xml:space="preserve">
    <value>select 
  ID$ = BaPersonID, 
  Klient = Name + isNull(', ' + Vorname,''),
  [Person ID] = BaPersonID
from   BaPerson 
where Name + IsNull(', ' + Vorname,'') LIKE '%' + {0} + '%'
order by Klient
----</value>
  </data>
</root>
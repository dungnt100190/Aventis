<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="edtDatumBis.Properties.Buttons" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        iVBORw0KGgoAAAANSUhEUgAAAAwAAAAQCAYAAAAiYZ4HAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8
        YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAABRSURBVDhPY2AAAmNj4//EYJBaMAApRqbhErjkiDEdZiiK
        Dcgmo7NxamhoYAA7DwSQ2Vg1gBTAFKHT1NGA7AyibBhuGoiKB5Jimpj0hM9AnHIA7aiPJlUTWpwAAAAA
        SUVORK5CYII=
</value>
  </data>
  <data name="edtDatumVon.Properties.Buttons" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        iVBORw0KGgoAAAANSUhEUgAAAAwAAAAQCAYAAAAiYZ4HAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8
        YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAABRSURBVDhPY2AAAmNj4//EYJBaMAApRqbhErjkiDEdZiiK
        Dcgmo7NxamhoYAA7DwSQ2Vg1gBTAFKHT1NGA7AyibBhuGoiKB5Jimpj0hM9AnHIA7aiPJlUTWpwAAAAA
        SUVORK5CYII=
</value>
  </data>
  <metadata name="qryValidiertNicht.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>17, 17</value>
  </metadata>
  <metadata name="$this.TrayHeight" type="System.Int32, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
    <value>61</value>
  </metadata>
  <data name="qryValidiertNicht.SelectStatement" xml:space="preserve">
    <value>-----------------------------------------------------------------------------
-- vars
-----------------------------------------------------------------------------
DECLARE @DatumVon DATETIME;
DECLARE @DatumBis DATETIME;
DECLARE @Mandantennummer INT;
DECLARE @LanguageCode INT;
DECLARE @PeriodeString VARCHAR(100);

-----------------------------------------------------------------------------
-- fill vars
-----------------------------------------------------------------------------
--/*
SET @DatumVon = {0};
SET @DatumBis = {1};
SET @Mandantennummer = {2};
SET @LanguageCode = {3};
--*/

-- DEBUG ONLY:
/*
SET @DatumVon = '2008-01-01';
SET @DatumBis = '2013-01-31';
SET @LanguageCode = 1;
SET @Mandantennummer = 1; -- Pro Infirmis = 1
--*/


-- set periode
SET @PeriodeString = ISNULL(dbo.fnDateAsVarchar(@DatumVon, 'dd.mm.yyyy') + ' - ' + dbo.fnDateAsVarchar(@DatumBis, 'dd.mm.yyyy'), '');

-----------------------------------------------------------------------------
-- query
-----------------------------------------------------------------------------
;WITH Dauer_CTE AS
(
  SELECT
    UserID,
    LA1 = SUM(CASE WHEN LEI.LohnartCode = 1100 THEN LEI.Dauer ELSE 0.0 END),  --LA1 
    LA2 = SUM(CASE WHEN LEI.LohnartCode = 1110 THEN LEI.Dauer ELSE 0.0 END),  --LA2 
    LA3 = SUM(CASE WHEN LEI.LohnartCode = 1120 THEN LEI.Dauer ELSE 0.0 END),  --LA3 
    LA4 = SUM(CASE WHEN LEI.LohnartCode = 1130 THEN LEI.Dauer ELSE 0.0 END),  --LA4 
    LA5 = SUM(CASE WHEN LEI.LohnartCode = -5 THEN LEI.Dauer ELSE 0.0 END),    --LA5 
    LA6 = SUM(CASE WHEN LEI.LohnartCode = -6 THEN LEI.Dauer ELSE 0.0 END),    --LA6 
    LA7 = SUM(CASE WHEN LEI.LohnartCode = -7 THEN LEI.Dauer ELSE 0.0 END),    --LA7 
    LA8 = SUM(CASE WHEN LEI.LohnartCode = -8 THEN LEI.Dauer ELSE 0.0 END),    --LA8 
    LA9 = SUM(CASE WHEN LEI.LohnartCode = -9 THEN LEI.Dauer ELSE 0.0 END),    --LA9 
    LA10 = SUM(CASE WHEN LEI.LohnartCode = -10 THEN LEI.Dauer ELSE 0.0 END),  --LA10
    LA11 = SUM(CASE WHEN LEI.LohnartCode = 1210 THEN LEI.Dauer ELSE 0.0 END), --LA11
    LA12 = SUM(CASE WHEN LEI.LohnartCode = 1220 THEN LEI.Dauer ELSE 0.0 END), --LA12
    LA13 = SUM(CASE WHEN LEI.LohnartCode = 1230 THEN LEI.Dauer ELSE 0.0 END), --LA13
    LA14 = SUM(CASE WHEN LEI.LohnartCode = 1240 THEN LEI.Dauer ELSE 0.0 END), --LA14
    LA15 = SUM(CASE WHEN LEI.LohnartCode = 1250 THEN LEI.Dauer ELSE 0.0 END), --LA15
    LA16 = SUM(CASE WHEN LEI.LohnartCode = 1260 THEN LEI.Dauer ELSE 0.0 END), --LA16
    LA17 = SUM(CASE WHEN LEI.LohnartCode = -17 THEN LEI.Dauer ELSE 0.0 END),  --LA17
    LA18 = SUM(CASE WHEN LEI.LohnartCode = -18 THEN LEI.Dauer ELSE 0.0 END),  --LA18
    LA19 = SUM(CASE WHEN LEI.LohnartCode = -19 THEN LEI.Dauer ELSE 0.0 END),  --LA19
    LA20 = SUM(CASE WHEN LEI.LohnartCode = -20 THEN LEI.Dauer ELSE 0.0 END)   --LA20
  FROM dbo.BDELeistung      LEI WITH(READUNCOMMITTED)
    INNER JOIN dbo.XLOVCode LOV WITH(READUNCOMMITTED) ON LOV.Code = LEI.LohnartCode
  WHERE LEI.Datum BETWEEN @DatumVon AND @DatumBis
  GROUP BY LEI.UserID
),
Result_CTE AS
(
  SELECT DISTINCT
       UserID      = LEI.UserID,
       MANr        = USR.MitarbeiterNr,
       LastName    = USR.LastName,
       FirstName   = USR.FirstName,
       OrgUnit     = dbo.fnOrgUnitOfUser(LEI.UserID, 0),

       Lohntyp     = dbo.fnGetLOVMLText('BenutzerLohnTyp', USR.LohnTypCode, @LanguageCode),

       -- Freigabe is for whole daterange
       Freigabe    = CONVERT(BIT, MIN(CASE WHEN LEI.Freigegeben = 1 THEN 1 ELSE 0 END)),

       -- Visum is for whole daterange
       Visum       = CONVERT(BIT, MIN(CASE WHEN LEI.Visiert = 1 THEN 1 ELSE 0 END)),

       -- Kein Export
       KeinExportMin = CONVERT(BIT, MIN(CASE WHEN LEI.KeinExport = 1 THEN 1 ELSE 0 END)), -- Wenn es mindestens eines gibt, dann 1
       KeinExportMax = CONVERT(BIT, MAX(CASE WHEN LEI.KeinExport = 1 THEN 1 ELSE 0 END)), -- Wenn es mindestens eines gibt, dann 1

	   -- Periode
       Periode     = @PeriodeString
  FROM dbo.BDELeistung   LEI
    INNER JOIN dbo.XUser USR ON USR.UserID = LEI.UserID
  WHERE LEI.HistMandantNr = @Mandantennummer -- find Mandantennummer as given in history
    AND LEI.Datum BETWEEN @DatumVon AND @DatumBis
  GROUP BY LEI.UserID, USR.MitarbeiterNr, USR.LastName, USR.FirstName, dbo.fnGetLOVMLText('BenutzerLohnTyp', USR.LohnTypCode, @LanguageCode)
)
SELECT
	RES.UserID,
	RES.MANr,
	RES.LastName,
	RES.FirstName,
	RES.OrgUnit,
	RES.Lohntyp,
	SumLohnart1 = ISNULL(DAU.LA1, 0.0),
	SumLohnart2 = ISNULL(DAU.LA2, 0.0),
	SumLohnart3 = ISNULL(DAU.LA3, 0.0),
	SumLohnart4 = ISNULL(DAU.LA4, 0.0),
	SumLohnart5 = ISNULL(DAU.LA5, 0.0),
	SumLohnart6 = ISNULL(DAU.LA6, 0.0),
	SumLohnart7 = ISNULL(DAU.LA7, 0.0),
	SumLohnart8 = ISNULL(DAU.LA8, 0.0),
	SumLohnart9 = ISNULL(DAU.LA9, 0.0),
	SumLohnart10 = ISNULL(DAU.LA10, 0.0),
	SumLohnart11 = ISNULL(DAU.LA11, 0.0),
	SumLohnart12 = ISNULL(DAU.LA12, 0.0),
	SumLohnart13 = ISNULL(DAU.LA13, 0.0),
	SumLohnart14 = ISNULL(DAU.LA14, 0.0),
	SumLohnart15 = ISNULL(DAU.LA15, 0.0),
	SumLohnart16 = ISNULL(DAU.LA16, 0.0),
	SumLohnart17 = ISNULL(DAU.LA17, 0.0),
	SumLohnart18 = ISNULL(DAU.LA18, 0.0),
	SumLohnart19 = ISNULL(DAU.LA19, 0.0),
	SumLohnart20 = ISNULL(DAU.LA20, 0.0),
	RES.Freigabe,
	Plausibilisierungsfehler = dbo.fnBDEExportPlausibilisierungsfehler(RES.Visum, RES.KeinExportMin, RES.KeinExportMax, 1, @LanguageCode),
	RES.Periode
FROM Result_CTE RES
  LEFT  JOIN Dauer_CTE DAU ON DAU.UserID = RES.UserID
WHERE EXISTS(SELECT TOP 1 1
             FROM BDELeistung LEI5
             WHERE LEI5.UserID = RES.UserID
               AND LEI5.Datum BETWEEN @DatumVon AND @DatumBis
               AND ISNULL(LEI5.Visiert, 0) = 0
            ) -- show only those without verbucht, includes visum (monatslohn and stundenlohn, both!!)
   OR RES.KeinExportMin &lt;&gt; RES.KeinExportMax
ORDER BY LastName, FirstName;</value>
  </data>
  <metadata name="qryLeistungExport.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>160, 17</value>
  </metadata>
</root>
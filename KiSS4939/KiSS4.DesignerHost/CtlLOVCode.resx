<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <metadata name="qryXLOVCode.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>20, 7</value>
  </metadata>
  <metadata name="$this.TrayHeight" type="System.Int32, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
    <value>41</value>
  </metadata>
  <data name="qryXLOVCode.SelectStatement" xml:space="preserve">
    <value>-------------------------------------------------------------------------------
-- init vars
-------------------------------------------------------------------------------
DECLARE @LOVName VARCHAR(100)
DECLARE @LanguageCode INT

SET @LOVName = {0}
SET @LanguageCode = {1}

-------------------------------------------------------------------------------
-- query data
-------------------------------------------------------------------------------
SELECT XLOVCodeID     = COD.XLOVCodeID,
       LOVName        = COD.LOVName,
       XLOVID         = COD.XLOVID,
       Code           = COD.Code,
       Text           = COD.Text,
       TextTID        = COD.TextTID,
       SortKey        = COD.SortKey,
       ShortText      = COD.ShortText,
       ShortTextTID   = COD.ShortTextTID,
       BFSCode        = COD.BFSCode,
       Value1         = COD.Value1,
       Value1TID      = COD.Value1TID,
       Value2         = COD.Value2,
       Value2TID      = COD.Value2TID,
       Value3         = COD.Value3,
       Value3TID      = COD.Value3TID,
       Description    = COD.Description,
       System         = CONVERT(BIT, CASE WHEN LOV.System = 1 THEN 1    -- each value inherits system flag from system-lov
                                          ELSE COD.System
                                     END),
       XLOVCodeTS     = COD.XLOVCodeTS,
       Translation    = TXT_T.Text,
       TransShortText = TXT_S.Text,
       TransValue1    = TXT_V1.Text,
       TransValue2    = TXT_V2.Text,
       TransValue3    = TXT_V3.Text
FROM dbo.XLOVCode COD WITH (READUNCOMMITTED)
  INNER JOIN dbo.XLOV      LOV    WITH (READUNCOMMITTED) ON LOV.LOVName = COD.LOVName
  LEFT  JOIN dbo.XLangText TXT_T  WITH (READUNCOMMITTED) ON TXT_T.TID  = COD.TextTID AND
                                                            TXT_T.LanguageCode = @LanguageCode   -- Text
  LEFT  JOIN dbo.XLangText TXT_S  WITH (READUNCOMMITTED) ON TXT_S.TID  = COD.ShortTextTID AND
                                                            TXT_S.LanguageCode = @LanguageCode   -- ShortText
  LEFT  JOIN dbo.XLangText TXT_V1 WITH (READUNCOMMITTED) ON TXT_V1.TID = COD.Value1TID AND
                                                            TXT_V1.LanguageCode = @LanguageCode  -- Value1
  LEFT  JOIN dbo.XLangText TXT_V2 WITH (READUNCOMMITTED) ON TXT_V2.TID = COD.Value2TID AND
                                                            TXT_V2.LanguageCode = @LanguageCode  -- Value2
  LEFT  JOIN dbo.XLangText TXT_V3 WITH (READUNCOMMITTED) ON TXT_V3.TID = COD.Value3TID AND
                                                            TXT_V3.LanguageCode = @LanguageCode  -- Value3
WHERE COD.LOVName = @LOVName
--- AND (COD.Text LIKE '%' + {edtSearchText} + '%' OR TXT_T.Text LIKE '%' + {edtSearchText} + '%')</value>
  </data>
  <metadata name="qryXLOV.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>137, 7</value>
  </metadata>
</root>
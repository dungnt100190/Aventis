<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:Controls="clr-namespace:Kiss.UI.Controls"
    xmlns:Constant="clr-namespace:Kiss.UI.Controls.Constant"
    xmlns:Kiss="clr-namespace:DevExpress.Xpf.Themes.Kiss;assembly=DevExpress.Xpf.Themes.Kiss.v14.1">

    <SolidColorBrush x:Key="brushGridHeaderBorder" Color="#FF8C7464" />
    <SolidColorBrush x:Key="brushDataGridRowPanelBg" Color="#F7EFE7" />

    <SolidColorBrush x:Key="brushDataGridBackground" Color="BlanchedAlmond" />
    <SolidColorBrush x:Key="brushDataGridEditableBackground" Color="SeaShell" />
    <SolidColorBrush x:Key="brushDataGridSelectedCell" Color="PowderBlue" />
    <SolidColorBrush x:Key="brushDataGridLines" Color="Silver" />
    <SolidColorBrush x:Key="brushDataGridSelectedFocusedCell" Color="#FF3399FF" />
    <SolidColorBrush x:Key="brushDataGridSelectedNotFocusedCell" Color="PowderBlue" />

    <LinearGradientBrush x:Key="brushGridHeaderBackground" StartPoint="0.5,0" EndPoint="0.5,1">
        <GradientStop Offset="0.0" Color="#F4F2EB" />
        <GradientStop Offset="1.0" Color="#E8E1CF" />
    </LinearGradientBrush>

    <LinearGradientBrush x:Key="brushGridHeaderBackgroundPressed" StartPoint="0.5,0" EndPoint="0.5,1">
        <GradientStop Offset="0.0" Color="#F4F2EB" />
        <GradientStop Offset="1.0" Color="#E8E1CF" />
    </LinearGradientBrush>

    <SolidColorBrush x:Key="brushEnabledButtonControlBg" Color="Bisque" />
    <SolidColorBrush x:Key="brushBgComboBoxDropDown" Color="#FFEBCD" />
    <SolidColorBrush x:Key="brushSelectedBgComboBoxDropDown" Color="#316AC5" />

    <SolidColorBrush x:Key="brushValidationErrorBorder" Color="Red" />

    <SolidColorBrush x:Key="brushWindowBackground" Color="SeaShell" />

    <SolidColorBrush x:Key="CheckBoxFillNormal" Color="#F4F4F4" />
    <SolidColorBrush x:Key="CheckBoxStroke" Color="#8E8F8F" />

    <!--
        Button glyphs (set as button content)
        Attention: Since a FrameworkElement cannot be used twice these resources are defined using x:Shared="false".
    -->
    <Path x:Key="ButtonUpPath" x:Shared="false" Fill="Black" Data="M 0 6 L 12 6 L 6 0 Z" />
    <Path x:Key="ButtonDownPath" x:Shared="false" Fill="Black" Data="M 0 0 L 6 6 L 12 0 Z" />
    <Path x:Key="ButtonLeftPath" x:Shared="false" Fill="Black" Data="M 6 0 L 6 12 L 0 6 Z" />
    <Path x:Key="ButtonRightPath" x:Shared="false" Fill="Black" Data="M 0 0 L 0 12 L 6 6 Z" />

    <BorderGapMaskConverter x:Key="BorderGapMaskConverter" />

    <!--
    ===========================================================================
    Main Common-Control Styles
    ===========================================================================
    -->
    <Style TargetType="{x:Type Window}">
        <Setter Property="Background" Value="{DynamicResource brushWindowBackground}" />
    </Style>

    <Style TargetType="Controls:ValidationSummary">
        <Setter Property="Margin" Value="{x:Static Constant:LayoutConstant.MarginMainControlBottom}" />
    </Style>

    <Style TargetType="{x:Type Label}">
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="HorizontalAlignment" Value="Left" />
        <Setter Property="Height" Value="{x:Static Constant:LayoutConstant.DefaultHeightDetailControl}" />
        <Setter Property="FontFamily" Value="Arial" />
        <Setter Property="FontSize" Value="11" />
        <Setter Property="FontWeight" Value="Regular" />
        <Setter Property="Padding" Value="0" />
        <Style.Triggers>
            <!-- Sets HorizontalAlignment to Stretch if no manual width is set -->
            <Trigger Property="Width" Value="Auto">
                <Setter Property="HorizontalAlignment" Value="Stretch" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style TargetType="{x:Type TextBox}">
        <Setter Property="VerticalContentAlignment" Value="Top" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="HorizontalAlignment" Value="Left" />
        <Setter Property="Height" Value="{x:Static Constant:LayoutConstant.DefaultHeightDetailControl}" />
        <Setter Property="BorderBrush" Value="{DynamicResource {Kiss:KissBrushKey ResourceKey=EditControlBorder}}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="TextWrapping" Value="NoWrap" />
        <Setter Property="Validation.ErrorTemplate">
            <Setter.Value>
                <ControlTemplate>
                    <DockPanel LastChildFill="True">
                        <Border BorderBrush="{DynamicResource brushValidationErrorBorder}" BorderThickness="1">
                            <AdornedElementPlaceholder />
                        </Border>
                    </DockPanel>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <!-- ErrorTemplate -->
            <Trigger Property="Validation.HasError" Value="true">
                <Setter Property="ToolTip" Value="{Binding RelativeSource={x:Static RelativeSource.Self}, Path=(Validation.Errors)[0].ErrorContent}" />
                <Setter Property="ToolTipService.Placement" Value="Right" />
                <Setter Property="ToolTipService.ShowDuration" Value="10000" />
            </Trigger>
            <!-- Sets HorizontalAlignment to Stretch if no manual width is set -->
            <Trigger Property="Width" Value="Auto">
                <Setter Property="HorizontalAlignment" Value="Stretch" />
            </Trigger>
            <!-- Sets VerticalContentAligment to Center if text is not wrapping -->
            <Trigger Property="TextWrapping" Value="NoWrap">
                <Setter Property="VerticalContentAlignment" Value="Center" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style TargetType="{x:Type DatePicker}">
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="Height" Value="{x:Static Constant:LayoutConstant.DefaultHeightDetailControl}" />
    </Style>

    <Style TargetType="{x:Type DatePickerTextBox}">
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="VerticalAlignment" Value="Center" />
    </Style>

    <Style TargetType="{x:Type ComboBox}">
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="HorizontalAlignment" Value="Left" />
        <Setter Property="Height" Value="{x:Static Constant:LayoutConstant.DefaultHeightDetailControl}" />
        <Style.Triggers>
            <!-- Sets HorizontalAlignment to Stretch if no manual width is set -->
            <Trigger Property="Width" Value="Auto">
                <Setter Property="HorizontalAlignment" Value="Stretch" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style TargetType="{x:Type CheckBox}">
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="Validation.ErrorTemplate">
            <Setter.Value>
                <ControlTemplate>
                    <DockPanel LastChildFill="True">
                        <Border BorderBrush="{DynamicResource brushValidationErrorBorder}" BorderThickness="1">
                            <AdornedElementPlaceholder />
                        </Border>
                    </DockPanel>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <!-- ErrorTemplate -->
            <Trigger Property="Validation.HasError" Value="true">
                <Setter Property="ToolTip" Value="{Binding RelativeSource={x:Static RelativeSource.Self}, Path=(Validation.Errors)[0].ErrorContent}" />
                <Setter Property="ToolTipService.Placement" Value="Right" />
                <Setter Property="ToolTipService.ShowDuration" Value="10000" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style TargetType="Controls:DateRange">
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="HorizontalAlignment" Value="Left" />
        <Setter Property="Width" Value="250" />
    </Style>

    <Style TargetType="{x:Type GroupBox}">
        <Setter Property="BorderBrush" Value="{DynamicResource {Kiss:KissBrushKey ResourceKey=EditControlBorder}}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type GroupBox}">
                    <Grid SnapsToDevicePixels="true">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="6" />
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition Width="*" />
                            <ColumnDefinition Width="6" />
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto" />
                            <RowDefinition Height="Auto" />
                            <RowDefinition Height="*" />
                            <RowDefinition Height="6" />
                        </Grid.RowDefinitions>
                        <Border BorderBrush="Transparent" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Grid.ColumnSpan="4" Grid.Column="0" CornerRadius="0" Grid.Row="1" Grid.RowSpan="3" />
                        <Border x:Name="Header" Grid.Column="1" Padding="3,1,3,0" Grid.Row="0" Grid.RowSpan="2">
                            <ContentPresenter ContentSource="Header" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                        </Border>
                        <ContentPresenter Grid.ColumnSpan="2" Grid.Column="1" Margin="{TemplateBinding Padding}" Grid.Row="2" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                        <Border BorderBrush="#FFCF9F70" BorderThickness="{TemplateBinding BorderThickness}" Grid.ColumnSpan="4" CornerRadius="3" Grid.Row="1" Grid.RowSpan="3">
                            <Border.OpacityMask>
                                <MultiBinding ConverterParameter="7" Converter="{StaticResource BorderGapMaskConverter}">
                                    <Binding ElementName="Header" Path="ActualWidth" />
                                    <Binding Path="ActualWidth" RelativeSource="{RelativeSource Self}" />
                                    <Binding Path="ActualHeight" RelativeSource="{RelativeSource Self}" />
                                </MultiBinding>
                            </Border.OpacityMask>
                            <Border BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="2" BorderBrush="White" />
                        </Border>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--
    ===========================================================================
    Main Common-Control Error-Styles
    ===========================================================================
    -->
    <Style x:Key="ErrorTemplate" TargetType="Control">
        <Setter Property="Validation.ErrorTemplate">
            <Setter.Value>
                <ControlTemplate>
                    <DockPanel LastChildFill="True">
                        <!--
                        <Popup Name="popError" IsOpen="True" Placement="Right">
                            <TextBlock Background="Red" Foreground="White" FontSize="11pt" Text="{Binding ElementName=myControl, Path=AdornedElement.(Validation.Errors)[0].ErrorContent}" />
                        </Popup>
                        -->
                        <Border BorderBrush="{DynamicResource brushValidationErrorBorder}" BorderThickness="1">
                            <AdornedElementPlaceholder Name="myControl" />
                        </Border>
                    </DockPanel>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="Validation.HasError" Value="true">
                <Setter Property="ToolTip" Value="{Binding RelativeSource={x:Static RelativeSource.Self}, Path=(Validation.Errors)[0].ErrorContent}" />
                <Setter Property="ToolTipService.Placement" Value="Right" />
                <Setter Property="ToolTipService.ShowDuration" Value="10000" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Geometry x:Key="DownArrowGeometry">M 0 0 L 3.5 4 L 7 0 Z</Geometry>

    <Style x:Key="{Controls:ControlResourceKey ResourceKey=InlineButtonStyle}" TargetType="{x:Type ButtonBase}">
        <Setter Property="FontFamily" Value="Arial" />
        <Setter Property="FontSize" Value="13px" />
        <Setter Property="FontWeight" Value="Bold" />
        <Setter Property="Focusable" Value="False" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ButtonBase}">
                    <Grid>
                        <Border x:Name="Bd" Background="{DynamicResource brushEnabledButtonControlBg}" BorderThickness="1" BorderBrush="Transparent" CornerRadius="1">
                            <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsFocused" Value="True">
                            <Setter Property="BorderBrush" TargetName="Bd" Value="#FF3399FF" />
                            <Setter Property="Background" TargetName="Bd" Value="#FFC2E0FF" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="BorderBrush" TargetName="Bd" Value="#FF3399FF" />
                            <Setter Property="Background" TargetName="Bd" Value="#FFC2E0FF" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Background" TargetName="Bd" Value="#FF9DCAF7" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Background" TargetName="Bd" Value="#EDDCC7" />
                            <Setter Property="Foreground" Value="#474747" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type GridSplitter}">
        <Setter Property="HorizontalAlignment" Value="Stretch" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="ShowsPreview" Value="True" />
        <Setter Property="Height" Value="10" />
        <Setter Property="Margin" Value="0,3" />
        <Setter Property="Background" Value="{DynamicResource {Kiss:KissBrushKey EditControlBorder}}" />
        <Setter Property="ResizeDirection" Value="Auto" />
        <Setter Property="ResizeBehavior" Value="PreviousAndNext" />
    </Style>

    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="/Kiss.UI.Controls;component/Themes/KissGrid.xaml" />
        <ResourceDictionary Source="/Kiss.UI.Controls;component/Themes/KissGridColumns.xaml" />
        <ResourceDictionary Source="/Kiss.UI.Controls;component/Themes/KissDateEdit.xaml" />
        <ResourceDictionary Source="/Kiss.UI.Controls;component/Themes/KissLabel.xaml" />
        <ResourceDictionary Source="/Kiss.UI.Controls;component/Themes/KissTextEdit.xaml" />
        <ResourceDictionary Source="/Kiss.UI.Controls;component/Themes/KissComboBox.xaml" />
        <ResourceDictionary Source="/Kiss.UI.Controls;component/Themes/KissCalcEdit.xaml" />
        <ResourceDictionary Source="/Kiss.UI.Controls;component/Themes/KissRadioButton.xaml" />
        <ResourceDictionary Source="/Kiss.UI.Controls;component/Themes/KissLookupLabel.xaml" />
        <ResourceDictionary Source="/Kiss.UI.Controls;component/Themes/KissRangeSlider.xaml" />
        <ResourceDictionary Source="/Kiss.UI.Controls;component/Themes/KissDateRangeSlider.xaml" />
        <ResourceDictionary Source="/Kiss.UI.Controls;component/Themes/KissTabControl.xaml" />
        <ResourceDictionary Source="/Kiss.UI.Controls;component/Themes/MonthYearPicker.xaml" />
        <ResourceDictionary Source="/Kiss.UI.Controls;component/Themes/KissCheckedLookupEdit.xaml" />
        <ResourceDictionary Source="/Kiss.UI.Controls;component/Themes/KissButtonSearchBox.xaml" />
        <ResourceDictionary Source="/Kiss.UI.Controls;component/Themes/KissPLZOrt.xaml" />
        <ResourceDictionary Source="/Kiss.UI.Controls;component/Themes/Window.xaml" />
        <ResourceDictionary Source="/Kiss.UI.Controls;component/Themes/BusyPanel.xaml" />
    </ResourceDictionary.MergedDictionaries>
</ResourceDictionary>